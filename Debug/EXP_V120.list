
EXP_V120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010abc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e10  08010cc0  08010cc0  00011cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ad0  08012ad0  00018388  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ad0  08012ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ad8  08012ad8  00018388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ad8  08012ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012adc  08012adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00004388  20000000  08012ae0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009fe4  20004388  08016e68  00018388  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e36c  08016e68  0001936c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00018388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a94  00000000  00000000  000183b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000605a  00000000  00000000  00039e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d8  00000000  00000000  0003fea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b01  00000000  00000000  00042280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033756  00000000  00000000  00043d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bea8  00000000  00000000  000774d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001230fd  00000000  00000000  000a337f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c647c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a794  00000000  00000000  001c64c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001d0c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20004388 	.word	0x20004388
 800021c:	00000000 	.word	0x00000000
 8000220:	08010ca4 	.word	0x08010ca4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000438c 	.word	0x2000438c
 800023c:	08010ca4 	.word	0x08010ca4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f835 	bl	80003b0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f828 	bl	80003b0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f817 	bl	80003b0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f809 	bl	80003b0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	@ (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	@ (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	@ 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <LL_DMA_SetDataTransferDirection+0x44>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80007e0:	4908      	ldr	r1, [pc, #32]	@ (8000804 <LL_DMA_SetDataTransferDirection+0x44>)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	440b      	add	r3, r1
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	080122e4 	.word	0x080122e4

08000808 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LL_DMA_SetMode+0x44>)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4413      	add	r3, r2
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8000828:	4908      	ldr	r1, [pc, #32]	@ (800084c <LL_DMA_SetMode+0x44>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	440b      	add	r3, r1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	440b      	add	r3, r1
 8000836:	4619      	mov	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	600b      	str	r3, [r1, #0]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	080122e4 	.word	0x080122e4

08000850 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <LL_DMA_SetPeriphIncMode+0x44>)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000870:	4908      	ldr	r1, [pc, #32]	@ (8000894 <LL_DMA_SetPeriphIncMode+0x44>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	440b      	add	r3, r1
 800087e:	4619      	mov	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	080122e4 	.word	0x080122e4

08000898 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <LL_DMA_SetMemoryIncMode+0x44>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80008b8:	4908      	ldr	r1, [pc, #32]	@ (80008dc <LL_DMA_SetMemoryIncMode+0x44>)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	440b      	add	r3, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	440b      	add	r3, r1
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	080122e4 	.word	0x080122e4

080008e0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LL_DMA_SetPeriphSize+0x44>)
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8000900:	4908      	ldr	r1, [pc, #32]	@ (8000924 <LL_DMA_SetPeriphSize+0x44>)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	440b      	add	r3, r1
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4313      	orrs	r3, r2
 8000914:	600b      	str	r3, [r1, #0]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	080122e4 	.word	0x080122e4

08000928 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LL_DMA_SetMemorySize+0x44>)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8000948:	4908      	ldr	r1, [pc, #32]	@ (800096c <LL_DMA_SetMemorySize+0x44>)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	440b      	add	r3, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	440b      	add	r3, r1
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	080122e4 	.word	0x080122e4

08000970 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000990:	4908      	ldr	r1, [pc, #32]	@ (80009b4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	440b      	add	r3, r1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	440b      	add	r3, r1
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	600b      	str	r3, [r1, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	080122e4 	.word	0x080122e4

080009b8 <LL_DMA_SetChannelSelection>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <LL_DMA_SetChannelSelection+0x44>)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 52f0 	bic.w	r2, r3, #503316480	@ 0x1e000000
 80009d8:	4908      	ldr	r1, [pc, #32]	@ (80009fc <LL_DMA_SetChannelSelection+0x44>)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	440b      	add	r3, r1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	440b      	add	r3, r1
 80009e6:	4619      	mov	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	080122e4 	.word	0x080122e4

08000a00 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <LL_DMA_DisableFifoMode+0x3c>)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <LL_DMA_DisableFifoMode+0x3c>)
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	440a      	add	r2, r1
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	4611      	mov	r1, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	440a      	add	r2, r1
 8000a28:	f023 0304 	bic.w	r3, r3, #4
 8000a2c:	6153      	str	r3, [r2, #20]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	080122e4 	.word	0x080122e4

08000a40 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <LL_I2C_SetOwnAddress2+0x2c>)
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	431a      	orrs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	60da      	str	r2, [r3, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	fffff801 	.word	0xfffff801

08000ad0 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60da      	str	r2, [r3, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	605a      	str	r2, [r3, #4]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <LL_RCC_HSE_Enable+0x1c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <LL_RCC_HSE_Enable+0x1c>)
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <LL_RCC_HSE_IsReady+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b40:	bf0c      	ite	eq
 8000b42:	2301      	moveq	r3, #1
 8000b44:	2300      	movne	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <LL_RCC_SetSysClkSource+0x24>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f023 0203 	bic.w	r2, r3, #3
 8000b68:	4904      	ldr	r1, [pc, #16]	@ (8000b7c <LL_RCC_SetSysClkSource+0x24>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	608b      	str	r3, [r1, #8]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800

08000b80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <LL_RCC_GetSysClkSource+0x18>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 030c 	and.w	r3, r3, #12
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000bac:	4904      	ldr	r1, [pc, #16]	@ (8000bc0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	608b      	str	r3, [r1, #8]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000bd4:	4904      	ldr	r1, [pc, #16]	@ (8000be8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40023800 	.word	0x40023800

08000bec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000bfc:	4904      	ldr	r1, [pc, #16]	@ (8000c10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40023800 	.word	0x40023800

08000c14 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <LL_RCC_SetUSARTClockSource+0x30>)
 8000c1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	43db      	mvns	r3, r3
 8000c28:	401a      	ands	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4905      	ldr	r1, [pc, #20]	@ (8000c44 <LL_RCC_SetUSARTClockSource+0x30>)
 8000c30:	4313      	orrs	r3, r2
 8000c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (UARTxSource >> 16U), (UARTxSource & 0x0000FFFFU));
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <LL_RCC_SetUARTClockSource+0x30>)
 8000c52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <LL_RCC_SetUARTClockSource+0x30>)
 8000c64:	4313      	orrs	r3, r2
 8000c66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (I2CxSource & 0xFFFF0000U),  (I2CxSource << 16U));
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <LL_RCC_SetI2CClockSource+0x30>)
 8000c86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <LL_RCC_SetI2CClockSource+0x34>)
 8000c8e:	400b      	ands	r3, r1
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	041b      	lsls	r3, r3, #16
 8000c98:	4904      	ldr	r1, [pc, #16]	@ (8000cac <LL_RCC_SetI2CClockSource+0x30>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	ffff0000 	.word	0xffff0000

08000cb4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <LL_RCC_SetTIMPrescaler+0x28>)
 8000cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000cc6:	4905      	ldr	r1, [pc, #20]	@ (8000cdc <LL_RCC_SetTIMPrescaler+0x28>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <LL_RCC_PLL_Enable+0x1c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <LL_RCC_PLL_Enable+0x1c>)
 8000cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <LL_RCC_PLL_IsReady+0x24>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000d10:	bf0c      	ite	eq
 8000d12:	2301      	moveq	r3, #1
 8000d14:	2300      	movne	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	4311      	orrs	r1, r2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	0192      	lsls	r2, r2, #6
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	4904      	ldr	r1, [pc, #16]	@ (8000d60 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800
 8000d64:	ffbc8000 	.word	0xffbc8000

08000d68 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40023800 	.word	0x40023800

08000d98 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40023800 	.word	0x40023800

08000df8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <LL_FLASH_SetLatency+0x24>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 020f 	bic.w	r2, r3, #15
 8000e08:	4904      	ldr	r1, [pc, #16]	@ (8000e1c <LL_FLASH_SetLatency+0x24>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <LL_FLASH_GetLatency+0x18>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40007000 	.word	0x40007000

08000e5c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000e6c:	4904      	ldr	r1, [pc, #16]	@ (8000e80 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40007000 	.word	0x40007000

08000e84 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007000 	.word	0x40007000

08000eac <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 0210 	bic.w	r2, r3, #16
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f043 0208 	orr.w	r2, r3, #8
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f023 0208 	bic.w	r2, r3, #8
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d028      	beq.n	8000fb6 <LL_TIM_OC_DisableFast+0x62>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d023      	beq.n	8000fb2 <LL_TIM_OC_DisableFast+0x5e>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d01e      	beq.n	8000fae <LL_TIM_OC_DisableFast+0x5a>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b40      	cmp	r3, #64	@ 0x40
 8000f74:	d019      	beq.n	8000faa <LL_TIM_OC_DisableFast+0x56>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f7c:	d013      	beq.n	8000fa6 <LL_TIM_OC_DisableFast+0x52>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f84:	d00d      	beq.n	8000fa2 <LL_TIM_OC_DisableFast+0x4e>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f8c:	d007      	beq.n	8000f9e <LL_TIM_OC_DisableFast+0x4a>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f94:	d101      	bne.n	8000f9a <LL_TIM_OC_DisableFast+0x46>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00e      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00c      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_TIM_OC_DisableFast+0x64>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3318      	adds	r3, #24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <LL_TIM_OC_DisableFast+0x9c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <LL_TIM_OC_DisableFast+0xa0>)
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	408b      	lsls	r3, r1
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	601a      	str	r2, [r3, #0]

}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	080122ec 	.word	0x080122ec
 8000ff4:	080122f8 	.word	0x080122f8

08000ff8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d028      	beq.n	800105a <LL_TIM_OC_EnablePreload+0x62>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d023      	beq.n	8001056 <LL_TIM_OC_EnablePreload+0x5e>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b10      	cmp	r3, #16
 8001012:	d01e      	beq.n	8001052 <LL_TIM_OC_EnablePreload+0x5a>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b40      	cmp	r3, #64	@ 0x40
 8001018:	d019      	beq.n	800104e <LL_TIM_OC_EnablePreload+0x56>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001020:	d013      	beq.n	800104a <LL_TIM_OC_EnablePreload+0x52>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001028:	d00d      	beq.n	8001046 <LL_TIM_OC_EnablePreload+0x4e>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001030:	d007      	beq.n	8001042 <LL_TIM_OC_EnablePreload+0x4a>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001038:	d101      	bne.n	800103e <LL_TIM_OC_EnablePreload+0x46>
 800103a:	2307      	movs	r3, #7
 800103c:	e00e      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 800103e:	2308      	movs	r3, #8
 8001040:	e00c      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 8001042:	2306      	movs	r3, #6
 8001044:	e00a      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_TIM_OC_EnablePreload+0x64>
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3318      	adds	r3, #24
 8001062:	4619      	mov	r1, r3
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LL_TIM_OC_EnablePreload+0x98>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	440b      	add	r3, r1
 800106c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4907      	ldr	r1, [pc, #28]	@ (8001094 <LL_TIM_OC_EnablePreload+0x9c>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	4619      	mov	r1, r3
 800107a:	2308      	movs	r3, #8
 800107c:	408b      	lsls	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	080122ec 	.word	0x080122ec
 8001094:	080122f8 	.word	0x080122f8

08001098 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <LL_TIM_SetClockSource+0x28>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	609a      	str	r2, [r3, #8]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	fffebff8 	.word	0xfffebff8

080010c4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_USART_SetDEDeassertionTime>:
  * @param  USARTx USART Instance
  * @param  Time Value between Min_Data=0 and Max_Data=31
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_USART_SetDEAssertionTime>:
  * @param  USARTx USART Instance
  * @param  Time Value between Min_Data=0 and Max_Data=31
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	055b      	lsls	r3, r3, #21
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_USART_EnableDEMode>:
  * @rmtoll CR3          DEM           LL_USART_EnableDEMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_USART_SetDESignalPolarity>:
  *         @arg @ref LL_USART_DE_POLARITY_HIGH
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b0ae      	sub	sp, #184	@ 0xb8
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f009 fcf8 	bl	800ac20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f8a0 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001234:	f001 f96a 	bl	800250c <MX_GPIO_Init>
  MX_DMA_Init();
 8001238:	f001 f924 	bl	8002484 <MX_DMA_Init>
  MX_I2C1_Init();
 800123c:	f000 fa46 	bl	80016cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001240:	f000 fab8 	bl	80017b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001244:	f000 fb2a 	bl	800189c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001248:	f000 fbb4 	bl	80019b4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800124c:	f000 fc64 	bl	8001b18 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001250:	f000 f8e4 	bl	800141c <MX_ADC1_Init>
  MX_SPI4_Init();
 8001254:	f000 fcde 	bl	8001c14 <MX_SPI4_Init>
  MX_TIM4_Init();
 8001258:	f000 fed8 	bl	800200c <MX_TIM4_Init>
  MX_UART7_Init();
 800125c:	f000 ffb0 	bl	80021c0 <MX_UART7_Init>
  MX_SPI6_Init();
 8001260:	f000 fd56 	bl	8001d10 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8001264:	f001 f812 	bl	800228c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001268:	f001 f898 	bl	800239c <MX_USART6_UART_Init>
  MX_ADC2_Init();
 800126c:	f000 f98a 	bl	8001584 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001270:	f000 f9da 	bl	8001628 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001274:	f000 fe28 	bl	8001ec8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001278:	f000 fe7a 	bl	8001f70 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bsp_spi_ram_init();
 800127c:	f005 fbcc 	bl	8006a18 <bsp_spi_ram_init>





  uint8_t buffer[8] = {0};
 8001280:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]

  bsp_spi_ram_read_id(buffer);
 800128a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fbf0 	bl	8006a74 <bsp_spi_ram_read_id>
  bsp_spi_ram_read_id(buffer);
 8001294:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fbeb 	bl	8006a74 <bsp_spi_ram_read_id>

  uint8_t write_buffer[50];
  uint8_t read_buffer[110] = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	226e      	movs	r2, #110	@ 0x6e
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00d fd43 	bl	800ed30 <memset>





  for (uint32_t i=0; i<100;i++) read_buffer[i] = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012b0:	e00a      	b.n	80012c8 <main+0xa2>
 80012b2:	463a      	mov	r2, r7
 80012b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012b8:	4413      	add	r3, r2
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012c2:	3301      	adds	r3, #1
 80012c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012cc:	2b63      	cmp	r3, #99	@ 0x63
 80012ce:	d9f0      	bls.n	80012b2 <main+0x8c>
  bsp_spi_ram_read_dma(0, 100, read_buffer);
 80012d0:	463b      	mov	r3, r7
 80012d2:	461a      	mov	r2, r3
 80012d4:	2164      	movs	r1, #100	@ 0x64
 80012d6:	2000      	movs	r0, #0
 80012d8:	f005 fbba 	bl	8006a50 <bsp_spi_ram_read_dma>
  while(!bsp_spi_ram_is_transfer_done());
 80012dc:	bf00      	nop
 80012de:	f005 fbd7 	bl	8006a90 <bsp_spi_ram_is_transfer_done>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0fa      	beq.n	80012de <main+0xb8>

  for (uint32_t i=0; i<100;i++) read_buffer[i] = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012ee:	e00a      	b.n	8001306 <main+0xe0>
 80012f0:	463a      	mov	r2, r7
 80012f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800130a:	2b63      	cmp	r3, #99	@ 0x63
 800130c:	d9f0      	bls.n	80012f0 <main+0xca>
    bsp_spi_ram_read_dma(50, 50, read_buffer);
 800130e:	463b      	mov	r3, r7
 8001310:	461a      	mov	r2, r3
 8001312:	2132      	movs	r1, #50	@ 0x32
 8001314:	2032      	movs	r0, #50	@ 0x32
 8001316:	f005 fb9b 	bl	8006a50 <bsp_spi_ram_read_dma>
    while(!bsp_spi_ram_is_transfer_done());
 800131a:	bf00      	nop
 800131c:	f005 fbb8 	bl	8006a90 <bsp_spi_ram_is_transfer_done>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0fa      	beq.n	800131c <main+0xf6>

    for (uint32_t i=0; i<100;i++) read_buffer[i] = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800132c:	e00a      	b.n	8001344 <main+0x11e>
 800132e:	463a      	mov	r2, r7
 8001330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001334:	4413      	add	r3, r2
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800133e:	3301      	adds	r3, #1
 8001340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001348:	2b63      	cmp	r3, #99	@ 0x63
 800134a:	d9f0      	bls.n	800132e <main+0x108>
      bsp_spi_ram_read_dma(0, 50, read_buffer);
 800134c:	463b      	mov	r3, r7
 800134e:	461a      	mov	r2, r3
 8001350:	2132      	movs	r1, #50	@ 0x32
 8001352:	2000      	movs	r0, #0
 8001354:	f005 fb7c 	bl	8006a50 <bsp_spi_ram_read_dma>
      while(!bsp_spi_ram_is_transfer_done());
 8001358:	bf00      	nop
 800135a:	f005 fb99 	bl	8006a90 <bsp_spi_ram_is_transfer_done>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0fa      	beq.n	800135a <main+0x134>
//  for (uint32_t i=0; i<50;i++) read_buffer[i] = 0;
//  bsp_spi_ram_fast_read_dma(0, 50, read_buffer);
//
//  while(!bsp_spi_ram_is_transfer_done());

  app_init();
 8001364:	f001 fe1d 	bl	8002fa2 <app_init>
  app_start();
 8001368:	f001 fe27 	bl	8002fba <app_start>
  app_run();
 800136c:	f001 fe2f 	bl	8002fce <app_run>
//  bsp_photodiode_timer1_init(1000);
//  bsp_photodiode_sample_start(10);

//  for (uint32_t i = 0;i<1000;i++) sram_data[i] = i&0xFF;
//  bsp_spi_ram_write(0, 1000, sram_data);
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <main+0x14a>

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_6);
 8001378:	2006      	movs	r0, #6
 800137a:	f7ff fd3d 	bl	8000df8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_6)
 800137e:	bf00      	nop
 8001380:	f7ff fd4e 	bl	8000e20 <LL_FLASH_GetLatency>
 8001384:	4603      	mov	r3, r0
 8001386:	2b06      	cmp	r3, #6
 8001388:	d1fa      	bne.n	8001380 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800138a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800138e:	f7ff fd65 	bl	8000e5c <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001392:	f7ff fd53 	bl	8000e3c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8001396:	f7ff fbbb 	bl	8000b10 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800139a:	bf00      	nop
 800139c:	f7ff fbc8 	bl	8000b30 <LL_RCC_HSE_IsReady>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1fa      	bne.n	800139c <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_12, 192, LL_RCC_PLLP_DIV_2);
 80013a6:	2300      	movs	r3, #0
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	210c      	movs	r1, #12
 80013ac:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80013b0:	f7ff fcba 	bl	8000d28 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80013b4:	f7ff fc94 	bl	8000ce0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013b8:	bf00      	nop
 80013ba:	f7ff fca1 	bl	8000d00 <LL_RCC_PLL_IsReady>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d1fa      	bne.n	80013ba <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80013c4:	bf00      	nop
 80013c6:	f7ff fd5d 	bl	8000e84 <LL_PWR_IsActiveFlag_VOS>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0fa      	beq.n	80013c6 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fbe3 	bl	8000b9c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80013d6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80013da:	f7ff fbf3 	bl	8000bc4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80013de:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013e2:	f7ff fc03 	bl	8000bec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f7ff fbb6 	bl	8000b58 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013ec:	bf00      	nop
 80013ee:	f7ff fbc7 	bl	8000b80 <LL_RCC_GetSysClkSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d1fa      	bne.n	80013ee <SystemClock_Config+0x7a>
  {

  }
  LL_SetSystemCoreClock(200000000);
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <SystemClock_Config+0xa4>)
 80013fa:	f00c fd29 	bl	800de50 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f009 fc1c 	bl	800ac3c <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800140a:	f001 fb35 	bl	8002a78 <Error_Handler>
  }

   /* Set Timers Clock Prescalers */
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc50 	bl	8000cb4 <LL_RCC_SetTIMPrescaler>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0bebc200 	.word	0x0bebc200

0800141c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800142e:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001430:	4a52      	ldr	r2, [pc, #328]	@ (800157c <MX_ADC1_Init+0x160>)
 8001432:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001434:	4b50      	ldr	r3, [pc, #320]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001436:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800143a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143c:	4b4e      	ldr	r3, [pc, #312]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001442:	4b4d      	ldr	r3, [pc, #308]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001444:	2201      	movs	r2, #1
 8001446:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001448:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001458:	2200      	movs	r2, #0
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800145e:	4a48      	ldr	r2, [pc, #288]	@ (8001580 <MX_ADC1_Init+0x164>)
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b45      	ldr	r3, [pc, #276]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001468:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800146a:	2208      	movs	r2, #8
 800146c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800146e:	4b42      	ldr	r3, [pc, #264]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001476:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147c:	483e      	ldr	r0, [pc, #248]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800147e:	f009 fc2d 	bl	800acdc <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001488:	f001 faf6 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800148c:	230a      	movs	r3, #10
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4836      	ldr	r0, [pc, #216]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800149e:	f009 fd73 	bl	800af88 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014a8:	f001 fae6 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014ac:	230b      	movs	r3, #11
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	482f      	ldr	r0, [pc, #188]	@ (8001578 <MX_ADC1_Init+0x15c>)
 80014ba:	f009 fd65 	bl	800af88 <HAL_ADC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014c4:	f001 fad8 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014c8:	230c      	movs	r3, #12
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014cc:	2303      	movs	r3, #3
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4828      	ldr	r0, [pc, #160]	@ (8001578 <MX_ADC1_Init+0x15c>)
 80014d6:	f009 fd57 	bl	800af88 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80014e0:	f001 faca 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014e4:	230d      	movs	r3, #13
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4821      	ldr	r0, [pc, #132]	@ (8001578 <MX_ADC1_Init+0x15c>)
 80014f2:	f009 fd49 	bl	800af88 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80014fc:	f001 fabc 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001500:	230e      	movs	r3, #14
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001504:	2305      	movs	r3, #5
 8001506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	481a      	ldr	r0, [pc, #104]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800150e:	f009 fd3b 	bl	800af88 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001518:	f001 faae 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800151c:	230f      	movs	r3, #15
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001520:	2306      	movs	r3, #6
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4813      	ldr	r0, [pc, #76]	@ (8001578 <MX_ADC1_Init+0x15c>)
 800152a:	f009 fd2d 	bl	800af88 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001534:	f001 faa0 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001538:	2308      	movs	r3, #8
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800153c:	2307      	movs	r3, #7
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001546:	f009 fd1f 	bl	800af88 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001550:	f001 fa92 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001554:	2309      	movs	r3, #9
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001558:	2308      	movs	r3, #8
 800155a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_ADC1_Init+0x15c>)
 8001562:	f009 fd11 	bl	800af88 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800156c:	f001 fa84 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200043a4 	.word	0x200043a4
 800157c:	40012000 	.word	0x40012000
 8001580:	0f000001 	.word	0x0f000001

08001584 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <MX_ADC2_Init+0x98>)
 8001598:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <MX_ADC2_Init+0x9c>)
 800159a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_ADC2_Init+0x98>)
 800159e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_ADC2_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_ADC2_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_ADC2_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_ADC2_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_ADC2_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_ADC2_Init+0x98>)
 80015c6:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <MX_ADC2_Init+0xa0>)
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_ADC2_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_ADC2_Init+0x98>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_ADC2_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_ADC2_Init+0x98>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_ADC2_Init+0x98>)
 80015e6:	f009 fb79 	bl	800acdc <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80015f0:	f001 fa42 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_ADC2_Init+0x98>)
 8001606:	f009 fcbf 	bl	800af88 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001610:	f001 fa32 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200043ec 	.word	0x200043ec
 8001620:	40012100 	.word	0x40012100
 8001624:	0f000001 	.word	0x0f000001

08001628 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800163c:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <MX_ADC3_Init+0x9c>)
 800163e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001646:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800166a:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <MX_ADC3_Init+0xa0>)
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001676:	2201      	movs	r2, #1
 8001678:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_ADC3_Init+0x98>)
 8001684:	2201      	movs	r2, #1
 8001686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001688:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_ADC3_Init+0x98>)
 800168a:	f009 fb27 	bl	800acdc <HAL_ADC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001694:	f001 f9f0 	bl	8002a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001698:	2301      	movs	r3, #1
 800169a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800169c:	2301      	movs	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_ADC3_Init+0x98>)
 80016aa:	f009 fc6d 	bl	800af88 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80016b4:	f001 f9e0 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20004434 	.word	0x20004434
 80016c4:	40012200 	.word	0x40012200
 80016c8:	0f000001 	.word	0x0f000001

080016cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	@ 0x38
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 80016f6:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80016fa:	f7ff fabf 	bl	8000c7c <LL_RCC_SetI2CClockSource>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016fe:	2002      	movs	r0, #2
 8001700:	f7ff fb32 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin;
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001718:	2304      	movs	r3, #4
 800171a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SENSOR_SCL_GPIO_Port, &GPIO_InitStruct);
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4821      	ldr	r0, [pc, #132]	@ (80017a8 <MX_I2C1_Init+0xdc>)
 8001722:	f00b f932 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SENSOR_SDA_Pin;
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800172a:	2302      	movs	r3, #2
 800172c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001732:	2301      	movs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800173a:	2304      	movs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SENSOR_SDA_GPIO_Port, &GPIO_InitStruct);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4819      	ldr	r0, [pc, #100]	@ (80017a8 <MX_I2C1_Init+0xdc>)
 8001744:	f00b f921 	bl	800c98a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001748:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800174c:	f7ff fb24 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001750:	4816      	ldr	r0, [pc, #88]	@ (80017ac <MX_I2C1_Init+0xe0>)
 8001752:	f7ff f9cd 	bl	8000af0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_I2C1_Init+0xe0>)
 800175c:	f7ff f9a0 	bl	8000aa0 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001760:	4812      	ldr	r0, [pc, #72]	@ (80017ac <MX_I2C1_Init+0xe0>)
 8001762:	f7ff f9b5 	bl	8000ad0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_I2C1_Init+0xe0>)
 8001768:	f7ff f98a 	bl	8000a80 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800176c:	480f      	ldr	r0, [pc, #60]	@ (80017ac <MX_I2C1_Init+0xe0>)
 800176e:	f7ff f977 	bl	8000a60 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x601063FF;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_I2C1_Init+0xe4>)
 8001778:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_I2C1_Init+0xe0>)
 8001796:	f00b fa0f 	bl	800cbb8 <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800179a:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_I2C1_Init+0xe0>)
 800179c:	f7ff f950 	bl	8000a40 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3738      	adds	r7, #56	@ 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40005400 	.word	0x40005400
 80017b0:	601063ff 	.word	0x601063ff

080017b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	@ 0x38
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 80017de:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80017e2:	f7ff fa4b 	bl	8000c7c <LL_RCC_SetI2CClockSource>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f7ff fabe 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_I2C_SCL_Pin;
 80017ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017f2:	2302      	movs	r3, #2
 80017f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017fa:	2301      	movs	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001802:	2304      	movs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4821      	ldr	r0, [pc, #132]	@ (8001890 <MX_I2C2_Init+0xdc>)
 800180c:	f00b f8bd 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_I2C_SDA_Pin;
 8001810:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001816:	2302      	movs	r3, #2
 8001818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001826:	2304      	movs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4818      	ldr	r0, [pc, #96]	@ (8001890 <MX_I2C2_Init+0xdc>)
 8001830:	f00b f8ab 	bl	800c98a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001834:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001838:	f7ff faae 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 800183c:	4815      	ldr	r0, [pc, #84]	@ (8001894 <MX_I2C2_Init+0xe0>)
 800183e:	f7ff f957 	bl	8000af0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	4813      	ldr	r0, [pc, #76]	@ (8001894 <MX_I2C2_Init+0xe0>)
 8001848:	f7ff f92a 	bl	8000aa0 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 800184c:	4811      	ldr	r0, [pc, #68]	@ (8001894 <MX_I2C2_Init+0xe0>)
 800184e:	f7ff f93f 	bl	8000ad0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001852:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_I2C2_Init+0xe0>)
 8001854:	f7ff f914 	bl	8000a80 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001858:	480e      	ldr	r0, [pc, #56]	@ (8001894 <MX_I2C2_Init+0xe0>)
 800185a:	f7ff f901 	bl	8000a60 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00C0EAFF;
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_I2C2_Init+0xe4>)
 8001864:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001872:	2300      	movs	r3, #0
 8001874:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_I2C2_Init+0xe0>)
 8001882:	f00b f999 	bl	800cbb8 <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3738      	adds	r7, #56	@ 0x38
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020400 	.word	0x40020400
 8001894:	40005800 	.word	0x40005800
 8001898:	00c0eaff 	.word	0x00c0eaff

0800189c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b090      	sub	sp, #64	@ 0x40
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2228      	movs	r2, #40	@ 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f00d fa40 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80018c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80018c4:	f7ff fa80 	bl	8000dc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff fa4d 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = EXP_SPI_NSS_Pin;
 80018ce:	2310      	movs	r3, #16
 80018d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018d2:	2302      	movs	r3, #2
 80018d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80018e2:	2305      	movs	r3, #5
 80018e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80018e6:	463b      	mov	r3, r7
 80018e8:	4619      	mov	r1, r3
 80018ea:	4830      	ldr	r0, [pc, #192]	@ (80019ac <MX_SPI1_Init+0x110>)
 80018ec:	f00b f84d 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_SCK_Pin;
 80018f0:	2320      	movs	r3, #32
 80018f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018f4:	2302      	movs	r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001904:	2305      	movs	r3, #5
 8001906:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001908:	463b      	mov	r3, r7
 800190a:	4619      	mov	r1, r3
 800190c:	4827      	ldr	r0, [pc, #156]	@ (80019ac <MX_SPI1_Init+0x110>)
 800190e:	f00b f83c 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_MISO_Pin;
 8001912:	2340      	movs	r3, #64	@ 0x40
 8001914:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001916:	2302      	movs	r3, #2
 8001918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001926:	2305      	movs	r3, #5
 8001928:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800192a:	463b      	mov	r3, r7
 800192c:	4619      	mov	r1, r3
 800192e:	481f      	ldr	r0, [pc, #124]	@ (80019ac <MX_SPI1_Init+0x110>)
 8001930:	f00b f82b 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_MOSI_Pin;
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001938:	2302      	movs	r3, #2
 800193a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001948:	2305      	movs	r3, #5
 800194a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	4816      	ldr	r0, [pc, #88]	@ (80019ac <MX_SPI1_Init+0x110>)
 8001952:	f00b f81a 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800195a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800195e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001960:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001964:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 800197e:	2307      	movs	r3, #7
 8001980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4619      	mov	r1, r3
 8001988:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <MX_SPI1_Init+0x114>)
 800198a:	f00b fced 	bl	800d368 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800198e:	2100      	movs	r1, #0
 8001990:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <MX_SPI1_Init+0x114>)
 8001992:	f7ff fa9b 	bl	8000ecc <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001996:	4806      	ldr	r0, [pc, #24]	@ (80019b0 <MX_SPI1_Init+0x114>)
 8001998:	f7ff faab 	bl	8000ef2 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 800199c:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <MX_SPI1_Init+0x114>)
 800199e:	f7ff fa85 	bl	8000eac <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3740      	adds	r7, #64	@ 0x40
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40013000 	.word	0x40013000

080019b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2228      	movs	r2, #40	@ 0x28
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00d f9b4 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80019d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019dc:	f7ff f9dc 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80019e0:	2002      	movs	r0, #2
 80019e2:	f7ff f9c1 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PHOTO_SCK_Pin;
 80019e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019ec:	2302      	movs	r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019fc:	2305      	movs	r3, #5
 80019fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4841      	ldr	r0, [pc, #260]	@ (8001b0c <MX_SPI2_Init+0x158>)
 8001a06:	f00a ffc0 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHOTO_MISO_Pin;
 8001a0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a10:	2302      	movs	r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4838      	ldr	r0, [pc, #224]	@ (8001b0c <MX_SPI2_Init+0x158>)
 8001a2a:	f00a ffae 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHOTO_MOSI_Pin;
 8001a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a34:	2302      	movs	r3, #2
 8001a36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a44:	2305      	movs	r3, #5
 8001a46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	482f      	ldr	r0, [pc, #188]	@ (8001b0c <MX_SPI2_Init+0x158>)
 8001a4e:	f00a ff9c 	bl	800c98a <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_9);
 8001a52:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8001a56:	2101      	movs	r1, #1
 8001a58:	482d      	ldr	r0, [pc, #180]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a5a:	f7fe ffad 	bl	80009b8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	482b      	ldr	r0, [pc, #172]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a64:	f7fe feac 	bl	80007c0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_VERYHIGH);
 8001a68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4828      	ldr	r0, [pc, #160]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a70:	f7fe ff7e 	bl	8000970 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8001a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4825      	ldr	r0, [pc, #148]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a7c:	f7fe fec4 	bl	8000808 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2101      	movs	r1, #1
 8001a84:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a86:	f7fe fee3 	bl	8000850 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8001a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a8e:	2101      	movs	r1, #1
 8001a90:	481f      	ldr	r0, [pc, #124]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a92:	f7fe ff01 	bl	8000898 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	481c      	ldr	r0, [pc, #112]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001a9e:	f7fe ff1f 	bl	80008e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4819      	ldr	r0, [pc, #100]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001aaa:	f7fe ff3d 	bl	8000928 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4817      	ldr	r0, [pc, #92]	@ (8001b10 <MX_SPI2_Init+0x15c>)
 8001ab2:	f7fe ffa5 	bl	8000a00 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001aba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001abe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8001ac0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001ac4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480a      	ldr	r0, [pc, #40]	@ (8001b14 <MX_SPI2_Init+0x160>)
 8001aec:	f00b fc3c 	bl	800d368 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001af0:	2100      	movs	r1, #0
 8001af2:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <MX_SPI2_Init+0x160>)
 8001af4:	f7ff f9ea 	bl	8000ecc <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8001af8:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <MX_SPI2_Init+0x160>)
 8001afa:	f7ff f9fa 	bl	8000ef2 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_SPI2_Init+0x160>)
 8001b00:	f7ff f9d4 	bl	8000eac <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3740      	adds	r7, #64	@ 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40026000 	.word	0x40026000
 8001b14:	40003800 	.word	0x40003800

08001b18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b090      	sub	sp, #64	@ 0x40
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	2228      	movs	r2, #40	@ 0x28
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00d f902 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b40:	f7ff f92a 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b44:	2004      	movs	r0, #4
 8001b46:	f7ff f90f 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b50:	2302      	movs	r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b60:	2306      	movs	r3, #6
 8001b62:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_SCK_GPIO_Port, &GPIO_InitStruct);
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4828      	ldr	r0, [pc, #160]	@ (8001c0c <MX_SPI3_Init+0xf4>)
 8001b6a:	f00a ff0e 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TEC_MISO_Pin;
 8001b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b74:	2302      	movs	r3, #2
 8001b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b84:	2306      	movs	r3, #6
 8001b86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481f      	ldr	r0, [pc, #124]	@ (8001c0c <MX_SPI3_Init+0xf4>)
 8001b8e:	f00a fefc 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TEC_MOSI_Pin;
 8001b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001ba8:	2306      	movs	r3, #6
 8001baa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001bac:	463b      	mov	r3, r7
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4816      	ldr	r0, [pc, #88]	@ (8001c0c <MX_SPI3_Init+0xf4>)
 8001bb2:	f00a feea 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001bba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001bbe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001bc0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001bc4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001be0:	2307      	movs	r3, #7
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_SPI3_Init+0xf8>)
 8001bec:	f00b fbbc 	bl	800d368 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4807      	ldr	r0, [pc, #28]	@ (8001c10 <MX_SPI3_Init+0xf8>)
 8001bf4:	f7ff f96a 	bl	8000ecc <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_SPI3_Init+0xf8>)
 8001bfa:	f7ff f97a 	bl	8000ef2 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 8001bfe:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <MX_SPI3_Init+0xf8>)
 8001c00:	f7ff f954 	bl	8000eac <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3740      	adds	r7, #64	@ 0x40
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40003c00 	.word	0x40003c00

08001c14 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b090      	sub	sp, #64	@ 0x40
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2228      	movs	r2, #40	@ 0x28
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00d f884 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8001c38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c3c:	f7ff f8c4 	bl	8000dc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001c40:	2010      	movs	r0, #16
 8001c42:	f7ff f891 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE12   ------> SPI4_SCK
  PE13   ------> SPI4_MISO
  PE14   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LASER_SCK_Pin;
 8001c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4828      	ldr	r0, [pc, #160]	@ (8001d08 <MX_SPI4_Init+0xf4>)
 8001c66:	f00a fe90 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LASER_MISO_Pin;
 8001c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c70:	2302      	movs	r3, #2
 8001c72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c80:	2305      	movs	r3, #5
 8001c82:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_MISO_GPIO_Port, &GPIO_InitStruct);
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	481f      	ldr	r0, [pc, #124]	@ (8001d08 <MX_SPI4_Init+0xf4>)
 8001c8a:	f00a fe7e 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LASER_MOSI_Pin;
 8001c8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c94:	2302      	movs	r3, #2
 8001c96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <MX_SPI4_Init+0xf4>)
 8001cae:	f00a fe6c 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001cb6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001cba:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001cbc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cc0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001cdc:	2307      	movs	r3, #7
 8001cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	@ (8001d0c <MX_SPI4_Init+0xf8>)
 8001ce8:	f00b fb3e 	bl	800d368 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8001cec:	2100      	movs	r1, #0
 8001cee:	4807      	ldr	r0, [pc, #28]	@ (8001d0c <MX_SPI4_Init+0xf8>)
 8001cf0:	f7ff f8ec 	bl	8000ecc <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI4);
 8001cf4:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_SPI4_Init+0xf8>)
 8001cf6:	f7ff f90c 	bl	8000f12 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 8001cfa:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <MX_SPI4_Init+0xf8>)
 8001cfc:	f7ff f8d6 	bl	8000eac <LL_SPI_Enable>
  /* USER CODE END SPI4_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3740      	adds	r7, #64	@ 0x40
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40013400 	.word	0x40013400

08001d10 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b090      	sub	sp, #64	@ 0x40
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	2228      	movs	r2, #40	@ 0x28
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00d f806 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	463b      	mov	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI6);
 8001d34:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001d38:	f7ff f846 	bl	8000dc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff f813 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PB3   ------> SPI6_SCK
  PB4   ------> SPI6_MISO
  PB5   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = FRAM_SCK_Pin;
 8001d42:	2308      	movs	r3, #8
 8001d44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d46:	2302      	movs	r3, #2
 8001d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001d56:	2308      	movs	r3, #8
 8001d58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4857      	ldr	r0, [pc, #348]	@ (8001ebc <MX_SPI6_Init+0x1ac>)
 8001d60:	f00a fe13 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FRAM_MISO_Pin;
 8001d64:	2310      	movs	r3, #16
 8001d66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_MISO_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4619      	mov	r1, r3
 8001d80:	484e      	ldr	r0, [pc, #312]	@ (8001ebc <MX_SPI6_Init+0x1ac>)
 8001d82:	f00a fe02 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FRAM_MOSI_Pin;
 8001d86:	2320      	movs	r3, #32
 8001d88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4846      	ldr	r0, [pc, #280]	@ (8001ebc <MX_SPI6_Init+0x1ac>)
 8001da4:	f00a fdf1 	bl	800c98a <LL_GPIO_Init>

  /* SPI6 DMA Init */

  /* SPI6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_1);
 8001da8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dac:	2105      	movs	r1, #5
 8001dae:	4844      	ldr	r0, [pc, #272]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001db0:	f7fe fe02 	bl	80009b8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001db4:	2240      	movs	r2, #64	@ 0x40
 8001db6:	2105      	movs	r1, #5
 8001db8:	4841      	ldr	r0, [pc, #260]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001dba:	f7fe fd01 	bl	80007c0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_VERYHIGH);
 8001dbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	483e      	ldr	r0, [pc, #248]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001dc6:	f7fe fdd3 	bl	8000970 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2105      	movs	r1, #5
 8001dce:	483c      	ldr	r0, [pc, #240]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001dd0:	f7fe fd1a 	bl	8000808 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	4839      	ldr	r0, [pc, #228]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001dda:	f7fe fd39 	bl	8000850 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de2:	2105      	movs	r1, #5
 8001de4:	4836      	ldr	r0, [pc, #216]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001de6:	f7fe fd57 	bl	8000898 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2105      	movs	r1, #5
 8001dee:	4834      	ldr	r0, [pc, #208]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001df0:	f7fe fd76 	bl	80008e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2105      	movs	r1, #5
 8001df8:	4831      	ldr	r0, [pc, #196]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001dfa:	f7fe fd95 	bl	8000928 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_5);
 8001dfe:	2105      	movs	r1, #5
 8001e00:	482f      	ldr	r0, [pc, #188]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e02:	f7fe fdfd 	bl	8000a00 <LL_DMA_DisableFifoMode>

  /* SPI6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_1);
 8001e06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e0a:	2106      	movs	r1, #6
 8001e0c:	482c      	ldr	r0, [pc, #176]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e0e:	f7fe fdd3 	bl	80009b8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2106      	movs	r1, #6
 8001e16:	482a      	ldr	r0, [pc, #168]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e18:	f7fe fcd2 	bl	80007c0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_VERYHIGH);
 8001e1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e20:	2106      	movs	r1, #6
 8001e22:	4827      	ldr	r0, [pc, #156]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e24:	f7fe fda4 	bl	8000970 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2106      	movs	r1, #6
 8001e2c:	4824      	ldr	r0, [pc, #144]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e2e:	f7fe fceb 	bl	8000808 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2106      	movs	r1, #6
 8001e36:	4822      	ldr	r0, [pc, #136]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e38:	f7fe fd0a 	bl	8000850 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e40:	2106      	movs	r1, #6
 8001e42:	481f      	ldr	r0, [pc, #124]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e44:	f7fe fd28 	bl	8000898 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2106      	movs	r1, #6
 8001e4c:	481c      	ldr	r0, [pc, #112]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e4e:	f7fe fd47 	bl	80008e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2106      	movs	r1, #6
 8001e56:	481a      	ldr	r0, [pc, #104]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e58:	f7fe fd66 	bl	8000928 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8001e5c:	2106      	movs	r1, #6
 8001e5e:	4818      	ldr	r0, [pc, #96]	@ (8001ec0 <MX_SPI6_Init+0x1b0>)
 8001e60:	f7fe fdce 	bl	8000a00 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e68:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e6c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e6e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e72:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001e82:	2300      	movs	r3, #0
 8001e84:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001e8e:	2307      	movs	r3, #7
 8001e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4619      	mov	r1, r3
 8001e98:	480a      	ldr	r0, [pc, #40]	@ (8001ec4 <MX_SPI6_Init+0x1b4>)
 8001e9a:	f00b fa65 	bl	800d368 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <MX_SPI6_Init+0x1b4>)
 8001ea2:	f7ff f813 	bl	8000ecc <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8001ea6:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <MX_SPI6_Init+0x1b4>)
 8001ea8:	f7ff f823 	bl	8000ef2 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_SPI6_Init+0x1b4>)
 8001eae:	f7fe fffd 	bl	8000eac <LL_SPI_Enable>
  /* USER CODE END SPI6_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3740      	adds	r7, #64	@ 0x40
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40026400 	.word	0x40026400
 8001ec4:	40015400 	.word	0x40015400

08001ec8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001ee8:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <MX_TIM1_Init+0xa4>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001efe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f12:	4815      	ldr	r0, [pc, #84]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f14:	f00a f944 	bl	800c1a0 <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f1e:	f000 fdab 	bl	8002a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480e      	ldr	r0, [pc, #56]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f30:	f00a f98e 	bl	800c250 <HAL_TIM_ConfigClockSource>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f3a:	f000 fd9d 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <MX_TIM1_Init+0xa0>)
 8001f50:	f00a fb88 	bl	800c664 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f5a:	f000 fd8d 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200044dc 	.word	0x200044dc
 8001f6c:	40010000 	.word	0x40010000

08001f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fb6:	4814      	ldr	r0, [pc, #80]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001fb8:	f00a f8f2 	bl	800c1a0 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fc2:	f000 fd59 	bl	8002a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001fd4:	f00a f93c 	bl	800c250 <HAL_TIM_ConfigClockSource>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fde:	f000 fd4b 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4806      	ldr	r0, [pc, #24]	@ (8002008 <MX_TIM2_Init+0x98>)
 8001ff0:	f00a fb38 	bl	800c664 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ffa:	f000 fd3d 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20004528 	.word	0x20004528

0800200c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	@ 0x50
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002012:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2220      	movs	r2, #32
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f00c fe80 	bl	800ed30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]
 800203e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002040:	2004      	movs	r0, #4
 8002042:	f7fe fea9 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 10;
 8002046:	230a      	movs	r3, #10
 8002048:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800204a:	2300      	movs	r3, #0
 800204c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 50000;
 800204e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 8002054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002058:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800205a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800205e:	4619      	mov	r1, r3
 8002060:	4855      	ldr	r0, [pc, #340]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002062:	f00b fa75 	bl	800d550 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002066:	4854      	ldr	r0, [pc, #336]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002068:	f7fe ff63 	bl	8000f32 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 800206c:	2100      	movs	r1, #0
 800206e:	4852      	ldr	r0, [pc, #328]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002070:	f7ff f812 	bl	8001098 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002074:	2101      	movs	r1, #1
 8002076:	4850      	ldr	r0, [pc, #320]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002078:	f7fe ffbe 	bl	8000ff8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800207c:	2360      	movs	r3, #96	@ 0x60
 800207e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	461a      	mov	r2, r3
 8002096:	2101      	movs	r1, #1
 8002098:	4847      	ldr	r0, [pc, #284]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 800209a:	f00b faf3 	bl	800d684 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 800209e:	2101      	movs	r1, #1
 80020a0:	4845      	ldr	r0, [pc, #276]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020a2:	f7fe ff57 	bl	8000f54 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80020a6:	2110      	movs	r1, #16
 80020a8:	4843      	ldr	r0, [pc, #268]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020aa:	f7fe ffa5 	bl	8000ff8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	461a      	mov	r2, r3
 80020b4:	2110      	movs	r1, #16
 80020b6:	4840      	ldr	r0, [pc, #256]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020b8:	f00b fae4 	bl	800d684 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80020bc:	2110      	movs	r1, #16
 80020be:	483e      	ldr	r0, [pc, #248]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020c0:	f7fe ff48 	bl	8000f54 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80020c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c8:	483b      	ldr	r0, [pc, #236]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020ca:	f7fe ff95 	bl	8000ff8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020d8:	4837      	ldr	r0, [pc, #220]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020da:	f00b fad3 	bl	800d684 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 80020de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e2:	4835      	ldr	r0, [pc, #212]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020e4:	f7fe ff36 	bl	8000f54 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 80020e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ec:	4832      	ldr	r0, [pc, #200]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020ee:	f7fe ff83 	bl	8000ff8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	461a      	mov	r2, r3
 80020f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020fc:	482e      	ldr	r0, [pc, #184]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 80020fe:	f00b fac1 	bl	800d684 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 8002102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002106:	482c      	ldr	r0, [pc, #176]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002108:	f7fe ff24 	bl	8000f54 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800210c:	2100      	movs	r1, #0
 800210e:	482a      	ldr	r0, [pc, #168]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002110:	f7fe ffd8 	bl	80010c4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002114:	4828      	ldr	r0, [pc, #160]	@ (80021b8 <MX_TIM4_Init+0x1ac>)
 8002116:	f7fe ffe8 	bl	80010ea <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800211a:	2008      	movs	r0, #8
 800211c:	f7fe fe24 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  PD12   ------> TIM4_CH1
  PD13   ------> TIM4_CH2
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002126:	2302      	movs	r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	481f      	ldr	r0, [pc, #124]	@ (80021bc <MX_TIM4_Init+0x1b0>)
 8002140:	f00a fc23 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002148:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800214a:	2302      	movs	r3, #2
 800214c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4816      	ldr	r0, [pc, #88]	@ (80021bc <MX_TIM4_Init+0x1b0>)
 8002164:	f00a fc11 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002168:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800216c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800216e:	2302      	movs	r3, #2
 8002170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	4619      	mov	r1, r3
 8002186:	480d      	ldr	r0, [pc, #52]	@ (80021bc <MX_TIM4_Init+0x1b0>)
 8002188:	f00a fbff 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800218c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002190:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002192:	2302      	movs	r3, #2
 8002194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4804      	ldr	r0, [pc, #16]	@ (80021bc <MX_TIM4_Init+0x1b0>)
 80021ac:	f00a fbed 	bl	800c98a <LL_GPIO_Init>

}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08e      	sub	sp, #56	@ 0x38
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART7_CLKSOURCE_PCLK1);
 80021ea:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 80021ee:	f7fe fd2b 	bl	8000c48 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 80021f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021f6:	f7fe fdcf 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80021fa:	2010      	movs	r0, #16
 80021fc:	f7fe fdb4 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = EXP_UART_RX_Pin;
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002204:	2302      	movs	r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002214:	2308      	movs	r3, #8
 8002216:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4819      	ldr	r0, [pc, #100]	@ (8002284 <MX_UART7_Init+0xc4>)
 800221e:	f00a fbb4 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_UART_TX_Pin;
 8002222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002226:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002228:	2302      	movs	r3, #2
 800222a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002238:	2308      	movs	r3, #8
 800223a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4810      	ldr	r0, [pc, #64]	@ (8002284 <MX_UART7_Init+0xc4>)
 8002242:	f00a fba2 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002246:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800224a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002258:	230c      	movs	r3, #12
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800225c:	2300      	movs	r3, #0
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART7, &USART_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4807      	ldr	r0, [pc, #28]	@ (8002288 <MX_UART7_Init+0xc8>)
 800226c:	f00b fd2a 	bl	800dcc4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART7);
 8002270:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_UART7_Init+0xc8>)
 8002272:	f7fe ffa5 	bl	80011c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART7);
 8002276:	4804      	ldr	r0, [pc, #16]	@ (8002288 <MX_UART7_Init+0xc8>)
 8002278:	f7fe ff47 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3738      	adds	r7, #56	@ 0x38
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	40007800 	.word	0x40007800

0800228c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	@ 0x38
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	615a      	str	r2, [r3, #20]
 80022a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80022b6:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80022ba:	f7fe fcab 	bl	8000c14 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80022be:	2010      	movs	r0, #16
 80022c0:	f7fe fd82 	bl	8000dc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7fe fd4f 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA12   ------> USART1_DE
  */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 80022ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022d0:	2302      	movs	r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80022e0:	2307      	movs	r3, #7
 80022e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	482a      	ldr	r0, [pc, #168]	@ (8002394 <MX_USART1_UART_Init+0x108>)
 80022ea:	f00a fb4e 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RS485_RX_Pin;
 80022ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022f4:	2302      	movs	r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002304:	2307      	movs	r3, #7
 8002306:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4821      	ldr	r0, [pc, #132]	@ (8002394 <MX_USART1_UART_Init+0x108>)
 800230e:	f00a fb3c 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RS485_DE_Pin;
 8002312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002316:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002318:	2302      	movs	r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002328:	2307      	movs	r3, #7
 800232a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4818      	ldr	r0, [pc, #96]	@ (8002394 <MX_USART1_UART_Init+0x108>)
 8002332:	f00a fb2a 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002336:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800233a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002348:	230c      	movs	r3, #12
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	480f      	ldr	r0, [pc, #60]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 800235c:	f00b fcb2 	bl	800dcc4 <LL_USART_Init>
  LL_USART_EnableDEMode(USART1);
 8002360:	480d      	ldr	r0, [pc, #52]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 8002362:	f7fe ff0a 	bl	800117a <LL_USART_EnableDEMode>
  LL_USART_SetDESignalPolarity(USART1, LL_USART_DE_POLARITY_HIGH);
 8002366:	2100      	movs	r1, #0
 8002368:	480b      	ldr	r0, [pc, #44]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 800236a:	f7fe ff16 	bl	800119a <LL_USART_SetDESignalPolarity>
  LL_USART_SetDEAssertionTime(USART1, 0);
 800236e:	2100      	movs	r1, #0
 8002370:	4809      	ldr	r0, [pc, #36]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 8002372:	f7fe feee 	bl	8001152 <LL_USART_SetDEAssertionTime>
  LL_USART_SetDEDeassertionTime(USART1, 0);
 8002376:	2100      	movs	r1, #0
 8002378:	4807      	ldr	r0, [pc, #28]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 800237a:	f7fe fed6 	bl	800112a <LL_USART_SetDEDeassertionTime>
  LL_USART_ConfigAsyncMode(USART1);
 800237e:	4806      	ldr	r0, [pc, #24]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 8002380:	f7fe ff1e 	bl	80011c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002384:	4804      	ldr	r0, [pc, #16]	@ (8002398 <MX_USART1_UART_Init+0x10c>)
 8002386:	f7fe fec0 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3738      	adds	r7, #56	@ 0x38
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020000 	.word	0x40020000
 8002398:	40011000 	.word	0x40011000

0800239c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	@ 0x38
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK2);
 80023c6:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 80023ca:	f7fe fc23 	bl	8000c14 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80023ce:	2020      	movs	r0, #32
 80023d0:	f7fe fcfa 	bl	8000dc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80023d4:	2004      	movs	r0, #4
 80023d6:	f7fe fcc7 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = CONS_TX_Pin;
 80023da:	2340      	movs	r3, #64	@ 0x40
 80023dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023de:	2302      	movs	r3, #2
 80023e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80023ee:	2308      	movs	r3, #8
 80023f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(CONS_TX_GPIO_Port, &GPIO_InitStruct);
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4821      	ldr	r0, [pc, #132]	@ (800247c <MX_USART6_UART_Init+0xe0>)
 80023f8:	f00a fac7 	bl	800c98a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = CONS_RX_Pin;
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002400:	2302      	movs	r3, #2
 8002402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002410:	2308      	movs	r3, #8
 8002412:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(CONS_RX_GPIO_Port, &GPIO_InitStruct);
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4818      	ldr	r0, [pc, #96]	@ (800247c <MX_USART6_UART_Init+0xe0>)
 800241a:	f00a fab6 	bl	800c98a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),14, 0));
 800241e:	f7fe f945 	bl	80006ac <__NVIC_GetPriorityGrouping>
 8002422:	4603      	mov	r3, r0
 8002424:	2200      	movs	r2, #0
 8002426:	210e      	movs	r1, #14
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f995 	bl	8000758 <NVIC_EncodePriority>
 800242e:	4603      	mov	r3, r0
 8002430:	4619      	mov	r1, r3
 8002432:	2047      	movs	r0, #71	@ 0x47
 8002434:	f7fe f966 	bl	8000704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002438:	2047      	movs	r0, #71	@ 0x47
 800243a:	f7fe f945 	bl	80006c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800243e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002442:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800244c:	2300      	movs	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002450:	230c      	movs	r3, #12
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	@ (8002480 <MX_USART6_UART_Init+0xe4>)
 8002464:	f00b fc2e 	bl	800dcc4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_USART6_UART_Init+0xe4>)
 800246a:	f7fe fea9 	bl	80011c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800246e:	4804      	ldr	r0, [pc, #16]	@ (8002480 <MX_USART6_UART_Init+0xe4>)
 8002470:	f7fe fe4b 	bl	800110a <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	3738      	adds	r7, #56	@ 0x38
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020800 	.word	0x40020800
 8002480:	40011400 	.word	0x40011400

08002484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002488:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800248c:	f7fe fc6c 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002490:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002494:	f7fe fc68 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002498:	f7fe f908 	bl	80006ac <__NVIC_GetPriorityGrouping>
 800249c:	4603      	mov	r3, r0
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f958 	bl	8000758 <NVIC_EncodePriority>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	200c      	movs	r0, #12
 80024ae:	f7fe f929 	bl	8000704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80024b2:	200c      	movs	r0, #12
 80024b4:	f7fe f908 	bl	80006c8 <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2038      	movs	r0, #56	@ 0x38
 80024be:	f009 f914 	bl	800b6ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024c2:	2038      	movs	r0, #56	@ 0x38
 80024c4:	f009 f92d 	bl	800b722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024c8:	f7fe f8f0 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f940 	bl	8000758 <NVIC_EncodePriority>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	2044      	movs	r0, #68	@ 0x44
 80024de:	f7fe f911 	bl	8000704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80024e2:	2044      	movs	r0, #68	@ 0x44
 80024e4:	f7fe f8f0 	bl	80006c8 <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024e8:	f7fe f8e0 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f930 	bl	8000758 <NVIC_EncodePriority>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4619      	mov	r1, r3
 80024fc:	2045      	movs	r0, #69	@ 0x45
 80024fe:	f7fe f901 	bl	8000704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002502:	2045      	movs	r0, #69	@ 0x45
 8002504:	f7fe f8e0 	bl	80006c8 <__NVIC_EnableIRQ>

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002522:	2010      	movs	r0, #16
 8002524:	f7fe fc20 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002528:	2004      	movs	r0, #4
 800252a:	f7fe fc1d 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800252e:	2080      	movs	r0, #128	@ 0x80
 8002530:	f7fe fc1a 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe fc17 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800253a:	2002      	movs	r0, #2
 800253c:	f7fe fc14 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002540:	2008      	movs	r0, #8
 8002542:	f7fe fc11 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TEC_4_SWEN_GPIO_Port, TEC_4_SWEN_Pin);
 8002546:	2104      	movs	r1, #4
 8002548:	48bf      	ldr	r0, [pc, #764]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800254a:	f7fe fe5d 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_3_SWEN_GPIO_Port, TEC_3_SWEN_Pin);
 800254e:	2108      	movs	r1, #8
 8002550:	48bd      	ldr	r0, [pc, #756]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002552:	f7fe fe59 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_2_SWEN_GPIO_Port, TEC_2_SWEN_Pin);
 8002556:	2110      	movs	r1, #16
 8002558:	48bb      	ldr	r0, [pc, #748]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800255a:	f7fe fe55 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 800255e:	2120      	movs	r1, #32
 8002560:	48b9      	ldr	r0, [pc, #740]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002562:	f7fe fe51 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	48b7      	ldr	r0, [pc, #732]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800256a:	f7fe fe4d 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_2_EN_GPIO_Port, TEC_2_EN_Pin);
 800256e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002572:	48b6      	ldr	r0, [pc, #728]	@ (800284c <MX_GPIO_Init+0x340>)
 8002574:	f7fe fe48 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_3_EN_GPIO_Port, TEC_3_EN_Pin);
 8002578:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800257c:	48b3      	ldr	r0, [pc, #716]	@ (800284c <MX_GPIO_Init+0x340>)
 800257e:	f7fe fe43 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_4_EN_GPIO_Port, TEC_4_EN_Pin);
 8002582:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002586:	48b1      	ldr	r0, [pc, #708]	@ (800284c <MX_GPIO_Init+0x340>)
 8002588:	f7fe fe3e 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800258c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002590:	48ad      	ldr	r0, [pc, #692]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002592:	f7fe fe39 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8002596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800259a:	48ad      	ldr	r0, [pc, #692]	@ (8002850 <MX_GPIO_Init+0x344>)
 800259c:	f7fe fe34 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80025a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a4:	48aa      	ldr	r0, [pc, #680]	@ (8002850 <MX_GPIO_Init+0x344>)
 80025a6:	f7fe fe2f 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ADG_MOSI_GPIO_Port, ADG_MOSI_Pin);
 80025aa:	2101      	movs	r1, #1
 80025ac:	48a9      	ldr	r0, [pc, #676]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025ae:	f7fe fe2b 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ADG_SCK_GPIO_Port, ADG_SCK_Pin);
 80025b2:	2102      	movs	r1, #2
 80025b4:	48a7      	ldr	r0, [pc, #668]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025b6:	f7fe fe27 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 80025ba:	2110      	movs	r1, #16
 80025bc:	48a5      	ldr	r0, [pc, #660]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025be:	f7fe fe23 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SENSOR1_EN_GPIO_Port, SENSOR1_EN_Pin);
 80025c2:	2120      	movs	r1, #32
 80025c4:	48a3      	ldr	r0, [pc, #652]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025c6:	f7fe fe1f 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SENSOR2_EN_GPIO_Port, SENSOR2_EN_Pin);
 80025ca:	2140      	movs	r1, #64	@ 0x40
 80025cc:	48a1      	ldr	r0, [pc, #644]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025ce:	f7fe fe1b 	bl	8001208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin);
 80025d2:	2104      	movs	r1, #4
 80025d4:	48a0      	ldr	r0, [pc, #640]	@ (8002858 <MX_GPIO_Init+0x34c>)
 80025d6:	f7fe fe09 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LASER_INT_SW_CS_GPIO_Port, LASER_INT_SW_CS_Pin);
 80025da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025de:	489a      	ldr	r0, [pc, #616]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80025e0:	f7fe fe04 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LASER_EXT_SW_CS_GPIO_Port, LASER_EXT_SW_CS_Pin);
 80025e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e8:	4897      	ldr	r0, [pc, #604]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80025ea:	f7fe fdff 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 80025ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025f2:	4899      	ldr	r0, [pc, #612]	@ (8002858 <MX_GPIO_Init+0x34c>)
 80025f4:	f7fe fdfa 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(PHOTO_SW_CS_GPIO_Port, PHOTO_SW_CS_Pin);
 80025f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fc:	4895      	ldr	r0, [pc, #596]	@ (8002854 <MX_GPIO_Init+0x348>)
 80025fe:	f7fe fdf5 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 8002602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002606:	4893      	ldr	r0, [pc, #588]	@ (8002854 <MX_GPIO_Init+0x348>)
 8002608:	f7fe fdf0 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 800260c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002610:	4890      	ldr	r0, [pc, #576]	@ (8002854 <MX_GPIO_Init+0x348>)
 8002612:	f7fe fdeb 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ADG_CS_GPIO_Port, ADG_CS_Pin);
 8002616:	2104      	movs	r1, #4
 8002618:	488e      	ldr	r0, [pc, #568]	@ (8002854 <MX_GPIO_Init+0x348>)
 800261a:	f7fe fde7 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(FRAM_CS_GPIO_Port, FRAM_CS_Pin);
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	488c      	ldr	r0, [pc, #560]	@ (8002854 <MX_GPIO_Init+0x348>)
 8002622:	f7fe fde3 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_4_CS_GPIO_Port, TEC_4_CS_Pin);
 8002626:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800262a:	488b      	ldr	r0, [pc, #556]	@ (8002858 <MX_GPIO_Init+0x34c>)
 800262c:	f7fe fdde 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_3_CS_GPIO_Port, TEC_3_CS_Pin);
 8002630:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002634:	4888      	ldr	r0, [pc, #544]	@ (8002858 <MX_GPIO_Init+0x34c>)
 8002636:	f7fe fdd9 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_2_CS_GPIO_Port, TEC_2_CS_Pin);
 800263a:	2101      	movs	r1, #1
 800263c:	4882      	ldr	r0, [pc, #520]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800263e:	f7fe fdd5 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002642:	2102      	movs	r1, #2
 8002644:	4880      	ldr	r0, [pc, #512]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002646:	f7fe fdd1 	bl	80011ec <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin;
 800264a:	2304      	movs	r3, #4
 800264c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800264e:	2301      	movs	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_SWEN_GPIO_Port, &GPIO_InitStruct);
 800265e:	463b      	mov	r3, r7
 8002660:	4619      	mov	r1, r3
 8002662:	4879      	ldr	r0, [pc, #484]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002664:	f00a f991 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin;
 8002668:	2308      	movs	r3, #8
 800266a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800266c:	2301      	movs	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_SWEN_GPIO_Port, &GPIO_InitStruct);
 800267c:	463b      	mov	r3, r7
 800267e:	4619      	mov	r1, r3
 8002680:	4871      	ldr	r0, [pc, #452]	@ (8002848 <MX_GPIO_Init+0x33c>)
 8002682:	f00a f982 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_SWEN_Pin;
 8002686:	2310      	movs	r3, #16
 8002688:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800268a:	2301      	movs	r3, #1
 800268c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_SWEN_GPIO_Port, &GPIO_InitStruct);
 800269a:	463b      	mov	r3, r7
 800269c:	4619      	mov	r1, r3
 800269e:	486a      	ldr	r0, [pc, #424]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80026a0:	f00a f973 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin;
 80026a4:	2320      	movs	r3, #32
 80026a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026a8:	2301      	movs	r3, #1
 80026aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_SWEN_GPIO_Port, &GPIO_InitStruct);
 80026b8:	463b      	mov	r3, r7
 80026ba:	4619      	mov	r1, r3
 80026bc:	4862      	ldr	r0, [pc, #392]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80026be:	f00a f964 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_EN_Pin;
 80026c2:	2340      	movs	r3, #64	@ 0x40
 80026c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026c6:	2301      	movs	r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_EN_GPIO_Port, &GPIO_InitStruct);
 80026d6:	463b      	mov	r3, r7
 80026d8:	4619      	mov	r1, r3
 80026da:	485b      	ldr	r0, [pc, #364]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80026dc:	f00a f955 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin;
 80026e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026e6:	2301      	movs	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_EN_GPIO_Port, &GPIO_InitStruct);
 80026f6:	463b      	mov	r3, r7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4854      	ldr	r0, [pc, #336]	@ (800284c <MX_GPIO_Init+0x340>)
 80026fc:	f00a f945 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_EN_Pin;
 8002700:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002704:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002706:	2301      	movs	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_EN_GPIO_Port, &GPIO_InitStruct);
 8002716:	463b      	mov	r3, r7
 8002718:	4619      	mov	r1, r3
 800271a:	484c      	ldr	r0, [pc, #304]	@ (800284c <MX_GPIO_Init+0x340>)
 800271c:	f00a f935 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_EN_Pin;
 8002720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002724:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002726:	2301      	movs	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_EN_GPIO_Port, &GPIO_InitStruct);
 8002736:	463b      	mov	r3, r7
 8002738:	4619      	mov	r1, r3
 800273a:	4844      	ldr	r0, [pc, #272]	@ (800284c <MX_GPIO_Init+0x340>)
 800273c:	f00a f925 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_DAC_CS_Pin;
 8002740:	2304      	movs	r3, #4
 8002742:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002744:	2301      	movs	r3, #1
 8002746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002754:	463b      	mov	r3, r7
 8002756:	4619      	mov	r1, r3
 8002758:	483f      	ldr	r0, [pc, #252]	@ (8002858 <MX_GPIO_Init+0x34c>)
 800275a:	f00a f916 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_INT_SW_CS_Pin;
 800275e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002762:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002764:	2301      	movs	r3, #1
 8002766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_INT_SW_CS_GPIO_Port, &GPIO_InitStruct);
 8002774:	463b      	mov	r3, r7
 8002776:	4619      	mov	r1, r3
 8002778:	4833      	ldr	r0, [pc, #204]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800277a:	f00a f906 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 800277e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002782:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002784:	2301      	movs	r3, #1
 8002786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8002794:	463b      	mov	r3, r7
 8002796:	4619      	mov	r1, r3
 8002798:	482b      	ldr	r0, [pc, #172]	@ (8002848 <MX_GPIO_Init+0x33c>)
 800279a:	f00a f8f6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_EXT_SW_CS_Pin;
 800279e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027a4:	2301      	movs	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_EXT_SW_CS_GPIO_Port, &GPIO_InitStruct);
 80027b4:	463b      	mov	r3, r7
 80027b6:	4619      	mov	r1, r3
 80027b8:	4823      	ldr	r0, [pc, #140]	@ (8002848 <MX_GPIO_Init+0x33c>)
 80027ba:	f00a f8e6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_DAC_LATCH_Pin;
 80027be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027c4:	2301      	movs	r3, #1
 80027c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_DAC_LATCH_GPIO_Port, &GPIO_InitStruct);
 80027d4:	463b      	mov	r3, r7
 80027d6:	4619      	mov	r1, r3
 80027d8:	481f      	ldr	r0, [pc, #124]	@ (8002858 <MX_GPIO_Init+0x34c>)
 80027da:	f00a f8d6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_SW_CS_Pin;
 80027de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027e4:	2301      	movs	r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_SW_CS_GPIO_Port, &GPIO_InitStruct);
 80027f4:	463b      	mov	r3, r7
 80027f6:	4619      	mov	r1, r3
 80027f8:	4816      	ldr	r0, [pc, #88]	@ (8002854 <MX_GPIO_Init+0x348>)
 80027fa:	f00a f8c6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_CS_Pin;
 80027fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002802:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002804:	2301      	movs	r3, #1
 8002806:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	480e      	ldr	r0, [pc, #56]	@ (8002854 <MX_GPIO_Init+0x348>)
 800281a:	f00a f8b6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_CONV_Pin;
 800281e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002822:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002824:	2301      	movs	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_CONV_GPIO_Port, &GPIO_InitStruct);
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	4806      	ldr	r0, [pc, #24]	@ (8002854 <MX_GPIO_Init+0x348>)
 800283a:	f00a f8a6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_EOC_Pin;
 800283e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e00a      	b.n	800285c <MX_GPIO_Init+0x350>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40020800 	.word	0x40020800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_EOC_GPIO_Port, &GPIO_InitStruct);
 8002864:	463b      	mov	r3, r7
 8002866:	4619      	mov	r1, r3
 8002868:	487e      	ldr	r0, [pc, #504]	@ (8002a64 <MX_GPIO_Init+0x558>)
 800286a:	f00a f88e 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ_0_Pin;
 800286e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002872:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ_0_GPIO_Port, &GPIO_InitStruct);
 800287c:	463b      	mov	r3, r7
 800287e:	4619      	mov	r1, r3
 8002880:	4879      	ldr	r0, [pc, #484]	@ (8002a68 <MX_GPIO_Init+0x55c>)
 8002882:	f00a f882 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ_1_Pin;
 8002886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800288a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ_1_GPIO_Port, &GPIO_InitStruct);
 8002894:	463b      	mov	r3, r7
 8002896:	4619      	mov	r1, r3
 8002898:	4873      	ldr	r0, [pc, #460]	@ (8002a68 <MX_GPIO_Init+0x55c>)
 800289a:	f00a f876 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 800289e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 80028ac:	463b      	mov	r3, r7
 80028ae:	4619      	mov	r1, r3
 80028b0:	486e      	ldr	r0, [pc, #440]	@ (8002a6c <MX_GPIO_Init+0x560>)
 80028b2:	f00a f86a 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 80028b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028bc:	2301      	movs	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80028cc:	463b      	mov	r3, r7
 80028ce:	4619      	mov	r1, r3
 80028d0:	4866      	ldr	r0, [pc, #408]	@ (8002a6c <MX_GPIO_Init+0x560>)
 80028d2:	f00a f85a 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 80028d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028dc:	2301      	movs	r3, #1
 80028de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	485e      	ldr	r0, [pc, #376]	@ (8002a6c <MX_GPIO_Init+0x560>)
 80028f2:	f00a f84a 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_MOSI_Pin;
 80028f6:	2301      	movs	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028fa:	2301      	movs	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_MOSI_GPIO_Port, &GPIO_InitStruct);
 800290a:	463b      	mov	r3, r7
 800290c:	4619      	mov	r1, r3
 800290e:	4855      	ldr	r0, [pc, #340]	@ (8002a64 <MX_GPIO_Init+0x558>)
 8002910:	f00a f83b 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_SCK_Pin;
 8002914:	2302      	movs	r3, #2
 8002916:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002918:	2301      	movs	r3, #1
 800291a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_SCK_GPIO_Port, &GPIO_InitStruct);
 8002928:	463b      	mov	r3, r7
 800292a:	4619      	mov	r1, r3
 800292c:	484d      	ldr	r0, [pc, #308]	@ (8002a64 <MX_GPIO_Init+0x558>)
 800292e:	f00a f82c 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_CS_Pin;
 8002932:	2304      	movs	r3, #4
 8002934:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002936:	2301      	movs	r3, #1
 8002938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_CS_GPIO_Port, &GPIO_InitStruct);
 8002946:	463b      	mov	r3, r7
 8002948:	4619      	mov	r1, r3
 800294a:	4846      	ldr	r0, [pc, #280]	@ (8002a64 <MX_GPIO_Init+0x558>)
 800294c:	f00a f81d 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_5_AUX_Pin;
 8002950:	2308      	movs	r3, #8
 8002952:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002954:	2300      	movs	r3, #0
 8002956:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 800295c:	463b      	mov	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	4840      	ldr	r0, [pc, #256]	@ (8002a64 <MX_GPIO_Init+0x558>)
 8002962:	f00a f812 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_5_EN_Pin;
 8002966:	2310      	movs	r3, #16
 8002968:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800296a:	2301      	movs	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_5_EN_GPIO_Port, &GPIO_InitStruct);
 800297a:	463b      	mov	r3, r7
 800297c:	4619      	mov	r1, r3
 800297e:	4839      	ldr	r0, [pc, #228]	@ (8002a64 <MX_GPIO_Init+0x558>)
 8002980:	f00a f803 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SENSOR1_EN_Pin;
 8002984:	2320      	movs	r3, #32
 8002986:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002988:	2301      	movs	r3, #1
 800298a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SENSOR1_EN_GPIO_Port, &GPIO_InitStruct);
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4831      	ldr	r0, [pc, #196]	@ (8002a64 <MX_GPIO_Init+0x558>)
 800299e:	f009 fff4 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SENSOR2_EN_Pin;
 80029a2:	2340      	movs	r3, #64	@ 0x40
 80029a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029a6:	2301      	movs	r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SENSOR2_EN_GPIO_Port, &GPIO_InitStruct);
 80029b6:	463b      	mov	r3, r7
 80029b8:	4619      	mov	r1, r3
 80029ba:	482a      	ldr	r0, [pc, #168]	@ (8002a64 <MX_GPIO_Init+0x558>)
 80029bc:	f009 ffe5 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029c4:	2301      	movs	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 80029d4:	463b      	mov	r3, r7
 80029d6:	4619      	mov	r1, r3
 80029d8:	4822      	ldr	r0, [pc, #136]	@ (8002a64 <MX_GPIO_Init+0x558>)
 80029da:	f009 ffd6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_CS_Pin;
 80029de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029e4:	2301      	movs	r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_CS_GPIO_Port, &GPIO_InitStruct);
 80029f4:	463b      	mov	r3, r7
 80029f6:	4619      	mov	r1, r3
 80029f8:	481d      	ldr	r0, [pc, #116]	@ (8002a70 <MX_GPIO_Init+0x564>)
 80029fa:	f009 ffc6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_CS_Pin;
 80029fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a04:	2301      	movs	r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_CS_GPIO_Port, &GPIO_InitStruct);
 8002a14:	463b      	mov	r3, r7
 8002a16:	4619      	mov	r1, r3
 8002a18:	4815      	ldr	r0, [pc, #84]	@ (8002a70 <MX_GPIO_Init+0x564>)
 8002a1a:	f009 ffb6 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_CS_Pin;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a22:	2301      	movs	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_CS_GPIO_Port, &GPIO_InitStruct);
 8002a32:	463b      	mov	r3, r7
 8002a34:	4619      	mov	r1, r3
 8002a36:	480f      	ldr	r0, [pc, #60]	@ (8002a74 <MX_GPIO_Init+0x568>)
 8002a38:	f009 ffa7 	bl	800c98a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_CS_Pin;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a40:	2301      	movs	r3, #1
 8002a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_CS_GPIO_Port, &GPIO_InitStruct);
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4807      	ldr	r0, [pc, #28]	@ (8002a74 <MX_GPIO_Init+0x568>)
 8002a56:	f009 ff98 	bl	800c98a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40021000 	.word	0x40021000

08002a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7c:	b672      	cpsid	i
}
 8002a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <Error_Handler+0x8>

08002a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08e      	sub	sp, #56	@ 0x38
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a63      	ldr	r2, [pc, #396]	@ (8002c78 <HAL_ADC_MspInit+0x1ac>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d16c      	bne.n	8002bc8 <HAL_ADC_MspInit+0xfc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aee:	4b63      	ldr	r3, [pc, #396]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a62      	ldr	r2, [pc, #392]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b60      	ldr	r3, [pc, #384]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b06:	4b5d      	ldr	r3, [pc, #372]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b5a      	ldr	r3, [pc, #360]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b57      	ldr	r3, [pc, #348]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a56      	ldr	r2, [pc, #344]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b54      	ldr	r3, [pc, #336]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	69bb      	ldr	r3, [r7, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b36:	233f      	movs	r3, #63	@ 0x3f
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	484d      	ldr	r0, [pc, #308]	@ (8002c80 <HAL_ADC_MspInit+0x1b4>)
 8002b4a:	f009 f97d 	bl	800be48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b52:	2303      	movs	r3, #3
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4848      	ldr	r0, [pc, #288]	@ (8002c84 <HAL_ADC_MspInit+0x1b8>)
 8002b62:	f009 f971 	bl	800be48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b66:	4b48      	ldr	r3, [pc, #288]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b68:	4a48      	ldr	r2, [pc, #288]	@ (8002c8c <HAL_ADC_MspInit+0x1c0>)
 8002b6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b6c:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b72:	4b45      	ldr	r3, [pc, #276]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b78:	4b43      	ldr	r3, [pc, #268]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b86:	4b40      	ldr	r3, [pc, #256]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b96:	4b3c      	ldr	r3, [pc, #240]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba4:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002baa:	4837      	ldr	r0, [pc, #220]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002bac:	f008 fdd4 	bl	800b758 <HAL_DMA_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002bb6:	f7ff ff5f 	bl	8002a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a32      	ldr	r2, [pc, #200]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bc0:	4a31      	ldr	r2, [pc, #196]	@ (8002c88 <HAL_ADC_MspInit+0x1bc>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bc6:	e052      	b.n	8002c6e <HAL_ADC_MspInit+0x1a2>
  else if(hadc->Instance==ADC2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a30      	ldr	r2, [pc, #192]	@ (8002c90 <HAL_ADC_MspInit+0x1c4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d124      	bne.n	8002c1c <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf6:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c02:	230c      	movs	r3, #12
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c06:	2303      	movs	r3, #3
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <HAL_ADC_MspInit+0x1c8>)
 8002c16:	f009 f917 	bl	800be48 <HAL_GPIO_Init>
}
 8002c1a:	e028      	b.n	8002c6e <HAL_ADC_MspInit+0x1a2>
  else if(hadc->Instance==ADC3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <HAL_ADC_MspInit+0x1cc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d123      	bne.n	8002c6e <HAL_ADC_MspInit+0x1a2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	4a0e      	ldr	r2, [pc, #56]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <HAL_ADC_MspInit+0x1b0>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c56:	2302      	movs	r3, #2
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	480a      	ldr	r0, [pc, #40]	@ (8002c94 <HAL_ADC_MspInit+0x1c8>)
 8002c6a:	f009 f8ed 	bl	800be48 <HAL_GPIO_Init>
}
 8002c6e:	bf00      	nop
 8002c70:	3738      	adds	r7, #56	@ 0x38
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40012000 	.word	0x40012000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020800 	.word	0x40020800
 8002c84:	40020400 	.word	0x40020400
 8002c88:	2000447c 	.word	0x2000447c
 8002c8c:	40026410 	.word	0x40026410
 8002c90:	40012100 	.word	0x40012100
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40012200 	.word	0x40012200

08002c9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	@ (8002d04 <HAL_TIM_Base_MspInit+0x68>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10c      	bne.n	8002cc8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc6:	e018      	b.n	8002cfa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d113      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_TIM_Base_MspInit+0x6c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	201c      	movs	r0, #28
 8002cf0:	f008 fcfb 	bl	800b6ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cf4:	201c      	movs	r0, #28
 8002cf6:	f008 fd14 	bl	800b722 <HAL_NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40023800 	.word	0x40023800

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//SCH_RunSystemTickTimer();
	SST_TimeEvt_tick();
 8002d62:	f007 ff23 	bl	800abac <SST_TimeEvt_tick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d66:	f007 ff99 	bl	800ac9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <DMA2_Stream0_IRQHandler+0x10>)
 8002d76:	f008 fdfd 	bl	800b974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000447c 	.word	0x2000447c

08002d84 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Shell_USART_IRQHandler();
 8002d96:	f001 fe77 	bl	8004a88 <Shell_USART_IRQHandler>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
////////////////////////////
  /* USER CODE END USART6_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  return 1;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_kill>:

int _kill(int pid, int sig)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002db8:	f00c f81a 	bl	800edf0 <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2216      	movs	r2, #22
 8002dc0:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_exit>:

void _exit (int status)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffe7 	bl	8002dae <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <_exit+0x12>

08002de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e00a      	b.n	8002e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df6:	f3af 8000 	nop.w
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	60ba      	str	r2, [r7, #8]
 8002e02:	b2ca      	uxtb	r2, r1
 8002e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbf0      	blt.n	8002df6 <_read+0x12>
  }

  return len;
 8002e14:	687b      	ldr	r3, [r7, #4]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e009      	b.n	8002e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	60ba      	str	r2, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf1      	blt.n	8002e30 <_write+0x12>
  }
  return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_close>:

int _close(int file)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_isatty>:

int _isatty(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f00b ff7e 	bl	800edf0 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20080000 	.word	0x20080000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	20004574 	.word	0x20004574
 8002f28:	2000e370 	.word	0x2000e370

08002f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <SystemInit+0x20>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <SystemInit+0x20>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f54:	f7ff ffea 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f00b ff3d 	bl	800edfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7fe f950 	bl	8001226 <main>
  bx  lr    
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20004388 	.word	0x20004388
  ldr r2, =_sidata
 8002f94:	08012ae0 	.word	0x08012ae0
  ldr r2, =_sbss
 8002f98:	20004388 	.word	0x20004388
  ldr r4, =_ebss
 8002f9c:	2000e36c 	.word	0x2000e36c

08002fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>

08002fa2 <app_init>:
//DBC_MODULE_NAME("app_main")




void app_init(void) {
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	af00      	add	r7, sp, #0
	shell_task_ctor_singleton();
 8002fa6:	f001 fcb3 	bl	8004910 <shell_task_ctor_singleton>
	temperature_control_task_singleton_ctor();
 8002faa:	f001 fe23 	bl	8004bf4 <temperature_control_task_singleton_ctor>
	temperature_monitor_task_ctor_singleton();
 8002fae:	f002 fc19 	bl	80057e4 <temperature_monitor_task_ctor_singleton>
	experiment_task_singleton_ctor();
 8002fb2:	f000 f895 	bl	80030e0 <experiment_task_singleton_ctor>
//min_shell_task_ctor_singleton();
//temperature_control_task_singleton_ctor();
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <app_start>:

void app_start(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0
	experiment_task_start(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 f8b0 	bl	8003124 <experiment_task_start>
	shell_task_start(4);
 8002fc4:	2004      	movs	r0, #4
 8002fc6:	f001 fcd5 	bl	8004974 <shell_task_start>
//	temperature_control_task_start(2);
//	temperature_monitor_task_start(3);
//min_shell_task_start();
//temperature_control_task_start();
	return ;
 8002fca:	bf00      	nop
}
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <app_run>:
void app_run(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
	SST_Task_run();
 8002fd2:	f007 fce9 	bl	800a9a8 <SST_Task_run>
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <experiment_task_init>:
static state_t experiment_task_state_manual_handler(experiment_task_t * const me, experiment_evt_t const * const e);
static state_t experiment_task_state_data_aqui_handler(experiment_task_t * const me, experiment_evt_t const * const e);
static state_t experiment_task_state_data_send_handler(experiment_task_t * const me, experiment_evt_t const * const e);

static void experiment_task_init(experiment_task_t * const me,experiment_evt_t const * const e)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	DBG(DBG_LEVEL_INFO,"experiment_task init\r\n");
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <experiment_task_init+0x40>)
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	2329      	movs	r3, #41	@ 0x29
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <experiment_task_init+0x44>)
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	490c      	ldr	r1, [pc, #48]	@ (8003024 <experiment_task_init+0x48>)
 8002ff4:	480c      	ldr	r0, [pc, #48]	@ (8003028 <experiment_task_init+0x4c>)
 8002ff6:	f007 f9d3 	bl	800a3a0 <uart_stdio_printf>
	bsp_laser_init();
 8002ffa:	f002 fda9 	bl	8005b50 <bsp_laser_init>
	bsp_spi_ram_init();
 8002ffe:	f003 fd0b 	bl	8006a18 <bsp_spi_ram_init>
	bsp_photo_sw_init();
 8003002:	f003 f9bb 	bl	800637c <bsp_photo_sw_init>
	bsp_photo_adc_init();
 8003006:	f003 f9d1 	bl	80063ac <bsp_photo_adc_init>
	me->laser_spi_mode = 1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08010cc0 	.word	0x08010cc0
 8003020:	08010cc8 	.word	0x08010cc8
 8003024:	08010cf0 	.word	0x08010cf0
 8003028:	20004678 	.word	0x20004678

0800302c <experiment_task_dispatch>:
static void experiment_task_dispatch(experiment_task_t * const me,experiment_evt_t const * const e)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    experiment_task_handler_t prev_state = me->state; /* save for later */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	60fb      	str	r3, [r7, #12]
    state_t status = (me->state)(me, e);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	4603      	mov	r3, r0
 8003048:	72fb      	strb	r3, [r7, #11]

    if (status == TRAN_STATUS) { /* transition taken? */
 800304a:	7afb      	ldrb	r3, [r7, #11]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <experiment_task_dispatch+0x36>
        (prev_state)(me, &exit_evt);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4906      	ldr	r1, [pc, #24]	@ (800306c <experiment_task_dispatch+0x40>)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
        (me->state)(me, &entry_evt);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4904      	ldr	r1, [pc, #16]	@ (8003070 <experiment_task_dispatch+0x44>)
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
    }
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	08012340 	.word	0x08012340
 8003070:	0801232c 	.word	0x0801232c

08003074 <experiment_task_ctor>:
void experiment_task_ctor(experiment_task_t * const me, experiment_task_init_t const * const init) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(0u, me != NULL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <experiment_task_ctor+0x18>
 8003084:	2100      	movs	r1, #0
 8003086:	4813      	ldr	r0, [pc, #76]	@ (80030d4 <experiment_task_ctor+0x60>)
 8003088:	f002 fc24 	bl	80058d4 <DBC_fault_handler>
    SST_Task_ctor(&me->super, (SST_Handler) experiment_task_init, (SST_Handler)experiment_task_dispatch, \
 800308c:	6878      	ldr	r0, [r7, #4]
                                (SST_Evt *)init->current_evt, init->event_buffer);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
    SST_Task_ctor(&me->super, (SST_Handler) experiment_task_init, (SST_Handler)experiment_task_dispatch, \
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	4a0f      	ldr	r2, [pc, #60]	@ (80030d8 <experiment_task_ctor+0x64>)
 800309c:	490f      	ldr	r1, [pc, #60]	@ (80030dc <experiment_task_ctor+0x68>)
 800309e:	f007 fcd1 	bl	800aa44 <SST_Task_ctor>
    me->state = init->init_state;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	615a      	str	r2, [r3, #20]
    SST_TimeEvt_ctor(&me->timeout_timer, EVT_EXPERIMENT_DATA_AQUISITION_TIMEOUT, &(me->super));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3318      	adds	r3, #24
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	210e      	movs	r1, #14
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 fd28 	bl	800ab08 <SST_TimeEvt_ctor>
    SST_TimeEvt_disarm(&me->timeout_timer); // Disarm the timeout timer
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3318      	adds	r3, #24
 80030bc:	4618      	mov	r0, r3
 80030be:	f007 fd5b 	bl	800ab78 <SST_TimeEvt_disarm>
    me->sub_state = init->sub_state;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	7b1a      	ldrb	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	0801231c 	.word	0x0801231c
 80030d8:	0800302d 	.word	0x0800302d
 80030dc:	08002fdd 	.word	0x08002fdd

080030e0 <experiment_task_singleton_ctor>:
void experiment_task_singleton_ctor(void)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af02      	add	r7, sp, #8
	circular_buffer_init(&experiment_task_event_queue, (uint8_t * )&experiment_task_event_buffer, sizeof(experiment_task_event_buffer), EXPERIMENT_TASK_NUM_EVENTS, sizeof(experiment_evt_t));
 80030e6:	2312      	movs	r3, #18
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2302      	movs	r3, #2
 80030ec:	2224      	movs	r2, #36	@ 0x24
 80030ee:	4909      	ldr	r1, [pc, #36]	@ (8003114 <experiment_task_singleton_ctor+0x34>)
 80030f0:	4809      	ldr	r0, [pc, #36]	@ (8003118 <experiment_task_singleton_ctor+0x38>)
 80030f2:	f007 f9c7 	bl	800a484 <circular_buffer_init>
	experiment_task_init_t init = {
 80030f6:	4b09      	ldr	r3, [pc, #36]	@ (800311c <experiment_task_singleton_ctor+0x3c>)
 80030f8:	463c      	mov	r4, r7
 80030fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.init_state = experiment_task_state_manual_handler,
			.current_evt = &experiment_task_current_event,
			.event_buffer = &experiment_task_event_queue,
			.sub_state = NO_SUBSTATE
	};
	experiment_task_ctor(&experiment_task_inst,&init);
 8003100:	463b      	mov	r3, r7
 8003102:	4619      	mov	r1, r3
 8003104:	4806      	ldr	r0, [pc, #24]	@ (8003120 <experiment_task_singleton_ctor+0x40>)
 8003106:	f7ff ffb5 	bl	8003074 <experiment_task_ctor>
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	200045e4 	.word	0x200045e4
 8003118:	20004608 	.word	0x20004608
 800311c:	08010d14 	.word	0x08010d14
 8003120:	20004578 	.word	0x20004578

08003124 <experiment_task_start>:
void experiment_task_start(uint8_t priority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	SST_Task_start(&experiment_task_inst.super,priority);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	4619      	mov	r1, r3
 8003132:	4803      	ldr	r0, [pc, #12]	@ (8003140 <experiment_task_start+0x1c>)
 8003134:	f007 fca0 	bl	800aa78 <SST_Task_start>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20004578 	.word	0x20004578

08003144 <experiment_task_state_manual_handler>:

//only handle command from shell
static state_t experiment_task_state_manual_handler(experiment_task_t * const me, experiment_evt_t const * const e)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	switch (e->super.sig)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	2b10      	cmp	r3, #16
 8003154:	d01c      	beq.n	8003190 <experiment_task_state_manual_handler+0x4c>
 8003156:	2b10      	cmp	r3, #16
 8003158:	dc28      	bgt.n	80031ac <experiment_task_state_manual_handler+0x68>
 800315a:	2b01      	cmp	r3, #1
 800315c:	d002      	beq.n	8003164 <experiment_task_state_manual_handler+0x20>
 800315e:	2b0f      	cmp	r3, #15
 8003160:	d011      	beq.n	8003186 <experiment_task_state_manual_handler+0x42>
 8003162:	e023      	b.n	80031ac <experiment_task_state_manual_handler+0x68>
	{
		case SIG_ENTRY:
		{
			DBG(DBG_LEVEL_INFO,"entry experiment_task_state_manual_handler\r\n");
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <experiment_task_state_manual_handler+0x74>)
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	235a      	movs	r3, #90	@ 0x5a
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <experiment_task_state_manual_handler+0x78>)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4913      	ldr	r1, [pc, #76]	@ (80031c0 <experiment_task_state_manual_handler+0x7c>)
 8003172:	4814      	ldr	r0, [pc, #80]	@ (80031c4 <experiment_task_state_manual_handler+0x80>)
 8003174:	f007 f914 	bl	800a3a0 <uart_stdio_printf>
			SST_TimeEvt_disarm(&me->timeout_timer); //disable the timeout
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3318      	adds	r3, #24
 800317c:	4618      	mov	r0, r3
 800317e:	f007 fcfb 	bl	800ab78 <SST_TimeEvt_disarm>
			return HANDLED_STATUS;
 8003182:	2301      	movs	r3, #1
 8003184:	e013      	b.n	80031ae <experiment_task_state_manual_handler+0x6a>
		}

		case EVT_EXPERIMENT_START_MEASURE:
			{

				me->state = experiment_task_state_data_aqui_handler;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0f      	ldr	r2, [pc, #60]	@ (80031c8 <experiment_task_state_manual_handler+0x84>)
 800318a:	615a      	str	r2, [r3, #20]
				return TRAN_STATUS;
 800318c:	2300      	movs	r3, #0
 800318e:	e00e      	b.n	80031ae <experiment_task_state_manual_handler+0x6a>
			}
		case EVT_EXPERIMENT_START_SENDING:
			{
				memcpy((void *)&me->data_profile, e->payload, sizeof(data_profile_t));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	3302      	adds	r3, #2
 800319a:	220c      	movs	r2, #12
 800319c:	4619      	mov	r1, r3
 800319e:	f00b fe54 	bl	800ee4a <memcpy>

				me->state = experiment_task_state_data_send_handler;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <experiment_task_state_manual_handler+0x88>)
 80031a6:	615a      	str	r2, [r3, #20]
				return TRAN_STATUS;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <experiment_task_state_manual_handler+0x6a>
			}
			default:
				return IGNORED_STATUS;
 80031ac:	2302      	movs	r3, #2
		}
	}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	08010cc0 	.word	0x08010cc0
 80031bc:	08010cc8 	.word	0x08010cc8
 80031c0:	08010d24 	.word	0x08010d24
 80031c4:	20004678 	.word	0x20004678
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	080033fd 	.word	0x080033fd

080031d0 <experiment_task_state_data_aqui_handler>:



static state_t experiment_task_state_data_aqui_handler(experiment_task_t * const me, experiment_evt_t const * const e)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b090      	sub	sp, #64	@ 0x40
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	switch (e->super.sig)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	3b01      	subs	r3, #1
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	f200 80ef 	bhi.w	80033c4 <experiment_task_state_data_aqui_handler+0x1f4>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <experiment_task_state_data_aqui_handler+0x1c>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003239 	.word	0x08003239
 80031f0:	080033c5 	.word	0x080033c5
 80031f4:	080032ef 	.word	0x080032ef
 80031f8:	080033c5 	.word	0x080033c5
 80031fc:	080033c5 	.word	0x080033c5
 8003200:	080033c5 	.word	0x080033c5
 8003204:	080033c5 	.word	0x080033c5
 8003208:	080033c5 	.word	0x080033c5
 800320c:	080033c5 	.word	0x080033c5
 8003210:	080033c5 	.word	0x080033c5
 8003214:	080033c5 	.word	0x080033c5
 8003218:	080033c5 	.word	0x080033c5
 800321c:	080033c5 	.word	0x080033c5
 8003220:	080033b3 	.word	0x080033b3
 8003224:	080033c5 	.word	0x080033c5
 8003228:	080033c5 	.word	0x080033c5
 800322c:	08003311 	.word	0x08003311
 8003230:	08003345 	.word	0x08003345
 8003234:	08003379 	.word	0x08003379
	{
		case SIG_ENTRY:
		{
			DBG(DBG_LEVEL_INFO,"entry experiment_task_state_data_aqui_handler\r\n");
 8003238:	4b65      	ldr	r3, [pc, #404]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	2379      	movs	r3, #121	@ 0x79
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4b64      	ldr	r3, [pc, #400]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 8003242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003244:	4964      	ldr	r1, [pc, #400]	@ (80033d8 <experiment_task_state_data_aqui_handler+0x208>)
 8003246:	4865      	ldr	r0, [pc, #404]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 8003248:	f007 f8aa 	bl	800a3a0 <uart_stdio_printf>
			SST_TimeEvt_arm(&me->timeout_timer, EXPERIMENT_TASK_AQUI_TIMEOUT, 0);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3318      	adds	r3, #24
 8003250:	2200      	movs	r2, #0
 8003252:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003256:	4618      	mov	r0, r3
 8003258:	f007 fc78 	bl	800ab4c <SST_TimeEvt_arm>
	//      Switch the photodiode on
			experiment_task_photodiode_switchon(me, me->profile.pos);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f994 	bl	8003592 <experiment_task_photodiode_switchon>
			DBG(DBG_LEVEL_INFO,"switch on photo %d\r\n", me->photo_pos);
 800326a:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	237d      	movs	r3, #125	@ 0x7d
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4b56      	ldr	r3, [pc, #344]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	4958      	ldr	r1, [pc, #352]	@ (80033e0 <experiment_task_state_data_aqui_handler+0x210>)
 8003280:	4856      	ldr	r0, [pc, #344]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 8003282:	f007 f88d 	bl	800a3a0 <uart_stdio_printf>
	//		Switch the SPI to ADC supported mode
			experiment_task_photo_ADC_prepare_SPI(me);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9a5 	bl	80035d6 <experiment_task_photo_ADC_prepare_SPI>
			DBG(DBG_LEVEL_INFO,"switch on photo %d and change SPI mode to 0\r\n", me->photo_pos);
 800328c:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4b4d      	ldr	r3, [pc, #308]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	4950      	ldr	r1, [pc, #320]	@ (80033e4 <experiment_task_state_data_aqui_handler+0x214>)
 80032a2:	484e      	ldr	r0, [pc, #312]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 80032a4:	f007 f87c 	bl	800a3a0 <uart_stdio_printf>
	//		Prepare the timer for sampling
			bsp_photodiode_time_t init_photo_time;
			init_photo_time.pre_time = me->profile.pre_time ;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	60bb      	str	r3, [r7, #8]
			init_photo_time.sampling_time = me->profile.experiment_time ;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	60fb      	str	r3, [r7, #12]
			init_photo_time.post_time = me->profile.post_time ;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	613b      	str	r3, [r7, #16]
			init_photo_time.sampling_rate = me->profile.sampling_rate;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	617b      	str	r3, [r7, #20]
			init_photo_time.pos = me->profile.pos;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80032c6:	61bb      	str	r3, [r7, #24]
			bsp_laser_int_set_current(me->profile.laser_percent);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fca8 	bl	8005c24 <bsp_laser_int_set_current>
			bsp_photo_set_time(& init_photo_time);
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 fffd 	bl	80062d8 <bsp_photo_set_time>
			bsp_photodiode_sample_start();
 80032de:	f003 f99b 	bl	8006618 <bsp_photodiode_sample_start>
			me->sub_state = S_PRE_SAMPLING;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			return HANDLED_STATUS;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06b      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		case SIG_EXIT:
		{
			DBG(DBG_LEVEL_INFO,"exit experiment_task_state_data_aqui_handler\r\n");
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f2:	2390      	movs	r3, #144	@ 0x90
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4b37      	ldr	r3, [pc, #220]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 80032f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032fa:	493b      	ldr	r1, [pc, #236]	@ (80033e8 <experiment_task_state_data_aqui_handler+0x218>)
 80032fc:	4837      	ldr	r0, [pc, #220]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 80032fe:	f007 f84f 	bl	800a3a0 <uart_stdio_printf>
			SST_TimeEvt_disarm(&me->timeout_timer);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3318      	adds	r3, #24
 8003306:	4618      	mov	r0, r3
 8003308:	f007 fc36 	bl	800ab78 <SST_TimeEvt_disarm>
			return HANDLED_STATUS;
 800330c:	2301      	movs	r3, #1
 800330e:	e05a      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		case EVT_EXPERIMENT_FINISH_PRE_SAMPLING:
		{
			DBG(DBG_LEVEL_INFO,"EXPERIMENT_FINISH_PRE_SAMPLING\r\n");
 8003310:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003314:	2396      	movs	r3, #150	@ 0x96
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 800331a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800331c:	4933      	ldr	r1, [pc, #204]	@ (80033ec <experiment_task_state_data_aqui_handler+0x21c>)
 800331e:	482f      	ldr	r0, [pc, #188]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 8003320:	f007 f83e 	bl	800a3a0 <uart_stdio_printf>
			if (me->sub_state == S_PRE_SAMPLING)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <experiment_task_state_data_aqui_handler+0x168>
			{
				me->sub_state = S_DATA_SAMPLING;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003336:	e003      	b.n	8003340 <experiment_task_state_data_aqui_handler+0x170>
			}
			else me->sub_state = S_AQUI_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2203      	movs	r2, #3
 800333c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

			return HANDLED_STATUS;
 8003340:	2301      	movs	r3, #1
 8003342:	e040      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		case EVT_EXPERIMENT_FINISH_SAMPLING:
		{
			DBG(DBG_LEVEL_INFO,"EXPERIMENT_FINISH_SAMPLING\r\n");
 8003344:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
 8003348:	23a1      	movs	r3, #161	@ 0xa1
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 800334e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003350:	4927      	ldr	r1, [pc, #156]	@ (80033f0 <experiment_task_state_data_aqui_handler+0x220>)
 8003352:	4822      	ldr	r0, [pc, #136]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 8003354:	f007 f824 	bl	800a3a0 <uart_stdio_printf>
			if (me->sub_state == S_DATA_SAMPLING)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d104      	bne.n	800336c <experiment_task_state_data_aqui_handler+0x19c>
			{
				me->sub_state = S_POST_SAMPLING;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800336a:	e003      	b.n	8003374 <experiment_task_state_data_aqui_handler+0x1a4>
			}
			else me->sub_state = S_AQUI_ERROR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			return HANDLED_STATUS;
 8003374:	2301      	movs	r3, #1
 8003376:	e026      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		case EVT_EXPERIMENT_FINISH_POST_SAMPLING:
		{
			if (me->sub_state == S_POST_SAMPLING)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800337e:	2b02      	cmp	r3, #2
 8003380:	d104      	bne.n	800338c <experiment_task_state_data_aqui_handler+0x1bc>
			{
				me->sub_state = NO_SUBSTATE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2205      	movs	r2, #5
 8003386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800338a:	e003      	b.n	8003394 <experiment_task_state_data_aqui_handler+0x1c4>
			}
			else me->sub_state = S_AQUI_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2203      	movs	r2, #3
 8003390:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			DBG(DBG_LEVEL_INFO,"finished sampling\r\n");
 8003394:	4b0e      	ldr	r3, [pc, #56]	@ (80033d0 <experiment_task_state_data_aqui_handler+0x200>)
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	23b0      	movs	r3, #176	@ 0xb0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <experiment_task_state_data_aqui_handler+0x204>)
 800339e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033a0:	4914      	ldr	r1, [pc, #80]	@ (80033f4 <experiment_task_state_data_aqui_handler+0x224>)
 80033a2:	480e      	ldr	r0, [pc, #56]	@ (80033dc <experiment_task_state_data_aqui_handler+0x20c>)
 80033a4:	f006 fffc 	bl	800a3a0 <uart_stdio_printf>
			me->state = experiment_task_state_manual_handler;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a13      	ldr	r2, [pc, #76]	@ (80033f8 <experiment_task_state_data_aqui_handler+0x228>)
 80033ac:	615a      	str	r2, [r3, #20]
			return TRAN_STATUS;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e009      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		case EVT_EXPERIMENT_DATA_AQUISITION_TIMEOUT:
		{
			me->sub_state = S_AQUI_TIMEOUT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2204      	movs	r2, #4
 80033b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			me->state = experiment_task_state_manual_handler;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <experiment_task_state_data_aqui_handler+0x228>)
 80033be:	615a      	str	r2, [r3, #20]
			return TRAN_STATUS;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <experiment_task_state_data_aqui_handler+0x1f6>
		}
		default:
			return IGNORED_STATUS;
 80033c4:	2302      	movs	r3, #2
	}
 }
 80033c6:	4618      	mov	r0, r3
 80033c8:	3738      	adds	r7, #56	@ 0x38
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08010cc0 	.word	0x08010cc0
 80033d4:	08010cc8 	.word	0x08010cc8
 80033d8:	08010d5c 	.word	0x08010d5c
 80033dc:	20004678 	.word	0x20004678
 80033e0:	08010d98 	.word	0x08010d98
 80033e4:	08010db8 	.word	0x08010db8
 80033e8:	08010df0 	.word	0x08010df0
 80033ec:	08010e2c 	.word	0x08010e2c
 80033f0:	08010e58 	.word	0x08010e58
 80033f4:	08010e80 	.word	0x08010e80
 80033f8:	08003145 	.word	0x08003145

080033fc <experiment_task_state_data_send_handler>:
static state_t experiment_task_state_data_send_handler(experiment_task_t * const me, experiment_evt_t const * const e)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	return IGNORED_STATUS;
 8003406:	2302      	movs	r3, #2
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <experiment_task_laser_set_current>:


uint32_t experiment_task_laser_set_current(experiment_task_t * const me, uint32_t laser_id, uint32_t percent)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	if ((laser_id > 1) || (percent > 100)) return ERROR_NOT_SUPPORTED;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d802      	bhi.n	800342c <experiment_task_laser_set_current+0x18>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b64      	cmp	r3, #100	@ 0x64
 800342a:	d901      	bls.n	8003430 <experiment_task_laser_set_current+0x1c>
 800342c:	2306      	movs	r3, #6
 800342e:	e018      	b.n	8003462 <experiment_task_laser_set_current+0x4e>
	if(me->laser_spi_mode != 0)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <experiment_task_laser_set_current+0x34>
	{
		bsp_laser_set_spi_mode(SPI_MODE_0);
 800343a:	2000      	movs	r0, #0
 800343c:	f002 fb44 	bl	8005ac8 <bsp_laser_set_spi_mode>
		me->laser_spi_mode = 0;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}
	bsp_laser_set_current(laser_id, percent);
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f002 fc2a 	bl	8005ca4 <bsp_laser_set_current>
	me->laser_current[laser_id] = percent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4413      	add	r3, r2
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	460a      	mov	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
	return ERROR_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <experiment_task_laser_get_current>:

uint32_t experiment_task_laser_get_current(experiment_task_t * const me, uint32_t laser_id)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
	uint32_t index;
	if (laser_id > 0) index = 1; else index = 0;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <experiment_task_laser_get_current+0x16>
 800347a:	2301      	movs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e001      	b.n	8003484 <experiment_task_laser_get_current+0x1a>
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
	return me->laser_current[index];
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	334d      	adds	r3, #77	@ 0x4d
 800348c:	781b      	ldrb	r3, [r3, #0]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <experiment_task_int_laser_switchon>:
uint32_t experiment_task_int_laser_switchon(experiment_task_t * const me, uint32_t laser_id)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
	if (laser_id > INTERNAL_CHAIN_CHANNEL_NUM - 1) return ERROR_NOT_SUPPORTED;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b23      	cmp	r3, #35	@ 0x23
 80034a8:	d901      	bls.n	80034ae <experiment_task_int_laser_switchon+0x14>
 80034aa:	2306      	movs	r3, #6
 80034ac:	e014      	b.n	80034d8 <experiment_task_int_laser_switchon+0x3e>
	if(me->laser_spi_mode != 1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d006      	beq.n	80034c6 <experiment_task_int_laser_switchon+0x2c>
	{
		bsp_laser_set_spi_mode(SPI_MODE_1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f002 fb05 	bl	8005ac8 <bsp_laser_set_spi_mode>
		me->laser_spi_mode = 1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}
	bsp_laser_int_switch_on(laser_id);
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f002 fb78 	bl	8005bbc <bsp_laser_int_switch_on>
	me->int_laser_pos = laser_id;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	return ERROR_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <experiment_task_int_laser_switchoff>:
uint32_t experiment_task_int_laser_switchoff(experiment_task_t * const me)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	if(me->laser_spi_mode != 1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d006      	beq.n	8003500 <experiment_task_int_laser_switchoff+0x20>
	{
		bsp_laser_set_spi_mode(SPI_MODE_1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f002 fae8 	bl	8005ac8 <bsp_laser_set_spi_mode>
		me->laser_spi_mode = 1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}
	bsp_laser_int_switch_off_all();
 8003500:	f002 fb6c 	bl	8005bdc <bsp_laser_int_switch_off_all>
	me->int_laser_pos = 0xFF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	22ff      	movs	r2, #255	@ 0xff
 8003508:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	return ERROR_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <experiment_task_ext_laser_switchon>:
uint32_t experiment_task_ext_laser_switchon(experiment_task_t * const me, uint32_t laser_id)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
	if (laser_id > EXTERNAL_CHAIN_CHANNEL_NUM - 1) return ERROR_NOT_SUPPORTED;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b07      	cmp	r3, #7
 8003524:	d901      	bls.n	800352a <experiment_task_ext_laser_switchon+0x14>
 8003526:	2306      	movs	r3, #6
 8003528:	e014      	b.n	8003554 <experiment_task_ext_laser_switchon+0x3e>
	if(me->laser_spi_mode != 1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003530:	2b01      	cmp	r3, #1
 8003532:	d006      	beq.n	8003542 <experiment_task_ext_laser_switchon+0x2c>
	{
		bsp_laser_set_spi_mode(SPI_MODE_1);
 8003534:	2001      	movs	r0, #1
 8003536:	f002 fac7 	bl	8005ac8 <bsp_laser_set_spi_mode>
		me->laser_spi_mode = 1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}
	bsp_laser_ext_switch_on(laser_id);
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	f002 fb54 	bl	8005bf0 <bsp_laser_ext_switch_on>
	me->ext_laser_pos = laser_id;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	return ERROR_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <experiment_task_ext_laser_switchoff>:
uint32_t experiment_task_ext_laser_switchoff(experiment_task_t * const me)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	if(me->laser_spi_mode != 1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800356a:	2b01      	cmp	r3, #1
 800356c:	d006      	beq.n	800357c <experiment_task_ext_laser_switchoff+0x20>
	{
		bsp_laser_set_spi_mode(SPI_MODE_1);
 800356e:	2001      	movs	r0, #1
 8003570:	f002 faaa 	bl	8005ac8 <bsp_laser_set_spi_mode>
		me->laser_spi_mode = 1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}
	bsp_laser_ext_switch_off_all();
 800357c:	f002 fb48 	bl	8005c10 <bsp_laser_ext_switch_off_all>
	me->ext_laser_pos = 0xFF;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	22ff      	movs	r2, #255	@ 0xff
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	return ERROR_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <experiment_task_photodiode_switchon>:

uint32_t experiment_task_photodiode_switchon(experiment_task_t * const me, uint32_t photo_id)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
	if (photo_id > INTERNAL_CHAIN_CHANNEL_NUM - 1) return ERROR_NOT_SUPPORTED;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b23      	cmp	r3, #35	@ 0x23
 80035a0:	d901      	bls.n	80035a6 <experiment_task_photodiode_switchon+0x14>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e013      	b.n	80035ce <experiment_task_photodiode_switchon+0x3c>
	if(me->photo_spi_mode != 1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d005      	beq.n	80035bc <experiment_task_photodiode_switchon+0x2a>
	{
		bsp_photodiode_sw_spi_change_mode();
 80035b0:	f002 ff70 	bl	8006494 <bsp_photodiode_sw_spi_change_mode>
		me->photo_spi_mode = 1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	}
	bsp_photo_switch_on(photo_id);
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f002 ff95 	bl	80064ec <bsp_photo_switch_on>
	me->photo_pos = photo_id;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	return ERROR_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <experiment_task_photo_ADC_prepare_SPI>:
	me->photo_pos = 0xFF; //photo is OFF
	return ERROR_OK;
}

uint32_t experiment_task_photo_ADC_prepare_SPI(experiment_task_t * const me)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	if(me->photo_spi_mode != 0)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <experiment_task_photo_ADC_prepare_SPI+0x1e>
	{
		bsp_photodiode_adc_spi_change_mode();
 80035e8:	f002 ff6a 	bl	80064c0 <bsp_photodiode_adc_spi_change_mode>
		me->photo_spi_mode = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	}
	return ERROR_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <experiment_task_set_profile>:

uint32_t experiment_task_set_profile(experiment_task_t * me,experiment_profile_t * profile)
{
 80035fe:	b4b0      	push	{r4, r5, r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
	if ((profile->sampling_rate == 0 ) || (profile->sampling_rate > 1000)) return ERROR_NOT_SUPPORTED;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <experiment_task_set_profile+0x1c>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003618:	d901      	bls.n	800361e <experiment_task_set_profile+0x20>
 800361a:	2306      	movs	r3, #6
 800361c:	e028      	b.n	8003670 <experiment_task_set_profile+0x72>
	if ((profile->pos == 0 ) || (profile->pos > 36)) return ERROR_NOT_SUPPORTED;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	789b      	ldrb	r3, [r3, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <experiment_task_set_profile+0x30>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	789b      	ldrb	r3, [r3, #2]
 800362a:	2b24      	cmp	r3, #36	@ 0x24
 800362c:	d901      	bls.n	8003632 <experiment_task_set_profile+0x34>
 800362e:	2306      	movs	r3, #6
 8003630:	e01e      	b.n	8003670 <experiment_task_set_profile+0x72>
	if ((profile->laser_percent > 100 ) ) return ERROR_NOT_SUPPORTED;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	78db      	ldrb	r3, [r3, #3]
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <experiment_task_set_profile+0x40>
 800363a:	2306      	movs	r3, #6
 800363c:	e018      	b.n	8003670 <experiment_task_set_profile+0x72>
	if (profile->num_sample > 2048) return ERROR_NOT_SUPPORTED;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003646:	d901      	bls.n	800364c <experiment_task_set_profile+0x4e>
 8003648:	2306      	movs	r3, #6
 800364a:	e011      	b.n	8003670 <experiment_task_set_profile+0x72>
	if (profile->period == 0) return ERROR_NOT_SUPPORTED;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <experiment_task_set_profile+0x5a>
 8003654:	2306      	movs	r3, #6
 8003656:	e00b      	b.n	8003670 <experiment_task_set_profile+0x72>
	me->profile = *profile;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003660:	4615      	mov	r5, r2
 8003662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003666:	e895 0003 	ldmia.w	r5, {r0, r1}
 800366a:	e884 0003 	stmia.w	r4, {r0, r1}
	return ERROR_OK;
 800366e:	2300      	movs	r3, #0

}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bcb0      	pop	{r4, r5, r7}
 8003678:	4770      	bx	lr

0800367a <experiment_task_get_profile>:
void experiment_task_get_profile(experiment_task_t * me, experiment_profile_t * profile)
{
 800367a:	b4b0      	push	{r4, r5, r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
	*profile = me->profile;
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4615      	mov	r5, r2
 800368a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800368e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003696:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bcb0      	pop	{r4, r5, r7}
 80036a2:	4770      	bx	lr

080036a4 <experiment_start_measuring>:
uint32_t experiment_start_measuring(experiment_task_t * const me)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	experiment_profile_t * profile = &me->profile;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3328      	adds	r3, #40	@ 0x28
 80036b0:	60fb      	str	r3, [r7, #12]
	if ((profile->sampling_rate ==0 ) || (profile->sampling_rate > 1000)) return ERROR_NOT_SUPPORTED;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <experiment_start_measuring+0x20>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c2:	d901      	bls.n	80036c8 <experiment_start_measuring+0x24>
 80036c4:	2306      	movs	r3, #6
 80036c6:	e01c      	b.n	8003702 <experiment_start_measuring+0x5e>
	if ((profile->pos ==0 ) || (profile->pos > 36)) return ERROR_NOT_SUPPORTED;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	789b      	ldrb	r3, [r3, #2]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <experiment_start_measuring+0x34>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	789b      	ldrb	r3, [r3, #2]
 80036d4:	2b24      	cmp	r3, #36	@ 0x24
 80036d6:	d901      	bls.n	80036dc <experiment_start_measuring+0x38>
 80036d8:	2306      	movs	r3, #6
 80036da:	e012      	b.n	8003702 <experiment_start_measuring+0x5e>
	if ((profile->laser_percent > 100 ) ) return ERROR_NOT_SUPPORTED;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	2b64      	cmp	r3, #100	@ 0x64
 80036e2:	d901      	bls.n	80036e8 <experiment_start_measuring+0x44>
 80036e4:	2306      	movs	r3, #6
 80036e6:	e00c      	b.n	8003702 <experiment_start_measuring+0x5e>
	if (profile->num_sample > 2048) return ERROR_NOT_SUPPORTED;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f0:	d901      	bls.n	80036f6 <experiment_start_measuring+0x52>
 80036f2:	2306      	movs	r3, #6
 80036f4:	e005      	b.n	8003702 <experiment_start_measuring+0x5e>
	//if (((profile->pre_time + profile->experiment_time + profile->post_time ) * profile->sampling_rate) > 2048*1000000) return ERROR_NOT_SUPPORTED;
	SST_Task_post(&me->super, (SST_Evt *)&start_measuring_evt);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4904      	ldr	r1, [pc, #16]	@ (800370c <experiment_start_measuring+0x68>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f007 f9e6 	bl	800aacc <SST_Task_post>
	return ERROR_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	08012354 	.word	0x08012354

08003710 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
}
 8003718:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <__NVIC_SystemReset+0x24>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003722:	4904      	ldr	r1, [pc, #16]	@ (8003734 <__NVIC_SystemReset+0x24>)
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__NVIC_SystemReset+0x28>)
 8003726:	4313      	orrs	r3, r2
 8003728:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800372a:	f3bf 8f4f 	dsb	sy
}
 800372e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <__NVIC_SystemReset+0x20>
 8003734:	e000ed00 	.word	0xe000ed00
 8003738:	05fa0004 	.word	0x05fa0004

0800373c <CMD_Clear_CLI>:
 *             Command List Function             *
 *************************************************/



static void CMD_Clear_CLI(EmbeddedCli *cli, char *args, void *context) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4a07      	ldr	r2, [pc, #28]	@ (800376c <CMD_Clear_CLI+0x30>)
 800374e:	210a      	movs	r1, #10
 8003750:	4618      	mov	r0, r3
 8003752:	f00b f967 	bl	800ea24 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f005 f9d9 	bl	8008b14 <embeddedCliPrint>
}
 8003762:	bf00      	nop
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	0801165c 	.word	0x0801165c

08003770 <CMD_Reset>:

static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 800377c:	f7ff ffc8 	bl	8003710 <__NVIC_SystemReset>

08003780 <CMD_NTC_Get_Temp>:
    embeddedCliPrint(cli, "");
}

static void CMD_NTC_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
    // TODO: Implement NTC temperature get logic
	uint32_t channel = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
	int16_t temp = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	82fb      	strh	r3, [r7, #22]
	uint8_t tokenCount = embeddedCliGetTokenCount(args);
 8003794:	68b8      	ldr	r0, [r7, #8]
 8003796:	f005 fab5 	bl	8008d04 <embeddedCliGetTokenCount>
 800379a:	4603      	mov	r3, r0
 800379c:	757b      	strb	r3, [r7, #21]
		if (tokenCount != 1)
 800379e:	7d7b      	ldrb	r3, [r7, #21]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d004      	beq.n	80037ae <CMD_NTC_Get_Temp+0x2e>
		{
			cli_printf(cli, "command require one argument\r\n");
 80037a4:	4924      	ldr	r1, [pc, #144]	@ (8003838 <CMD_NTC_Get_Temp+0xb8>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f006 fc32 	bl	800a010 <cli_printf>
			return;
 80037ac:	e040      	b.n	8003830 <CMD_NTC_Get_Temp+0xb0>
		}
	const char *arg1 = embeddedCliGetToken(args, 1);
 80037ae:	2101      	movs	r1, #1
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f005 fa71 	bl	8008c98 <embeddedCliGetToken>
 80037b6:	6138      	str	r0, [r7, #16]
	if (*arg1 == 'a') {
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b61      	cmp	r3, #97	@ 0x61
 80037be:	d116      	bne.n	80037ee <CMD_NTC_Get_Temp+0x6e>

		for (uint8_t channel = 0; channel < 8; channel++) {
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e00f      	b.n	80037e6 <CMD_NTC_Get_Temp+0x66>
			temp = temperature_monitor_get_ntc_temperature(channel);
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 f859 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 80037ce:	4603      	mov	r3, r0
 80037d0:	82fb      	strh	r3, [r7, #22]

			cli_printf(cli, "ntc[%d] = %d\r\n",channel,temp);
 80037d2:	7ffa      	ldrb	r2, [r7, #31]
 80037d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037d8:	4918      	ldr	r1, [pc, #96]	@ (800383c <CMD_NTC_Get_Temp+0xbc>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f006 fc18 	bl	800a010 <cli_printf>
		for (uint8_t channel = 0; channel < 8; channel++) {
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	3301      	adds	r3, #1
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b07      	cmp	r3, #7
 80037ea:	d9ec      	bls.n	80037c6 <CMD_NTC_Get_Temp+0x46>
 80037ec:	e020      	b.n	8003830 <CMD_NTC_Get_Temp+0xb0>
		}
	}
	else if ((*arg1 >= '0') &&(*arg1 <=  '7')) {
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80037f4:	d918      	bls.n	8003828 <CMD_NTC_Get_Temp+0xa8>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b37      	cmp	r3, #55	@ 0x37
 80037fc:	d814      	bhi.n	8003828 <CMD_NTC_Get_Temp+0xa8>
		channel = atoi(arg1);
 80037fe:	6938      	ldr	r0, [r7, #16]
 8003800:	f00a fb36 	bl	800de70 <atoi>
 8003804:	4603      	mov	r3, r0
 8003806:	61bb      	str	r3, [r7, #24]
		temp = temperature_monitor_get_ntc_temperature(channel);
 8003808:	69b8      	ldr	r0, [r7, #24]
 800380a:	f002 f839 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 800380e:	4603      	mov	r3, r0
 8003810:	82fb      	strh	r3, [r7, #22]
		NTC_get_temperature(NTC_Temperature);
 8003812:	480b      	ldr	r0, [pc, #44]	@ (8003840 <CMD_NTC_Get_Temp+0xc0>)
 8003814:	f004 ffb6 	bl	8008784 <NTC_get_temperature>
		cli_printf(cli, "ntc[%d] = %d\r\n",channel,temp);
 8003818:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4907      	ldr	r1, [pc, #28]	@ (800383c <CMD_NTC_Get_Temp+0xbc>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f006 fbf5 	bl	800a010 <cli_printf>
 8003826:	e003      	b.n	8003830 <CMD_NTC_Get_Temp+0xb0>
	}
	else cli_printf(cli, "Wrong arguments\r\n");
 8003828:	4906      	ldr	r1, [pc, #24]	@ (8003844 <CMD_NTC_Get_Temp+0xc4>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f006 fbf0 	bl	800a010 <cli_printf>

}
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	08011664 	.word	0x08011664
 800383c:	08011684 	.word	0x08011684
 8003840:	2000e174 	.word	0x2000e174
 8003844:	08011694 	.word	0x08011694

08003848 <CMD_PWR_5V_Set>:

static void CMD_PWR_5V_Set(EmbeddedCli *cli, char *args, void *context) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f005 fa55 	bl	8008d04 <embeddedCliGetTokenCount>
 800385a:	4603      	mov	r3, r0
 800385c:	61fb      	str	r3, [r7, #28]
	if (tokenCount != 1)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d004      	beq.n	800386e <CMD_PWR_5V_Set+0x26>
	{
		cli_printf(cli, "command require one argument\r\n");
 8003864:	4915      	ldr	r1, [pc, #84]	@ (80038bc <CMD_PWR_5V_Set+0x74>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f006 fbd2 	bl	800a010 <cli_printf>
		return;
 800386c:	e023      	b.n	80038b6 <CMD_PWR_5V_Set+0x6e>
	}
	if (!temperature_control_is_in_man_state(ptemperature_control_task))
 800386e:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <CMD_PWR_5V_Set+0x78>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fd9a 	bl	80053ac <temperature_control_is_in_man_state>
 8003878:	4603      	mov	r3, r0
 800387a:	f083 0301 	eor.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <CMD_PWR_5V_Set+0x46>
	{
		cli_printf(cli, "System is in auto mode, change to manual mode before controlling power\r\n");
 8003884:	490f      	ldr	r1, [pc, #60]	@ (80038c4 <CMD_PWR_5V_Set+0x7c>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f006 fbc2 	bl	800a010 <cli_printf>
		return;
 800388c:	e013      	b.n	80038b6 <CMD_PWR_5V_Set+0x6e>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 800388e:	2101      	movs	r1, #1
 8003890:	68b8      	ldr	r0, [r7, #8]
 8003892:	f005 fa01 	bl	8008c98 <embeddedCliGetToken>
 8003896:	61b8      	str	r0, [r7, #24]
	uint32_t status = atoi(arg1);
 8003898:	69b8      	ldr	r0, [r7, #24]
 800389a:	f00a fae9 	bl	800de70 <atoi>
 800389e:	4603      	mov	r3, r0
 80038a0:	617b      	str	r3, [r7, #20]

	temperature_control_power_control(ptemperature_control_task , status);
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <CMD_PWR_5V_Set+0x78>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6979      	ldr	r1, [r7, #20]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 ff34 	bl	8005716 <temperature_control_power_control>


	cli_printf(cli,"OK\r\n");
 80038ae:	4906      	ldr	r1, [pc, #24]	@ (80038c8 <CMD_PWR_5V_Set+0x80>)
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f006 fbad 	bl	800a010 <cli_printf>
}
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	08011664 	.word	0x08011664
 80038c0:	20000004 	.word	0x20000004
 80038c4:	080116a8 	.word	0x080116a8
 80038c8:	080116f4 	.word	0x080116f4

080038cc <CMD_PWR_5V_Get>:

static void CMD_PWR_5V_Get(EmbeddedCli *cli, char *args, void *context) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	if (temperature_control_is_powered_on(ptemperature_control_task)) {
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <CMD_PWR_5V_Get+0x38>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 ff33 	bl	8005748 <temperature_control_is_powered_on>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <CMD_PWR_5V_Get+0x26>
		cli_printf(cli,"Powered on\r\n");
 80038e8:	4907      	ldr	r1, [pc, #28]	@ (8003908 <CMD_PWR_5V_Get+0x3c>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f006 fb90 	bl	800a010 <cli_printf>
	}
	else {
		cli_printf(cli,"Powered off\r\n");
	}
}
 80038f0:	e003      	b.n	80038fa <CMD_PWR_5V_Get+0x2e>
		cli_printf(cli,"Powered off\r\n");
 80038f2:	4906      	ldr	r1, [pc, #24]	@ (800390c <CMD_PWR_5V_Get+0x40>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f006 fb8b 	bl	800a010 <cli_printf>
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000004 	.word	0x20000004
 8003908:	080116fc 	.word	0x080116fc
 800390c:	0801170c 	.word	0x0801170c

08003910 <CMD_TEC_Init>:

static void CMD_TEC_Init(EmbeddedCli *cli, char *args, void *context) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC initialization logic
	uint32_t channel;
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 800391c:	68b8      	ldr	r0, [r7, #8]
 800391e:	f005 f9f1 	bl	8008d04 <embeddedCliGetTokenCount>
 8003922:	4603      	mov	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]
	if (tokenCount != 1)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d004      	beq.n	8003936 <CMD_TEC_Init+0x26>
	{
		cli_printf(cli, "command require one argument\r\n");
 800392c:	4938      	ldr	r1, [pc, #224]	@ (8003a10 <CMD_TEC_Init+0x100>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f006 fb6e 	bl	800a010 <cli_printf>
		return;
 8003934:	e069      	b.n	8003a0a <CMD_TEC_Init+0xfa>
	}
	if (!temperature_control_is_in_man_state(ptemperature_control_task))
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <CMD_TEC_Init+0x104>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fd36 	bl	80053ac <temperature_control_is_in_man_state>
 8003940:	4603      	mov	r3, r0
 8003942:	f083 0301 	eor.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <CMD_TEC_Init+0x46>
	{
		cli_printf(cli, "can not init TEC manually in AUTO mode, please change to MANUAL mode\r\n");
 800394c:	4932      	ldr	r1, [pc, #200]	@ (8003a18 <CMD_TEC_Init+0x108>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f006 fb5e 	bl	800a010 <cli_printf>
		return;
 8003954:	e059      	b.n	8003a0a <CMD_TEC_Init+0xfa>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003956:	2101      	movs	r1, #1
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f005 f99d 	bl	8008c98 <embeddedCliGetToken>
 800395e:	6178      	str	r0, [r7, #20]

	uint32_t result = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]

	if (*arg1 == 'a' ) {
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b61      	cmp	r3, #97	@ 0x61
 800396a:	d125      	bne.n	80039b8 <CMD_TEC_Init+0xa8>
		/* Init TEC 0 -> 3 */
		for (channel = 0; channel < 4; channel++) {
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	e01e      	b.n	80039b0 <CMD_TEC_Init+0xa0>
			result = temperature_control_tec_init(ptemperature_control_task, channel);
 8003972:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <CMD_TEC_Init+0x104>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fcd2 	bl	8005322 <temperature_control_tec_init>
 800397e:	6138      	str	r0, [r7, #16]
			// if init is success
			if (!result) {
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <CMD_TEC_Init+0x90>
				temperature_control_tec_enable_output(ptemperature_control_task,channel,0); //disable output
 8003986:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <CMD_TEC_Init+0x104>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	69f9      	ldr	r1, [r7, #28]
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fce7 	bl	8005362 <temperature_control_tec_enable_output>
				cli_printf(cli, "tec[%d] inited\r\n",channel);
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	4921      	ldr	r1, [pc, #132]	@ (8003a1c <CMD_TEC_Init+0x10c>)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f006 fb39 	bl	800a010 <cli_printf>
 800399e:	e004      	b.n	80039aa <CMD_TEC_Init+0x9a>
			}
			else
				cli_printf(cli, "tec[%d] init failed\r\n",channel);
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	491f      	ldr	r1, [pc, #124]	@ (8003a20 <CMD_TEC_Init+0x110>)
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f006 fb33 	bl	800a010 <cli_printf>
		for (channel = 0; channel < 4; channel++) {
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d9dd      	bls.n	8003972 <CMD_TEC_Init+0x62>
 80039b6:	e028      	b.n	8003a0a <CMD_TEC_Init+0xfa>
		}
	}
	else if ((*arg1 >= '0') && (*arg1 <= '3')) {
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80039be:	d924      	bls.n	8003a0a <CMD_TEC_Init+0xfa>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b33      	cmp	r3, #51	@ 0x33
 80039c6:	d820      	bhi.n	8003a0a <CMD_TEC_Init+0xfa>
		channel = atoi(arg1);
 80039c8:	6978      	ldr	r0, [r7, #20]
 80039ca:	f00a fa51 	bl	800de70 <atoi>
 80039ce:	4603      	mov	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
		result = temperature_control_tec_init(ptemperature_control_task, channel);
 80039d2:	4b10      	ldr	r3, [pc, #64]	@ (8003a14 <CMD_TEC_Init+0x104>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fca2 	bl	8005322 <temperature_control_tec_init>
 80039de:	6138      	str	r0, [r7, #16]
		if (!result) {
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <CMD_TEC_Init+0xf0>
			temperature_control_tec_enable_output(ptemperature_control_task,channel,0); //disable output
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <CMD_TEC_Init+0x104>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fcb7 	bl	8005362 <temperature_control_tec_enable_output>
			cli_printf(cli, "tec[%d] inited\r\n",channel);
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	4909      	ldr	r1, [pc, #36]	@ (8003a1c <CMD_TEC_Init+0x10c>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f006 fb09 	bl	800a010 <cli_printf>
 80039fe:	e004      	b.n	8003a0a <CMD_TEC_Init+0xfa>
		}
		else
			cli_printf(cli, "tec[%d] init failed\r\n",channel);
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <CMD_TEC_Init+0x110>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f006 fb03 	bl	800a010 <cli_printf>

	}

}
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	08011664 	.word	0x08011664
 8003a14:	20000004 	.word	0x20000004
 8003a18:	0801171c 	.word	0x0801171c
 8003a1c:	08011764 	.word	0x08011764
 8003a20:	08011778 	.word	0x08011778

08003a24 <CMD_TEC_Set_Profile_Volt>:

static void CMD_TEC_Set_Profile_Volt(EmbeddedCli *cli, char *args, void *context) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage set logic
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f005 f967 	bl	8008d04 <embeddedCliGetTokenCount>
 8003a36:	4603      	mov	r3, r0
 8003a38:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d004      	beq.n	8003a4a <CMD_TEC_Set_Profile_Volt+0x26>
	{
		cli_printf(cli, "require 1 voltage value for 4 tecs\r\n");
 8003a40:	4915      	ldr	r1, [pc, #84]	@ (8003a98 <CMD_TEC_Set_Profile_Volt+0x74>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f006 fae4 	bl	800a010 <cli_printf>
		return;
 8003a48:	e022      	b.n	8003a90 <CMD_TEC_Set_Profile_Volt+0x6c>
	}

	const char *arg1 = embeddedCliGetToken(args, 1);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	68b8      	ldr	r0, [r7, #8]
 8003a4e:	f005 f923 	bl	8008c98 <embeddedCliGetToken>
 8003a52:	61b8      	str	r0, [r7, #24]
	uint16_t volt;
	volt = atoi(arg1);
 8003a54:	69b8      	ldr	r0, [r7, #24]
 8003a56:	f00a fa0b 	bl	800de70 <atoi>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	82fb      	strh	r3, [r7, #22]


		if ((volt < 500) || (volt > 3000))
 8003a5e:	8afb      	ldrh	r3, [r7, #22]
 8003a60:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a64:	d304      	bcc.n	8003a70 <CMD_TEC_Set_Profile_Volt+0x4c>
 8003a66:	8afb      	ldrh	r3, [r7, #22]
 8003a68:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d904      	bls.n	8003a7a <CMD_TEC_Set_Profile_Volt+0x56>
		{
			cli_printf(cli, "tec[%d] voltage is out of range (500mV-3000mV)\r\n");
 8003a70:	490a      	ldr	r1, [pc, #40]	@ (8003a9c <CMD_TEC_Set_Profile_Volt+0x78>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f006 facc 	bl	800a010 <cli_printf>
			return;
 8003a78:	e00a      	b.n	8003a90 <CMD_TEC_Set_Profile_Volt+0x6c>
		}

	temperature_control_profile_tec_voltage_set(ptemperature_control_task,volt);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <CMD_TEC_Set_Profile_Volt+0x7c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	8afa      	ldrh	r2, [r7, #22]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fcf7 	bl	8005476 <temperature_control_profile_tec_voltage_set>
	cli_printf(cli, "OK \r\n");
 8003a88:	4906      	ldr	r1, [pc, #24]	@ (8003aa4 <CMD_TEC_Set_Profile_Volt+0x80>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f006 fac0 	bl	800a010 <cli_printf>
}
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	08011790 	.word	0x08011790
 8003a9c:	080117b8 	.word	0x080117b8
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	080117ec 	.word	0x080117ec

08003aa8 <CMD_TEC_Get_Profile_Volt>:

static void CMD_TEC_Get_Profile_Volt(EmbeddedCli *cli, char *args, void *context) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage get logic


	uint16_t tec_volt;
	tec_volt = temperature_control_profile_tec_voltage_get(ptemperature_control_task);
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <CMD_TEC_Get_Profile_Volt+0x30>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fb22 	bl	8005102 <temperature_control_profile_tec_voltage_get>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	82fb      	strh	r3, [r7, #22]
	cli_printf(cli, "profile setpoint of TEC = %d mV",tec_volt);
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4905      	ldr	r1, [pc, #20]	@ (8003adc <CMD_TEC_Get_Profile_Volt+0x34>)
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f006 faa1 	bl	800a010 <cli_printf>
	return;
 8003ace:	bf00      	nop

}
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000004 	.word	0x20000004
 8003adc:	080117f4 	.word	0x080117f4

08003ae0 <CMD_TEC_Profile_Register>:
static void CMD_TEC_Profile_Register(EmbeddedCli *cli, char *args, void *context)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
	uint8_t tec_ena[4];
	uint32_t i;
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003aec:	68b8      	ldr	r0, [r7, #8]
 8003aee:	f005 f909 	bl	8008d04 <embeddedCliGetTokenCount>
 8003af2:	4603      	mov	r3, r0
 8003af4:	61bb      	str	r3, [r7, #24]
	if (tokenCount != 4)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d004      	beq.n	8003b06 <CMD_TEC_Profile_Register+0x26>
	{
		cli_printf(cli, "require 4 value for 4 tecs (0/1)\r\n");
 8003afc:	4924      	ldr	r1, [pc, #144]	@ (8003b90 <CMD_TEC_Profile_Register+0xb0>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f006 fa86 	bl	800a010 <cli_printf>
		return;
 8003b04:	e041      	b.n	8003b8a <CMD_TEC_Profile_Register+0xaa>
	}
	for (i=0;i<4;i++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e03b      	b.n	8003b84 <CMD_TEC_Profile_Register+0xa4>
	{
		tec_ena[i] = atoi( embeddedCliGetToken(args, i+1));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	68b8      	ldr	r0, [r7, #8]
 8003b18:	f005 f8be 	bl	8008c98 <embeddedCliGetToken>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f00a f9a6 	bl	800de70 <atoi>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b2d9      	uxtb	r1, r3
 8003b28:	f107 0214 	add.w	r2, r7, #20
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	460a      	mov	r2, r1
 8003b32:	701a      	strb	r2, [r3, #0]
		if (tec_ena[i] >  1) {
 8003b34:	f107 0214 	add.w	r2, r7, #20
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d905      	bls.n	8003b4e <CMD_TEC_Profile_Register+0x6e>
			cli_printf(cli, "argument %d need to be in range 0/1 \r\n",i);
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	4913      	ldr	r1, [pc, #76]	@ (8003b94 <CMD_TEC_Profile_Register+0xb4>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f006 fa62 	bl	800a010 <cli_printf>
			return;
 8003b4c:	e01d      	b.n	8003b8a <CMD_TEC_Profile_Register+0xaa>
		}
		if (tec_ena[i] == 0) temperature_control_profile_tec_unregister(ptemperature_control_task,i);
 8003b4e:	f107 0214 	add.w	r2, r7, #20
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <CMD_TEC_Profile_Register+0x8e>
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <CMD_TEC_Profile_Register+0xb8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fc55 	bl	8005416 <temperature_control_profile_tec_unregister>
 8003b6c:	e007      	b.n	8003b7e <CMD_TEC_Profile_Register+0x9e>
		else temperature_control_profile_tec_register(ptemperature_control_task, i);
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <CMD_TEC_Profile_Register+0xb8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fc2b 	bl	80053d4 <temperature_control_profile_tec_register>
	for (i=0;i<4;i++)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3301      	adds	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d9c0      	bls.n	8003b0c <CMD_TEC_Profile_Register+0x2c>
	}
}
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	08011814 	.word	0x08011814
 8003b94:	08011838 	.word	0x08011838
 8003b98:	20000004 	.word	0x20000004

08003b9c <CMD_TEC_Profile_Get>:

static void CMD_TEC_Profile_Get(EmbeddedCli *cli, char *args, void *context)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	uint8_t tec_profile = temperature_control_profile_tec_get(ptemperature_control_task);
 8003ba8:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <CMD_TEC_Profile_Get+0x64>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fc55 	bl	800545c <temperature_control_profile_tec_get>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]
	for (uint32_t i=0;i<4;i++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e015      	b.n	8003be8 <CMD_TEC_Profile_Get+0x4c>
	{
		if (tec_profile & (1<<i)) cli_printf(cli, "tec[%d] registered ",i);
 8003bbc:	7cfa      	ldrb	r2, [r7, #19]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa42 f303 	asr.w	r3, r2, r3
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <CMD_TEC_Profile_Get+0x3c>
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	490d      	ldr	r1, [pc, #52]	@ (8003c04 <CMD_TEC_Profile_Get+0x68>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f006 fa1d 	bl	800a010 <cli_printf>
 8003bd6:	e004      	b.n	8003be2 <CMD_TEC_Profile_Get+0x46>
		else cli_printf(cli, "tec[%d] unregistered ",i);
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	490b      	ldr	r1, [pc, #44]	@ (8003c08 <CMD_TEC_Profile_Get+0x6c>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f006 fa17 	bl	800a010 <cli_printf>
	for (uint32_t i=0;i<4;i++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d9e6      	bls.n	8003bbc <CMD_TEC_Profile_Get+0x20>
	}
	cli_printf(cli, "\r\n");
 8003bee:	4907      	ldr	r1, [pc, #28]	@ (8003c0c <CMD_TEC_Profile_Get+0x70>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f006 fa0d 	bl	800a010 <cli_printf>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000004 	.word	0x20000004
 8003c04:	08011860 	.word	0x08011860
 8003c08:	08011874 	.word	0x08011874
 8003c0c:	0801188c 	.word	0x0801188c

08003c10 <CMD_TEC_Man_Set_Volt>:

//manuallly set the Tec voltage fỏmat: xxx tec_id tec_dir tec_volt
static void CMD_TEC_Man_Set_Volt(EmbeddedCli *cli, char *args, void *context) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	@ 0x30
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC direction set logic
	if (!temperature_control_is_in_man_state(ptemperature_control_task))
 8003c1c:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <CMD_TEC_Man_Set_Volt+0xe8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fbc3 	bl	80053ac <temperature_control_is_in_man_state>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <CMD_TEC_Man_Set_Volt+0x2c>
	{
		cli_printf(cli, "Not in manual mode, can not set\r\n");
 8003c32:	4932      	ldr	r1, [pc, #200]	@ (8003cfc <CMD_TEC_Man_Set_Volt+0xec>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f006 f9eb 	bl	800a010 <cli_printf>
		return;
 8003c3a:	e05a      	b.n	8003cf2 <CMD_TEC_Man_Set_Volt+0xe2>
	}
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f005 f861 	bl	8008d04 <embeddedCliGetTokenCount>
 8003c42:	4603      	mov	r3, r0
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tokenCount != 3)
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d004      	beq.n	8003c56 <CMD_TEC_Man_Set_Volt+0x46>
	{
		cli_printf(cli, "format: command tec_id tec_dir volt_mV\r\n");
 8003c4c:	492c      	ldr	r1, [pc, #176]	@ (8003d00 <CMD_TEC_Man_Set_Volt+0xf0>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f006 f9de 	bl	800a010 <cli_printf>
		return;
 8003c54:	e04d      	b.n	8003cf2 <CMD_TEC_Man_Set_Volt+0xe2>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003c56:	2101      	movs	r1, #1
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	f005 f81d 	bl	8008c98 <embeddedCliGetToken>
 8003c5e:	6278      	str	r0, [r7, #36]	@ 0x24
	uint32_t tec_id = atoi(arg1);
 8003c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c62:	f00a f905 	bl	800de70 <atoi>
 8003c66:	4603      	mov	r3, r0
 8003c68:	623b      	str	r3, [r7, #32]
	if (tec_id  > 3)
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d904      	bls.n	8003c7a <CMD_TEC_Man_Set_Volt+0x6a>
	{
		cli_printf(cli, "arg1: tec id out of range (0-3)\r\n");
 8003c70:	4924      	ldr	r1, [pc, #144]	@ (8003d04 <CMD_TEC_Man_Set_Volt+0xf4>)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f006 f9cc 	bl	800a010 <cli_printf>
				return;
 8003c78:	e03b      	b.n	8003cf2 <CMD_TEC_Man_Set_Volt+0xe2>
	}
	const char *arg2 = embeddedCliGetToken(args, 2);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	68b8      	ldr	r0, [r7, #8]
 8003c7e:	f005 f80b 	bl	8008c98 <embeddedCliGetToken>
 8003c82:	61f8      	str	r0, [r7, #28]
	uint32_t tec_dir = atoi(arg2);
 8003c84:	69f8      	ldr	r0, [r7, #28]
 8003c86:	f00a f8f3 	bl	800de70 <atoi>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (tec_dir > 1) tec_dir = TEC_HEAT; else tec_dir = TEC_COOL;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d902      	bls.n	8003c9a <CMD_TEC_Man_Set_Volt+0x8a>
 8003c94:	2301      	movs	r3, #1
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c98:	e001      	b.n	8003c9e <CMD_TEC_Man_Set_Volt+0x8e>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const char *arg3 = embeddedCliGetToken(args, 3);
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	68b8      	ldr	r0, [r7, #8]
 8003ca2:	f004 fff9 	bl	8008c98 <embeddedCliGetToken>
 8003ca6:	61b8      	str	r0, [r7, #24]
	uint16_t tec_volt_mV = atoi(arg3);
 8003ca8:	69b8      	ldr	r0, [r7, #24]
 8003caa:	f00a f8e1 	bl	800de70 <atoi>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	82fb      	strh	r3, [r7, #22]
	if (tec_volt_mV > 3000)
 8003cb2:	8afb      	ldrh	r3, [r7, #22]
 8003cb4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d904      	bls.n	8003cc6 <CMD_TEC_Man_Set_Volt+0xb6>
	{
		cli_printf(cli, "arg3: voltage is out of range (0-3000mV)\r\n");
 8003cbc:	4912      	ldr	r1, [pc, #72]	@ (8003d08 <CMD_TEC_Man_Set_Volt+0xf8>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f006 f9a6 	bl	800a010 <cli_printf>
		return;
 8003cc4:	e015      	b.n	8003cf2 <CMD_TEC_Man_Set_Volt+0xe2>
	}

	uint32_t ret;
	ret = temperature_control_tec_manual_set_output( ptemperature_control_task,tec_id, tec_dir, tec_volt_mV);
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <CMD_TEC_Man_Set_Volt+0xe8>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	f001 fca1 	bl	8005616 <temperature_control_tec_manual_set_output>
 8003cd4:	6138      	str	r0, [r7, #16]
	if (ret)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <CMD_TEC_Man_Set_Volt+0xd6>
	{
		cli_printf(cli, "set output failed\r\n");
 8003cdc:	490b      	ldr	r1, [pc, #44]	@ (8003d0c <CMD_TEC_Man_Set_Volt+0xfc>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f006 f996 	bl	800a010 <cli_printf>
 8003ce4:	e005      	b.n	8003cf2 <CMD_TEC_Man_Set_Volt+0xe2>
	}
	else cli_printf(cli, "set tec[%d] with %d \r\n",tec_id,tec_volt_mV);
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	4909      	ldr	r1, [pc, #36]	@ (8003d10 <CMD_TEC_Man_Set_Volt+0x100>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f006 f98f 	bl	800a010 <cli_printf>
}
 8003cf2:	3730      	adds	r7, #48	@ 0x30
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	08011890 	.word	0x08011890
 8003d00:	080118b4 	.word	0x080118b4
 8003d04:	080118e0 	.word	0x080118e0
 8003d08:	08011904 	.word	0x08011904
 8003d0c:	08011930 	.word	0x08011930
 8003d10:	08011944 	.word	0x08011944

08003d14 <CMD_TEC_Man_Set_Output>:

//manuallly enable/disable tec output: cmd tec_id 0/1
static void CMD_TEC_Man_Set_Output(EmbeddedCli *cli, char *args, void *context)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
	if (!temperature_control_is_in_man_state(ptemperature_control_task))
 8003d20:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <CMD_TEC_Man_Set_Output+0xcc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fb41 	bl	80053ac <temperature_control_is_in_man_state>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <CMD_TEC_Man_Set_Output+0x2c>
	{
		cli_printf(cli, "Not in manual mode, can not set\r\n");
 8003d36:	492b      	ldr	r1, [pc, #172]	@ (8003de4 <CMD_TEC_Man_Set_Output+0xd0>)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f006 f969 	bl	800a010 <cli_printf>
		return;
 8003d3e:	e04c      	b.n	8003dda <CMD_TEC_Man_Set_Output+0xc6>
	}
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	f004 ffdf 	bl	8008d04 <embeddedCliGetTokenCount>
 8003d46:	4603      	mov	r3, r0
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
	if (tokenCount != 2)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d004      	beq.n	8003d5a <CMD_TEC_Man_Set_Output+0x46>
	{
		cli_printf(cli, "format: command tec_id 0/1\r\n");
 8003d50:	4925      	ldr	r1, [pc, #148]	@ (8003de8 <CMD_TEC_Man_Set_Output+0xd4>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f006 f95c 	bl	800a010 <cli_printf>
		return;
 8003d58:	e03f      	b.n	8003dda <CMD_TEC_Man_Set_Output+0xc6>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	68b8      	ldr	r0, [r7, #8]
 8003d5e:	f004 ff9b 	bl	8008c98 <embeddedCliGetToken>
 8003d62:	6238      	str	r0, [r7, #32]
	uint32_t tec_id = atoi(arg1);
 8003d64:	6a38      	ldr	r0, [r7, #32]
 8003d66:	f00a f883 	bl	800de70 <atoi>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	61fb      	str	r3, [r7, #28]
	if (tec_id  > 3)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d904      	bls.n	8003d7e <CMD_TEC_Man_Set_Output+0x6a>
	{
		cli_printf(cli, "arg1: tec id out of range (0-3)\r\n");
 8003d74:	491d      	ldr	r1, [pc, #116]	@ (8003dec <CMD_TEC_Man_Set_Output+0xd8>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f006 f94a 	bl	800a010 <cli_printf>
				return;
 8003d7c:	e02d      	b.n	8003dda <CMD_TEC_Man_Set_Output+0xc6>
	}
	const char *arg2 = embeddedCliGetToken(args, 2);
 8003d7e:	2102      	movs	r1, #2
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	f004 ff89 	bl	8008c98 <embeddedCliGetToken>
 8003d86:	61b8      	str	r0, [r7, #24]
	uint32_t tec_out_ena = atoi(arg2);
 8003d88:	69b8      	ldr	r0, [r7, #24]
 8003d8a:	f00a f871 	bl	800de70 <atoi>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	617b      	str	r3, [r7, #20]
	uint32_t ret = temperature_control_tec_enable_output(ptemperature_control_task,tec_id,tec_out_ena);
 8003d92:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <CMD_TEC_Man_Set_Output+0xcc>)
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	69f9      	ldr	r1, [r7, #28]
 8003da6:	f001 fadc 	bl	8005362 <temperature_control_tec_enable_output>
 8003daa:	6138      	str	r0, [r7, #16]
	if (ret)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <CMD_TEC_Man_Set_Output+0xaa>
	{
		cli_printf(cli, "failed to disable tec[%d] output\r\n",tec_id);
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	490e      	ldr	r1, [pc, #56]	@ (8003df0 <CMD_TEC_Man_Set_Output+0xdc>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f006 f92a 	bl	800a010 <cli_printf>
		return;
 8003dbc:	e00d      	b.n	8003dda <CMD_TEC_Man_Set_Output+0xc6>
	}
	if (tec_out_ena) cli_printf(cli, "enabled tec[%d] output\r\n",tec_id);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <CMD_TEC_Man_Set_Output+0xbc>
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	490b      	ldr	r1, [pc, #44]	@ (8003df4 <CMD_TEC_Man_Set_Output+0xe0>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f006 f921 	bl	800a010 <cli_printf>
 8003dce:	e004      	b.n	8003dda <CMD_TEC_Man_Set_Output+0xc6>
	else cli_printf(cli, "disabled tec[%d] output\r\n",tec_id);
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	4909      	ldr	r1, [pc, #36]	@ (8003df8 <CMD_TEC_Man_Set_Output+0xe4>)
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f006 f91b 	bl	800a010 <cli_printf>
}
 8003dda:	3728      	adds	r7, #40	@ 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000004 	.word	0x20000004
 8003de4:	08011890 	.word	0x08011890
 8003de8:	0801195c 	.word	0x0801195c
 8003dec:	080118e0 	.word	0x080118e0
 8003df0:	0801197c 	.word	0x0801197c
 8003df4:	080119a0 	.word	0x080119a0
 8003df8:	080119bc 	.word	0x080119bc

08003dfc <CMD_HTR_Set_Profile_Duty>:




static void CMD_HTR_Set_Profile_Duty(EmbeddedCli *cli, char *args, void *context) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle set logic
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003e08:	68b8      	ldr	r0, [r7, #8]
 8003e0a:	f004 ff7b 	bl	8008d04 <embeddedCliGetTokenCount>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d004      	beq.n	8003e22 <CMD_HTR_Set_Profile_Duty+0x26>
	{
		cli_printf(cli, "require 1 duty value for 4 heater\r\n");
 8003e18:	4912      	ldr	r1, [pc, #72]	@ (8003e64 <CMD_HTR_Set_Profile_Duty+0x68>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f006 f8f8 	bl	800a010 <cli_printf>
		return;
 8003e20:	e01c      	b.n	8003e5c <CMD_HTR_Set_Profile_Duty+0x60>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003e22:	2101      	movs	r1, #1
 8003e24:	68b8      	ldr	r0, [r7, #8]
 8003e26:	f004 ff37 	bl	8008c98 <embeddedCliGetToken>
 8003e2a:	61b8      	str	r0, [r7, #24]
	uint8_t duty = atoi(arg1);
 8003e2c:	69b8      	ldr	r0, [r7, #24]
 8003e2e:	f00a f81f 	bl	800de70 <atoi>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]
	if (duty > 100)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b64      	cmp	r3, #100	@ 0x64
 8003e3a:	d904      	bls.n	8003e46 <CMD_HTR_Set_Profile_Duty+0x4a>
	{
		cli_printf(cli, "require duty in range of 0-100 \r\n");
 8003e3c:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <CMD_HTR_Set_Profile_Duty+0x6c>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f006 f8e6 	bl	800a010 <cli_printf>
		return;
 8003e44:	e00a      	b.n	8003e5c <CMD_HTR_Set_Profile_Duty+0x60>
	}

	temperature_control_profile_heater_duty_set(ptemperature_control_task,duty);
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <CMD_HTR_Set_Profile_Duty+0x70>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	7dfa      	ldrb	r2, [r7, #23]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 fb2d 	bl	80054ae <temperature_control_profile_heater_duty_set>
	cli_printf(cli, "OK \r\n");
 8003e54:	4906      	ldr	r1, [pc, #24]	@ (8003e70 <CMD_HTR_Set_Profile_Duty+0x74>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f006 f8da 	bl	800a010 <cli_printf>
	//TODO: post profile change signal
}
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080119d8 	.word	0x080119d8
 8003e68:	080119fc 	.word	0x080119fc
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	080117ec 	.word	0x080117ec

08003e74 <CMD_HTR_Get_Profile_Duty>:

static void CMD_HTR_Get_Profile_Duty(EmbeddedCli *cli, char *args, void *context) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle get logic
	uint8_t profile_duty = temperature_control_profile_heater_duty_get(ptemperature_control_task);
 8003e80:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <CMD_HTR_Get_Profile_Duty+0x30>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fb28 	bl	80054da <temperature_control_profile_heater_duty_get>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]
	cli_printf(cli, "heater profile duty = %d \r\n",profile_duty);
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	461a      	mov	r2, r3
 8003e92:	4905      	ldr	r1, [pc, #20]	@ (8003ea8 <CMD_HTR_Get_Profile_Duty+0x34>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f006 f8bb 	bl	800a010 <cli_printf>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	08011a20 	.word	0x08011a20

08003eac <CMD_Heater_Profile_Register>:
static void CMD_Heater_Profile_Register(EmbeddedCli *cli, char *args, void *context)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
	uint8_t heater_ena[4];
	uint32_t i;
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f004 ff23 	bl	8008d04 <embeddedCliGetTokenCount>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	61bb      	str	r3, [r7, #24]
	if (tokenCount != 4)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d004      	beq.n	8003ed2 <CMD_Heater_Profile_Register+0x26>
	{
		cli_printf(cli, "require 4 value for 4 heater (0/1)\r\n");
 8003ec8:	4924      	ldr	r1, [pc, #144]	@ (8003f5c <CMD_Heater_Profile_Register+0xb0>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f006 f8a0 	bl	800a010 <cli_printf>
		return;
 8003ed0:	e041      	b.n	8003f56 <CMD_Heater_Profile_Register+0xaa>
	}
	for (i=0;i<4;i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e03b      	b.n	8003f50 <CMD_Heater_Profile_Register+0xa4>
	{
		heater_ena[i] = atoi( embeddedCliGetToken(args, i+1));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3301      	adds	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	68b8      	ldr	r0, [r7, #8]
 8003ee4:	f004 fed8 	bl	8008c98 <embeddedCliGetToken>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f009 ffc0 	bl	800de70 <atoi>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	b2d9      	uxtb	r1, r3
 8003ef4:	f107 0214 	add.w	r2, r7, #20
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	460a      	mov	r2, r1
 8003efe:	701a      	strb	r2, [r3, #0]
		if (heater_ena[i] >  1) {
 8003f00:	f107 0214 	add.w	r2, r7, #20
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d905      	bls.n	8003f1a <CMD_Heater_Profile_Register+0x6e>
			cli_printf(cli, "argument %d need to be in range 0/1 \r\n",i);
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	4913      	ldr	r1, [pc, #76]	@ (8003f60 <CMD_Heater_Profile_Register+0xb4>)
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f006 f87c 	bl	800a010 <cli_printf>
			return;
 8003f18:	e01d      	b.n	8003f56 <CMD_Heater_Profile_Register+0xaa>
		}
		if (heater_ena[i] == 0) temperature_control_profile_heater_unregister(ptemperature_control_task,i);
 8003f1a:	f107 0214 	add.w	r2, r7, #20
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <CMD_Heater_Profile_Register+0x8e>
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <CMD_Heater_Profile_Register+0xb8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 faff 	bl	8005536 <temperature_control_profile_heater_unregister>
 8003f38:	e007      	b.n	8003f4a <CMD_Heater_Profile_Register+0x9e>
		else temperature_control_profile_heater_register(ptemperature_control_task, i);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <CMD_Heater_Profile_Register+0xb8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 fad5 	bl	80054f4 <temperature_control_profile_heater_register>
	for (i=0;i<4;i++)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d9c0      	bls.n	8003ed8 <CMD_Heater_Profile_Register+0x2c>
	}
}
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	08011a3c 	.word	0x08011a3c
 8003f60:	08011838 	.word	0x08011838
 8003f64:	20000004 	.word	0x20000004

08003f68 <CMD_Heater_Profile_Get>:

static void CMD_Heater_Profile_Get(EmbeddedCli *cli, char *args, void *context)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
	uint8_t heater_profile = temperature_control_profile_heater_profile_get(ptemperature_control_task);
 8003f74:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <CMD_Heater_Profile_Get+0x60>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 faff 	bl	800557c <temperature_control_profile_heater_profile_get>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]
	for (uint32_t i=0;i<4;i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e013      	b.n	8003fb0 <CMD_Heater_Profile_Get+0x48>
	{
		if (heater_profile & (1<<i)) cli_printf(cli, "heater[%d] registered ");
 8003f88:	7cfa      	ldrb	r2, [r7, #19]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa42 f303 	asr.w	r3, r2, r3
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <CMD_Heater_Profile_Get+0x3a>
 8003f98:	490c      	ldr	r1, [pc, #48]	@ (8003fcc <CMD_Heater_Profile_Get+0x64>)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f006 f838 	bl	800a010 <cli_printf>
 8003fa0:	e003      	b.n	8003faa <CMD_Heater_Profile_Get+0x42>
		else cli_printf(cli, "heater[%d] unregistered ");
 8003fa2:	490b      	ldr	r1, [pc, #44]	@ (8003fd0 <CMD_Heater_Profile_Get+0x68>)
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f006 f833 	bl	800a010 <cli_printf>
	for (uint32_t i=0;i<4;i++)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3301      	adds	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d9e8      	bls.n	8003f88 <CMD_Heater_Profile_Get+0x20>
	}
	cli_printf(cli, "\r\n");
 8003fb6:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <CMD_Heater_Profile_Get+0x6c>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f006 f829 	bl	800a010 <cli_printf>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000004 	.word	0x20000004
 8003fcc:	08011a64 	.word	0x08011a64
 8003fd0:	08011a7c 	.word	0x08011a7c
 8003fd4:	0801188c 	.word	0x0801188c

08003fd8 <CMD_Ref_Set_Temp>:


static void CMD_Ref_Set_Temp(EmbeddedCli *cli, char *args, void *context) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature set logic
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f004 fe8d 	bl	8008d04 <embeddedCliGetTokenCount>
 8003fea:	4603      	mov	r3, r0
 8003fec:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d004      	beq.n	8003ffe <CMD_Ref_Set_Temp+0x26>
	{
		cli_printf(cli, "require 1 temperature (251 mean 25.1)\r\n");
 8003ff4:	4915      	ldr	r1, [pc, #84]	@ (800404c <CMD_Ref_Set_Temp+0x74>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f006 f80a 	bl	800a010 <cli_printf>
		return;
 8003ffc:	e023      	b.n	8004046 <CMD_Ref_Set_Temp+0x6e>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 8003ffe:	2101      	movs	r1, #1
 8004000:	68b8      	ldr	r0, [r7, #8]
 8004002:	f004 fe49 	bl	8008c98 <embeddedCliGetToken>
 8004006:	61b8      	str	r0, [r7, #24]
	int16_t setpoint = atoi(arg1);
 8004008:	69b8      	ldr	r0, [r7, #24]
 800400a:	f009 ff31 	bl	800de70 <atoi>
 800400e:	4603      	mov	r3, r0
 8004010:	82fb      	strh	r3, [r7, #22]
	temperature_control_profile_setpoint_set(ptemperature_control_task,setpoint);
 8004012:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <CMD_Ref_Set_Temp+0x78>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fad0 	bl	80055c2 <temperature_control_profile_setpoint_set>
	cli_printf(cli, "temperature setpoint: %.2f *C", (float)setpoint/10);
 8004022:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800402e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800403a:	ec53 2b17 	vmov	r2, r3, d7
 800403e:	4905      	ldr	r1, [pc, #20]	@ (8004054 <CMD_Ref_Set_Temp+0x7c>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f005 ffe5 	bl	800a010 <cli_printf>

}
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	08011a98 	.word	0x08011a98
 8004050:	20000004 	.word	0x20000004
 8004054:	08011ac0 	.word	0x08011ac0

08004058 <CMD_Ref_Get_Temp>:

static void CMD_Ref_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature get logic

	int16_t setpoint = temperature_control_profile_setpoint_get(ptemperature_control_task);
 8004064:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <CMD_Ref_Get_Temp+0x48>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f001 faba 	bl	80055e2 <temperature_control_profile_setpoint_get>
 800406e:	4603      	mov	r3, r0
 8004070:	82fb      	strh	r3, [r7, #22]
	cli_printf(cli, "Reference Temperature: %.2f *C", (float)setpoint/10);
 8004072:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800407e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004086:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800408a:	ec53 2b17 	vmov	r2, r3, d7
 800408e:	4905      	ldr	r1, [pc, #20]	@ (80040a4 <CMD_Ref_Get_Temp+0x4c>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f005 ffbd 	bl	800a010 <cli_printf>
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000004 	.word	0x20000004
 80040a4:	08011ae0 	.word	0x08011ae0

080040a8 <CMD_Ref_Set_NTC>:

static void CMD_Ref_Set_NTC(EmbeddedCli *cli, char *args, void *context) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC set logic
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f004 fe25 	bl	8008d04 <embeddedCliGetTokenCount>
 80040ba:	4603      	mov	r3, r0
 80040bc:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d004      	beq.n	80040ce <CMD_Ref_Set_NTC+0x26>
	{
		cli_printf(cli, "require 1 NTC index\r\n");
 80040c4:	4910      	ldr	r1, [pc, #64]	@ (8004108 <CMD_Ref_Set_NTC+0x60>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f005 ffa2 	bl	800a010 <cli_printf>
		return;
 80040cc:	e019      	b.n	8004102 <CMD_Ref_Set_NTC+0x5a>
	}
	const char *arg1 = embeddedCliGetToken(args, 1);
 80040ce:	2101      	movs	r1, #1
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f004 fde1 	bl	8008c98 <embeddedCliGetToken>
 80040d6:	61b8      	str	r0, [r7, #24]
	uint32_t NTC_Ref = atoi(arg1);
 80040d8:	69b8      	ldr	r0, [r7, #24]
 80040da:	f009 fec9 	bl	800de70 <atoi>
 80040de:	4603      	mov	r3, r0
 80040e0:	617b      	str	r3, [r7, #20]
	if (NTC_Ref > 7) {
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b07      	cmp	r3, #7
 80040e6:	d904      	bls.n	80040f2 <CMD_Ref_Set_NTC+0x4a>
		cli_printf(cli, "NTC index out of range (0-7");
 80040e8:	4908      	ldr	r1, [pc, #32]	@ (800410c <CMD_Ref_Set_NTC+0x64>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f005 ff90 	bl	800a010 <cli_printf>
		return;
 80040f0:	e007      	b.n	8004102 <CMD_Ref_Set_NTC+0x5a>
	}
	temperature_control_profile_ntc_register(ptemperature_control_task,NTC_Ref);
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <CMD_Ref_Set_NTC+0x68>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fa4a 	bl	8005596 <temperature_control_profile_ntc_register>

}
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08011b00 	.word	0x08011b00
 800410c:	08011b18 	.word	0x08011b18
 8004110:	20000004 	.word	0x20000004

08004114 <CMD_Ref_Get_NTC>:

static void CMD_Ref_Get_NTC(EmbeddedCli *cli, char *args, void *context) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC get logic
	uint8_t NTC_Ref = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]
	NTC_Ref = temperature_control_profile_ntc_get( ptemperature_control_task);
 8004124:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <CMD_Ref_Get_NTC+0x34>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fa67 	bl	80055fc <temperature_control_profile_ntc_get>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
	cli_printf(cli, "NTC Ref is %d", NTC_Ref);
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	461a      	mov	r2, r3
 8004136:	4905      	ldr	r1, [pc, #20]	@ (800414c <CMD_Ref_Get_NTC+0x38>)
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f005 ff69 	bl	800a010 <cli_printf>
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000004 	.word	0x20000004
 800414c:	08011b34 	.word	0x08011b34

08004150 <CMD_Start_Auto_Mode>:
static void CMD_Start_Auto_Mode(EmbeddedCli *cli, char *args, void *context)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
	temperature_control_auto_mode_set(ptemperature_control_task);
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <CMD_Start_Auto_Mode+0x28>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 ffdb 	bl	800511c <temperature_control_auto_mode_set>
	cli_printf(cli, "Auto mode started");
 8004166:	4905      	ldr	r1, [pc, #20]	@ (800417c <CMD_Start_Auto_Mode+0x2c>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f005 ff51 	bl	800a010 <cli_printf>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004
 800417c:	08011b44 	.word	0x08011b44

08004180 <CMD_Stop_Auto_Mode>:
static void CMD_Stop_Auto_Mode(EmbeddedCli *cli, char *args, void *context)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	temperature_control_man_mode_set(ptemperature_control_task);
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <CMD_Stop_Auto_Mode+0x28>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ffdf 	bl	8005154 <temperature_control_man_mode_set>
	cli_printf(cli, "Auto mode stopped");
 8004196:	4905      	ldr	r1, [pc, #20]	@ (80041ac <CMD_Stop_Auto_Mode+0x2c>)
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f005 ff39 	bl	800a010 <cli_printf>
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000004 	.word	0x20000004
 80041ac:	08011b58 	.word	0x08011b58

080041b0 <CMD_Set_Laser_Int_Current>:

/*
 * format: laser_int_set_current  percent
 */
static void CMD_Set_Laser_Int_Current(EmbeddedCli *cli, char *args, void *context)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 80041bc:	68b8      	ldr	r0, [r7, #8]
 80041be:	f004 fda1 	bl	8008d04 <embeddedCliGetTokenCount>
 80041c2:	4603      	mov	r3, r0
 80041c4:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d004      	beq.n	80041d6 <CMD_Set_Laser_Int_Current+0x26>
	{
		cli_printf(cli, "format: laser_set_current percent \r\n");
 80041cc:	4914      	ldr	r1, [pc, #80]	@ (8004220 <CMD_Set_Laser_Int_Current+0x70>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f005 ff1e 	bl	800a010 <cli_printf>
		return;
 80041d4:	e021      	b.n	800421a <CMD_Set_Laser_Int_Current+0x6a>
	}

	const char *arg1 = embeddedCliGetToken(args, 1);
 80041d6:	2101      	movs	r1, #1
 80041d8:	68b8      	ldr	r0, [r7, #8]
 80041da:	f004 fd5d 	bl	8008c98 <embeddedCliGetToken>
 80041de:	61b8      	str	r0, [r7, #24]
	int16_t percent = atoi(arg1);
 80041e0:	69b8      	ldr	r0, [r7, #24]
 80041e2:	f009 fe45 	bl	800de70 <atoi>
 80041e6:	4603      	mov	r3, r0
 80041e8:	82fb      	strh	r3, [r7, #22]
	if (percent > 100)
 80041ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041ee:	2b64      	cmp	r3, #100	@ 0x64
 80041f0:	dd04      	ble.n	80041fc <CMD_Set_Laser_Int_Current+0x4c>

		{
			cli_printf(cli, "argument 1 out of range,(0-100)\r\n");
 80041f2:	490c      	ldr	r1, [pc, #48]	@ (8004224 <CMD_Set_Laser_Int_Current+0x74>)
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f005 ff0b 	bl	800a010 <cli_printf>
			return;
 80041fa:	e00e      	b.n	800421a <CMD_Set_Laser_Int_Current+0x6a>
		}
	experiment_task_laser_set_current(pexperiment_task, 0, percent);
 80041fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <CMD_Set_Laser_Int_Current+0x78>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f904 	bl	8003414 <experiment_task_laser_set_current>
	cli_printf(cli, "set internal laser to %d percent\r\n",percent);
 800420c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004210:	461a      	mov	r2, r3
 8004212:	4906      	ldr	r1, [pc, #24]	@ (800422c <CMD_Set_Laser_Int_Current+0x7c>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f005 fefb 	bl	800a010 <cli_printf>
}
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	08011b6c 	.word	0x08011b6c
 8004224:	08011b94 	.word	0x08011b94
 8004228:	20000008 	.word	0x20000008
 800422c:	08011bb8 	.word	0x08011bb8

08004230 <CMD_Set_Laser_Ext_Current>:

static void CMD_Set_Laser_Ext_Current(EmbeddedCli *cli, char *args, void *context)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f004 fd61 	bl	8008d04 <embeddedCliGetTokenCount>
 8004242:	4603      	mov	r3, r0
 8004244:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d004      	beq.n	8004256 <CMD_Set_Laser_Ext_Current+0x26>
	{
		cli_printf(cli, "format: laser_set_current 0/1 percent (0 for internal, 1 for external\r\n");
 800424c:	4914      	ldr	r1, [pc, #80]	@ (80042a0 <CMD_Set_Laser_Ext_Current+0x70>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f005 fede 	bl	800a010 <cli_printf>
		return;
 8004254:	e021      	b.n	800429a <CMD_Set_Laser_Ext_Current+0x6a>
	}

	const char *arg1 = embeddedCliGetToken(args, 1);
 8004256:	2101      	movs	r1, #1
 8004258:	68b8      	ldr	r0, [r7, #8]
 800425a:	f004 fd1d 	bl	8008c98 <embeddedCliGetToken>
 800425e:	61b8      	str	r0, [r7, #24]
	int16_t percent = atoi(arg1);
 8004260:	69b8      	ldr	r0, [r7, #24]
 8004262:	f009 fe05 	bl	800de70 <atoi>
 8004266:	4603      	mov	r3, r0
 8004268:	82fb      	strh	r3, [r7, #22]
	if (percent > 100)
 800426a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800426e:	2b64      	cmp	r3, #100	@ 0x64
 8004270:	dd04      	ble.n	800427c <CMD_Set_Laser_Ext_Current+0x4c>

		{
			cli_printf(cli, "argument 1 out of range,(0-100)\r\n");
 8004272:	490c      	ldr	r1, [pc, #48]	@ (80042a4 <CMD_Set_Laser_Ext_Current+0x74>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f005 fecb 	bl	800a010 <cli_printf>
			return;
 800427a:	e00e      	b.n	800429a <CMD_Set_Laser_Ext_Current+0x6a>
		}
	experiment_task_laser_set_current(pexperiment_task, 1, percent);
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <CMD_Set_Laser_Ext_Current+0x78>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f8c4 	bl	8003414 <experiment_task_laser_set_current>
	cli_printf(cli, "set internal laser to %d percent\r\n",percent);
 800428c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004290:	461a      	mov	r2, r3
 8004292:	4906      	ldr	r1, [pc, #24]	@ (80042ac <CMD_Set_Laser_Ext_Current+0x7c>)
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f005 febb 	bl	800a010 <cli_printf>
}
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08011bdc 	.word	0x08011bdc
 80042a4:	08011b94 	.word	0x08011b94
 80042a8:	20000008 	.word	0x20000008
 80042ac:	08011bb8 	.word	0x08011bb8

080042b0 <CMD_Laser_Get_Current>:

static void CMD_Laser_Get_Current(EmbeddedCli *cli, char *args, void *context)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
	uint32_t int_laser_current = experiment_task_laser_get_current(pexperiment_task, 0);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <CMD_Laser_Get_Current+0x3c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f8d1 	bl	800346a <experiment_task_laser_get_current>
 80042c8:	6178      	str	r0, [r7, #20]
	uint32_t ext_laser_current = experiment_task_laser_get_current(pexperiment_task, 1);
 80042ca:	4b08      	ldr	r3, [pc, #32]	@ (80042ec <CMD_Laser_Get_Current+0x3c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f8ca 	bl	800346a <experiment_task_laser_get_current>
 80042d6:	6138      	str	r0, [r7, #16]

	cli_printf(cli, "int_laser current = %d percent ext_laser current = %d percent",int_laser_current,ext_laser_current);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4904      	ldr	r1, [pc, #16]	@ (80042f0 <CMD_Laser_Get_Current+0x40>)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f005 fe96 	bl	800a010 <cli_printf>
}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000008 	.word	0x20000008
 80042f0:	08011c24 	.word	0x08011c24

080042f4 <CMD_Int_Laser_Switch_On>:
static void CMD_Int_Laser_Switch_On(EmbeddedCli *cli, char *args, void *context)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	f004 fcff 	bl	8008d04 <embeddedCliGetTokenCount>
 8004306:	4603      	mov	r3, r0
 8004308:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d004      	beq.n	800431a <CMD_Int_Laser_Switch_On+0x26>
	{
		cli_printf(cli, "format: laser_int_switch position\r\n");
 8004310:	4912      	ldr	r1, [pc, #72]	@ (800435c <CMD_Int_Laser_Switch_On+0x68>)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f005 fe7c 	bl	800a010 <cli_printf>
		return;
 8004318:	e01c      	b.n	8004354 <CMD_Int_Laser_Switch_On+0x60>
	}

	const char *arg1 = embeddedCliGetToken(args, 1);
 800431a:	2101      	movs	r1, #1
 800431c:	68b8      	ldr	r0, [r7, #8]
 800431e:	f004 fcbb 	bl	8008c98 <embeddedCliGetToken>
 8004322:	61b8      	str	r0, [r7, #24]
	int32_t laser_idx = atoi(arg1);
 8004324:	69b8      	ldr	r0, [r7, #24]
 8004326:	f009 fda3 	bl	800de70 <atoi>
 800432a:	6178      	str	r0, [r7, #20]
	if (laser_idx > INTERNAL_CHAIN_CHANNEL_NUM - 1)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b23      	cmp	r3, #35	@ 0x23
 8004330:	dd04      	ble.n	800433c <CMD_Int_Laser_Switch_On+0x48>

		{
			cli_printf(cli, "argument 1 out of range,(0-35)\r\n");
 8004332:	490b      	ldr	r1, [pc, #44]	@ (8004360 <CMD_Int_Laser_Switch_On+0x6c>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f005 fe6b 	bl	800a010 <cli_printf>
			return;
 800433a:	e00b      	b.n	8004354 <CMD_Int_Laser_Switch_On+0x60>
		}
	experiment_task_int_laser_switchon(pexperiment_task,  laser_idx);
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <CMD_Int_Laser_Switch_On+0x70>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff f8a8 	bl	800349a <experiment_task_int_laser_switchon>
	cli_printf(cli, "switched int laser %d on\r\n",laser_idx);
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4906      	ldr	r1, [pc, #24]	@ (8004368 <CMD_Int_Laser_Switch_On+0x74>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f005 fe5e 	bl	800a010 <cli_printf>
}
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	08011c64 	.word	0x08011c64
 8004360:	08011c88 	.word	0x08011c88
 8004364:	20000008 	.word	0x20000008
 8004368:	08011cac 	.word	0x08011cac

0800436c <CMD_Ext_Laser_Switch_On>:



static void CMD_Ext_Laser_Switch_On(EmbeddedCli *cli, char *args, void *context)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8004378:	68b8      	ldr	r0, [r7, #8]
 800437a:	f004 fcc3 	bl	8008d04 <embeddedCliGetTokenCount>
 800437e:	4603      	mov	r3, r0
 8004380:	61fb      	str	r3, [r7, #28]

	if (tokenCount != 1)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d004      	beq.n	8004392 <CMD_Ext_Laser_Switch_On+0x26>
	{
		cli_printf(cli, "format: laser_ext_switch position\r\n");
 8004388:	4912      	ldr	r1, [pc, #72]	@ (80043d4 <CMD_Ext_Laser_Switch_On+0x68>)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f005 fe40 	bl	800a010 <cli_printf>
		return;
 8004390:	e01c      	b.n	80043cc <CMD_Ext_Laser_Switch_On+0x60>
	}

	const char *arg1 = embeddedCliGetToken(args, 1);
 8004392:	2101      	movs	r1, #1
 8004394:	68b8      	ldr	r0, [r7, #8]
 8004396:	f004 fc7f 	bl	8008c98 <embeddedCliGetToken>
 800439a:	61b8      	str	r0, [r7, #24]
	int32_t laser_idx = atoi(arg1);
 800439c:	69b8      	ldr	r0, [r7, #24]
 800439e:	f009 fd67 	bl	800de70 <atoi>
 80043a2:	6178      	str	r0, [r7, #20]
	if (laser_idx > EXTERNAL_CHAIN_CHANNEL_NUM - 1)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b07      	cmp	r3, #7
 80043a8:	dd04      	ble.n	80043b4 <CMD_Ext_Laser_Switch_On+0x48>

		{
			cli_printf(cli, "argument 1 out of range,(0-7)\r\n");
 80043aa:	490b      	ldr	r1, [pc, #44]	@ (80043d8 <CMD_Ext_Laser_Switch_On+0x6c>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f005 fe2f 	bl	800a010 <cli_printf>
			return;
 80043b2:	e00b      	b.n	80043cc <CMD_Ext_Laser_Switch_On+0x60>
		}
	experiment_task_ext_laser_switchon(pexperiment_task,  laser_idx);
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <CMD_Ext_Laser_Switch_On+0x70>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f8aa 	bl	8003516 <experiment_task_ext_laser_switchon>
	cli_printf(cli, "switched ext laser %d on\r\n",laser_idx);
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4906      	ldr	r1, [pc, #24]	@ (80043e0 <CMD_Ext_Laser_Switch_On+0x74>)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f005 fe22 	bl	800a010 <cli_printf>
}
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	08011cc8 	.word	0x08011cc8
 80043d8:	08011cec 	.word	0x08011cec
 80043dc:	20000008 	.word	0x20000008
 80043e0:	08011d0c 	.word	0x08011d0c

080043e4 <CMD_Int_Laser_Switch_Off>:

static void CMD_Int_Laser_Switch_Off(EmbeddedCli *cli, char *args, void *context)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
	experiment_task_int_laser_switchoff(pexperiment_task);
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <CMD_Int_Laser_Switch_Off+0x20>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f873 	bl	80034e0 <experiment_task_int_laser_switchoff>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000008 	.word	0x20000008

08004408 <CMD_Ext_Laser_Switch_Off>:
static void CMD_Ext_Laser_Switch_Off(EmbeddedCli *cli, char *args, void *context){
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	experiment_task_ext_laser_switchoff(pexperiment_task);
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <CMD_Ext_Laser_Switch_Off+0x20>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff f89f 	bl	800355c <experiment_task_ext_laser_switchoff>

}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000008 	.word	0x20000008

0800442c <cmd_exp_set_profile>:
 * sampling rate in KSample
 * time in us unit
 */

static void cmd_exp_set_profile(EmbeddedCli *cli, char *args, void *context)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b098      	sub	sp, #96	@ 0x60
 8004430:	af06      	add	r7, sp, #24
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	uint32_t tokenCount = embeddedCliGetTokenCount(args);
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f004 fc63 	bl	8008d04 <embeddedCliGetTokenCount>
 800443e:	4603      	mov	r3, r0
 8004440:	647b      	str	r3, [r7, #68]	@ 0x44

	if (tokenCount != 6)
 8004442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004444:	2b06      	cmp	r3, #6
 8004446:	d004      	beq.n	8004452 <cmd_exp_set_profile+0x26>
	{
		cli_printf(cli, "format: exp_set_profile sampling_rate pos laser_percent pre_time experiment_time post_time\r\n");
 8004448:	4960      	ldr	r1, [pc, #384]	@ (80045cc <cmd_exp_set_profile+0x1a0>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f005 fde0 	bl	800a010 <cli_printf>
		return;
 8004450:	e0b8      	b.n	80045c4 <cmd_exp_set_profile+0x198>
	}
	uint32_t sampling_rate = atoi(embeddedCliGetToken(args, 1));
 8004452:	2101      	movs	r1, #1
 8004454:	68b8      	ldr	r0, [r7, #8]
 8004456:	f004 fc1f 	bl	8008c98 <embeddedCliGetToken>
 800445a:	4603      	mov	r3, r0
 800445c:	4618      	mov	r0, r3
 800445e:	f009 fd07 	bl	800de70 <atoi>
 8004462:	4603      	mov	r3, r0
 8004464:	643b      	str	r3, [r7, #64]	@ 0x40
	if ((sampling_rate == 0) || (sampling_rate > 1000))
 8004466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <cmd_exp_set_profile+0x48>
 800446c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800446e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004472:	d904      	bls.n	800447e <cmd_exp_set_profile+0x52>
	{
		cli_printf(cli, "sampling rate out of range (1K-1M)\r\n");
 8004474:	4956      	ldr	r1, [pc, #344]	@ (80045d0 <cmd_exp_set_profile+0x1a4>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f005 fdca 	bl	800a010 <cli_printf>
		return;
 800447c:	e0a2      	b.n	80045c4 <cmd_exp_set_profile+0x198>
	}
	uint32_t pos = atoi(embeddedCliGetToken(args, 2));
 800447e:	2102      	movs	r1, #2
 8004480:	68b8      	ldr	r0, [r7, #8]
 8004482:	f004 fc09 	bl	8008c98 <embeddedCliGetToken>
 8004486:	4603      	mov	r3, r0
 8004488:	4618      	mov	r0, r3
 800448a:	f009 fcf1 	bl	800de70 <atoi>
 800448e:	4603      	mov	r3, r0
 8004490:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if ((pos == 0) || (pos > 36))
 8004492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <cmd_exp_set_profile+0x72>
 8004498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449a:	2b24      	cmp	r3, #36	@ 0x24
 800449c:	d904      	bls.n	80044a8 <cmd_exp_set_profile+0x7c>
		{
			cli_printf(cli, "pos rate out of range (1-36)\r\n");
 800449e:	494d      	ldr	r1, [pc, #308]	@ (80045d4 <cmd_exp_set_profile+0x1a8>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f005 fdb5 	bl	800a010 <cli_printf>
			return;
 80044a6:	e08d      	b.n	80045c4 <cmd_exp_set_profile+0x198>
		}
	uint32_t percent = atoi(embeddedCliGetToken(args, 3));
 80044a8:	2103      	movs	r1, #3
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	f004 fbf4 	bl	8008c98 <embeddedCliGetToken>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f009 fcdc 	bl	800de70 <atoi>
 80044b8:	4603      	mov	r3, r0
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (percent > 100)
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	2b64      	cmp	r3, #100	@ 0x64
 80044c0:	d904      	bls.n	80044cc <cmd_exp_set_profile+0xa0>
			{
				cli_printf(cli, "percent out of range (0-100)\r\n");
 80044c2:	4945      	ldr	r1, [pc, #276]	@ (80045d8 <cmd_exp_set_profile+0x1ac>)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f005 fda3 	bl	800a010 <cli_printf>
				return;
 80044ca:	e07b      	b.n	80045c4 <cmd_exp_set_profile+0x198>
			}
	uint32_t pre_time = atoi(embeddedCliGetToken(args, 4));
 80044cc:	2104      	movs	r1, #4
 80044ce:	68b8      	ldr	r0, [r7, #8]
 80044d0:	f004 fbe2 	bl	8008c98 <embeddedCliGetToken>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f009 fcca 	bl	800de70 <atoi>
 80044dc:	4603      	mov	r3, r0
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
			if (pre_time == 0)
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <cmd_exp_set_profile+0xc4>
			{
				cli_printf(cli, "pre_time should be larger than 0\r\n");
 80044e6:	493d      	ldr	r1, [pc, #244]	@ (80045dc <cmd_exp_set_profile+0x1b0>)
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f005 fd91 	bl	800a010 <cli_printf>
				return;
 80044ee:	e069      	b.n	80045c4 <cmd_exp_set_profile+0x198>
			}
	uint32_t sample_time = atoi(embeddedCliGetToken(args, 5));
 80044f0:	2105      	movs	r1, #5
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f004 fbd0 	bl	8008c98 <embeddedCliGetToken>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f009 fcb8 	bl	800de70 <atoi>
 8004500:	4603      	mov	r3, r0
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
			if (sample_time == 0)
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <cmd_exp_set_profile+0xe8>
			{
				cli_printf(cli, "sample time should be larger than 0\r\n");
 800450a:	4935      	ldr	r1, [pc, #212]	@ (80045e0 <cmd_exp_set_profile+0x1b4>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f005 fd7f 	bl	800a010 <cli_printf>
				return;
 8004512:	e057      	b.n	80045c4 <cmd_exp_set_profile+0x198>
			}
	uint32_t post_time = atoi(embeddedCliGetToken(args, 6));
 8004514:	2106      	movs	r1, #6
 8004516:	68b8      	ldr	r0, [r7, #8]
 8004518:	f004 fbbe 	bl	8008c98 <embeddedCliGetToken>
 800451c:	4603      	mov	r3, r0
 800451e:	4618      	mov	r0, r3
 8004520:	f009 fca6 	bl	800de70 <atoi>
 8004524:	4603      	mov	r3, r0
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (post_time == 0)
 8004528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <cmd_exp_set_profile+0x10c>
			{
				cli_printf(cli, "post_time should be larger than 0\r\n");
 800452e:	492d      	ldr	r1, [pc, #180]	@ (80045e4 <cmd_exp_set_profile+0x1b8>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f005 fd6d 	bl	800a010 <cli_printf>
				return;
 8004536:	e045      	b.n	80045c4 <cmd_exp_set_profile+0x198>
			}
	uint32_t num_sample = ((pre_time + sample_time + post_time) * sampling_rate )/1000000;
 8004538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	441a      	add	r2, r3
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	4413      	add	r3, r2
 8004542:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <cmd_exp_set_profile+0x1bc>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0c9b      	lsrs	r3, r3, #18
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (num_sample > 2048)	//larrger than 4MB
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004558:	d904      	bls.n	8004564 <cmd_exp_set_profile+0x138>
	{
		cli_printf(cli, "total sample must be less than 2048 K\r\n");
 800455a:	4924      	ldr	r1, [pc, #144]	@ (80045ec <cmd_exp_set_profile+0x1c0>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f005 fd57 	bl	800a010 <cli_printf>
		return;
 8004562:	e02f      	b.n	80045c4 <cmd_exp_set_profile+0x198>
	}

	experiment_profile_t profile;
	profile.sampling_rate = sampling_rate;		// kHz
 8004564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004566:	b29b      	uxth	r3, r3
 8004568:	823b      	strh	r3, [r7, #16]
	profile.pos = pos;
 800456a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456c:	b2db      	uxtb	r3, r3
 800456e:	74bb      	strb	r3, [r7, #18]
	profile.laser_percent = percent;
 8004570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004572:	b2db      	uxtb	r3, r3
 8004574:	74fb      	strb	r3, [r7, #19]
	profile.pre_time = pre_time;				// us
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	617b      	str	r3, [r7, #20]
	profile.experiment_time = sample_time;		// us
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	61bb      	str	r3, [r7, #24]
	profile.post_time = post_time;				// us
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	61fb      	str	r3, [r7, #28]
	profile.num_sample = num_sample;			// kSample
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	623b      	str	r3, [r7, #32]
	profile.period = 1000000 / sampling_rate;	// ns
 8004586:	4a1a      	ldr	r2, [pc, #104]	@ (80045f0 <cmd_exp_set_profile+0x1c4>)
 8004588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
	experiment_task_set_profile(pexperiment_task,&profile);
 8004590:	4b18      	ldr	r3, [pc, #96]	@ (80045f4 <cmd_exp_set_profile+0x1c8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f107 0210 	add.w	r2, r7, #16
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff f82f 	bl	80035fe <experiment_task_set_profile>
	cli_printf(cli, "set profile sampling_rate:%d, pos: %d, percent:%d, pre_time:%d, sample_time:%d, post_time:%d, num_sample %d, sampling period %d \r\n",sampling_rate, pos, percent, pre_time, sample_time,post_time, num_sample,profile.period);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	9305      	str	r3, [sp, #20]
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	9303      	str	r3, [sp, #12]
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	9302      	str	r3, [sp, #8]
 80045b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045bc:	490e      	ldr	r1, [pc, #56]	@ (80045f8 <cmd_exp_set_profile+0x1cc>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f005 fd26 	bl	800a010 <cli_printf>
}
 80045c4:	3748      	adds	r7, #72	@ 0x48
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	08011d28 	.word	0x08011d28
 80045d0:	08011d88 	.word	0x08011d88
 80045d4:	08011db0 	.word	0x08011db0
 80045d8:	08011dd0 	.word	0x08011dd0
 80045dc:	08011df0 	.word	0x08011df0
 80045e0:	08011e14 	.word	0x08011e14
 80045e4:	08011e3c 	.word	0x08011e3c
 80045e8:	431bde83 	.word	0x431bde83
 80045ec:	08011e60 	.word	0x08011e60
 80045f0:	000f4240 	.word	0x000f4240
 80045f4:	20000008 	.word	0x20000008
 80045f8:	08011e88 	.word	0x08011e88

080045fc <cmd_exp_get_profile>:

static void cmd_exp_get_profile(EmbeddedCli *cli, char *args, void *context)
{
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b091      	sub	sp, #68	@ 0x44
 8004600:	af06      	add	r7, sp, #24
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	experiment_profile_t profile;
	experiment_task_get_profile(pexperiment_task, &profile);
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <cmd_exp_get_profile+0x54>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f107 0210 	add.w	r2, r7, #16
 8004610:	4611      	mov	r1, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff f831 	bl	800367a <experiment_task_get_profile>
	cli_printf(cli, "sampling_rate:%d, pos: %d, percent:%d, pre_time:%d, sample_time:%d,post_time: %d, num_sample: %d, sampling_period %d \r\n",profile.sampling_rate, profile.pos, profile.laser_percent, profile.pre_time, profile.experiment_time ,profile.post_time, profile.num_sample, profile.period);
 8004618:	8a3b      	ldrh	r3, [r7, #16]
 800461a:	461e      	mov	r6, r3
 800461c:	7cbb      	ldrb	r3, [r7, #18]
 800461e:	469c      	mov	ip, r3
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	461d      	mov	r5, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	69f9      	ldr	r1, [r7, #28]
 800462a:	6a38      	ldr	r0, [r7, #32]
 800462c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800462e:	9405      	str	r4, [sp, #20]
 8004630:	9004      	str	r0, [sp, #16]
 8004632:	9103      	str	r1, [sp, #12]
 8004634:	9202      	str	r2, [sp, #8]
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	9500      	str	r5, [sp, #0]
 800463a:	4663      	mov	r3, ip
 800463c:	4632      	mov	r2, r6
 800463e:	4905      	ldr	r1, [pc, #20]	@ (8004654 <cmd_exp_get_profile+0x58>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f005 fce5 	bl	800a010 <cli_printf>

}
 8004646:	bf00      	nop
 8004648:	372c      	adds	r7, #44	@ 0x2c
 800464a:	46bd      	mov	sp, r7
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	bf00      	nop
 8004650:	20000008 	.word	0x20000008
 8004654:	08011f0c 	.word	0x08011f0c

08004658 <cmd_exp_start_measuring>:
static void cmd_exp_start_measuring(EmbeddedCli *cli, char *args, void *context)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
	if (experiment_start_measuring(pexperiment_task))
 8004664:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <cmd_exp_start_measuring+0x38>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f81b 	bl	80036a4 <experiment_start_measuring>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <cmd_exp_start_measuring+0x26>
		cli_printf(cli, "Wrong profile, please check \r\n");
 8004674:	4907      	ldr	r1, [pc, #28]	@ (8004694 <cmd_exp_start_measuring+0x3c>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f005 fcca 	bl	800a010 <cli_printf>
	else cli_printf(cli,"Starting Measurement\r\n");
}
 800467c:	e003      	b.n	8004686 <cmd_exp_start_measuring+0x2e>
	else cli_printf(cli,"Starting Measurement\r\n");
 800467e:	4906      	ldr	r1, [pc, #24]	@ (8004698 <cmd_exp_start_measuring+0x40>)
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f005 fcc5 	bl	800a010 <cli_printf>
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000008 	.word	0x20000008
 8004694:	08011f84 	.word	0x08011f84
 8004698:	08011fa4 	.word	0x08011fa4

0800469c <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 80046a0:	4b02      	ldr	r3, [pc, #8]	@ (80046ac <getCliStaticBindings+0x10>)
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	08012368 	.word	0x08012368

080046b0 <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 80046b4:	2321      	movs	r3, #33	@ 0x21
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d101      	bne.n	80046d8 <LL_USART_IsActiveFlag_FE+0x18>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <LL_USART_IsActiveFlag_FE+0x1a>
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d101      	bne.n	80046fe <LL_USART_IsActiveFlag_NE+0x18>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <LL_USART_IsActiveFlag_NE+0x1a>
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d101      	bne.n	8004724 <LL_USART_IsActiveFlag_ORE+0x18>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <LL_USART_IsActiveFlag_ORE+0x1a>
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b20      	cmp	r3, #32
 8004744:	d101      	bne.n	800474a <LL_USART_IsActiveFlag_RXNE+0x18>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2208      	movs	r2, #8
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	b2db      	uxtb	r3, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <shell_stdio_init>:
static state_t shell_state_process_handler(shell_task_t * const me, shell_evt_t const * const e) ;


// Khởi tạo bộ đệm vòng (item_size = 1 byte)
void shell_stdio_init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	circular_char_buffer_init(&rx_buffer, rx_static_buffer, SHELL_UART_RX_BUFFER_SIZE);
 80047c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047c8:	490a      	ldr	r1, [pc, #40]	@ (80047f4 <shell_stdio_init+0x34>)
 80047ca:	480b      	ldr	r0, [pc, #44]	@ (80047f8 <shell_stdio_init+0x38>)
 80047cc:	f005 ffb4 	bl	800a738 <circular_char_buffer_init>
	circular_char_buffer_init(&tx_buffer, tx_static_buffer,  SHELL_UART_TX_BUFFER_SIZE);
 80047d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d4:	4909      	ldr	r1, [pc, #36]	@ (80047fc <shell_stdio_init+0x3c>)
 80047d6:	480a      	ldr	r0, [pc, #40]	@ (8004800 <shell_stdio_init+0x40>)
 80047d8:	f005 ffae 	bl	800a738 <circular_char_buffer_init>

    // Khởi tạo UART_Stdio
    uart_stdio_init(&uart_stdio, CLI_UART, &rx_buffer, &tx_buffer);
 80047dc:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <shell_stdio_init+0x40>)
 80047de:	4a06      	ldr	r2, [pc, #24]	@ (80047f8 <shell_stdio_init+0x38>)
 80047e0:	4908      	ldr	r1, [pc, #32]	@ (8004804 <shell_stdio_init+0x44>)
 80047e2:	4809      	ldr	r0, [pc, #36]	@ (8004808 <shell_stdio_init+0x48>)
 80047e4:	f005 fcf9 	bl	800a1da <uart_stdio_init>

    // Kích hoạt UART
    uart_stdio_active(&uart_stdio);
 80047e8:	4807      	ldr	r0, [pc, #28]	@ (8004808 <shell_stdio_init+0x48>)
 80047ea:	f005 fd12 	bl	800a212 <uart_stdio_active>
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	200046b0 	.word	0x200046b0
 80047f8:	20004688 	.word	0x20004688
 80047fc:	200047b0 	.word	0x200047b0
 8004800:	2000469c 	.word	0x2000469c
 8004804:	40011400 	.word	0x40011400
 8004808:	20004678 	.word	0x20004678

0800480c <shell_cli_init>:

static uint32_t shell_cli_init(void) {
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
    // Initialize the CLI UART with the specified parameters

    EmbeddedCliConfig cli_config = {
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <shell_cli_init+0x5c>)
 8004814:	1d3c      	adds	r4, r7, #4
 8004816:	461d      	mov	r5, r3
 8004818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800481c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        .cliBufferSize = sizeof(shell_buffer),
        .enableAutoComplete = 1,
        .staticBindings = NULL, // No static bindings for now
        .staticBindingCount = 0
    };
    cli_config.staticBindings = getCliStaticBindings();
 8004824:	f7ff ff3a 	bl	800469c <getCliStaticBindings>
 8004828:	4603      	mov	r3, r0
 800482a:	61bb      	str	r3, [r7, #24]
    cli_config.staticBindingCount = getCliStaticBindingCount();
 800482c:	f7ff ff40 	bl	80046b0 <getCliStaticBindingCount>
 8004830:	4603      	mov	r3, r0
 8004832:	83bb      	strh	r3, [r7, #28]
    shell_uart_cli = embeddedCliNew(&cli_config);
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	4618      	mov	r0, r3
 8004838:	f004 f829 	bl	800888e <embeddedCliNew>
 800483c:	4603      	mov	r3, r0
 800483e:	4a0b      	ldr	r2, [pc, #44]	@ (800486c <shell_cli_init+0x60>)
 8004840:	6013      	str	r3, [r2, #0]
    if (shell_uart_cli == NULL) {
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <shell_cli_init+0x60>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <shell_cli_init+0x4a>
        DBC_ASSERT(1u, 0); // Initialization failed
 800484a:	2101      	movs	r1, #1
 800484c:	4808      	ldr	r0, [pc, #32]	@ (8004870 <shell_cli_init+0x64>)
 800484e:	f001 f841 	bl	80058d4 <DBC_fault_handler>
        return ERROR_FAIL; // Indicate failure
 8004852:	2301      	movs	r3, #1
 8004854:	e004      	b.n	8004860 <shell_cli_init+0x54>
    }
    shell_uart_cli->writeChar = shell_cli_write_char;
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <shell_cli_init+0x60>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <shell_cli_init+0x68>)
 800485c:	601a      	str	r2, [r3, #0]
    return ERROR_OK; // Indicate success
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bdb0      	pop	{r4, r5, r7, pc}
 8004868:	08011fc4 	.word	0x08011fc4
 800486c:	20004fb0 	.word	0x20004fb0
 8004870:	08012680 	.word	0x08012680
 8004874:	08004879 	.word	0x08004879

08004878 <shell_cli_write_char>:
static void shell_cli_write_char(EmbeddedCli *embeddedCli, char c) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
	uart_stdio_write_char(&uart_stdio, (uint8_t)c);
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	4619      	mov	r1, r3
 8004888:	4803      	ldr	r0, [pc, #12]	@ (8004898 <shell_cli_write_char+0x20>)
 800488a:	f005 fd29 	bl	800a2e0 <uart_stdio_write_char>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20004678 	.word	0x20004678

0800489c <shell_task_ctor>:
void shell_task_ctor(shell_task_t * const me, shell_task_init_t * const init) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(0u, me != NULL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <shell_task_ctor+0x18>
 80048ac:	2100      	movs	r1, #0
 80048ae:	4815      	ldr	r0, [pc, #84]	@ (8004904 <shell_task_ctor+0x68>)
 80048b0:	f001 f810 	bl	80058d4 <DBC_fault_handler>
    SST_Task_ctor(&me->super, (SST_Handler) shell_task_init, (SST_Handler)shell_state_process_handler, \
 80048b4:	6878      	ldr	r0, [r7, #4]
                                (SST_Evt *)init->current_evt, init->shell_task_event_buffer);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
    SST_Task_ctor(&me->super, (SST_Handler) shell_task_init, (SST_Handler)shell_state_process_handler, \
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <shell_task_ctor+0x6c>)
 80048c4:	4911      	ldr	r1, [pc, #68]	@ (800490c <shell_task_ctor+0x70>)
 80048c6:	f006 f8bd 	bl	800aa44 <SST_Task_ctor>
    SST_TimeEvt_ctor(&me->shell_task_timeout_timer, EVT_MIN_SHELL_POLL_TIME, &(me->super));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3320      	adds	r3, #32
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	2109      	movs	r1, #9
 80048d2:	4618      	mov	r0, r3
 80048d4:	f006 f918 	bl	800ab08 <SST_TimeEvt_ctor>
    me->shell_uart_cli = init->shell_uart_cli; // Initialize to NULL or a valid pointer if needed
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	61da      	str	r2, [r3, #28]
    me->shell_uart_stdio = init->shell_uart_stdio; // Initialize to NULL or a valid pointer if needed
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	619a      	str	r2, [r3, #24]
    me->state = init->init_state; // Set the initial state to process handler
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	615a      	str	r2, [r3, #20]
    SST_TimeEvt_disarm(&me->shell_task_timeout_timer); // Disarm the timeout timer
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	4618      	mov	r0, r3
 80048f6:	f006 f93f 	bl	800ab78 <SST_TimeEvt_disarm>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	08012680 	.word	0x08012680
 8004908:	080049c9 	.word	0x080049c9
 800490c:	08004995 	.word	0x08004995

08004910 <shell_task_ctor_singleton>:
void shell_task_ctor_singleton() {
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
	shell_stdio_init();
 8004916:	f7ff ff53 	bl	80047c0 <shell_stdio_init>
	circular_buffer_init(&shell_task_event_queue,(uint8_t *)&shell_task_event_buffer,sizeof(shell_task_event_buffer),SHELL_TASK_NUM_EVENTS,sizeof(shell_evt_t));
 800491a:	2302      	movs	r3, #2
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	2302      	movs	r3, #2
 8004920:	2204      	movs	r2, #4
 8004922:	490d      	ldr	r1, [pc, #52]	@ (8004958 <shell_task_ctor_singleton+0x48>)
 8004924:	480d      	ldr	r0, [pc, #52]	@ (800495c <shell_task_ctor_singleton+0x4c>)
 8004926:	f005 fdad 	bl	800a484 <circular_buffer_init>
	shell_cli_init();
 800492a:	f7ff ff6f 	bl	800480c <shell_cli_init>
	shell_task_init_t shell_task_init = {
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <shell_task_ctor_singleton+0x50>)
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <shell_task_ctor_singleton+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <shell_task_ctor_singleton+0x58>)
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <shell_task_ctor_singleton+0x5c>)
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	4b06      	ldr	r3, [pc, #24]	@ (800495c <shell_task_ctor_singleton+0x4c>)
 8004942:	617b      	str	r3, [r7, #20]
        .shell_uart_cli = shell_uart_cli, // Initialize to NULL or a valid pointer if needed
        .shell_uart_stdio = &uart_stdio, // Initialize to NULL or a valid pointer if needed
        .current_evt = &shell_current_event, // Pointer to the current event being processed
        .shell_task_event_buffer = &shell_task_event_queue // Pointer to the circular buffer for events
    };
    shell_task_ctor(&shell_task_inst, &shell_task_init);
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4809      	ldr	r0, [pc, #36]	@ (8004970 <shell_task_ctor_singleton+0x60>)
 800494a:	f7ff ffa7 	bl	800489c <shell_task_ctor>

}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20004658 	.word	0x20004658
 800495c:	2000465c 	.word	0x2000465c
 8004960:	080049c9 	.word	0x080049c9
 8004964:	20004fb0 	.word	0x20004fb0
 8004968:	20004678 	.word	0x20004678
 800496c:	20004654 	.word	0x20004654
 8004970:	20004624 	.word	0x20004624

08004974 <shell_task_start>:
void shell_task_start(uint8_t priority)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
	SST_Task_start(&shell_task_inst.super,priority);
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	4619      	mov	r1, r3
 8004982:	4803      	ldr	r0, [pc, #12]	@ (8004990 <shell_task_start+0x1c>)
 8004984:	f006 f878 	bl	800aa78 <SST_Task_start>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20004624 	.word	0x20004624

08004994 <shell_task_init>:
void shell_task_init(shell_task_t * const me, shell_evt_t const * const e) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(7u, me != NULL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <shell_task_init+0x18>
 80049a4:	2107      	movs	r1, #7
 80049a6:	4807      	ldr	r0, [pc, #28]	@ (80049c4 <shell_task_init+0x30>)
 80049a8:	f000 ff94 	bl	80058d4 <DBC_fault_handler>
    SST_TimeEvt_arm(&me->shell_task_timeout_timer, SHELL_POLL_INTERVAL, SHELL_POLL_INTERVAL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3320      	adds	r3, #32
 80049b0:	220a      	movs	r2, #10
 80049b2:	210a      	movs	r1, #10
 80049b4:	4618      	mov	r0, r3
 80049b6:	f006 f8c9 	bl	800ab4c <SST_TimeEvt_arm>
    // Initialize the shell task
    // Set the initial state to process handler
    // Optionally, you can initialize other components or bindings here
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	08012680 	.word	0x08012680

080049c8 <shell_state_process_handler>:


static state_t shell_state_process_handler(shell_task_t * const me, shell_evt_t const * const e) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(3u,me != NULL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <shell_state_process_handler+0x18>
 80049d8:	2103      	movs	r1, #3
 80049da:	480d      	ldr	r0, [pc, #52]	@ (8004a10 <shell_state_process_handler+0x48>)
 80049dc:	f000 ff7a 	bl	80058d4 <DBC_fault_handler>
    DBC_ASSERT(4u,e != NULL);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <shell_state_process_handler+0x26>
 80049e6:	2104      	movs	r1, #4
 80049e8:	4809      	ldr	r0, [pc, #36]	@ (8004a10 <shell_state_process_handler+0x48>)
 80049ea:	f000 ff73 	bl	80058d4 <DBC_fault_handler>

    switch (e->super.sig) {
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d106      	bne.n	8004a04 <shell_state_process_handler+0x3c>
        case EVT_MIN_SHELL_POLL_TIME: {
            // Handle initialization event
        	embeddedCliProcess(shell_uart_cli);
 80049f6:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <shell_state_process_handler+0x4c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f003 fff9 	bl	80089f2 <embeddedCliProcess>
            return HANDLED_STATUS;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <shell_state_process_handler+0x3e>
        }

        default: {
            // Handle other events if necessary
            return IGNORED_STATUS;
 8004a04:	2302      	movs	r3, #2
        }
    }
    
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	08012680 	.word	0x08012680
 8004a14:	20004fb0 	.word	0x20004fb0

08004a18 <CLI_UART_stdio_rx_callback>:


// Callback xử lý ngắt nhận
void CLI_UART_stdio_rx_callback() {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(CLI_UART)) {
 8004a1e:	4818      	ldr	r0, [pc, #96]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a20:	f7ff fe87 	bl	8004732 <LL_USART_IsActiveFlag_RXNE>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <CLI_UART_stdio_rx_callback+0x2a>
        uint8_t received_data = LL_USART_ReceiveData8(CLI_UART);
 8004a2a:	4815      	ldr	r0, [pc, #84]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a2c:	f7ff febb 	bl	80047a6 <LL_USART_ReceiveData8>
 8004a30:	4603      	mov	r3, r0
 8004a32:	71fb      	strb	r3, [r7, #7]
        embeddedCliReceiveChar(shell_uart_cli, received_data);
 8004a34:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <CLI_UART_stdio_rx_callback+0x6c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	79fa      	ldrb	r2, [r7, #7]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f003 ffb5 	bl	80089ac <embeddedCliReceiveChar>
     }
    if (LL_USART_IsActiveFlag_ORE(CLI_UART))
 8004a42:	480f      	ldr	r0, [pc, #60]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a44:	f7ff fe62 	bl	800470c <LL_USART_IsActiveFlag_ORE>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <CLI_UART_stdio_rx_callback+0x3c>
	{
		LL_USART_ClearFlag_ORE(CLI_UART);
 8004a4e:	480c      	ldr	r0, [pc, #48]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a50:	f7ff fe9c 	bl	800478c <LL_USART_ClearFlag_ORE>
	}
	if (LL_USART_IsActiveFlag_FE(CLI_UART))
 8004a54:	480a      	ldr	r0, [pc, #40]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a56:	f7ff fe33 	bl	80046c0 <LL_USART_IsActiveFlag_FE>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <CLI_UART_stdio_rx_callback+0x4e>
	{
		LL_USART_ClearFlag_FE(CLI_UART);
 8004a60:	4807      	ldr	r0, [pc, #28]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a62:	f7ff fe79 	bl	8004758 <LL_USART_ClearFlag_FE>
	}
	if (LL_USART_IsActiveFlag_NE(CLI_UART))
 8004a66:	4806      	ldr	r0, [pc, #24]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a68:	f7ff fe3d 	bl	80046e6 <LL_USART_IsActiveFlag_NE>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <CLI_UART_stdio_rx_callback+0x60>
	{
		LL_USART_ClearFlag_NE(CLI_UART);
 8004a72:	4803      	ldr	r0, [pc, #12]	@ (8004a80 <CLI_UART_stdio_rx_callback+0x68>)
 8004a74:	f7ff fe7d 	bl	8004772 <LL_USART_ClearFlag_NE>
	}
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40011400 	.word	0x40011400
 8004a84:	20004fb0 	.word	0x20004fb0

08004a88 <Shell_USART_IRQHandler>:
void Shell_USART_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	CLI_UART_stdio_rx_callback();
 8004a8c:	f7ff ffc4 	bl	8004a18 <CLI_UART_stdio_rx_callback>
	uart_stdio_tx_callback(&uart_stdio);
 8004a90:	4802      	ldr	r0, [pc, #8]	@ (8004a9c <Shell_USART_IRQHandler+0x14>)
 8004a92:	f005 fcba 	bl	800a40a <uart_stdio_tx_callback>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20004678 	.word	0x20004678

08004aa0 <temperature_control_task_init>:
//static state_t temperature_control_state_heating_heater_tec_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e);
static state_t temperature_control_state_wait_cool_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e);


static void temperature_control_task_init(temperature_control_task_t * const me,temperature_control_evt_t const * const e)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]

	DBG(DBG_LEVEL_INFO,"init\r\n");
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <temperature_control_task_init+0x50>)
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	2331      	movs	r3, #49	@ 0x31
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <temperature_control_task_init+0x54>)
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4910      	ldr	r1, [pc, #64]	@ (8004af8 <temperature_control_task_init+0x58>)
 8004ab8:	4810      	ldr	r0, [pc, #64]	@ (8004afc <temperature_control_task_init+0x5c>)
 8004aba:	f005 fc71 	bl	800a3a0 <uart_stdio_printf>
	bsp_temperature_power_on();
 8004abe:	f002 f83b 	bl	8006b38 <bsp_temperature_power_on>
	me->tec_heater_power_status = 1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	temperature_control_tec_init_all(me); //initialized all tecs
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fc0e 	bl	80052ec <temperature_control_tec_init_all>

	temperature_control_tec_output_disable_all(me);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fbef 	bl	80052b4 <temperature_control_tec_output_disable_all>
	temperature_control_heater_disable_all(me); //disable heater output
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fafd 	bl	80050d6 <temperature_control_heater_disable_all>

	SST_TimeEvt_disarm(&me->temperature_control_task_timeout_timer);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3320      	adds	r3, #32
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f006 f849 	bl	800ab78 <SST_TimeEvt_disarm>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	08011fe0 	.word	0x08011fe0
 8004af4:	08011fe8 	.word	0x08011fe8
 8004af8:	08012020 	.word	0x08012020
 8004afc:	20004678 	.word	0x20004678

08004b00 <temperature_control_task_dispatch>:
static void temperature_control_task_dispatch(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
    temperature_control_state_handler_t prev_state = me->state; /* save for later */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	60fb      	str	r3, [r7, #12]
    state_t status = (me->state)(me, e);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	72fb      	strb	r3, [r7, #11]

    if (status == TRAN_STATUS) { /* transition taken? */
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <temperature_control_task_dispatch+0x36>
        (prev_state)(me, &exit_evt);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4906      	ldr	r1, [pc, #24]	@ (8004b40 <temperature_control_task_dispatch+0x40>)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
        (me->state)(me, &entry_evt);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	4904      	ldr	r1, [pc, #16]	@ (8004b44 <temperature_control_task_dispatch+0x44>)
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
    }
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	080126a8 	.word	0x080126a8
 8004b44:	08012694 	.word	0x08012694

08004b48 <temperature_control_task_ctor>:
void temperature_control_task_ctor(temperature_control_task_t * const me, temperature_control_task_init_t const * const init) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(0u, me != NULL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <temperature_control_task_ctor+0x18>
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4823      	ldr	r0, [pc, #140]	@ (8004be8 <temperature_control_task_ctor+0xa0>)
 8004b5c:	f000 feba 	bl	80058d4 <DBC_fault_handler>
    SST_Task_ctor(&me->super, (SST_Handler) temperature_control_task_init, (SST_Handler)temperature_control_task_dispatch, \
 8004b60:	6878      	ldr	r0, [r7, #4]
                                (SST_Evt *)init->current_evt, init->temperature_control_task_event_buffer);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
    SST_Task_ctor(&me->super, (SST_Handler) temperature_control_task_init, (SST_Handler)temperature_control_task_dispatch, \
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <temperature_control_task_ctor+0xa4>)
 8004b70:	491f      	ldr	r1, [pc, #124]	@ (8004bf0 <temperature_control_task_ctor+0xa8>)
 8004b72:	f005 ff67 	bl	800aa44 <SST_Task_ctor>
    SST_TimeEvt_ctor(&me->temperature_control_task_timeout_timer, EVT_TEMPERATURE_CONTROL_TIMEOUT_CONTROL_LOOP, &(me->super));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	210a      	movs	r1, #10
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 ffc2 	bl	800ab08 <SST_TimeEvt_ctor>
    me->state = init->init_state; // Set the initial state to process handler
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	615a      	str	r2, [r3, #20]
    me->tec_heater_power_status = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    me->tec_inited = 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    me->temperature_control_profile.profile_tec_set = 0; // all off
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    me->temperature_control_profile.profile_heater_set = 0; // all off
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    for (uint32_t i = 0; i< 4; i++) me->tec_table[i] = init->tec_table[i];
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e00e      	b.n	8004bd0 <temperature_control_task_ctor+0x88>
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d9ed      	bls.n	8004bb2 <temperature_control_task_ctor+0x6a>
    SST_TimeEvt_disarm(&me->temperature_control_task_timeout_timer); // Disarm the timeout timer
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3320      	adds	r3, #32
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f005 ffcc 	bl	800ab78 <SST_TimeEvt_disarm>
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08012688 	.word	0x08012688
 8004bec:	08004b01 	.word	0x08004b01
 8004bf0:	08004aa1 	.word	0x08004aa1

08004bf4 <temperature_control_task_singleton_ctor>:

void temperature_control_task_singleton_ctor(void)
{
 8004bf4:	b5b0      	push	{r4, r5, r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af02      	add	r7, sp, #8
	circular_buffer_init(&temperature_control_task_event_queue, (uint8_t * )&temperature_control_task_event_buffer, sizeof(temperature_control_task_event_buffer), TEMPERATURE_CONTROL_TASK_NUM_EVENTS, sizeof(temperature_control_evt_t));
 8004bfa:	2312      	movs	r3, #18
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2302      	movs	r3, #2
 8004c00:	2224      	movs	r2, #36	@ 0x24
 8004c02:	490b      	ldr	r1, [pc, #44]	@ (8004c30 <temperature_control_task_singleton_ctor+0x3c>)
 8004c04:	480b      	ldr	r0, [pc, #44]	@ (8004c34 <temperature_control_task_singleton_ctor+0x40>)
 8004c06:	f005 fc3d 	bl	800a484 <circular_buffer_init>
	temperature_control_task_init_t init = {
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <temperature_control_task_singleton_ctor+0x44>)
 8004c0c:	1d3c      	adds	r4, r7, #4
 8004c0e:	461d      	mov	r5, r3
 8004c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.init_state = temperature_control_state_manual_handler,
			.current_evt = &temperature_control_current_event,
			.temperature_control_task_event_buffer = &temperature_control_task_event_queue,
			.tec_table = {&tec_0, &tec_1, &tec_2, &tec_3}
	};
	temperature_control_task_ctor(&temperature_control_task_inst,&init);
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4806      	ldr	r0, [pc, #24]	@ (8004c3c <temperature_control_task_singleton_ctor+0x48>)
 8004c22:	f7ff ff91 	bl	8004b48 <temperature_control_task_ctor>
}
 8004c26:	bf00      	nop
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20006018 	.word	0x20006018
 8004c34:	2000603c 	.word	0x2000603c
 8004c38:	08012034 	.word	0x08012034
 8004c3c:	20005fb4 	.word	0x20005fb4

08004c40 <temperature_control_state_manual_handler>:
	SST_Task_start(&temperature_control_task_inst.super,priority);
}

//only handle command from shell
static state_t temperature_control_state_manual_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]

	switch (e->super.sig)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d002      	beq.n	8004c58 <temperature_control_state_manual_handler+0x18>
 8004c52:	2b0b      	cmp	r3, #11
 8004c54:	d018      	beq.n	8004c88 <temperature_control_state_manual_handler+0x48>
 8004c56:	e04b      	b.n	8004cf0 <temperature_control_state_manual_handler+0xb0>
	{
		case SIG_ENTRY:
		{
			DBG(DBG_LEVEL_INFO,"entry temperature_control_state_manual_handler\r\n");
 8004c58:	4b28      	ldr	r3, [pc, #160]	@ (8004cfc <temperature_control_state_manual_handler+0xbc>)
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	236c      	movs	r3, #108	@ 0x6c
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <temperature_control_state_manual_handler+0xc0>)
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4927      	ldr	r1, [pc, #156]	@ (8004d04 <temperature_control_state_manual_handler+0xc4>)
 8004c66:	4828      	ldr	r0, [pc, #160]	@ (8004d08 <temperature_control_state_manual_handler+0xc8>)
 8004c68:	f005 fb9a 	bl	800a3a0 <uart_stdio_printf>
			SST_TimeEvt_disarm(&me->temperature_control_task_timeout_timer); //disable the periodic timer
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3320      	adds	r3, #32
 8004c70:	4618      	mov	r0, r3
 8004c72:	f005 ff81 	bl	800ab78 <SST_TimeEvt_disarm>
			temperature_control_tec_output_disable_all(me); //disable all tecs
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb1c 	bl	80052b4 <temperature_control_tec_output_disable_all>
			temperature_control_heater_disable_all(me); //disable heater output
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa2a 	bl	80050d6 <temperature_control_heater_disable_all>
			me->state_num = TEMPERATURE_MAN_CONTROL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	619a      	str	r2, [r3, #24]

		case EVT_TEMPERATURE_CONTROL_HAS_CMD:
		{
			switch (e->cmd){
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	789b      	ldrb	r3, [r3, #2]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d12d      	bne.n	8004cec <temperature_control_state_manual_handler+0xac>
			case TEMPERATURE_AUTOMODE_START:
			{
				if (me->tec_heater_power_status == 0) { //switch to AUTO, but tec power is off
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <temperature_control_state_manual_handler+0x6e>
					temperature_control_power_control(me,1);
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd3a 	bl	8005716 <temperature_control_power_control>
					temperature_control_tec_init_all(me); //initialized all tecs
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fb22 	bl	80052ec <temperature_control_tec_init_all>
					temperature_control_tec_output_disable_all(me);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb03 	bl	80052b4 <temperature_control_tec_output_disable_all>
				}
				int16_t temperature = temperature_monitor_get_ntc_temperature(me->temperature_control_profile.NTC_idx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fde3 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	817b      	strh	r3, [r7, #10]
				if (temperature > me->temperature_control_profile.setpoint) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004cc4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	dd03      	ble.n	8004cd4 <temperature_control_state_manual_handler+0x94>
					me->state = temperature_control_state_cooling_handler; }
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <temperature_control_state_manual_handler+0xcc>)
 8004cd0:	615a      	str	r2, [r3, #20]
 8004cd2:	e002      	b.n	8004cda <temperature_control_state_manual_handler+0x9a>
				else {
					me->state = (temperature_control_state_off_wait_heat_handler);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d10 <temperature_control_state_manual_handler+0xd0>)
 8004cd8:	615a      	str	r2, [r3, #20]

	   				}
				SST_TimeEvt_arm(&me->temperature_control_task_timeout_timer, TEMPERATURE_CONTROL_TASK_TIME_LOOP, TEMPERATURE_CONTROL_TASK_TIME_LOOP);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3320      	adds	r3, #32
 8004cde:	2264      	movs	r2, #100	@ 0x64
 8004ce0:	2164      	movs	r1, #100	@ 0x64
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f005 ff32 	bl	800ab4c <SST_TimeEvt_arm>

				return TRAN_STATUS;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e002      	b.n	8004cf2 <temperature_control_state_manual_handler+0xb2>
			}
			default:
				return IGNORED_STATUS;
 8004cec:	2302      	movs	r3, #2
 8004cee:	e000      	b.n	8004cf2 <temperature_control_state_manual_handler+0xb2>
		}
	}
}
}
	return HANDLED_STATUS;
 8004cf0:	2301      	movs	r3, #1
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08011fe0 	.word	0x08011fe0
 8004d00:	08011fe8 	.word	0x08011fe8
 8004d04:	08012050 	.word	0x08012050
 8004d08:	20004678 	.word	0x20004678
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004dc5 	.word	0x08004dc5

08004d14 <temperature_control_state_cooling_handler>:


static state_t temperature_control_state_cooling_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	switch (e->super.sig) {
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	2b0b      	cmp	r3, #11
 8004d24:	d032      	beq.n	8004d8c <temperature_control_state_cooling_handler+0x78>
 8004d26:	2b0b      	cmp	r3, #11
 8004d28:	dc3b      	bgt.n	8004da2 <temperature_control_state_cooling_handler+0x8e>
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d002      	beq.n	8004d34 <temperature_control_state_cooling_handler+0x20>
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d016      	beq.n	8004d60 <temperature_control_state_cooling_handler+0x4c>
 8004d32:	e036      	b.n	8004da2 <temperature_control_state_cooling_handler+0x8e>
		case SIG_ENTRY:{
			DBG(DBG_LEVEL_INFO,"entry temperature_control_state_cooling_handler\r\n");
 8004d34:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <temperature_control_state_cooling_handler+0x98>)
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	2395      	movs	r3, #149	@ 0x95
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <temperature_control_state_cooling_handler+0x9c>)
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	491c      	ldr	r1, [pc, #112]	@ (8004db4 <temperature_control_state_cooling_handler+0xa0>)
 8004d42:	481d      	ldr	r0, [pc, #116]	@ (8004db8 <temperature_control_state_cooling_handler+0xa4>)
 8004d44:	f005 fb2c 	bl	800a3a0 <uart_stdio_printf>
			me->counter = 0;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
			temperature_control_auto_tec_set_output(me, TEC_COOL); //set all tecs on the profile to the desired voltage
 8004d4e:	2100      	movs	r1, #0
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fa1b 	bl	800518c <temperature_control_auto_tec_set_output>
			temperature_control_auto_tec_enable_output(me); // Turn on TEC output
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f95c 	bl	8005014 <temperature_control_auto_tec_enable_output>

			return HANDLED_STATUS;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e021      	b.n	8004da4 <temperature_control_state_cooling_handler+0x90>
		}

		case EVT_TEMPERATURE_CONTROL_TIMEOUT_CONTROL_LOOP: {
			int16_t temperature = temperature_monitor_get_ntc_temperature(me->temperature_control_profile.NTC_idx); //get NTC temperature
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fd8a 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	81fb      	strh	r3, [r7, #14]
			   if (temperature > me->temperature_control_profile.setpoint) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004d76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	dd01      	ble.n	8004d82 <temperature_control_state_cooling_handler+0x6e>
				// Continue cooling
				return HANDLED_STATUS; } 
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e010      	b.n	8004da4 <temperature_control_state_cooling_handler+0x90>
			else {
				// Stop cooling, transition to stopped state to wait for natural heating
				me->state = (temperature_control_state_off_wait_heat_handler);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a0d      	ldr	r2, [pc, #52]	@ (8004dbc <temperature_control_state_cooling_handler+0xa8>)
 8004d86:	615a      	str	r2, [r3, #20]
				return TRAN_STATUS;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e00b      	b.n	8004da4 <temperature_control_state_cooling_handler+0x90>
   				}
		}
		case EVT_TEMPERATURE_CONTROL_HAS_CMD: {
			//return (temperature_control_handle_command(me, e->cmd, e->payload));
			switch (e->cmd) {
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	789b      	ldrb	r3, [r3, #2]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d104      	bne.n	8004d9e <temperature_control_state_cooling_handler+0x8a>
				case TEMPERATURE_MANMODE_START: {
					me->state = temperature_control_state_manual_handler; // Transition to manual mode
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <temperature_control_state_cooling_handler+0xac>)
 8004d98:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e002      	b.n	8004da4 <temperature_control_state_cooling_handler+0x90>
				}
		default:
			return IGNORED_STATUS;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e000      	b.n	8004da4 <temperature_control_state_cooling_handler+0x90>
	      }}
		default:
			return IGNORED_STATUS;
 8004da2:	2302      	movs	r3, #2
		}
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	08011fe0 	.word	0x08011fe0
 8004db0:	08011fe8 	.word	0x08011fe8
 8004db4:	0801208c 	.word	0x0801208c
 8004db8:	20004678 	.word	0x20004678
 8004dbc:	08004dc5 	.word	0x08004dc5
 8004dc0:	08004c41 	.word	0x08004c41

08004dc4 <temperature_control_state_off_wait_heat_handler>:
static state_t temperature_control_state_off_wait_heat_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{	
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	switch (e->super.sig) {
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2b0b      	cmp	r3, #11
 8004dd4:	d046      	beq.n	8004e64 <temperature_control_state_off_wait_heat_handler+0xa0>
 8004dd6:	2b0b      	cmp	r3, #11
 8004dd8:	dc4f      	bgt.n	8004e7a <temperature_control_state_off_wait_heat_handler+0xb6>
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d002      	beq.n	8004de4 <temperature_control_state_off_wait_heat_handler+0x20>
 8004dde:	2b0a      	cmp	r3, #10
 8004de0:	d015      	beq.n	8004e0e <temperature_control_state_off_wait_heat_handler+0x4a>
 8004de2:	e04a      	b.n	8004e7a <temperature_control_state_off_wait_heat_handler+0xb6>
		case SIG_ENTRY: {
			DBG(DBG_LEVEL_INFO,"entry temperature_control_state_off_wait_heat_handler\r\n");
 8004de4:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <temperature_control_state_off_wait_heat_handler+0xc0>)
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	23ba      	movs	r3, #186	@ 0xba
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <temperature_control_state_off_wait_heat_handler+0xc4>)
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4926      	ldr	r1, [pc, #152]	@ (8004e8c <temperature_control_state_off_wait_heat_handler+0xc8>)
 8004df2:	4827      	ldr	r0, [pc, #156]	@ (8004e90 <temperature_control_state_off_wait_heat_handler+0xcc>)
 8004df4:	f005 fad4 	bl	800a3a0 <uart_stdio_printf>
   			me->counter = 0; // Reset counter for waiting
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]
   			temperature_control_tec_output_disable_all(me); // Disable TEC output
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa58 	bl	80052b4 <temperature_control_tec_output_disable_all>
   			temperature_control_heater_disable_all(me); //disable all heater
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f966 	bl	80050d6 <temperature_control_heater_disable_all>
   			return HANDLED_STATUS;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e036      	b.n	8004e7c <temperature_control_state_off_wait_heat_handler+0xb8>
  	  }
		case EVT_TEMPERATURE_CONTROL_TIMEOUT_CONTROL_LOOP: {
			int16_t temperature = temperature_monitor_get_ntc_temperature(me->temperature_control_profile.NTC_idx);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fd33 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	81fb      	strh	r3, [r7, #14]
			   if (temperature > me->temperature_control_profile.setpoint) { //temperature larger than setpoint, turn on TEC on COOL mode
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004e24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	dd04      	ble.n	8004e36 <temperature_control_state_off_wait_heat_handler+0x72>
				me->state = temperature_control_state_cooling_handler;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <temperature_control_state_off_wait_heat_handler+0xd0>)
 8004e30:	615a      	str	r2, [r3, #20]
				return TRAN_STATUS; }
 8004e32:	2300      	movs	r3, #0
 8004e34:	e022      	b.n	8004e7c <temperature_control_state_off_wait_heat_handler+0xb8>
			else {
				// temperature is still lower than setpoint, wait for natural heating, calculate time to wait
				me->counter++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	61da      	str	r2, [r3, #28]
				if ((me->counter >= TEMPERATURE_CONTROL_WAIT_TIMEOUT_NUM) || ((me->temperature_control_profile.setpoint - temperature) > TEMPERATURE_CONTROL_HYSTERIS)) { // can not wait any longer, turn on heater
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	2b1d      	cmp	r3, #29
 8004e46:	d808      	bhi.n	8004e5a <temperature_control_state_off_wait_heat_handler+0x96>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b0a      	cmp	r3, #10
 8004e58:	dd04      	ble.n	8004e64 <temperature_control_state_off_wait_heat_handler+0xa0>
					me->state = temperature_control_state_heating_heater_handler;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e98 <temperature_control_state_off_wait_heat_handler+0xd4>)
 8004e5e:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e00b      	b.n	8004e7c <temperature_control_state_off_wait_heat_handler+0xb8>
   				}
			}
		}
		case EVT_TEMPERATURE_CONTROL_HAS_CMD: {
			switch (e->cmd) {
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	789b      	ldrb	r3, [r3, #2]
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d104      	bne.n	8004e76 <temperature_control_state_off_wait_heat_handler+0xb2>
				case TEMPERATURE_MANMODE_START: {
					me->state = temperature_control_state_manual_handler; // Transition to manual mode
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8004e9c <temperature_control_state_off_wait_heat_handler+0xd8>)
 8004e70:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e002      	b.n	8004e7c <temperature_control_state_off_wait_heat_handler+0xb8>
				}
			default:
			return IGNORED_STATUS;
 8004e76:	2302      	movs	r3, #2
 8004e78:	e000      	b.n	8004e7c <temperature_control_state_off_wait_heat_handler+0xb8>
			}
		}
		default:
			return IGNORED_STATUS;
 8004e7a:	2302      	movs	r3, #2
	}
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08011fe0 	.word	0x08011fe0
 8004e88:	08011fe8 	.word	0x08011fe8
 8004e8c:	080120c8 	.word	0x080120c8
 8004e90:	20004678 	.word	0x20004678
 8004e94:	08004d15 	.word	0x08004d15
 8004e98:	08004ea1 	.word	0x08004ea1
 8004e9c:	08004c41 	.word	0x08004c41

08004ea0 <temperature_control_state_heating_heater_handler>:
static state_t temperature_control_state_heating_heater_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{	
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	switch (e->super.sig) {
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	2b0b      	cmp	r3, #11
 8004eb0:	d02e      	beq.n	8004f10 <temperature_control_state_heating_heater_handler+0x70>
 8004eb2:	2b0b      	cmp	r3, #11
 8004eb4:	dc37      	bgt.n	8004f26 <temperature_control_state_heating_heater_handler+0x86>
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d002      	beq.n	8004ec0 <temperature_control_state_heating_heater_handler+0x20>
 8004eba:	2b0a      	cmp	r3, #10
 8004ebc:	d012      	beq.n	8004ee4 <temperature_control_state_heating_heater_handler+0x44>
 8004ebe:	e032      	b.n	8004f26 <temperature_control_state_heating_heater_handler+0x86>
		case SIG_ENTRY: {
			DBG(DBG_LEVEL_INFO,"entry temperature_control_state_heating_heater_handler\r\n");
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <temperature_control_state_heating_heater_handler+0x90>)
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	23e0      	movs	r3, #224	@ 0xe0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <temperature_control_state_heating_heater_handler+0x94>)
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	491a      	ldr	r1, [pc, #104]	@ (8004f38 <temperature_control_state_heating_heater_handler+0x98>)
 8004ece:	481b      	ldr	r0, [pc, #108]	@ (8004f3c <temperature_control_state_heating_heater_handler+0x9c>)
 8004ed0:	f005 fa66 	bl	800a3a0 <uart_stdio_printf>
   			me->counter = 0; // Reset counter for heating
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61da      	str	r2, [r3, #28]
   			temperature_control_enable_heater(me); //turn on heater in profile
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8cd 	bl	800507a <temperature_control_enable_heater>
   			return HANDLED_STATUS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e021      	b.n	8004f28 <temperature_control_state_heating_heater_handler+0x88>
  	    }
		case EVT_TEMPERATURE_CONTROL_TIMEOUT_CONTROL_LOOP: {
			int16_t temperature = temperature_monitor_get_ntc_temperature(me->temperature_control_profile.NTC_idx);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fcc8 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	81fb      	strh	r3, [r7, #14]
			   if (temperature < me->temperature_control_profile.setpoint) { //temperature smaller than setpoint, keep heating
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004efa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	da01      	bge.n	8004f06 <temperature_control_state_heating_heater_handler+0x66>
				return HANDLED_STATUS; } 
 8004f02:	2301      	movs	r3, #1
 8004f04:	e010      	b.n	8004f28 <temperature_control_state_heating_heater_handler+0x88>
			else {
				// temperature is larger than setpoint, wait for natural cooling, calculate time to wait
					me->state = temperature_control_state_wait_cool_handler;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <temperature_control_state_heating_heater_handler+0xa0>)
 8004f0a:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e00b      	b.n	8004f28 <temperature_control_state_heating_heater_handler+0x88>
   				}
		}
		case EVT_TEMPERATURE_CONTROL_HAS_CMD: {
			switch (e->cmd) {
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	789b      	ldrb	r3, [r3, #2]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d104      	bne.n	8004f22 <temperature_control_state_heating_heater_handler+0x82>
				case TEMPERATURE_MANMODE_START: {
					me->state = temperature_control_state_manual_handler; // Transition to manual mode
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <temperature_control_state_heating_heater_handler+0xa4>)
 8004f1c:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e002      	b.n	8004f28 <temperature_control_state_heating_heater_handler+0x88>
				}
				default:
					return IGNORED_STATUS;
 8004f22:	2302      	movs	r3, #2
 8004f24:	e000      	b.n	8004f28 <temperature_control_state_heating_heater_handler+0x88>
				}
		}
		default:
			return IGNORED_STATUS;
 8004f26:	2302      	movs	r3, #2
	}
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08011fe0 	.word	0x08011fe0
 8004f34:	08011fe8 	.word	0x08011fe8
 8004f38:	0801210c 	.word	0x0801210c
 8004f3c:	20004678 	.word	0x20004678
 8004f40:	08004f49 	.word	0x08004f49
 8004f44:	08004c41 	.word	0x08004c41

08004f48 <temperature_control_state_wait_cool_handler>:

static state_t temperature_control_state_wait_cool_handler(temperature_control_task_t * const me, temperature_control_evt_t const * const e)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	switch (e->super.sig) {
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	2b0b      	cmp	r3, #11
 8004f58:	d03d      	beq.n	8004fd6 <temperature_control_state_wait_cool_handler+0x8e>
 8004f5a:	2b0b      	cmp	r3, #11
 8004f5c:	dc46      	bgt.n	8004fec <temperature_control_state_wait_cool_handler+0xa4>
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d002      	beq.n	8004f68 <temperature_control_state_wait_cool_handler+0x20>
 8004f62:	2b0a      	cmp	r3, #10
 8004f64:	d013      	beq.n	8004f8e <temperature_control_state_wait_cool_handler+0x46>
 8004f66:	e041      	b.n	8004fec <temperature_control_state_wait_cool_handler+0xa4>
		case SIG_ENTRY: {
			DBG(DBG_LEVEL_INFO,"entry temperature_control_state_wait_cool_handler\r\n");
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <temperature_control_state_wait_cool_handler+0xb0>)
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <temperature_control_state_wait_cool_handler+0xb4>)
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	4922      	ldr	r1, [pc, #136]	@ (8005000 <temperature_control_state_wait_cool_handler+0xb8>)
 8004f78:	4822      	ldr	r0, [pc, #136]	@ (8005004 <temperature_control_state_wait_cool_handler+0xbc>)
 8004f7a:	f005 fa11 	bl	800a3a0 <uart_stdio_printf>

			temperature_control_tec_output_disable_all(me); //turn off all heater
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f998 	bl	80052b4 <temperature_control_tec_output_disable_all>
			temperature_control_heater_disable_all(me);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8a6 	bl	80050d6 <temperature_control_heater_disable_all>

   			return HANDLED_STATUS;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e02f      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
  	    }
		case EVT_TEMPERATURE_CONTROL_TIMEOUT_CONTROL_LOOP: {
			int16_t temperature = temperature_monitor_get_ntc_temperature(me->temperature_control_profile.NTC_idx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fc73 	bl	8005880 <temperature_monitor_get_ntc_temperature>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	81fb      	strh	r3, [r7, #14]
			   if (temperature < me->temperature_control_profile.setpoint) { //temperature automatically below setpoint, heat it up
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8004fa4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	da04      	bge.n	8004fb6 <temperature_control_state_wait_cool_handler+0x6e>
				   me->state = temperature_control_state_heating_heater_handler;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a16      	ldr	r2, [pc, #88]	@ (8005008 <temperature_control_state_wait_cool_handler+0xc0>)
 8004fb0:	615a      	str	r2, [r3, #20]
				   return TRAN_STATUS; }
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e01b      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
			else {
				// temperature is larger than setpoint, wait for natural cooling, calculate time to wait
				me->counter++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	61da      	str	r2, [r3, #28]
				if (me->counter >= TEMPERATURE_CONTROL_WAIT_TIMEOUT_NUM) { // can not wait any longer, turn on TEC to cool
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	2b1d      	cmp	r3, #29
 8004fc6:	d904      	bls.n	8004fd2 <temperature_control_state_wait_cool_handler+0x8a>
					me->state = temperature_control_state_cooling_handler;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	@ (800500c <temperature_control_state_wait_cool_handler+0xc4>)
 8004fcc:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e00d      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
   				}
				return HANDLED_STATUS;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e00b      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
		}
		case EVT_TEMPERATURE_CONTROL_HAS_CMD: {
			switch (e->cmd) {
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d104      	bne.n	8004fe8 <temperature_control_state_wait_cool_handler+0xa0>
				case TEMPERATURE_MANMODE_START: {
					me->state = temperature_control_state_manual_handler; // Transition to manual mode
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8005010 <temperature_control_state_wait_cool_handler+0xc8>)
 8004fe2:	615a      	str	r2, [r3, #20]
					return TRAN_STATUS;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e002      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
				}
				default:
					return IGNORED_STATUS;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e000      	b.n	8004fee <temperature_control_state_wait_cool_handler+0xa6>
				}
		}
		}
		default:
			return IGNORED_STATUS;
 8004fec:	2302      	movs	r3, #2
	}
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	08011fe0 	.word	0x08011fe0
 8004ffc:	08011fe8 	.word	0x08011fe8
 8005000:	08012150 	.word	0x08012150
 8005004:	20004678 	.word	0x20004678
 8005008:	08004ea1 	.word	0x08004ea1
 800500c:	08004d15 	.word	0x08004d15
 8005010:	08004c41 	.word	0x08004c41

08005014 <temperature_control_auto_tec_enable_output>:

void temperature_control_auto_tec_enable_output(temperature_control_task_t * const me)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 // Enable or disable TEC output
 uint8_t tec_set = me->temperature_control_profile.profile_tec_set;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005022:	73bb      	strb	r3, [r7, #14]
 for (uint8_t i =0; i<4; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e01f      	b.n	800506a <temperature_control_auto_tec_enable_output+0x56>
 {
	 if (tec_set & (1 << i)) lt8722_set_swen_req(me->tec_table[i],1);
 800502a:	7bba      	ldrb	r2, [r7, #14]
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	fa42 f303 	asr.w	r3, r2, r3
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <temperature_control_auto_tec_enable_output+0x3c>
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	330c      	adds	r3, #12
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f002 fef5 	bl	8007e38 <lt8722_set_swen_req>
 800504e:	e009      	b.n	8005064 <temperature_control_auto_tec_enable_output+0x50>
	 else lt8722_set_swen_req(me->tec_table[i],0);
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	330c      	adds	r3, #12
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f002 feea 	bl	8007e38 <lt8722_set_swen_req>
 for (uint8_t i =0; i<4; i++)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	3301      	adds	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d9dc      	bls.n	800502a <temperature_control_auto_tec_enable_output+0x16>

 }

}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <temperature_control_enable_heater>:

void temperature_control_enable_heater(temperature_control_task_t * const me)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
	 uint8_t heater_duty = me->temperature_control_profile.heater_duty_cycle;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005088:	73bb      	strb	r3, [r7, #14]
	 uint8_t heater_set = me->temperature_control_profile.profile_heater_set;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005090:	737b      	strb	r3, [r7, #13]
	 for (uint8_t i =0; i<4; i++)
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e016      	b.n	80050c6 <temperature_control_enable_heater+0x4c>
	 {
		 if (heater_set & (1 << i)) bsp_heater_set_duty_channel(i,heater_duty);
 8005098:	7b7a      	ldrb	r2, [r7, #13]
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	fa42 f303 	asr.w	r3, r2, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <temperature_control_enable_heater+0x3e>
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	7bba      	ldrb	r2, [r7, #14]
 80050ac:	b292      	uxth	r2, r2
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fc53 	bl	800595c <bsp_heater_set_duty_channel>
 80050b6:	e003      	b.n	80050c0 <temperature_control_enable_heater+0x46>
		 else bsp_heater_turn_off_channel(i);
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fc90 	bl	80059e0 <bsp_heater_turn_off_channel>
	 for (uint8_t i =0; i<4; i++)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	3301      	adds	r3, #1
 80050c4:	73fb      	strb	r3, [r7, #15]
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d9e5      	bls.n	8005098 <temperature_control_enable_heater+0x1e>

	 }
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <temperature_control_heater_disable_all>:

void temperature_control_heater_disable_all(temperature_control_task_t * const me)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
	 for (uint8_t i =0; i<4; i++) bsp_heater_turn_off_channel(i);
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	e006      	b.n	80050f2 <temperature_control_heater_disable_all+0x1c>
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fc7a 	bl	80059e0 <bsp_heater_turn_off_channel>
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	3301      	adds	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d9f5      	bls.n	80050e4 <temperature_control_heater_disable_all+0xe>
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <temperature_control_profile_tec_voltage_get>:


uint16_t temperature_control_profile_tec_voltage_get( temperature_control_task_t *const me)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]

	return me->temperature_control_profile.tec_voltage;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
	return ERROR_OK;

}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <temperature_control_auto_mode_set>:

uint32_t temperature_control_auto_mode_set(temperature_control_task_t *const me)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	temperature_control_evt_t auto_mode_evt = {.super = {.sig = EVT_TEMPERATURE_CONTROL_HAS_CMD},
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	821a      	strh	r2, [r3, #16]
 8005134:	230b      	movs	r3, #11
 8005136:	81bb      	strh	r3, [r7, #12]
 8005138:	2304      	movs	r3, #4
 800513a:	73bb      	strb	r3, [r7, #14]
												.cmd = TEMPERATURE_AUTOMODE_START,
												};
	SST_Task_post(&me->super, (SST_Evt *)&auto_mode_evt);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f107 020c 	add.w	r2, r7, #12
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f005 fcc1 	bl	800aacc <SST_Task_post>
	return ERROR_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <temperature_control_man_mode_set>:
uint32_t temperature_control_man_mode_set(temperature_control_task_t *const me)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	temperature_control_evt_t man_mode_evt = {.super = {.sig = EVT_TEMPERATURE_CONTROL_HAS_CMD},
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	821a      	strh	r2, [r3, #16]
 800516c:	230b      	movs	r3, #11
 800516e:	81bb      	strh	r3, [r7, #12]
 8005170:	2305      	movs	r3, #5
 8005172:	73bb      	strb	r3, [r7, #14]
												.cmd = TEMPERATURE_MANMODE_START,
												};
	SST_Task_post(&me->super, (SST_Evt *)&man_mode_evt);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f107 020c 	add.w	r2, r7, #12
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f005 fca5 	bl	800aacc <SST_Task_post>
	return ERROR_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <temperature_control_auto_tec_set_output>:



void temperature_control_auto_tec_set_output(temperature_control_task_t * const me,uint32_t tec_dir)
{
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	b08d      	sub	sp, #52	@ 0x34
 8005192:	af00      	add	r7, sp, #0
 8005194:	61f8      	str	r0, [r7, #28]
 8005196:	61b9      	str	r1, [r7, #24]
	 uint8_t tec_set = me->temperature_control_profile.profile_tec_set;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	 uint16_t voltage_ms = me->temperature_control_profile.tec_voltage;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80051a8:	853b      	strh	r3, [r7, #40]	@ 0x28
	 for (uint32_t i =0; i<4; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	e078      	b.n	80052a2 <temperature_control_auto_tec_set_output+0x116>
	 {
		 if (tec_set & (1 << i))	//tec is in the profile
 80051b0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b6:	fa42 f303 	asr.w	r3, r2, r3
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d06c      	beq.n	800529c <temperature_control_auto_tec_set_output+0x110>
		 {
			volatile uint8_t status = (me->tec_table[i]->status);
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c6:	330c      	adds	r3, #12
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	7e9b      	ldrb	r3, [r3, #26]
 80051d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			 if (!(status & (1 << TEC_INIT_POS)))	//not init yet, first init
 80051d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <temperature_control_auto_tec_set_output+0x68>
				 lt8722_init(me->tec_table[i]);
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	330c      	adds	r3, #12
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f002 fe87 	bl	8007f02 <lt8722_init>
			 status = (me->tec_table[i]->status);
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f8:	330c      	adds	r3, #12
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	7e9b      	ldrb	r3, [r3, #26]
 8005202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
//			 if (!(status & (1 << TEC_SWITCH_ENABLED_POS)))	//not check if tec output is enabled
//				 lt8722_set_swen_req(me->tec_table[i], 1);
			 lt8722_set_output_voltage_channel(me->tec_table[i], tec_dir, (int64_t)voltage_ms * 1000000);
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	330c      	adds	r3, #12
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	b2de      	uxtb	r6, r3
 8005218:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	469a      	mov	sl, r3
 800521e:	4693      	mov	fp, r2
 8005220:	4652      	mov	r2, sl
 8005222:	465b      	mov	r3, fp
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f04f 0100 	mov.w	r1, #0
 800522c:	0159      	lsls	r1, r3, #5
 800522e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005232:	0150      	lsls	r0, r2, #5
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	ebb2 040a 	subs.w	r4, r2, sl
 800523c:	eb63 050b 	sbc.w	r5, r3, fp
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	026b      	lsls	r3, r5, #9
 800524a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800524e:	0262      	lsls	r2, r4, #9
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	eb14 080a 	adds.w	r8, r4, sl
 8005258:	eb45 090b 	adc.w	r9, r5, fp
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005268:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800526c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005270:	ebb2 0108 	subs.w	r1, r2, r8
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	eb63 0209 	sbc.w	r2, r3, r9
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005280:	4602      	mov	r2, r0
 8005282:	eb12 020a 	adds.w	r2, r2, sl
 8005286:	613a      	str	r2, [r7, #16]
 8005288:	460a      	mov	r2, r1
 800528a:	eb42 020b 	adc.w	r2, r2, fp
 800528e:	617a      	str	r2, [r7, #20]
 8005290:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005294:	4631      	mov	r1, r6
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f002 ff12 	bl	80080c0 <lt8722_set_output_voltage_channel>
	 for (uint32_t i =0; i<4; i++)
 800529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529e:	3301      	adds	r3, #1
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d983      	bls.n	80051b0 <temperature_control_auto_tec_set_output+0x24>
		 }
	 }
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3734      	adds	r7, #52	@ 0x34
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052b4 <temperature_control_tec_output_disable_all>:
void temperature_control_tec_output_disable_all(temperature_control_task_t * const me)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0;i<4;i++) lt8722_set_swen_req(me->tec_table[i],0);
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e00c      	b.n	80052dc <temperature_control_tec_output_disable_all+0x28>
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	330c      	adds	r3, #12
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fdb1 	bl	8007e38 <lt8722_set_swen_req>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d9ef      	bls.n	80052c2 <temperature_control_tec_output_disable_all+0xe>
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <temperature_control_tec_init_all>:
void temperature_control_tec_init_all(temperature_control_task_t * const me)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0;i<4;i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e00b      	b.n	8005312 <temperature_control_tec_init_all+0x26>
		{
		lt8722_init(me->tec_table[i]);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	330c      	adds	r3, #12
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f002 fdfb 	bl	8007f02 <lt8722_init>
	for (uint32_t i = 0;i<4;i++)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d9f0      	bls.n	80052fa <temperature_control_tec_init_all+0xe>
		}
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <temperature_control_tec_init>:

uint32_t temperature_control_tec_init(temperature_control_task_t * const me,uint32_t tec_idx)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
	int8_t ret;
	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d901      	bls.n	8005336 <temperature_control_tec_init+0x14>
 8005332:	2306      	movs	r3, #6
 8005334:	e011      	b.n	800535a <temperature_control_tec_init+0x38>
	ret = lt8722_init(me->tec_table[tec_idx]);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4618      	mov	r0, r3
 8005344:	f002 fddd 	bl	8007f02 <lt8722_init>
 8005348:	4603      	mov	r3, r0
 800534a:	73fb      	strb	r3, [r7, #15]
	if (ret) return ERROR_FAIL;
 800534c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <temperature_control_tec_init+0x36>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <temperature_control_tec_init+0x38>
	else return ERROR_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <temperature_control_tec_enable_output>:
uint32_t temperature_control_tec_enable_output(temperature_control_task_t * const me,uint32_t tec_idx, bool value)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
	int8_t ret;
	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d901      	bls.n	800537a <temperature_control_tec_enable_output+0x18>
 8005376:	2306      	movs	r3, #6
 8005378:	e013      	b.n	80053a2 <temperature_control_tec_enable_output+0x40>
	ret = lt8722_set_swen_req(me->tec_table[tec_idx],value);
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	330c      	adds	r3, #12
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	79fa      	ldrb	r2, [r7, #7]
 8005388:	4611      	mov	r1, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f002 fd54 	bl	8007e38 <lt8722_set_swen_req>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]
	if (ret) return ERROR_FAIL;
 8005394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <temperature_control_tec_enable_output+0x3e>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <temperature_control_tec_enable_output+0x40>
	else return ERROR_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <temperature_control_is_in_man_state>:
bool temperature_control_is_in_man_state(temperature_control_task_t * const me)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	return (me->state == temperature_control_state_manual_handler);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4a05      	ldr	r2, [pc, #20]	@ (80053d0 <temperature_control_is_in_man_state+0x24>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	08004c41 	.word	0x08004c41

080053d4 <temperature_control_profile_tec_register>:

uint32_t temperature_control_profile_tec_register(temperature_control_task_t *const me,uint8_t tec_idx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d901      	bls.n	80053ea <temperature_control_profile_tec_register+0x16>
 80053e6:	2306      	movs	r3, #6
 80053e8:	e00f      	b.n	800540a <temperature_control_profile_tec_register+0x36>

		me->temperature_control_profile.profile_tec_set |= (1 << tec_idx);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80053f0:	b25a      	sxtb	r2, r3
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
		return ERROR_OK;
 8005408:	2300      	movs	r3, #0

}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <temperature_control_profile_tec_unregister>:

uint32_t temperature_control_profile_tec_unregister(temperature_control_task_t *const me,uint8_t tec_idx)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d901      	bls.n	800542c <temperature_control_profile_tec_unregister+0x16>
 8005428:	2306      	movs	r3, #6
 800542a:	e011      	b.n	8005450 <temperature_control_profile_tec_unregister+0x3a>

		me->temperature_control_profile.profile_tec_set &= ~(1 << tec_idx);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005432:	b25a      	sxtb	r2, r3
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	b25b      	sxtb	r3, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	b25b      	sxtb	r3, r3
 8005442:	4013      	ands	r3, r2
 8005444:	b25b      	sxtb	r3, r3
 8005446:	b2da      	uxtb	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
		return ERROR_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <temperature_control_profile_tec_get>:

uint8_t temperature_control_profile_tec_get(temperature_control_task_t *const me)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	return me->temperature_control_profile.profile_tec_set;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <temperature_control_profile_tec_voltage_set>:
/*
 * change the profile output voltage of TEC, only work when the system in manual mode
 */
uint32_t temperature_control_profile_tec_voltage_set(temperature_control_task_t *const me, uint16_t	volt_mv)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	807b      	strh	r3, [r7, #2]


		if ((volt_mv < 500) || (volt_mv > 3000)) return ERROR_NOT_SUPPORTED;
 8005482:	887b      	ldrh	r3, [r7, #2]
 8005484:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005488:	d304      	bcc.n	8005494 <temperature_control_profile_tec_voltage_set+0x1e>
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <temperature_control_profile_tec_voltage_set+0x22>
 8005494:	2306      	movs	r3, #6
 8005496:	e004      	b.n	80054a2 <temperature_control_profile_tec_voltage_set+0x2c>


		me->temperature_control_profile.tec_voltage = volt_mv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	887a      	ldrh	r2, [r7, #2]
 800549c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

		//Post profile change signal? TODO
		return ERROR_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <temperature_control_profile_heater_duty_set>:
uint32_t temperature_control_profile_heater_duty_set( temperature_control_task_t *const me,uint8_t	duty)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	70fb      	strb	r3, [r7, #3]
	if (duty > 100) return ERROR_NOT_SUPPORTED;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b64      	cmp	r3, #100	@ 0x64
 80054be:	d901      	bls.n	80054c4 <temperature_control_profile_heater_duty_set+0x16>
 80054c0:	2306      	movs	r3, #6
 80054c2:	e004      	b.n	80054ce <temperature_control_profile_heater_duty_set+0x20>

		me->temperature_control_profile.heater_duty_cycle = duty;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		return ERROR_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <temperature_control_profile_heater_duty_get>:
uint8_t temperature_control_profile_heater_duty_get( temperature_control_task_t *const me)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	return me->temperature_control_profile.heater_duty_cycle;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <temperature_control_profile_heater_register>:
uint32_t temperature_control_profile_heater_register( temperature_control_task_t *const me,uint8_t heater_idx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
	if (heater_idx > 3) return ERROR_NOT_SUPPORTED;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d901      	bls.n	800550a <temperature_control_profile_heater_register+0x16>
 8005506:	2306      	movs	r3, #6
 8005508:	e00f      	b.n	800552a <temperature_control_profile_heater_register+0x36>

		me->temperature_control_profile.profile_heater_set |= (1 << heater_idx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005510:	b25a      	sxtb	r2, r3
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	b25b      	sxtb	r3, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	b25b      	sxtb	r3, r3
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		return ERROR_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <temperature_control_profile_heater_unregister>:
uint32_t temperature_control_profile_heater_unregister(temperature_control_task_t *const me,uint8_t heater_idx)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
	if (heater_idx > 3) return ERROR_NOT_SUPPORTED;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d901      	bls.n	800554c <temperature_control_profile_heater_unregister+0x16>
 8005548:	2306      	movs	r3, #6
 800554a:	e011      	b.n	8005570 <temperature_control_profile_heater_unregister+0x3a>

		me->temperature_control_profile.profile_heater_set &= ~(1 << heater_idx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005552:	b25a      	sxtb	r2, r3
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2101      	movs	r1, #1
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	b25b      	sxtb	r3, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	b25b      	sxtb	r3, r3
 8005562:	4013      	ands	r3, r2
 8005564:	b25b      	sxtb	r3, r3
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		return ERROR_OK;
 800556e:	2300      	movs	r3, #0

}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <temperature_control_profile_heater_profile_get>:

uint8_t temperature_control_profile_heater_profile_get( temperature_control_task_t *const me)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	return me->temperature_control_profile.profile_heater_set;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <temperature_control_profile_ntc_register>:

uint32_t temperature_control_profile_ntc_register( temperature_control_task_t *const me,uint8_t ntc_idx)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
	if (ntc_idx > 7) return ERROR_NOT_SUPPORTED;
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d901      	bls.n	80055ac <temperature_control_profile_ntc_register+0x16>
 80055a8:	2306      	movs	r3, #6
 80055aa:	e004      	b.n	80055b6 <temperature_control_profile_ntc_register+0x20>

		me->temperature_control_profile.NTC_idx = ntc_idx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
		return ERROR_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <temperature_control_profile_setpoint_set>:
void temperature_control_profile_setpoint_set(temperature_control_task_t *const me, int16_t	setpoint)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	807b      	strh	r3, [r7, #2]
	me->temperature_control_profile.setpoint = setpoint;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	887a      	ldrh	r2, [r7, #2]
 80055d2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <temperature_control_profile_setpoint_get>:
int16_t temperature_control_profile_setpoint_get(temperature_control_task_t *const me)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
	return me->temperature_control_profile.setpoint;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <temperature_control_profile_ntc_get>:
uint8_t temperature_control_profile_ntc_get( temperature_control_task_t *const me)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	return me->temperature_control_profile.NTC_idx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <temperature_control_tec_manual_set_output>:

uint32_t temperature_control_tec_manual_set_output( temperature_control_task_t *const me,uint32_t tec_idx, uint32_t tec_dir, uint16_t volt_mV)
{
 8005616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	b08b      	sub	sp, #44	@ 0x2c
 800561c:	af00      	add	r7, sp, #0
 800561e:	61f8      	str	r0, [r7, #28]
 8005620:	61b9      	str	r1, [r7, #24]
 8005622:	617a      	str	r2, [r7, #20]
 8005624:	827b      	strh	r3, [r7, #18]
	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d901      	bls.n	8005630 <temperature_control_tec_manual_set_output+0x1a>
 800562c:	2306      	movs	r3, #6
 800562e:	e06d      	b.n	800570c <temperature_control_tec_manual_set_output+0xf6>

	uint8_t tec_status = me->tec_table[tec_idx]->status;
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	330c      	adds	r3, #12
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	7e9b      	ldrb	r3, [r3, #26]
 800563e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (tec_status & (1 << TEC_INIT_POS))	//tec not init
 8005642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <temperature_control_tec_manual_set_output+0x54>
	{
		if (lt8722_init(me->tec_table[tec_idx])) return ERROR_FAIL;
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	330c      	adds	r3, #12
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f002 fc51 	bl	8007f02 <lt8722_init>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <temperature_control_tec_manual_set_output+0x54>
 8005666:	2301      	movs	r3, #1
 8005668:	e050      	b.n	800570c <temperature_control_tec_manual_set_output+0xf6>
	}
	if (lt8722_set_output_voltage_channel(me->tec_table[tec_idx],tec_dir, (int64_t)volt_mV*1000000)) return ERROR_FAIL;
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	330c      	adds	r3, #12
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685e      	ldr	r6, [r3, #4]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	fa5f fc83 	uxtb.w	ip, r3
 800567c:	8a7b      	ldrh	r3, [r7, #18]
 800567e:	2200      	movs	r2, #0
 8005680:	469a      	mov	sl, r3
 8005682:	4693      	mov	fp, r2
 8005684:	4652      	mov	r2, sl
 8005686:	465b      	mov	r3, fp
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	ebb2 040a 	subs.w	r4, r2, sl
 80056a0:	eb63 050b 	sbc.w	r5, r3, fp
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	026b      	lsls	r3, r5, #9
 80056ae:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80056b2:	0262      	lsls	r2, r4, #9
 80056b4:	4614      	mov	r4, r2
 80056b6:	461d      	mov	r5, r3
 80056b8:	eb14 080a 	adds.w	r8, r4, sl
 80056bc:	eb45 090b 	adc.w	r9, r5, fp
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056cc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056d0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056d4:	ebb2 0108 	subs.w	r1, r2, r8
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	eb63 0309 	sbc.w	r3, r3, r9
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056e4:	460b      	mov	r3, r1
 80056e6:	eb13 030a 	adds.w	r3, r3, sl
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	4613      	mov	r3, r2
 80056ee:	eb43 030b 	adc.w	r3, r3, fp
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f8:	4661      	mov	r1, ip
 80056fa:	4630      	mov	r0, r6
 80056fc:	f002 fce0 	bl	80080c0 <lt8722_set_output_voltage_channel>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <temperature_control_tec_manual_set_output+0xf4>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <temperature_control_tec_manual_set_output+0xf6>
		return ERROR_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	372c      	adds	r7, #44	@ 0x2c
 8005710:	46bd      	mov	sp, r7
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005716 <temperature_control_power_control>:

void temperature_control_power_control(temperature_control_task_t * const me, uint32_t status)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
	if (status)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <temperature_control_power_control+0x1e>
	{
		bsp_temperature_power_on();
 8005726:	f001 fa07 	bl	8006b38 <bsp_temperature_power_on>
		me->tec_heater_power_status = 1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	else
	{
		bsp_temperature_power_off();
		me->tec_heater_power_status = 0;
	}
}
 8005732:	e005      	b.n	8005740 <temperature_control_power_control+0x2a>
		bsp_temperature_power_off();
 8005734:	f001 fa0c 	bl	8006b50 <bsp_temperature_power_off>
		me->tec_heater_power_status = 0;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <temperature_control_is_powered_on>:
bool temperature_control_is_powered_on(temperature_control_task_t * const me)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	return me->tec_heater_power_status;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <temperature_monitor_task_init>:

static state_t temperature_monitor_state_process_handler(temperature_monitor_task_t * const me, temperature_monitor_evt_t const * const e);


static void temperature_monitor_task_init(temperature_monitor_task_t * const me, temperature_monitor_evt_t const * const e)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	SST_TimeEvt_arm(&me->temperature_task_timer, 10, 10); //trigger every 10 tick
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3314      	adds	r3, #20
 800577a:	220a      	movs	r2, #10
 800577c:	210a      	movs	r1, #10
 800577e:	4618      	mov	r0, r3
 8005780:	f005 f9e4 	bl	800ab4c <SST_TimeEvt_arm>
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <temperature_monitor_task_ctor>:


void temperature_monitor_task_ctor(temperature_monitor_task_t * const me, temperature_monitor_init_t const * const init) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af02      	add	r7, sp, #8
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(0u, me != NULL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <temperature_monitor_task_ctor+0x18>
 800579c:	2100      	movs	r1, #0
 800579e:	480e      	ldr	r0, [pc, #56]	@ (80057d8 <temperature_monitor_task_ctor+0x4c>)
 80057a0:	f000 f898 	bl	80058d4 <DBC_fault_handler>
    SST_Task_ctor(&me->super, (SST_Handler) temperature_monitor_task_init, (SST_Handler)temperature_monitor_state_process_handler, \
 80057a4:	6878      	ldr	r0, [r7, #4]
                                (SST_Evt *)init->current_evt, init->event_buffer);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
    SST_Task_ctor(&me->super, (SST_Handler) temperature_monitor_task_init, (SST_Handler)temperature_monitor_state_process_handler, \
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <temperature_monitor_task_ctor+0x50>)
 80057b4:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <temperature_monitor_task_ctor+0x54>)
 80057b6:	f005 f945 	bl	800aa44 <SST_Task_ctor>
    SST_TimeEvt_ctor(&me->temperature_task_timer, EVT_TEMPERATURE_MONITOR_NTC_TRIGGER_TIME, &(me->super));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3314      	adds	r3, #20
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	210d      	movs	r1, #13
 80057c2:	4618      	mov	r0, r3
 80057c4:	f005 f9a0 	bl	800ab08 <SST_TimeEvt_ctor>

    me->state = init->init_state;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	080126bc 	.word	0x080126bc
 80057dc:	08005829 	.word	0x08005829
 80057e0:	0800576d 	.word	0x0800576d

080057e4 <temperature_monitor_task_ctor_singleton>:

void temperature_monitor_task_ctor_singleton()
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 circular_buffer_init(&temperature_monitor_e_queue,(uint8_t *)&temperature_monitor_e_buffer,sizeof(temperature_monitor_e_buffer),TEMPERATURE_MONITOR_TASK_NUM_EVENTS,sizeof(temperature_monitor_evt_t));
 80057ea:	2302      	movs	r3, #2
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2304      	movs	r3, #4
 80057f0:	2208      	movs	r2, #8
 80057f2:	4909      	ldr	r1, [pc, #36]	@ (8005818 <temperature_monitor_task_ctor_singleton+0x34>)
 80057f4:	4809      	ldr	r0, [pc, #36]	@ (800581c <temperature_monitor_task_ctor_singleton+0x38>)
 80057f6:	f004 fe45 	bl	800a484 <circular_buffer_init>
 temperature_monitor_init_t init = {
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <temperature_monitor_task_ctor_singleton+0x3c>)
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		 .init_state = temperature_monitor_state_process_handler,
		 .event_buffer = &temperature_monitor_e_queue,
		 .current_evt = &current_temperature_monitor_e
 };
 temperature_monitor_task_ctor(&temperature_monitor_task_inst, &init);
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	4619      	mov	r1, r3
 8005808:	4806      	ldr	r0, [pc, #24]	@ (8005824 <temperature_monitor_task_ctor_singleton+0x40>)
 800580a:	f7ff ffbf 	bl	800578c <temperature_monitor_task_ctor>
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20006094 	.word	0x20006094
 800581c:	2000609c 	.word	0x2000609c
 8005820:	08012190 	.word	0x08012190
 8005824:	20006058 	.word	0x20006058

08005828 <temperature_monitor_state_process_handler>:
void temperature_monitor_task_start(uint8_t priority)
{
	SST_Task_start(&temperature_monitor_task_inst.super,priority);
}
static state_t temperature_monitor_state_process_handler(temperature_monitor_task_t * const me, temperature_monitor_evt_t const * const e)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	switch (e->super.sig)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	2b0c      	cmp	r3, #12
 8005838:	d002      	beq.n	8005840 <temperature_monitor_state_process_handler+0x18>
 800583a:	2b0d      	cmp	r3, #13
 800583c:	d017      	beq.n	800586e <temperature_monitor_state_process_handler+0x46>
 800583e:	e01a      	b.n	8005876 <temperature_monitor_state_process_handler+0x4e>
	{
	case EVT_TEMPERATURE_MONITOR_NTC_ADC_COMPLETED:
		{
			for (uint8_t i = 0; i < 8; i++ )
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e00e      	b.n	8005864 <temperature_monitor_state_process_handler+0x3c>
			{
				me->ntc_data.ntc_temperature[i] = bsp_ntc_get_temperature(i);
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	7bfc      	ldrb	r4, [r7, #15]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fa4c 	bl	8005ce8 <bsp_ntc_get_temperature>
 8005850:	4603      	mov	r3, r0
 8005852:	4619      	mov	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f104 0214 	add.w	r2, r4, #20
 800585a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint8_t i = 0; i < 8; i++ )
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	3301      	adds	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b07      	cmp	r3, #7
 8005868:	d9ed      	bls.n	8005846 <temperature_monitor_state_process_handler+0x1e>
			}
			return HANDLED_STATUS;
 800586a:	2301      	movs	r3, #1
 800586c:	e004      	b.n	8005878 <temperature_monitor_state_process_handler+0x50>
		}
	case EVT_TEMPERATURE_MONITOR_NTC_TRIGGER_TIME:
		{
			bsp_ntc_trigger_adc();
 800586e:	f000 fa2d 	bl	8005ccc <bsp_ntc_trigger_adc>
			return HANDLED_STATUS;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <temperature_monitor_state_process_handler+0x50>
		}
	default:
		return IGNORED_STATUS;
 8005876:	2302      	movs	r3, #2
	}
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bd90      	pop	{r4, r7, pc}

08005880 <temperature_monitor_get_ntc_temperature>:


int16_t temperature_monitor_get_ntc_temperature(uint32_t channel)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	return temperature_monitor_task_inst.ntc_data.ntc_temperature[channel];
 8005888:	4a05      	ldr	r2, [pc, #20]	@ (80058a0 <temperature_monitor_get_ntc_temperature+0x20>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3314      	adds	r3, #20
 800588e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20006058 	.word	0x20006058

080058a4 <SST_onStart>:




/* SST callbacks ===========================================================*/
void SST_onStart(void) {
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
	  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //start SysTick Interrupt
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <SST_onStart+0x1c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <SST_onStart+0x1c>)
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010

080058c4 <SST_onIdleCond>:

void SST_onIdleCond(void) { /* NOTE: called with interrupts DISABLED */
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
    * you might need to customize the clock management for your application,
    * see the datasheet for your particular Cortex-M MCU.
    */
    __WFI(); /* Wait-For-Interrupt */
#endif
    SST_PORT_INT_ENABLE(); /* NOTE: enable interrupts for SS0 */
 80058c8:	b662      	cpsie	i
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <DBC_fault_handler>:
 *      Author: Admin
 */



void DBC_fault_handler(char const *const module, int const label) {
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	 */
	(void) module;
	(void) label;

	/* set PRIMASK to disable interrupts and stop SST right here */
	__asm volatile ("cpsid i");
 80058de:	b672      	cpsid	i

#ifndef NDEBUG
	/* blink LED*/
#endif
//	NVIC_SystemReset();
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LL_TIM_OC_SetCompareCH1>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_TIM_OC_SetCompareCH2>:
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <LL_TIM_OC_SetCompareCH3>:
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_TIM_OC_SetCompareCH4>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <bsp_heater_set_duty_channel>:

#define HEATER_TIMER TIM4
#define TIMER_PERIOD 50000

void bsp_heater_set_duty_channel(uint32_t channel, uint16_t duty_pwm)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
    if (duty_pwm > 100) duty_pwm = 100;
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	2b64      	cmp	r3, #100	@ 0x64
 800596c:	d901      	bls.n	8005972 <bsp_heater_set_duty_channel+0x16>
 800596e:	2364      	movs	r3, #100	@ 0x64
 8005970:	807b      	strh	r3, [r7, #2]
    uint16_t compare_value = duty_pwm * TIMER_PERIOD / 100;
 8005972:	887b      	ldrh	r3, [r7, #2]
 8005974:	461a      	mov	r2, r3
 8005976:	0152      	lsls	r2, r2, #5
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	81fb      	strh	r3, [r7, #14]
    switch (channel)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d823      	bhi.n	80059d0 <bsp_heater_set_duty_channel+0x74>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <bsp_heater_set_duty_channel+0x34>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059a1 	.word	0x080059a1
 8005994:	080059ad 	.word	0x080059ad
 8005998:	080059b9 	.word	0x080059b9
 800599c:	080059c5 	.word	0x080059c5
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(HEATER_TIMER, compare_value);
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	4619      	mov	r1, r3
 80059a4:	480d      	ldr	r0, [pc, #52]	@ (80059dc <bsp_heater_set_duty_channel+0x80>)
 80059a6:	f7ff ffa1 	bl	80058ec <LL_TIM_OC_SetCompareCH1>
            break;
 80059aa:	e012      	b.n	80059d2 <bsp_heater_set_duty_channel+0x76>
        case 1:
            LL_TIM_OC_SetCompareCH2(HEATER_TIMER, compare_value);
 80059ac:	89fb      	ldrh	r3, [r7, #14]
 80059ae:	4619      	mov	r1, r3
 80059b0:	480a      	ldr	r0, [pc, #40]	@ (80059dc <bsp_heater_set_duty_channel+0x80>)
 80059b2:	f7ff ffa9 	bl	8005908 <LL_TIM_OC_SetCompareCH2>
            break;
 80059b6:	e00c      	b.n	80059d2 <bsp_heater_set_duty_channel+0x76>
        case 2:
            LL_TIM_OC_SetCompareCH3(HEATER_TIMER, compare_value);
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4807      	ldr	r0, [pc, #28]	@ (80059dc <bsp_heater_set_duty_channel+0x80>)
 80059be:	f7ff ffb1 	bl	8005924 <LL_TIM_OC_SetCompareCH3>
            break;
 80059c2:	e006      	b.n	80059d2 <bsp_heater_set_duty_channel+0x76>
        case 3:
            LL_TIM_OC_SetCompareCH4(HEATER_TIMER, compare_value);
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	4619      	mov	r1, r3
 80059c8:	4804      	ldr	r0, [pc, #16]	@ (80059dc <bsp_heater_set_duty_channel+0x80>)
 80059ca:	f7ff ffb9 	bl	8005940 <LL_TIM_OC_SetCompareCH4>
            break;
 80059ce:	e000      	b.n	80059d2 <bsp_heater_set_duty_channel+0x76>
        default:
            break;
 80059d0:	bf00      	nop
    }
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40000800 	.word	0x40000800

080059e0 <bsp_heater_turn_off_channel>:

void bsp_heater_turn_off_channel(uint32_t channel){
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
    switch (channel)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d81e      	bhi.n	8005a2c <bsp_heater_turn_off_channel+0x4c>
 80059ee:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <bsp_heater_turn_off_channel+0x14>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a0f 	.word	0x08005a0f
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a23 	.word	0x08005a23
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(HEATER_TIMER, 0);
 8005a04:	2100      	movs	r1, #0
 8005a06:	480c      	ldr	r0, [pc, #48]	@ (8005a38 <bsp_heater_turn_off_channel+0x58>)
 8005a08:	f7ff ff70 	bl	80058ec <LL_TIM_OC_SetCompareCH1>
            break;
 8005a0c:	e00f      	b.n	8005a2e <bsp_heater_turn_off_channel+0x4e>
        case 1:
            LL_TIM_OC_SetCompareCH2(HEATER_TIMER, 0);
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4809      	ldr	r0, [pc, #36]	@ (8005a38 <bsp_heater_turn_off_channel+0x58>)
 8005a12:	f7ff ff79 	bl	8005908 <LL_TIM_OC_SetCompareCH2>
            break;
 8005a16:	e00a      	b.n	8005a2e <bsp_heater_turn_off_channel+0x4e>
        case 2:
            LL_TIM_OC_SetCompareCH3(HEATER_TIMER, 0);
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4807      	ldr	r0, [pc, #28]	@ (8005a38 <bsp_heater_turn_off_channel+0x58>)
 8005a1c:	f7ff ff82 	bl	8005924 <LL_TIM_OC_SetCompareCH3>
            break;
 8005a20:	e005      	b.n	8005a2e <bsp_heater_turn_off_channel+0x4e>
        case 3:
            LL_TIM_OC_SetCompareCH4(HEATER_TIMER, 0);
 8005a22:	2100      	movs	r1, #0
 8005a24:	4804      	ldr	r0, [pc, #16]	@ (8005a38 <bsp_heater_turn_off_channel+0x58>)
 8005a26:	f7ff ff8b 	bl	8005940 <LL_TIM_OC_SetCompareCH4>
            break;
 8005a2a:	e000      	b.n	8005a2e <bsp_heater_turn_off_channel+0x4e>
        default:
            break;
 8005a2c:	bf00      	nop
    }
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40000800 	.word	0x40000800

08005a3c <LL_SPI_Enable>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <LL_SPI_Disable>:
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_SPI_SetClockPhase>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_SPI_SetClockPolarity>:
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 0202 	bic.w	r2, r3, #2
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <bsp_laser_set_spi_mode>:
    LL_SPI_SetBaudRatePrescaler(LASER_SPI, Prescaler);
    LL_SPI_Enable(LASER_SPI);
}

void bsp_laser_set_spi_mode(spi_mode_t spi_mode)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
	LL_SPI_Disable(LASER_SPI);
 8005ad2:	481e      	ldr	r0, [pc, #120]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005ad4:	f7ff ffc2 	bl	8005a5c <LL_SPI_Disable>
	switch(spi_mode)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d82e      	bhi.n	8005b3c <bsp_laser_set_spi_mode+0x74>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <bsp_laser_set_spi_mode+0x1c>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b07 	.word	0x08005b07
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	08005b2b 	.word	0x08005b2b
	{
		case SPI_MODE_0:
			LL_SPI_SetClockPolarity(LASER_SPI, LL_SPI_POLARITY_LOW);
 8005af4:	2100      	movs	r1, #0
 8005af6:	4815      	ldr	r0, [pc, #84]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005af8:	f7ff ffd3 	bl	8005aa2 <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(LASER_SPI, LL_SPI_PHASE_1EDGE);
 8005afc:	2100      	movs	r1, #0
 8005afe:	4813      	ldr	r0, [pc, #76]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b00:	f7ff ffbc 	bl	8005a7c <LL_SPI_SetClockPhase>
		break;
 8005b04:	e01a      	b.n	8005b3c <bsp_laser_set_spi_mode+0x74>

		case SPI_MODE_1:
			LL_SPI_SetClockPolarity(LASER_SPI, LL_SPI_POLARITY_LOW);
 8005b06:	2100      	movs	r1, #0
 8005b08:	4810      	ldr	r0, [pc, #64]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b0a:	f7ff ffca 	bl	8005aa2 <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(LASER_SPI, LL_SPI_PHASE_2EDGE);
 8005b0e:	2101      	movs	r1, #1
 8005b10:	480e      	ldr	r0, [pc, #56]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b12:	f7ff ffb3 	bl	8005a7c <LL_SPI_SetClockPhase>
		break;
 8005b16:	e011      	b.n	8005b3c <bsp_laser_set_spi_mode+0x74>

		case SPI_MODE_2:
			LL_SPI_SetClockPolarity(LASER_SPI, LL_SPI_POLARITY_HIGH);
 8005b18:	2102      	movs	r1, #2
 8005b1a:	480c      	ldr	r0, [pc, #48]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b1c:	f7ff ffc1 	bl	8005aa2 <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(LASER_SPI, LL_SPI_PHASE_1EDGE);
 8005b20:	2100      	movs	r1, #0
 8005b22:	480a      	ldr	r0, [pc, #40]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b24:	f7ff ffaa 	bl	8005a7c <LL_SPI_SetClockPhase>
		break;
 8005b28:	e008      	b.n	8005b3c <bsp_laser_set_spi_mode+0x74>

		case SPI_MODE_3:
			LL_SPI_SetClockPolarity(LASER_SPI, LL_SPI_POLARITY_HIGH);
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4807      	ldr	r0, [pc, #28]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b2e:	f7ff ffb8 	bl	8005aa2 <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(LASER_SPI, LL_SPI_PHASE_2EDGE);
 8005b32:	2101      	movs	r1, #1
 8005b34:	4805      	ldr	r0, [pc, #20]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b36:	f7ff ffa1 	bl	8005a7c <LL_SPI_SetClockPhase>
		break;
 8005b3a:	bf00      	nop
	}
	LL_SPI_Enable(LASER_SPI);
 8005b3c:	4803      	ldr	r0, [pc, #12]	@ (8005b4c <bsp_laser_set_spi_mode+0x84>)
 8005b3e:	f7ff ff7d 	bl	8005a3c <LL_SPI_Enable>
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40013400 	.word	0x40013400

08005b50 <bsp_laser_init>:

void bsp_laser_init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af02      	add	r7, sp, #8
	bsp_laser_set_spi_mode(SPI_MODE_0);
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7ff ffb6 	bl	8005ac8 <bsp_laser_set_spi_mode>
	MCP4902_Device_Init(&DAC_device, LASER_SPI, LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin, LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 8005b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	4b10      	ldr	r3, [pc, #64]	@ (8005ba4 <bsp_laser_init+0x54>)
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	2304      	movs	r3, #4
 8005b68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ba4 <bsp_laser_init+0x54>)
 8005b6a:	490f      	ldr	r1, [pc, #60]	@ (8005ba8 <bsp_laser_init+0x58>)
 8005b6c:	480f      	ldr	r0, [pc, #60]	@ (8005bac <bsp_laser_init+0x5c>)
 8005b6e:	f002 fd8f 	bl	8008690 <MCP4902_Device_Init>

	bsp_laser_set_spi_mode(SPI_MODE_1);
 8005b72:	2001      	movs	r0, #1
 8005b74:	f7ff ffa8 	bl	8005ac8 <bsp_laser_set_spi_mode>
	ADG1414_Chain_Init(&laser_int, LASER_SPI, LASER_INT_SW_CS_GPIO_Port, LASER_INT_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8005b78:	2306      	movs	r3, #6
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b80:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb0 <bsp_laser_init+0x60>)
 8005b82:	4909      	ldr	r1, [pc, #36]	@ (8005ba8 <bsp_laser_init+0x58>)
 8005b84:	480b      	ldr	r0, [pc, #44]	@ (8005bb4 <bsp_laser_init+0x64>)
 8005b86:	f001 f8ca 	bl	8006d1e <ADG1414_Chain_Init>
	ADG1414_Chain_Init(&laser_ext, LASER_SPI, LASER_EXT_SW_CS_GPIO_Port, LASER_EXT_SW_CS_Pin, EXTERNAL_CHAIN_SWITCH_NUM);
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	4a07      	ldr	r2, [pc, #28]	@ (8005bb0 <bsp_laser_init+0x60>)
 8005b94:	4904      	ldr	r1, [pc, #16]	@ (8005ba8 <bsp_laser_init+0x58>)
 8005b96:	4808      	ldr	r0, [pc, #32]	@ (8005bb8 <bsp_laser_init+0x68>)
 8005b98:	f001 f8c1 	bl	8006d1e <ADG1414_Chain_Init>

}
 8005b9c:	bf00      	nop
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40020400 	.word	0x40020400
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	200060b8 	.word	0x200060b8
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	200060d0 	.word	0x200060d0
 8005bb8:	200060f0 	.word	0x200060f0

08005bbc <bsp_laser_int_switch_on>:

void bsp_laser_int_switch_on(uint32_t channel_idx)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	ADG1414_Chain_SwitchOn(&laser_int, channel_idx);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4803      	ldr	r0, [pc, #12]	@ (8005bd8 <bsp_laser_int_switch_on+0x1c>)
 8005bcc:	f001 f908 	bl	8006de0 <ADG1414_Chain_SwitchOn>
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200060d0 	.word	0x200060d0

08005bdc <bsp_laser_int_switch_off_all>:

void bsp_laser_int_switch_off_all(void){
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
	ADG1414_Chain_SwitchAllOff(&laser_int);
 8005be0:	4802      	ldr	r0, [pc, #8]	@ (8005bec <bsp_laser_int_switch_off_all+0x10>)
 8005be2:	f001 f96d 	bl	8006ec0 <ADG1414_Chain_SwitchAllOff>
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200060d0 	.word	0x200060d0

08005bf0 <bsp_laser_ext_switch_on>:

void bsp_laser_ext_switch_on(uint32_t channel_idx)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	ADG1414_Chain_SwitchOn(&laser_ext, channel_idx);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4803      	ldr	r0, [pc, #12]	@ (8005c0c <bsp_laser_ext_switch_on+0x1c>)
 8005c00:	f001 f8ee 	bl	8006de0 <ADG1414_Chain_SwitchOn>
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200060f0 	.word	0x200060f0

08005c10 <bsp_laser_ext_switch_off_all>:

void bsp_laser_ext_switch_off_all(void){
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
	ADG1414_Chain_SwitchAllOff(&laser_ext);
 8005c14:	4802      	ldr	r0, [pc, #8]	@ (8005c20 <bsp_laser_ext_switch_off_all+0x10>)
 8005c16:	f001 f953 	bl	8006ec0 <ADG1414_Chain_SwitchAllOff>
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200060f0 	.word	0x200060f0

08005c24 <bsp_laser_int_set_current>:
 * current source has 250 ohm shunt
 * with maximum voltage of 3V, we calculate the voltage for ADC and send to ADC
 */

void bsp_laser_int_set_current(uint32_t percent)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	if (percent > 100) percent = 100;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b64      	cmp	r3, #100	@ 0x64
 8005c30:	d901      	bls.n	8005c36 <bsp_laser_int_set_current+0x12>
 8005c32:	2364      	movs	r3, #100	@ 0x64
 8005c34:	607b      	str	r3, [r7, #4]
	MCP4902_Set_DAC(&DAC_device, 0, 255*percent/100);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	4a07      	ldr	r2, [pc, #28]	@ (8005c5c <bsp_laser_int_set_current+0x38>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4804      	ldr	r0, [pc, #16]	@ (8005c60 <bsp_laser_int_set_current+0x3c>)
 8005c4e:	f002 fd0b 	bl	8008668 <MCP4902_Set_DAC>
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	51eb851f 	.word	0x51eb851f
 8005c60:	200060b8 	.word	0x200060b8

08005c64 <bsp_laser_ext_set_current>:

void bsp_laser_ext_set_current(uint32_t percent)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	if (percent > 100) percent = 100;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b64      	cmp	r3, #100	@ 0x64
 8005c70:	d901      	bls.n	8005c76 <bsp_laser_ext_set_current+0x12>
 8005c72:	2364      	movs	r3, #100	@ 0x64
 8005c74:	607b      	str	r3, [r7, #4]
	MCP4902_Set_DAC(&DAC_device, 0, 255*percent/100);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	4a07      	ldr	r2, [pc, #28]	@ (8005c9c <bsp_laser_ext_set_current+0x38>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4804      	ldr	r0, [pc, #16]	@ (8005ca0 <bsp_laser_ext_set_current+0x3c>)
 8005c8e:	f002 fceb 	bl	8008668 <MCP4902_Set_DAC>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	51eb851f 	.word	0x51eb851f
 8005ca0:	200060b8 	.word	0x200060b8

08005ca4 <bsp_laser_set_current>:
void bsp_laser_set_current(uint32_t id, uint32_t percent)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	if (id ==0)  bsp_laser_int_set_current(percent);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <bsp_laser_set_current+0x18>
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f7ff ffb5 	bl	8005c24 <bsp_laser_int_set_current>
	else bsp_laser_ext_set_current(percent);

}
 8005cba:	e002      	b.n	8005cc2 <bsp_laser_set_current+0x1e>
	else bsp_laser_ext_set_current(percent);
 8005cbc:	6838      	ldr	r0, [r7, #0]
 8005cbe:	f7ff ffd1 	bl	8005c64 <bsp_laser_ext_set_current>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <bsp_ntc_trigger_adc>:
static uint32_t first_sample = 1;

static temperature_monitor_evt_t const adc_evt = {.super = {.sig = EVT_TEMPERATURE_MONITOR_NTC_ADC_COMPLETED} };

void bsp_ntc_trigger_adc()
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0


        // Cấu hình DMA để truyền dữ liệu ADC vào buffer

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ntc_ADC_value, 8);
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	4903      	ldr	r1, [pc, #12]	@ (8005ce0 <bsp_ntc_trigger_adc+0x14>)
 8005cd4:	4803      	ldr	r0, [pc, #12]	@ (8005ce4 <bsp_ntc_trigger_adc+0x18>)
 8005cd6:	f005 f845 	bl	800ad64 <HAL_ADC_Start_DMA>

}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20006110 	.word	0x20006110
 8005ce4:	200043a4 	.word	0x200043a4

08005ce8 <bsp_ntc_get_temperature>:

int16_t bsp_ntc_get_temperature(uint32_t ntc_channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	return ntc_convert(ntc_ADC_value[ntc_channel]);
 8005cf0:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <bsp_ntc_get_temperature+0x20>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f002 fd83 	bl	8008804 <ntc_convert>
 8005cfe:	4603      	mov	r3, r0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20006110 	.word	0x20006110

08005d0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a25      	ldr	r2, [pc, #148]	@ (8005dac <HAL_ADC_ConvCpltCallback+0xa0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d142      	bne.n	8005da2 <HAL_ADC_ConvCpltCallback+0x96>
	{
		if (first_sample)
 8005d1c:	4b24      	ldr	r3, [pc, #144]	@ (8005db0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d011      	beq.n	8005d48 <HAL_ADC_ConvCpltCallback+0x3c>
		{
			for (uint32_t i = 0; i< 8; i++ ) ntc_ADC_value_average[i] = ntc_ADC_value[i];
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e00a      	b.n	8005d40 <HAL_ADC_ConvCpltCallback+0x34>
 8005d2a:	4a22      	ldr	r2, [pc, #136]	@ (8005db4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005d32:	4a21      	ldr	r2, [pc, #132]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0xac>)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	d9f1      	bls.n	8005d2a <HAL_ADC_ConvCpltCallback+0x1e>
 8005d46:	e01b      	b.n	8005d80 <HAL_ADC_ConvCpltCallback+0x74>

		}
		else
		{
			for (uint32_t i = 0; i< 8; i++ ) ntc_ADC_value_average[i] = (ntc_ADC_value[i] + ntc_ADC_value_average[i])/2;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	e015      	b.n	8005d7a <HAL_ADC_ConvCpltCallback+0x6e>
 8005d4e:	4a19      	ldr	r2, [pc, #100]	@ (8005db4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d56:	4619      	mov	r1, r3
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0xac>)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d60:	440b      	add	r3, r1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da00      	bge.n	8005d68 <HAL_ADC_ConvCpltCallback+0x5c>
 8005d66:	3301      	adds	r3, #1
 8005d68:	105b      	asrs	r3, r3, #1
 8005d6a:	b299      	uxth	r1, r3
 8005d6c:	4a12      	ldr	r2, [pc, #72]	@ (8005db8 <HAL_ADC_ConvCpltCallback+0xac>)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d9e6      	bls.n	8005d4e <HAL_ADC_ConvCpltCallback+0x42>
		}
		if (sample_count < 10) sample_count++;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <HAL_ADC_ConvCpltCallback+0xb0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d805      	bhi.n	8005d94 <HAL_ADC_ConvCpltCallback+0x88>
 8005d88:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <HAL_ADC_ConvCpltCallback+0xb0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005dbc <HAL_ADC_ConvCpltCallback+0xb0>)
 8005d90:	6013      	str	r3, [r2, #0]
		{
			sample_count = 0;
			SST_Task_post(&temperature_monitor_task_inst.super, (SST_Evt *)&adc_evt); //post to temperature monitor task
		}
	}
}
 8005d92:	e006      	b.n	8005da2 <HAL_ADC_ConvCpltCallback+0x96>
			sample_count = 0;
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <HAL_ADC_ConvCpltCallback+0xb0>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
			SST_Task_post(&temperature_monitor_task_inst.super, (SST_Evt *)&adc_evt); //post to temperature monitor task
 8005d9a:	4909      	ldr	r1, [pc, #36]	@ (8005dc0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8005d9c:	4809      	ldr	r0, [pc, #36]	@ (8005dc4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8005d9e:	f004 fe95 	bl	800aacc <SST_Task_post>
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200043a4 	.word	0x200043a4
 8005db0:	2000000c 	.word	0x2000000c
 8005db4:	20006110 	.word	0x20006110
 8005db8:	20006120 	.word	0x20006120
 8005dbc:	20006130 	.word	0x20006130
 8005dc0:	080126d0 	.word	0x080126d0
 8005dc4:	20006058 	.word	0x20006058

08005dc8 <__NVIC_EnableIRQ>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	db0b      	blt.n	8005df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	f003 021f 	and.w	r2, r3, #31
 8005de0:	4907      	ldr	r1, [pc, #28]	@ (8005e00 <__NVIC_EnableIRQ+0x38>)
 8005de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2001      	movs	r0, #1
 8005dea:	fa00 f202 	lsl.w	r2, r0, r2
 8005dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e100 	.word	0xe000e100

08005e04 <__NVIC_DisableIRQ>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	db12      	blt.n	8005e3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	f003 021f 	and.w	r2, r3, #31
 8005e1c:	490a      	ldr	r1, [pc, #40]	@ (8005e48 <__NVIC_DisableIRQ+0x44>)
 8005e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	2001      	movs	r0, #1
 8005e26:	fa00 f202 	lsl.w	r2, r0, r2
 8005e2a:	3320      	adds	r3, #32
 8005e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e30:	f3bf 8f4f 	dsb	sy
}
 8005e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e36:	f3bf 8f6f 	isb	sy
}
 8005e3a:	bf00      	nop
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000e100 	.word	0xe000e100

08005e4c <__NVIC_SetPriority>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	db0a      	blt.n	8005e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	490c      	ldr	r1, [pc, #48]	@ (8005e98 <__NVIC_SetPriority+0x4c>)
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	0112      	lsls	r2, r2, #4
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	440b      	add	r3, r1
 8005e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e74:	e00a      	b.n	8005e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4908      	ldr	r1, [pc, #32]	@ (8005e9c <__NVIC_SetPriority+0x50>)
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	3b04      	subs	r3, #4
 8005e84:	0112      	lsls	r2, r2, #4
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	440b      	add	r3, r1
 8005e8a:	761a      	strb	r2, [r3, #24]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000e100 	.word	0xe000e100
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <LL_DMA_EnableStream>:
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8005eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8005edc <LL_DMA_EnableStream+0x3c>)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4908      	ldr	r1, [pc, #32]	@ (8005edc <LL_DMA_EnableStream+0x3c>)
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	6013      	str	r3, [r2, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	080126d4 	.word	0x080126d4

08005ee0 <LL_DMA_DisableStream>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8005eea:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <LL_DMA_DisableStream+0x3c>)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4413      	add	r3, r2
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4908      	ldr	r1, [pc, #32]	@ (8005f1c <LL_DMA_DisableStream+0x3c>)
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	440a      	add	r2, r1
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	4611      	mov	r1, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	440a      	add	r2, r1
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	080126d4 	.word	0x080126d4

08005f20 <LL_DMA_SetMode>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f64 <LL_DMA_SetMode+0x44>)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8005f40:	4908      	ldr	r1, [pc, #32]	@ (8005f64 <LL_DMA_SetMode+0x44>)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	440b      	add	r3, r1
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	440b      	add	r3, r1
 8005f4e:	4619      	mov	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	080126d4 	.word	0x080126d4

08005f68 <LL_DMA_SetMemoryIncMode>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8005f74:	4a0d      	ldr	r2, [pc, #52]	@ (8005fac <LL_DMA_SetMemoryIncMode+0x44>)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f88:	4908      	ldr	r1, [pc, #32]	@ (8005fac <LL_DMA_SetMemoryIncMode+0x44>)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	440b      	add	r3, r1
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	4619      	mov	r1, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	440b      	add	r3, r1
 8005f96:	4619      	mov	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	080126d4 	.word	0x080126d4

08005fb0 <LL_DMA_SetDataLength>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8005fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff4 <LL_DMA_SetDataLength+0x44>)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <LL_DMA_SetDataLength+0x48>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	4908      	ldr	r1, [pc, #32]	@ (8005ff4 <LL_DMA_SetDataLength+0x44>)
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	604b      	str	r3, [r1, #4]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	080126d4 	.word	0x080126d4
 8005ff8:	ffff0000 	.word	0xffff0000

08005ffc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b40      	cmp	r3, #64	@ 0x40
 800600e:	d114      	bne.n	800603a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8006010:	4a17      	ldr	r2, [pc, #92]	@ (8006070 <LL_DMA_ConfigAddresses+0x74>)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4413      	add	r3, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8006024:	4a12      	ldr	r2, [pc, #72]	@ (8006070 <LL_DMA_ConfigAddresses+0x74>)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	461a      	mov	r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8006038:	e013      	b.n	8006062 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 800603a:	4a0d      	ldr	r2, [pc, #52]	@ (8006070 <LL_DMA_ConfigAddresses+0x74>)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4413      	add	r3, r2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <LL_DMA_ConfigAddresses+0x74>)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	461a      	mov	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	60d3      	str	r3, [r2, #12]
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	080126d4 	.word	0x080126d4

08006074 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 800607e:	4a0c      	ldr	r2, [pc, #48]	@ (80060b0 <LL_DMA_EnableIT_HT+0x3c>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	4413      	add	r3, r2
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4908      	ldr	r1, [pc, #32]	@ (80060b0 <LL_DMA_EnableIT_HT+0x3c>)
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	440a      	add	r2, r1
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	4611      	mov	r1, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	440a      	add	r2, r1
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	6013      	str	r3, [r2, #0]
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	080126d4 	.word	0x080126d4

080060b4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80060be:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <LL_DMA_EnableIT_TC+0x3c>)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	4413      	add	r3, r2
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4908      	ldr	r1, [pc, #32]	@ (80060f0 <LL_DMA_EnableIT_TC+0x3c>)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	440a      	add	r2, r1
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	4611      	mov	r1, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	440a      	add	r2, r1
 80060dc:	f043 0310 	orr.w	r3, r3, #16
 80060e0:	6013      	str	r3, [r2, #0]
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	080126d4 	.word	0x080126d4

080060f4 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 80060fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006130 <LL_DMA_DisableIT_HT+0x3c>)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	4413      	add	r3, r2
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4908      	ldr	r1, [pc, #32]	@ (8006130 <LL_DMA_DisableIT_HT+0x3c>)
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	440a      	add	r2, r1
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	4611      	mov	r1, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	440a      	add	r2, r1
 800611c:	f023 0308 	bic.w	r3, r3, #8
 8006120:	6013      	str	r3, [r2, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	080126d4 	.word	0x080126d4

08006134 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800613e:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <LL_DMA_DisableIT_TC+0x3c>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4908      	ldr	r1, [pc, #32]	@ (8006170 <LL_DMA_DisableIT_TC+0x3c>)
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	440a      	add	r2, r1
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	4611      	mov	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	440a      	add	r2, r1
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	080126d4 	.word	0x080126d4

08006174 <LL_SPI_Enable>:
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <LL_SPI_Disable>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_SPI_SetClockPhase>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_SPI_SetClockPolarity>:
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f023 0202 	bic.w	r2, r3, #2
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_SPI_SetBaudRatePrescaler>:
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_SPI_SetDataWidth>:
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LL_SPI_SetRxFIFOThreshold>:
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f043 0201 	orr.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <LL_SPI_DisableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	330c      	adds	r3, #12
 80062c2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <bsp_photo_set_time>:
void bsp_photodiode_timer1_init(uint32_t period_ns);
void bsp_photodiode_start_dma(photo_diode_t *config, uint32_t *buffer, uint32_t size);


void bsp_photo_set_time(bsp_photodiode_time_t * init_photo_time)
{
 80062d8:	b4b0      	push	{r4, r5, r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	photo_diode_adc.timing = *init_photo_time;
 80062e0:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <bsp_photo_set_time+0x60>)
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	f103 041c 	add.w	r4, r3, #28
 80062e8:	4615      	mov	r5, r2
 80062ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ee:	682b      	ldr	r3, [r5, #0]
 80062f0:	6023      	str	r3, [r4, #0]
	bsp_photodiode_time_t * photo_time = &photo_diode_adc.timing;
 80062f2:	4b12      	ldr	r3, [pc, #72]	@ (800633c <bsp_photo_set_time+0x64>)
 80062f4:	60fb      	str	r3, [r7, #12]
	/*
	 * timer2 clock is 100 Mhz, meam 100 tick = 1us
	 */
	timer_timing.post_time_ARR = photo_time->post_time * 100;				// tick
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2264      	movs	r2, #100	@ 0x64
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
 8006300:	4a0f      	ldr	r2, [pc, #60]	@ (8006340 <bsp_photo_set_time+0x68>)
 8006302:	6093      	str	r3, [r2, #8]
	timer_timing.pre_time_ARR = photo_time->pre_time * 100;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2264      	movs	r2, #100	@ 0x64
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	4a0c      	ldr	r2, [pc, #48]	@ (8006340 <bsp_photo_set_time+0x68>)
 8006310:	6013      	str	r3, [r2, #0]
	timer_timing.sampling_time_ARR = photo_time->sampling_time * 100;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2264      	movs	r2, #100	@ 0x64
 8006318:	fb02 f303 	mul.w	r3, r2, r3
 800631c:	4a08      	ldr	r2, [pc, #32]	@ (8006340 <bsp_photo_set_time+0x68>)
 800631e:	6053      	str	r3, [r2, #4]

	//sampling rate in Khz, timer1 clock is 200 Mhz
	timer_timing.sampling_period_ARR = (1000 * 200 / photo_time->sampling_rate);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a07      	ldr	r2, [pc, #28]	@ (8006344 <bsp_photo_set_time+0x6c>)
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	4a05      	ldr	r2, [pc, #20]	@ (8006340 <bsp_photo_set_time+0x68>)
 800632c:	60d3      	str	r3, [r2, #12]
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bcb0      	pop	{r4, r5, r7}
 8006336:	4770      	bx	lr
 8006338:	20000010 	.word	0x20000010
 800633c:	2000002c 	.word	0x2000002c
 8006340:	2000e154 	.word	0x2000e154
 8006344:	00030d40 	.word	0x00030d40

08006348 <bsp_photo_prepare_pre_sampling>:

void bsp_photo_prepare_pre_sampling()
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
	bsp_photodiode_sample_rate_timer_init();
 800634c:	f000 f8de 	bl	800650c <bsp_photodiode_sample_rate_timer_init>
	bsp_photodiode_set_pre_time();
 8006350:	f000 f8e8 	bl	8006524 <bsp_photodiode_set_pre_time>
    // Xóa cờ ngắt update
	TIM1->SR = ~TIM_SR_UIF; // Xóa cờ ngắt
 8006354:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <bsp_photo_prepare_pre_sampling+0x30>)
 8006356:	f06f 0201 	mvn.w	r2, #1
 800635a:	611a      	str	r2, [r3, #16]
    TIM2->SR = ~TIM_SR_UIF;
 800635c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006360:	f06f 0201 	mvn.w	r2, #1
 8006364:	611a      	str	r2, [r3, #16]
	TIM1->CNT = 0;
 8006366:	4b04      	ldr	r3, [pc, #16]	@ (8006378 <bsp_photo_prepare_pre_sampling+0x30>)
 8006368:	2200      	movs	r2, #0
 800636a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = 0;
 800636c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006370:	2200      	movs	r2, #0
 8006372:	625a      	str	r2, [r3, #36]	@ 0x24
//	TIM1->CR1 |= TIM_CR1_CEN;
//	TIM2->CR1 |= TIM_CR1_CEN;
//	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
//	NVIC_EnableIRQ(TIM2_IRQn);
}
 8006374:	bf00      	nop
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40010000 	.word	0x40010000

0800637c <bsp_photo_sw_init>:
void bsp_photo_sw_init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af02      	add	r7, sp, #8
	bsp_photodiode_sw_spi_change_mode();
 8006382:	f000 f887 	bl	8006494 <bsp_photodiode_sw_spi_change_mode>
	ADG1414_Chain_Init(&photo_sw, PHOTO_SPI, PHOTO_SW_CS_GPIO_Port, PHOTO_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 8006386:	2306      	movs	r3, #6
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800638e:	4a04      	ldr	r2, [pc, #16]	@ (80063a0 <bsp_photo_sw_init+0x24>)
 8006390:	4904      	ldr	r1, [pc, #16]	@ (80063a4 <bsp_photo_sw_init+0x28>)
 8006392:	4805      	ldr	r0, [pc, #20]	@ (80063a8 <bsp_photo_sw_init+0x2c>)
 8006394:	f000 fcc3 	bl	8006d1e <ADG1414_Chain_Init>

}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40020c00 	.word	0x40020c00
 80063a4:	40003800 	.word	0x40003800
 80063a8:	2000e134 	.word	0x2000e134

080063ac <bsp_photo_adc_init>:

void bsp_photo_adc_init()
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
	bsp_photodiode_adc_spi_change_mode();
 80063b0:	f000 f886 	bl	80064c0 <bsp_photodiode_adc_spi_change_mode>
	ADS8327_Device_Init(&ads8327_dev);
 80063b4:	4802      	ldr	r0, [pc, #8]	@ (80063c0 <bsp_photo_adc_init+0x14>)
 80063b6:	f000 ff01 	bl	80071bc <ADS8327_Device_Init>
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000040 	.word	0x20000040

080063c4 <bsp_photodiode_set_spi_mode>:

void bsp_photodiode_set_spi_mode(spi_mode_t spi_mode)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	71fb      	strb	r3, [r7, #7]
	switch(spi_mode)
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d82f      	bhi.n	8006434 <bsp_photodiode_set_spi_mode+0x70>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <bsp_photodiode_set_spi_mode+0x18>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006423 	.word	0x08006423
	{
		case SPI_MODE_0:
			LL_SPI_SetClockPolarity(PHOTO_SPI, LL_SPI_POLARITY_LOW);
 80063ec:	2100      	movs	r1, #0
 80063ee:	4813      	ldr	r0, [pc, #76]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 80063f0:	f7ff fef3 	bl	80061da <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(PHOTO_SPI, LL_SPI_PHASE_1EDGE);
 80063f4:	2100      	movs	r1, #0
 80063f6:	4811      	ldr	r0, [pc, #68]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 80063f8:	f7ff fedc 	bl	80061b4 <LL_SPI_SetClockPhase>
		break;
 80063fc:	e01a      	b.n	8006434 <bsp_photodiode_set_spi_mode+0x70>

		case SPI_MODE_1:
			LL_SPI_SetClockPolarity(PHOTO_SPI, LL_SPI_POLARITY_LOW);
 80063fe:	2100      	movs	r1, #0
 8006400:	480e      	ldr	r0, [pc, #56]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 8006402:	f7ff feea 	bl	80061da <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(PHOTO_SPI, LL_SPI_PHASE_2EDGE);
 8006406:	2101      	movs	r1, #1
 8006408:	480c      	ldr	r0, [pc, #48]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 800640a:	f7ff fed3 	bl	80061b4 <LL_SPI_SetClockPhase>
		break;
 800640e:	e011      	b.n	8006434 <bsp_photodiode_set_spi_mode+0x70>

		case SPI_MODE_2:
			LL_SPI_SetClockPolarity(PHOTO_SPI, LL_SPI_POLARITY_HIGH);
 8006410:	2102      	movs	r1, #2
 8006412:	480a      	ldr	r0, [pc, #40]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 8006414:	f7ff fee1 	bl	80061da <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(PHOTO_SPI, LL_SPI_PHASE_1EDGE);
 8006418:	2100      	movs	r1, #0
 800641a:	4808      	ldr	r0, [pc, #32]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 800641c:	f7ff feca 	bl	80061b4 <LL_SPI_SetClockPhase>
		break;
 8006420:	e008      	b.n	8006434 <bsp_photodiode_set_spi_mode+0x70>

		case SPI_MODE_3:
			LL_SPI_SetClockPolarity(PHOTO_SPI, LL_SPI_POLARITY_HIGH);
 8006422:	2102      	movs	r1, #2
 8006424:	4805      	ldr	r0, [pc, #20]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 8006426:	f7ff fed8 	bl	80061da <LL_SPI_SetClockPolarity>
			LL_SPI_SetClockPhase(PHOTO_SPI, LL_SPI_PHASE_2EDGE);
 800642a:	2101      	movs	r1, #1
 800642c:	4803      	ldr	r0, [pc, #12]	@ (800643c <bsp_photodiode_set_spi_mode+0x78>)
 800642e:	f7ff fec1 	bl	80061b4 <LL_SPI_SetClockPhase>
		break;
 8006432:	bf00      	nop
	}
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40003800 	.word	0x40003800

08006440 <bsp_photodiode_set_spi_data_len>:

void bsp_photodiode_set_spi_data_len(uint32_t DataWidth)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
    LL_SPI_SetDataWidth(PHOTO_SPI, DataWidth);
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	480a      	ldr	r0, [pc, #40]	@ (8006474 <bsp_photodiode_set_spi_data_len+0x34>)
 800644c:	f7ff feeb 	bl	8006226 <LL_SPI_SetDataWidth>
    if (DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006456:	d205      	bcs.n	8006464 <bsp_photodiode_set_spi_data_len+0x24>
	{
    	LL_SPI_SetRxFIFOThreshold(PHOTO_SPI, LL_SPI_RX_FIFO_TH_QUARTER);
 8006458:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800645c:	4805      	ldr	r0, [pc, #20]	@ (8006474 <bsp_photodiode_set_spi_data_len+0x34>)
 800645e:	f7ff fef5 	bl	800624c <LL_SPI_SetRxFIFOThreshold>
	}
    else
    {
    	LL_SPI_SetRxFIFOThreshold(PHOTO_SPI, LL_SPI_RX_FIFO_TH_HALF);
    }
}
 8006462:	e003      	b.n	800646c <bsp_photodiode_set_spi_data_len+0x2c>
    	LL_SPI_SetRxFIFOThreshold(PHOTO_SPI, LL_SPI_RX_FIFO_TH_HALF);
 8006464:	2100      	movs	r1, #0
 8006466:	4803      	ldr	r0, [pc, #12]	@ (8006474 <bsp_photodiode_set_spi_data_len+0x34>)
 8006468:	f7ff fef0 	bl	800624c <LL_SPI_SetRxFIFOThreshold>
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40003800 	.word	0x40003800

08006478 <bsp_photodiode_set_spi_prescaler>:

void bsp_photodiode_set_spi_prescaler(uint32_t Prescaler)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
    LL_SPI_SetBaudRatePrescaler(PHOTO_SPI, Prescaler);
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4803      	ldr	r0, [pc, #12]	@ (8006490 <bsp_photodiode_set_spi_prescaler+0x18>)
 8006484:	f7ff febc 	bl	8006200 <LL_SPI_SetBaudRatePrescaler>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40003800 	.word	0x40003800

08006494 <bsp_photodiode_sw_spi_change_mode>:

void bsp_photodiode_sw_spi_change_mode()
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
	LL_SPI_Disable(PHOTO_SPI);
 8006498:	4808      	ldr	r0, [pc, #32]	@ (80064bc <bsp_photodiode_sw_spi_change_mode+0x28>)
 800649a:	f7ff fe7b 	bl	8006194 <LL_SPI_Disable>
	bsp_photodiode_set_spi_data_len(LL_SPI_DATAWIDTH_8BIT);
 800649e:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 80064a2:	f7ff ffcd 	bl	8006440 <bsp_photodiode_set_spi_data_len>
	bsp_photodiode_set_spi_mode(SPI_MODE_1);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff8c 	bl	80063c4 <bsp_photodiode_set_spi_mode>
	bsp_photodiode_set_spi_prescaler(LL_SPI_BAUDRATEPRESCALER_DIV16);
 80064ac:	2018      	movs	r0, #24
 80064ae:	f7ff ffe3 	bl	8006478 <bsp_photodiode_set_spi_prescaler>
	LL_SPI_Enable(PHOTO_SPI);
 80064b2:	4802      	ldr	r0, [pc, #8]	@ (80064bc <bsp_photodiode_sw_spi_change_mode+0x28>)
 80064b4:	f7ff fe5e 	bl	8006174 <LL_SPI_Enable>
}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40003800 	.word	0x40003800

080064c0 <bsp_photodiode_adc_spi_change_mode>:

void bsp_photodiode_adc_spi_change_mode()
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
	LL_SPI_Disable(PHOTO_SPI);
 80064c4:	4808      	ldr	r0, [pc, #32]	@ (80064e8 <bsp_photodiode_adc_spi_change_mode+0x28>)
 80064c6:	f7ff fe65 	bl	8006194 <LL_SPI_Disable>
	bsp_photodiode_set_spi_data_len(LL_SPI_DATAWIDTH_16BIT);
 80064ca:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80064ce:	f7ff ffb7 	bl	8006440 <bsp_photodiode_set_spi_data_len>
	bsp_photodiode_set_spi_mode(SPI_MODE_0);
 80064d2:	2000      	movs	r0, #0
 80064d4:	f7ff ff76 	bl	80063c4 <bsp_photodiode_set_spi_mode>
	bsp_photodiode_set_spi_prescaler(LL_SPI_BAUDRATEPRESCALER_DIV2);
 80064d8:	2000      	movs	r0, #0
 80064da:	f7ff ffcd 	bl	8006478 <bsp_photodiode_set_spi_prescaler>
	LL_SPI_Enable(PHOTO_SPI);
 80064de:	4802      	ldr	r0, [pc, #8]	@ (80064e8 <bsp_photodiode_adc_spi_change_mode+0x28>)
 80064e0:	f7ff fe48 	bl	8006174 <LL_SPI_Enable>
}
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40003800 	.word	0x40003800

080064ec <bsp_photo_switch_on>:

void bsp_photo_switch_on(uint32_t channel_idx)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	ADG1414_Chain_SwitchOn(&photo_sw, channel_idx);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	4803      	ldr	r0, [pc, #12]	@ (8006508 <bsp_photo_switch_on+0x1c>)
 80064fc:	f000 fc70 	bl	8006de0 <ADG1414_Chain_SwitchOn>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	2000e134 	.word	0x2000e134

0800650c <bsp_photodiode_sample_rate_timer_init>:
 *timer interrupt->start Conv
 *timer 1 for sampling
 *timer
 */
void bsp_photodiode_sample_rate_timer_init()
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
	bsp_photodiode_timer1_init(timer_timing.sampling_period_ARR);
 8006510:	4b03      	ldr	r3, [pc, #12]	@ (8006520 <bsp_photodiode_sample_rate_timer_init+0x14>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f811 	bl	800653c <bsp_photodiode_timer1_init>
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	2000e154 	.word	0x2000e154

08006524 <bsp_photodiode_set_pre_time>:
void bsp_photodiode_set_pre_time()
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
	bsp_photodiode_set_time_tim2(timer_timing.pre_time_ARR);
 8006528:	4b03      	ldr	r3, [pc, #12]	@ (8006538 <bsp_photodiode_set_pre_time+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f845 	bl	80065bc <bsp_photodiode_set_time_tim2>
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2000e154 	.word	0x2000e154

0800653c <bsp_photodiode_timer1_init>:
}
void bsp_photodiode_set_post_time()
{
	bsp_photodiode_set_time_tim2(timer_timing.post_time_ARR);
}
void bsp_photodiode_timer1_init(uint32_t period) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

    uint32_t ticks = period ; // Số tick cần cho period
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60bb      	str	r3, [r7, #8]

    uint16_t prescaler = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	81fb      	strh	r3, [r7, #14]
    uint16_t arr = ticks - 1; // Giá trị ARR = số tick - 1
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	81bb      	strh	r3, [r7, #12]

    // Nếu ticks lớn hơn 0xFFFF, cần điều chỉnh prescaler
    if (ticks > 0xFFFF) {
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655a:	d30e      	bcc.n	800657a <bsp_photodiode_timer1_init+0x3e>
        prescaler = (ticks / 0xFFFF) + 1; // Làm tròn lên
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <bsp_photodiode_timer1_init+0x78>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	0bdb      	lsrs	r3, r3, #15
 8006566:	b29b      	uxth	r3, r3
 8006568:	3301      	adds	r3, #1
 800656a:	81fb      	strh	r3, [r7, #14]
        arr = (ticks / prescaler) - 1;
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	fbb2 f3f3 	udiv	r3, r2, r3
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	81bb      	strh	r3, [r7, #12]
    }

    // Cấu hình Timer 1
    //TIM1->CR1 = 0; // Xóa thanh ghi điều khiển
    TIM1->ARR = arr; // Cài đặt giá trị auto-reload
 800657a:	4a0f      	ldr	r2, [pc, #60]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 800657c:	89bb      	ldrh	r3, [r7, #12]
 800657e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM1->PSC = prescaler; // Cài đặt prescaler
 8006580:	4a0d      	ldr	r2, [pc, #52]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 8006582:	89fb      	ldrh	r3, [r7, #14]
 8006584:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM1->EGR = TIM_EGR_UG; // Tạo sự kiện update để áp dụng ngay
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 8006588:	2201      	movs	r2, #1
 800658a:	615a      	str	r2, [r3, #20]
    TIM1->DIER &= ~TIM_DIER_UIE; // off ngắt update
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a09      	ldr	r2, [pc, #36]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 8006592:	f023 0301 	bic.w	r3, r3, #1
 8006596:	60d3      	str	r3, [r2, #12]
    TIM1->CNT = 0;
 8006598:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <bsp_photodiode_timer1_init+0x7c>)
 800659a:	2200      	movs	r2, #0
 800659c:	625a      	str	r2, [r3, #36]	@ 0x24
    // Cấu hình NVIC cho ngắt Timer 1
    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0); // Ưu tiên ngắt cao nhất
 800659e:	2100      	movs	r1, #0
 80065a0:	2019      	movs	r0, #25
 80065a2:	f7ff fc53 	bl	8005e4c <__NVIC_SetPriority>
    NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80065a6:	2019      	movs	r0, #25
 80065a8:	f7ff fc2c 	bl	8005e04 <__NVIC_DisableIRQ>
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	80008001 	.word	0x80008001
 80065b8:	40010000 	.word	0x40010000

080065bc <bsp_photodiode_set_time_tim2>:


void bsp_photodiode_set_time_tim2(uint32_t period) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

    uint32_t ticks = period; // Số tick cần cho period ns
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	617b      	str	r3, [r7, #20]
    // Tính prescaler và auto-reload (ARR)
    uint16_t prescaler = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	827b      	strh	r3, [r7, #18]
    uint32_t arr = ticks - 1; // Giá trị ARR = số tick - 1 (TIM2 hỗ trợ 32-bit ARR)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
    // Cấu hình Timer 2
    //TIM2->CR1 = 0; // Xóa thanh ghi điều khiển
    TIM2->ARR = arr; // Cài đặt giá trị auto-reload
 80065d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->PSC = prescaler; // Cài đặt prescaler
 80065da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065de:	8a7b      	ldrh	r3, [r7, #18]
 80065e0:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->EGR = TIM_EGR_UG; // Tạo sự kiện update để áp dụng ngay
 80065e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065e6:	2201      	movs	r2, #1
 80065e8:	615a      	str	r2, [r3, #20]
    TIM2->DIER &= ~TIM_DIER_UIE;
 80065ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	60d3      	str	r3, [r2, #12]
    TIM2->CNT = 0;
 80065fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065fe:	2200      	movs	r2, #0
 8006600:	625a      	str	r2, [r3, #36]	@ 0x24
    // 4. Cấu hình NVIC cho ngắt Timer 2
    NVIC_SetPriority(TIM2_IRQn, 1); // Ưu tiên ngắt 1
 8006602:	2101      	movs	r1, #1
 8006604:	201c      	movs	r0, #28
 8006606:	f7ff fc21 	bl	8005e4c <__NVIC_SetPriority>
     NVIC_DisableIRQ(TIM2_IRQn);
 800660a:	201c      	movs	r0, #28
 800660c:	f7ff fbfa 	bl	8005e04 <__NVIC_DisableIRQ>
}
 8006610:	bf00      	nop
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <bsp_photodiode_sample_start>:
void bsp_photodiode_sample_start()
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	bsp_photodiode_adc_spi_change_mode();
 800661e:	f7ff ff4f 	bl	80064c0 <bsp_photodiode_adc_spi_change_mode>
	bsp_photo_prepare_pre_sampling();
 8006622:	f7ff fe91 	bl	8006348 <bsp_photo_prepare_pre_sampling>
	bsp_photodiode_time_t * timing = &photo_diode_adc.timing;
 8006626:	4b34      	ldr	r3, [pc, #208]	@ (80066f8 <bsp_photodiode_sample_start+0xe0>)
 8006628:	607b      	str	r3, [r7, #4]
	uint32_t num_sample = ((timing->pre_time + timing->sampling_time + timing->post_time) * timing->sampling_rate) / 1000;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	441a      	add	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4413      	add	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	4a2e      	ldr	r2, [pc, #184]	@ (80066fc <bsp_photodiode_sample_start+0xe4>)
 8006644:	fba2 2303 	umull	r2, r3, r2, r3
 8006648:	099b      	lsrs	r3, r3, #6
 800664a:	603b      	str	r3, [r7, #0]
	if (num_sample % BUFFER_FULL_SIZE) photo_diode_adc.block_count = (num_sample / BUFFER_FULL_SIZE) + 1;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <bsp_photodiode_sample_start+0x4a>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	0b9b      	lsrs	r3, r3, #14
 800665a:	3301      	adds	r3, #1
 800665c:	4a28      	ldr	r2, [pc, #160]	@ (8006700 <bsp_photodiode_sample_start+0xe8>)
 800665e:	6193      	str	r3, [r2, #24]
 8006660:	e003      	b.n	800666a <bsp_photodiode_sample_start+0x52>
	else photo_diode_adc.block_count = (num_sample / BUFFER_FULL_SIZE);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	0b9b      	lsrs	r3, r3, #14
 8006666:	4a26      	ldr	r2, [pc, #152]	@ (8006700 <bsp_photodiode_sample_start+0xe8>)
 8006668:	6193      	str	r3, [r2, #24]
	photo_diode_adc.ram_current_address = 0;
 800666a:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <bsp_photodiode_sample_start+0xe8>)
 800666c:	2200      	movs	r2, #0
 800666e:	615a      	str	r2, [r3, #20]

	bsp_photodiode_start_dma(&photo_diode_adc,(uint32_t *)&photo_data_buffer,BUFFER_FULL_SIZE);
 8006670:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006674:	4923      	ldr	r1, [pc, #140]	@ (8006704 <bsp_photodiode_sample_start+0xec>)
 8006676:	4822      	ldr	r0, [pc, #136]	@ (8006700 <bsp_photodiode_sample_start+0xe8>)
 8006678:	f000 f84a 	bl	8006710 <bsp_photodiode_start_dma>

	TIM2->CNT = 0;
 800667c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006680:	2200      	movs	r2, #0
 8006682:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CNT = 0;
 8006684:	4b20      	ldr	r3, [pc, #128]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 8006686:	2200      	movs	r2, #0
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt
 800668a:	4b1f      	ldr	r3, [pc, #124]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	4a1e      	ldr	r2, [pc, #120]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	6113      	str	r3, [r2, #16]
    TIM2->SR &= ~TIM_SR_UIF;
 8006696:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	6113      	str	r3, [r2, #16]
    TIM1->DIER |= TIM_DIER_UIE;
 80066a6:	4b18      	ldr	r3, [pc, #96]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	60d3      	str	r3, [r2, #12]
    TIM2->DIER |= TIM_DIER_UIE;
 80066b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80066c2:	201c      	movs	r0, #28
 80066c4:	f7ff fb80 	bl	8005dc8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80066c8:	2019      	movs	r0, #25
 80066ca:	f7ff fb7d 	bl	8005dc8 <__NVIC_EnableIRQ>
	    // 5. Kích hoạt Timer 1
	TIM2->CR1 |= TIM_CR1_CEN;
 80066ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
    TIM1->CR1 |= TIM_CR1_CEN;
 80066de:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a09      	ldr	r2, [pc, #36]	@ (8006708 <bsp_photodiode_sample_start+0xf0>)
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	6013      	str	r3, [r2, #0]
    photo_diode_state = PHOTO_SAMPLED_PRE;
 80066ea:	4b08      	ldr	r3, [pc, #32]	@ (800670c <bsp_photodiode_sample_start+0xf4>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]


}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	2000002c 	.word	0x2000002c
 80066fc:	10624dd3 	.word	0x10624dd3
 8006700:	20000010 	.word	0x20000010
 8006704:	20006134 	.word	0x20006134
 8006708:	40010000 	.word	0x40010000
 800670c:	20000070 	.word	0x20000070

08006710 <bsp_photodiode_start_dma>:

void bsp_photodiode_start_dma(photo_diode_t *config, uint32_t *buffer, uint32_t size)
{
 8006710:	b590      	push	{r4, r7, lr}
 8006712:	b087      	sub	sp, #28
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
	//Config stream rx
	LL_DMA_SetMode(config->dma, config->dma_stream_rx, LL_DMA_MODE_CIRCULAR);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68d8      	ldr	r0, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006728:	4619      	mov	r1, r3
 800672a:	f7ff fbf9 	bl	8005f20 <LL_DMA_SetMode>
	LL_DMA_ConfigAddresses(	config->dma,
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68d8      	ldr	r0, [r3, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6919      	ldr	r1, [r3, #16]
							config->dma_stream_rx,
							(uint32_t)&(config->spi->DR),
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
	LL_DMA_ConfigAddresses(	config->dma,
 800673c:	461c      	mov	r4, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	9200      	str	r2, [sp, #0]
 8006744:	4622      	mov	r2, r4
 8006746:	f7ff fc59 	bl	8005ffc <LL_DMA_ConfigAddresses>
							(uint32_t)buffer,
							LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(config->dma, config->dma_stream_rx, size);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68d8      	ldr	r0, [r3, #12]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4619      	mov	r1, r3
 8006756:	f7ff fc2b 	bl	8005fb0 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(config->dma, config->dma_stream_rx, LL_DMA_MEMORY_INCREMENT);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68d8      	ldr	r0, [r3, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006766:	4619      	mov	r1, r3
 8006768:	f7ff fbfe 	bl	8005f68 <LL_DMA_SetMemoryIncMode>

	// Kích hoạt DMA
	LL_DMA_EnableIT_TC(config->dma, config->dma_stream_rx);		// Kích hoạt ngắt DMA hoàn tất (cho RX)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7ff fc9c 	bl	80060b4 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_HT(config->dma, config->dma_stream_rx);		// Kích hoạt ngắt DMA hoàn tất (cho RX)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7ff fc74 	bl	8006074 <LL_DMA_EnableIT_HT>
	LL_SPI_EnableDMAReq_RX(config->spi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fd6e 	bl	8006272 <LL_SPI_EnableDMAReq_RX>
	LL_DMA_EnableStream(config->dma, config->dma_stream_rx); 	// RX trước
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7ff fb7d 	bl	8005ea0 <LL_DMA_EnableStream>
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd90      	pop	{r4, r7, pc}
	...

080067b0 <DMA1_Stream1_IRQHandler>:



// Hàm xử lí DMA ADC
void DMA1_Stream1_IRQHandler(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
	TIM1->CR1 &= ~TIM_CR1_CEN;		// Stop timer trigger
 80067b4:	4b41      	ldr	r3, [pc, #260]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a40      	ldr	r2, [pc, #256]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	6013      	str	r3, [r2, #0]
	GPIOD->BSRR = GPIO_BSRR_BS_9; // Đặt CS lên 1
 80067c0:	4b3f      	ldr	r3, [pc, #252]	@ (80068c0 <DMA1_Stream1_IRQHandler+0x110>)
 80067c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067c6:	619a      	str	r2, [r3, #24]
	// Kiểm tra cờ ngắt HT
	if (DMA1->LISR & DMA_LISR_HTIF1)
 80067c8:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <DMA1_Stream1_IRQHandler+0x56>
	{
		DMA1->LIFCR = DMA_LIFCR_CHTIF1;	// Clear HT flag
 80067d4:	4b3b      	ldr	r3, [pc, #236]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 80067d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067da:	609a      	str	r2, [r3, #8]
		bsp_spi_ram_write_dma(photo_diode_adc.ram_current_address, BUFFER_HALF_SIZE_BYTE, (uint8_t *)photo_data_buffer);
 80067dc:	4b3a      	ldr	r3, [pc, #232]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	4a3a      	ldr	r2, [pc, #232]	@ (80068cc <DMA1_Stream1_IRQHandler+0x11c>)
 80067e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f920 	bl	8006a2c <bsp_spi_ram_write_dma>
		photo_diode_adc.ram_current_address += BUFFER_HALF_SIZE_BYTE;
 80067ec:	4b36      	ldr	r3, [pc, #216]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80067f4:	4a34      	ldr	r2, [pc, #208]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 80067f6:	6153      	str	r3, [r2, #20]
		TIM1->CR1 |= TIM_CR1_CEN;		// Continue start timer trigger
 80067f8:	4b30      	ldr	r3, [pc, #192]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6013      	str	r3, [r2, #0]
			SST_Task_post((SST_Task *)&experiment_task_inst.super, (SST_Evt *)&finish_post_phase_evt);
		}
	}


}
 8006804:	e057      	b.n	80068b6 <DMA1_Stream1_IRQHandler+0x106>
	else if (DMA1->LISR & DMA_LISR_TCIF1)
 8006806:	4b2f      	ldr	r3, [pc, #188]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800680e:	2b00      	cmp	r3, #0
 8006810:	d051      	beq.n	80068b6 <DMA1_Stream1_IRQHandler+0x106>
		DMA1->LIFCR = DMA_LIFCR_CTCIF1;	// Clear TC flag
 8006812:	4b2c      	ldr	r3, [pc, #176]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 8006814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006818:	609a      	str	r2, [r3, #8]
		bsp_spi_ram_write_dma(photo_diode_adc.ram_current_address, BUFFER_HALF_SIZE_BYTE, (uint8_t *)upper_data_buffer);
 800681a:	4b2b      	ldr	r3, [pc, #172]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	4a2c      	ldr	r2, [pc, #176]	@ (80068d0 <DMA1_Stream1_IRQHandler+0x120>)
 8006820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f901 	bl	8006a2c <bsp_spi_ram_write_dma>
		photo_diode_adc.ram_current_address += BUFFER_HALF_SIZE_BYTE;
 800682a:	4b27      	ldr	r3, [pc, #156]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006832:	4a25      	ldr	r2, [pc, #148]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 8006834:	6153      	str	r3, [r2, #20]
		photo_diode_adc.block_count --;
 8006836:	4b24      	ldr	r3, [pc, #144]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a22      	ldr	r2, [pc, #136]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 800683e:	6193      	str	r3, [r2, #24]
		TIM1->CR1 |= TIM_CR1_CEN;		// Continue start timer trigger
 8006840:	4b1e      	ldr	r3, [pc, #120]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1d      	ldr	r2, [pc, #116]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	6013      	str	r3, [r2, #0]
		if ((photo_diode_adc.block_count) == 0)
 800684c:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d130      	bne.n	80068b6 <DMA1_Stream1_IRQHandler+0x106>
			PHOTO_TIMER->CR1 &= ~TIM_CR1_CEN;		// stop timer 2
 8006854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	6013      	str	r3, [r2, #0]
			PHOTO_TIMER->DIER &= ~TIM_DIER_UIE;
 8006864:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	60d3      	str	r3, [r2, #12]
			TIM1->CR1 &= ~TIM_CR1_CEN;				// Timer1 disable counter
 8006874:	4b11      	ldr	r3, [pc, #68]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a10      	ldr	r2, [pc, #64]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	6013      	str	r3, [r2, #0]
			TIM1->DIER &= ~TIM_DIER_UIE;			// Timer1 disable IT Update
 8006880:	4b0e      	ldr	r3, [pc, #56]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a0d      	ldr	r2, [pc, #52]	@ (80068bc <DMA1_Stream1_IRQHandler+0x10c>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	60d3      	str	r3, [r2, #12]
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
 800688c:	2101      	movs	r1, #1
 800688e:	480d      	ldr	r0, [pc, #52]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 8006890:	f7ff fb26 	bl	8005ee0 <LL_DMA_DisableStream>
			LL_DMA_DisableIT_TC(DMA1, LL_DMA_STREAM_1);
 8006894:	2101      	movs	r1, #1
 8006896:	480b      	ldr	r0, [pc, #44]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 8006898:	f7ff fc4c 	bl	8006134 <LL_DMA_DisableIT_TC>
			LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
 800689c:	2101      	movs	r1, #1
 800689e:	4809      	ldr	r0, [pc, #36]	@ (80068c4 <DMA1_Stream1_IRQHandler+0x114>)
 80068a0:	f7ff fc28 	bl	80060f4 <LL_DMA_DisableIT_HT>
			LL_SPI_DisableDMAReq_RX(photo_diode_adc.spi);
 80068a4:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <DMA1_Stream1_IRQHandler+0x118>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fcf2 	bl	8006292 <LL_SPI_DisableDMAReq_RX>
			SST_Task_post((SST_Task *)&experiment_task_inst.super, (SST_Evt *)&finish_post_phase_evt);
 80068ae:	4909      	ldr	r1, [pc, #36]	@ (80068d4 <DMA1_Stream1_IRQHandler+0x124>)
 80068b0:	4809      	ldr	r0, [pc, #36]	@ (80068d8 <DMA1_Stream1_IRQHandler+0x128>)
 80068b2:	f004 f90b 	bl	800aacc <SST_Task_post>
}
 80068b6:	bf00      	nop
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40020c00 	.word	0x40020c00
 80068c4:	40026000 	.word	0x40026000
 80068c8:	20000010 	.word	0x20000010
 80068cc:	20006134 	.word	0x20006134
 80068d0:	2000a134 	.word	0x2000a134
 80068d4:	08012704 	.word	0x08012704
 80068d8:	20004578 	.word	0x20004578

080068dc <TIM1_UP_TIM10_IRQHandler>:

// Hàm xử lý ngắt Timer ADC trigger
void TIM1_UP_TIM10_IRQHandler(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
	// Tạo xung trên PD10
	GPIOD->BSRR = GPIO_BSRR_BS_9; // Đặt CS lên 1
 80068e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80068e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e6:	619a      	str	r2, [r3, #24]
	GPIOD->BSRR = GPIO_BSRR_BR_10; // Đặt CV xuống 0
 80068e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80068ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80068ee:	619a      	str	r2, [r3, #24]
	__NOP();
 80068f0:	bf00      	nop
	__NOP();
 80068f2:	bf00      	nop
	__NOP();
 80068f4:	bf00      	nop
	__NOP();
 80068f6:	bf00      	nop

	//PHOTO_SPI->DR = 0xAAAA;
	GPIOD->BSRR = GPIO_BSRR_BR_9; // CS=0
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80068fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068fe:	619a      	str	r2, [r3, #24]
	LL_SPI_TransmitData16(PHOTO_SPI, 0xAAAA);
 8006900:	f64a 21aa 	movw	r1, #43690	@ 0xaaaa
 8006904:	4807      	ldr	r0, [pc, #28]	@ (8006924 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8006906:	f7ff fcd4 	bl	80062b2 <LL_SPI_TransmitData16>
	GPIOD->BSRR = GPIO_BSRR_BS_10; // Đặt PD10 lên 1
 800690a:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800690c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006910:	619a      	str	r2, [r3, #24]
	TIM1->SR = ~TIM_SR_UIF; // Xóa cờ ngắt
 8006912:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8006914:	f06f 0201 	mvn.w	r2, #1
 8006918:	611a      	str	r2, [r3, #16]
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40020c00 	.word	0x40020c00
 8006924:	40003800 	.word	0x40003800
 8006928:	40010000 	.word	0x40010000

0800692c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
	if (PHOTO_TIMER->SR & TIM_SR_UIF)
 8006930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d03e      	beq.n	80069bc <TIM2_IRQHandler+0x90>
	{
		PHOTO_TIMER->SR = ~TIM_SR_UIF;	// Xóa cờ ngắt update
 800693e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006942:	f06f 0201 	mvn.w	r2, #1
 8006946:	611a      	str	r2, [r3, #16]
		switch (photo_diode_state)
 8006948:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <TIM2_IRQHandler+0x94>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d002      	beq.n	8006956 <TIM2_IRQHandler+0x2a>
 8006950:	2b02      	cmp	r3, #2
 8006952:	d017      	beq.n	8006984 <TIM2_IRQHandler+0x58>
				PHOTO_TIMER->ARR = timer_timing.post_time_ARR-1;
				PHOTO_TIMER->CNT = 0;
				SST_Task_post((SST_Task *)&experiment_task_inst.super, (SST_Evt *)&finish_sampling_phase_evt);
				PHOTO_TIMER->CR1 &= ~TIM_CR1_CEN;		// stop timer
			break;
			default: break;
 8006954:	e032      	b.n	80069bc <TIM2_IRQHandler+0x90>
				bsp_laser_int_switch_on(photo_diode_adc.timing.pos);
 8006956:	4b1b      	ldr	r3, [pc, #108]	@ (80069c4 <TIM2_IRQHandler+0x98>)
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff f92e 	bl	8005bbc <bsp_laser_int_switch_on>
				photo_diode_state = PHOTO_SAMPLED_SAMPLING;
 8006960:	4b17      	ldr	r3, [pc, #92]	@ (80069c0 <TIM2_IRQHandler+0x94>)
 8006962:	2202      	movs	r2, #2
 8006964:	701a      	strb	r2, [r3, #0]
				PHOTO_TIMER->ARR = timer_timing.sampling_time_ARR - 1;
 8006966:	4b18      	ldr	r3, [pc, #96]	@ (80069c8 <TIM2_IRQHandler+0x9c>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800696e:	3b01      	subs	r3, #1
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c
				PHOTO_TIMER->CNT = 0;
 8006972:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006976:	2200      	movs	r2, #0
 8006978:	625a      	str	r2, [r3, #36]	@ 0x24
				SST_Task_post((SST_Task *)&experiment_task_inst.super, (SST_Evt *)&finish_pre_phase_evt);
 800697a:	4914      	ldr	r1, [pc, #80]	@ (80069cc <TIM2_IRQHandler+0xa0>)
 800697c:	4814      	ldr	r0, [pc, #80]	@ (80069d0 <TIM2_IRQHandler+0xa4>)
 800697e:	f004 f8a5 	bl	800aacc <SST_Task_post>
			break;
 8006982:	e01b      	b.n	80069bc <TIM2_IRQHandler+0x90>
				bsp_laser_int_switch_off_all();
 8006984:	f7ff f92a 	bl	8005bdc <bsp_laser_int_switch_off_all>
				photo_diode_state = PHOTO_SAMPLING_STOP;
 8006988:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <TIM2_IRQHandler+0x94>)
 800698a:	2203      	movs	r2, #3
 800698c:	701a      	strb	r2, [r3, #0]
				PHOTO_TIMER->ARR = timer_timing.post_time_ARR-1;
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <TIM2_IRQHandler+0x9c>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006996:	3b01      	subs	r3, #1
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c
				PHOTO_TIMER->CNT = 0;
 800699a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800699e:	2200      	movs	r2, #0
 80069a0:	625a      	str	r2, [r3, #36]	@ 0x24
				SST_Task_post((SST_Task *)&experiment_task_inst.super, (SST_Evt *)&finish_sampling_phase_evt);
 80069a2:	490c      	ldr	r1, [pc, #48]	@ (80069d4 <TIM2_IRQHandler+0xa8>)
 80069a4:	480a      	ldr	r0, [pc, #40]	@ (80069d0 <TIM2_IRQHandler+0xa4>)
 80069a6:	f004 f891 	bl	800aacc <SST_Task_post>
				PHOTO_TIMER->CR1 &= ~TIM_CR1_CEN;		// stop timer
 80069aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
			break;
 80069ba:	bf00      	nop
		}
	}
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000070 	.word	0x20000070
 80069c4:	20000010 	.word	0x20000010
 80069c8:	2000e154 	.word	0x2000e154
 80069cc:	080126dc 	.word	0x080126dc
 80069d0:	20004578 	.word	0x20004578
 80069d4:	080126f0 	.word	0x080126f0

080069d8 <LL_DMA_DisableStream>:
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80069e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a14 <LL_DMA_DisableStream+0x3c>)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	4413      	add	r3, r2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4908      	ldr	r1, [pc, #32]	@ (8006a14 <LL_DMA_DisableStream+0x3c>)
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	440a      	add	r2, r1
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	4611      	mov	r1, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	440a      	add	r2, r1
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6013      	str	r3, [r2, #0]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	08012718 	.word	0x08012718

08006a18 <bsp_spi_ram_init>:
    .dma_stream_rx = LL_DMA_STREAM_6, // Stream 6 cho RX
    .dma_channel = LL_DMA_CHANNEL_1 // Channel 1 chung
};

void bsp_spi_ram_init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
	SRAM_Initialize(&IS66WV);
 8006a1c:	4802      	ldr	r0, [pc, #8]	@ (8006a28 <bsp_spi_ram_init+0x10>)
 8006a1e:	f000 fda5 	bl	800756c <SRAM_Initialize>
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000074 	.word	0x20000074

08006a2c <bsp_spi_ram_write_dma>:
{
	SRAM_fast_read_polling(&IS66WV, address, size, buffer);
}

void bsp_spi_ram_write_dma(uint32_t address, uint32_t size, uint8_t *buffer)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
	SRAM_write_DMA(&IS66WV, address, size, buffer);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	4803      	ldr	r0, [pc, #12]	@ (8006a4c <bsp_spi_ram_write_dma+0x20>)
 8006a40:	f000 fe48 	bl	80076d4 <SRAM_write_DMA>
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000074 	.word	0x20000074

08006a50 <bsp_spi_ram_read_dma>:

void bsp_spi_ram_read_dma(uint32_t address, uint32_t size, uint8_t *buffer)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
	SRAM_read_DMA(&IS66WV, address, size, buffer);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	4803      	ldr	r0, [pc, #12]	@ (8006a70 <bsp_spi_ram_read_dma+0x20>)
 8006a64:	f000 fed6 	bl	8007814 <SRAM_read_DMA>
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000074 	.word	0x20000074

08006a74 <bsp_spi_ram_read_id>:
void bsp_spi_ram_read_id(uint8_t * buffer)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	SRAM_read_id(&IS66WV,  buffer);
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4803      	ldr	r0, [pc, #12]	@ (8006a8c <bsp_spi_ram_read_id+0x18>)
 8006a80:	f000 fdb8 	bl	80075f4 <SRAM_read_id>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000074 	.word	0x20000074

08006a90 <bsp_spi_ram_is_transfer_done>:
uint8_t bsp_spi_ram_is_transfer_done(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	return SRAM_IsTransferDone(&IS66WV);
 8006a94:	4802      	ldr	r0, [pc, #8]	@ (8006aa0 <bsp_spi_ram_is_transfer_done+0x10>)
 8006a96:	f000 ff63 	bl	8007960 <SRAM_IsTransferDone>
 8006a9a:	4603      	mov	r3, r0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000074 	.word	0x20000074

08006aa4 <DMA2_Stream6_IRQHandler>:

// Hàm xử lý ngắt DMA RX (SPI2_RX)
void DMA2_Stream6_IRQHandler(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
	if(DMA2->HISR & DMA_HISR_TCIF6)
 8006aa8:	4b12      	ldr	r3, [pc, #72]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <DMA2_Stream6_IRQHandler+0x18>
	{
		DMA2->HIFCR = DMA_HIFCR_CTCIF6;
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006ab6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006aba:	60da      	str	r2, [r3, #12]
	}
	if(DMA2->HISR & DMA_HISR_TCIF5)
 8006abc:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <DMA2_Stream6_IRQHandler+0x2c>
	{
		DMA2->HIFCR = DMA_HIFCR_CTCIF5;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ace:	60da      	str	r2, [r3, #12]
	}

	IS66WV.cs_port->BSRR = IS66WV.cs_pin;		// CS cao
 8006ad0:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <DMA2_Stream6_IRQHandler+0x54>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4a08      	ldr	r2, [pc, #32]	@ (8006af8 <DMA2_Stream6_IRQHandler+0x54>)
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	619a      	str	r2, [r3, #24]
	IS66WV.transfer_done = 1; // Báo hoàn tất
 8006ada:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <DMA2_Stream6_IRQHandler+0x54>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	741a      	strb	r2, [r3, #16]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_5);
 8006ae0:	2105      	movs	r1, #5
 8006ae2:	4804      	ldr	r0, [pc, #16]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006ae4:	f7ff ff78 	bl	80069d8 <LL_DMA_DisableStream>
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8006ae8:	2106      	movs	r1, #6
 8006aea:	4802      	ldr	r0, [pc, #8]	@ (8006af4 <DMA2_Stream6_IRQHandler+0x50>)
 8006aec:	f7ff ff74 	bl	80069d8 <LL_DMA_DisableStream>
}
 8006af0:	bf00      	nop
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40026400 	.word	0x40026400
 8006af8:	20000074 	.word	0x20000074

08006afc <LL_GPIO_SetOutputPin>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	619a      	str	r2, [r3, #24]
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_GPIO_ResetOutputPin>:
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	041a      	lsls	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	619a      	str	r2, [r3, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <bsp_temperature_power_on>:
//	if (tec_idx > 3) return ERROR_NOT_SUPPORTED;
//	return lt8722_set_swen_req(tec_table[tec_idx], LT8722_SWEN_REQ_DISABLED);
//}

uint32_t bsp_temperature_power_on(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8006b3c:	2110      	movs	r1, #16
 8006b3e:	4803      	ldr	r0, [pc, #12]	@ (8006b4c <bsp_temperature_power_on+0x14>)
 8006b40:	f7ff ffdc 	bl	8006afc <LL_GPIO_SetOutputPin>
	return ERROR_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40020c00 	.word	0x40020c00

08006b50 <bsp_temperature_power_off>:
uint32_t bsp_temperature_power_off(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8006b54:	2110      	movs	r1, #16
 8006b56:	4803      	ldr	r0, [pc, #12]	@ (8006b64 <bsp_temperature_power_off+0x14>)
 8006b58:	f7ff ffde 	bl	8006b18 <LL_GPIO_ResetOutputPin>
	return ERROR_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40020c00 	.word	0x40020c00

08006b68 <LL_SPI_Enable>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	601a      	str	r2, [r3, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <LL_SPI_IsEnabled>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b98:	2b40      	cmp	r3, #64	@ 0x40
 8006b9a:	d101      	bne.n	8006ba0 <LL_SPI_IsEnabled+0x18>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <LL_SPI_IsEnabled+0x1a>
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <LL_SPI_IsActiveFlag_RXNE>:
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <LL_SPI_IsActiveFlag_TXE>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d101      	bne.n	8006bec <LL_SPI_IsActiveFlag_TXE+0x18>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <LL_SPI_IsActiveFlag_TXE+0x1a>
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <LL_SPI_ReceiveData8>:
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	330c      	adds	r3, #12
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <LL_SPI_TransmitData8>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	330c      	adds	r3, #12
 8006c26:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	701a      	strb	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_GPIO_SetOutputPin>:
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	619a      	str	r2, [r3, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <LL_GPIO_ResetOutputPin>:
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	041a      	lsls	r2, r3, #16
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	619a      	str	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <ADG1414_Chain_Write>:

#include "adg1414.h"


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7ff ffd7 	bl	8006c3a <LL_GPIO_SetOutputPin>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8006c8c:	bf00      	nop
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff9e 	bl	8006bd4 <LL_SPI_IsActiveFlag_TXE>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f7      	beq.n	8006c8e <ADG1414_Chain_Write+0x1a>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7ff ffd4 	bl	8006c56 <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7b1b      	ldrb	r3, [r3, #12]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e023      	b.n	8006d00 <ADG1414_Chain_Write+0x8c>
    {
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8006cb8:	bf00      	nop
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff ff88 	bl	8006bd4 <LL_SPI_IsActiveFlag_TXE>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f7      	beq.n	8006cba <ADG1414_Chain_Write+0x46>
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	330d      	adds	r3, #13
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f7ff ff9c 	bl	8006c16 <LL_SPI_TransmitData8>

        while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));   // Đợi BSY
 8006cde:	bf00      	nop
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff62 	bl	8006bae <LL_SPI_IsActiveFlag_RXNE>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f7      	beq.n	8006ce0 <ADG1414_Chain_Write+0x6c>
        (void)LL_SPI_ReceiveData8(dev->spi);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff ff80 	bl	8006bfa <LL_SPI_ReceiveData8>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dad8      	bge.n	8006cb8 <ADG1414_Chain_Write+0x44>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7ff ff92 	bl	8006c3a <LL_GPIO_SetOutputPin>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b08c      	sub	sp, #48	@ 0x30
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d38:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d46:	f107 0314 	add.w	r3, r7, #20
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	609a      	str	r2, [r3, #8]
 8006d52:	60da      	str	r2, [r3, #12]
 8006d54:	611a      	str	r2, [r3, #16]
 8006d56:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006d62:	2302      	movs	r3, #2
 8006d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f107 0214 	add.w	r2, r7, #20
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f005 fe06 	bl	800c98a <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7ff ff56 	bl	8006c3a <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d92:	e008      	b.n	8006da6 <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	4413      	add	r3, r2
 8006d9a:	330d      	adds	r3, #13
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	3301      	adds	r3, #1
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	4293      	cmp	r3, r2
 8006db0:	dbf0      	blt.n	8006d94 <ADG1414_Chain_Init+0x76>
    }

    while (!LL_SPI_IsEnabled(dev->spi))
 8006db2:	e005      	b.n	8006dc0 <ADG1414_Chain_Init+0xa2>
	{
		LL_SPI_Enable(dev->spi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fed5 	bl	8006b68 <LL_SPI_Enable>
		__NOP();
 8006dbe:	bf00      	nop
    while (!LL_SPI_IsEnabled(dev->spi))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff fedf 	bl	8006b88 <LL_SPI_IsEnabled>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f1      	beq.n	8006db4 <ADG1414_Chain_Init+0x96>
	}

    ADG1414_Chain_Write(dev);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff ff4f 	bl	8006c74 <ADG1414_Chain_Write>
}
 8006dd6:	bf00      	nop
 8006dd8:	3730      	adds	r7, #48	@ 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	2b24      	cmp	r3, #36	@ 0x24
 8006df0:	d903      	bls.n	8006dfa <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8006df6:	2b06      	cmp	r3, #6
 8006df8:	d05a      	beq.n	8006eb0 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d903      	bls.n	8006e08 <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d055      	beq.n	8006eb4 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7b1b      	ldrb	r3, [r3, #12]
 8006e0c:	2b06      	cmp	r3, #6
 8006e0e:	d138      	bne.n	8006e82 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e008      	b.n	8006e28 <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	330d      	adds	r3, #13
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7b1b      	ldrb	r3, [r3, #12]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	dbf0      	blt.n	8006e16 <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d036      	beq.n	8006ea8 <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ebc <ADG1414_Chain_SwitchOn+0xdc>)
 8006e40:	fb82 1203 	smull	r1, r2, r2, r3
 8006e44:	17db      	asrs	r3, r3, #31
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <ADG1414_Chain_SwitchOn+0xdc>)
 8006e50:	fb83 3102 	smull	r3, r1, r3, r2
 8006e54:	17d3      	asrs	r3, r2, #31
 8006e56:	1ac9      	subs	r1, r1, r3
 8006e58:	460b      	mov	r3, r1
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	440b      	add	r3, r1
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	1ad1      	subs	r1, r2, r3
 8006e62:	460b      	mov	r3, r1
 8006e64:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 8006e66:	7abb      	ldrb	r3, [r7, #10]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006e76:	b2d1      	uxtb	r1, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	735a      	strb	r2, [r3, #13]
 8006e80:	e012      	b.n	8006ea8 <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	7b1b      	ldrb	r3, [r3, #12]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10e      	bne.n	8006ea8 <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	2201      	movs	r2, #1
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	735a      	strb	r2, [r3, #13]
 8006ea0:	e002      	b.n	8006ea8 <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fee3 	bl	8006c74 <ADG1414_Chain_Write>
 8006eae:	e002      	b.n	8006eb6 <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 8006eb0:	bf00      	nop
 8006eb2:	e000      	b.n	8006eb6 <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 8006eb4:	bf00      	nop
}
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	2aaaaaab 	.word	0x2aaaaaab

08006ec0 <ADG1414_Chain_SwitchAllOff>:
//	ADG1414_Chain_Write(dev);
//}

/* Hàm tắt tất cả các switch */
void ADG1414_Chain_SwitchAllOff(ADG1414_Device_t *dev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < dev->num_of_sw; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e008      	b.n	8006ee0 <ADG1414_Chain_SwitchAllOff+0x20>
    {
        dev->switch_state[i] = 0x00;
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	330d      	adds	r3, #13
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7b1b      	ldrb	r3, [r3, #12]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	dbf0      	blt.n	8006ece <ADG1414_Chain_SwitchAllOff+0xe>
    }
    ADG1414_Chain_Write(dev);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fec1 	bl	8006c74 <ADG1414_Chain_Write>
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <LL_SPI_Enable>:
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	601a      	str	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <LL_SPI_IsEnabled>:
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d101      	bne.n	8006f32 <LL_SPI_IsEnabled+0x18>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <LL_SPI_IsEnabled+0x1a>
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_SPI_IsActiveFlag_RXNE>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <LL_SPI_IsActiveFlag_TXE>:
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d101      	bne.n	8006f7e <LL_SPI_IsActiveFlag_TXE+0x18>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <LL_SPI_ReceiveData16>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(SPIx->DR));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	b29b      	uxth	r3, r3
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <LL_SPI_TransmitData16>:
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	801a      	strh	r2, [r3, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_GPIO_SetOutputPin>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	619a      	str	r2, [r3, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <LL_GPIO_ResetOutputPin>:
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	041a      	lsls	r2, r3, #16
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <ADS8327_Wake_Up>:


static uint16_t CFR_user_default = 0x0EFD;		//0000 1110 1111 1101

void ADS8327_Wake_Up(ADS8327_Device_t *dev)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	dev->CMD = ADS8327_CMD_WAKE_UP;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 8007012:	839a      	strh	r2, [r3, #28]

    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7ff ffe1 	bl	8006fe6 <LL_GPIO_ResetOutputPin>

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8007024:	bf00      	nop
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff ff9b 	bl	8006f66 <LL_SPI_IsActiveFlag_TXE>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f7      	beq.n	8007026 <ADS8327_Wake_Up+0x22>
    LL_SPI_TransmitData16(dev->spi, dev->CMD);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8b9b      	ldrh	r3, [r3, #28]
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7ff ffb0 	bl	8006fa6 <LL_SPI_TransmitData16>
    while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8007046:	bf00      	nop
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff ff77 	bl	8006f40 <LL_SPI_IsActiveFlag_RXNE>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f7      	beq.n	8007048 <ADS8327_Wake_Up+0x44>
    (void)LL_SPI_ReceiveData16(dev->spi);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff ff95 	bl	8006f8c <LL_SPI_ReceiveData16>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7ff ffac 	bl	8006fca <LL_GPIO_SetOutputPin>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <ADS8327_Write_CFR>:

void ADS8327_Write_CFR(ADS8327_Device_t *dev, uint16_t CFR)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	807b      	strh	r3, [r7, #2]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7ff ffa7 	bl	8006fe6 <LL_GPIO_ResetOutputPin>

	dev->CMD = ADS8327_CMD_WRITE_CONFIG;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800709e:	839a      	strh	r2, [r3, #28]
	dev->CFR_value = CFR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	887a      	ldrh	r2, [r7, #2]
 80070a4:	83da      	strh	r2, [r3, #30]
	uint16_t temp = (dev->CMD & 0xF000) | (dev->CFR_value & 0x0FFF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8b9b      	ldrh	r3, [r3, #28]
 80070aa:	b21a      	sxth	r2, r3
 80070ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <ADS8327_Write_CFR+0x9c>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	b21a      	sxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8bdb      	ldrh	r3, [r3, #30]
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070bc:	b21b      	sxth	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	81fb      	strh	r3, [r7, #14]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80070c4:	bf00      	nop
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff4b 	bl	8006f66 <LL_SPI_IsActiveFlag_TXE>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f7      	beq.n	80070c6 <ADS8327_Write_CFR+0x4a>
	LL_SPI_TransmitData16(dev->spi, temp);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	89fa      	ldrh	r2, [r7, #14]
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ff61 	bl	8006fa6 <LL_SPI_TransmitData16>
	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 80070e4:	bf00      	nop
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff ff28 	bl	8006f40 <LL_SPI_IsActiveFlag_RXNE>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0f7      	beq.n	80070e6 <ADS8327_Write_CFR+0x6a>
	(void)LL_SPI_ReceiveData16(dev->spi);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff ff46 	bl	8006f8c <LL_SPI_ReceiveData16>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7ff ff5d 	bl	8006fca <LL_GPIO_SetOutputPin>
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	fffff000 	.word	0xfffff000

0800711c <ADS8327_Default_CFR>:


void ADS8327_Default_CFR(ADS8327_Device_t *dev, CFR_default_t CFR_default)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
	if (CFR_default == USER_DEFAULT)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <ADS8327_Default_CFR+0x20>
	{
		ADS8327_Write_CFR(dev, CFR_user_default);
 800712e:	4b22      	ldr	r3, [pc, #136]	@ (80071b8 <ADS8327_Default_CFR+0x9c>)
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ffa1 	bl	800707c <ADS8327_Write_CFR>
		while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
		(void)LL_SPI_ReceiveData16(dev->spi);

		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	}
}
 800713a:	e039      	b.n	80071b0 <ADS8327_Default_CFR+0x94>
	else if (CFR_default == FACTORY_DEFAULT)
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d136      	bne.n	80071b0 <ADS8327_Default_CFR+0x94>
		LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7ff ff4a 	bl	8006fe6 <LL_GPIO_ResetOutputPin>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8007158:	839a      	strh	r2, [r3, #28]
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f640 62fd 	movw	r2, #3837	@ 0xefd
 8007160:	83da      	strh	r2, [r3, #30]
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8007162:	bf00      	nop
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fefc 	bl	8006f66 <LL_SPI_IsActiveFlag_TXE>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f7      	beq.n	8007164 <ADS8327_Default_CFR+0x48>
		LL_SPI_TransmitData16(dev->spi, dev->CMD);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8b9b      	ldrh	r3, [r3, #28]
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f7ff ff11 	bl	8006fa6 <LL_SPI_TransmitData16>
		while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8007184:	bf00      	nop
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fed8 	bl	8006f40 <LL_SPI_IsActiveFlag_RXNE>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f7      	beq.n	8007186 <ADS8327_Default_CFR+0x6a>
		(void)LL_SPI_ReceiveData16(dev->spi);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fef6 	bl	8006f8c <LL_SPI_ReceiveData16>
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7ff ff0d 	bl	8006fca <LL_GPIO_SetOutputPin>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000138 	.word	0x20000138

080071bc <ADS8327_Device_Init>:
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);			// Timer disable IT Update
}


void ADS8327_Device_Init(	ADS8327_Device_t *dev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
//TODO: change mode
	dev->ADC_val = 0xFFFF;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071ca:	841a      	strh	r2, [r3, #32]
	dev->tran_ind = 0;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	while (!LL_SPI_IsEnabled(dev->spi))
 80071d4:	e005      	b.n	80071e2 <ADS8327_Device_Init+0x26>
	{
		LL_SPI_Enable(dev->spi);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fe8d 	bl	8006efa <LL_SPI_Enable>
		__NOP();
 80071e0:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fe97 	bl	8006f1a <LL_SPI_IsEnabled>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f1      	beq.n	80071d6 <ADS8327_Device_Init+0x1a>
	}

	ADS8327_Default_CFR(dev, USER_DEFAULT);
 80071f2:	2100      	movs	r1, #0
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff91 	bl	800711c <ADS8327_Default_CFR>
	ADS8327_Wake_Up(dev);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff ff02 	bl	8007004 <ADS8327_Wake_Up>
	// Hàm khởi tạo DMA

}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <LL_GPIO_SetOutputPin>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	619a      	str	r2, [r3, #24]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LL_GPIO_ResetOutputPin>:
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	041a      	lsls	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <LL_SPI_IsActiveFlag_TXE>:
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d101      	bne.n	8007280 <LL_SPI_IsActiveFlag_TXE+0x18>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <LL_SPI_EnableDMAReq_RX>:
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f043 0201 	orr.w	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	605a      	str	r2, [r3, #4]
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <LL_SPI_EnableDMAReq_TX>:
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <LL_SPI_ReceiveData8>:
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	330c      	adds	r3, #12
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b2db      	uxtb	r3, r3
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <LL_SPI_TransmitData8>:
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	330c      	adds	r3, #12
 80072fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	701a      	strb	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <LL_DMA_EnableStream>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800731a:	4a0c      	ldr	r2, [pc, #48]	@ (800734c <LL_DMA_EnableStream+0x3c>)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	4413      	add	r3, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4908      	ldr	r1, [pc, #32]	@ (800734c <LL_DMA_EnableStream+0x3c>)
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	440a      	add	r2, r1
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	4611      	mov	r1, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	440a      	add	r2, r1
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	6013      	str	r3, [r2, #0]
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	08012720 	.word	0x08012720

08007350 <LL_DMA_SetMode>:
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800735c:	4a0d      	ldr	r2, [pc, #52]	@ (8007394 <LL_DMA_SetMode+0x44>)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8007370:	4908      	ldr	r1, [pc, #32]	@ (8007394 <LL_DMA_SetMode+0x44>)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	440b      	add	r3, r1
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	4619      	mov	r1, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	440b      	add	r3, r1
 800737e:	4619      	mov	r1, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4313      	orrs	r3, r2
 8007384:	600b      	str	r3, [r1, #0]
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	08012720 	.word	0x08012720

08007398 <LL_DMA_SetMemoryIncMode>:
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80073a4:	4a0d      	ldr	r2, [pc, #52]	@ (80073dc <LL_DMA_SetMemoryIncMode+0x44>)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80073b8:	4908      	ldr	r1, [pc, #32]	@ (80073dc <LL_DMA_SetMemoryIncMode+0x44>)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	440b      	add	r3, r1
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	440b      	add	r3, r1
 80073c6:	4619      	mov	r1, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	08012720 	.word	0x08012720

080073e0 <LL_DMA_SetDataLength>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80073ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007424 <LL_DMA_SetDataLength+0x44>)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <LL_DMA_SetDataLength+0x48>)
 80073fe:	4013      	ands	r3, r2
 8007400:	4908      	ldr	r1, [pc, #32]	@ (8007424 <LL_DMA_SetDataLength+0x44>)
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	440a      	add	r2, r1
 8007406:	7812      	ldrb	r2, [r2, #0]
 8007408:	4611      	mov	r1, r2
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	440a      	add	r2, r1
 800740e:	4611      	mov	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	4313      	orrs	r3, r2
 8007414:	604b      	str	r3, [r1, #4]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	08012720 	.word	0x08012720
 8007428:	ffff0000 	.word	0xffff0000

0800742c <LL_DMA_ConfigAddresses>:
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d114      	bne.n	800746a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8007440:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <LL_DMA_ConfigAddresses+0x74>)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8007454:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <LL_DMA_ConfigAddresses+0x74>)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	461a      	mov	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	6093      	str	r3, [r2, #8]
}
 8007468:	e013      	b.n	8007492 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 800746a:	4a0d      	ldr	r2, [pc, #52]	@ (80074a0 <LL_DMA_ConfigAddresses+0x74>)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4413      	add	r3, r2
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 800747e:	4a08      	ldr	r2, [pc, #32]	@ (80074a0 <LL_DMA_ConfigAddresses+0x74>)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4413      	add	r3, r2
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	461a      	mov	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	60d3      	str	r3, [r2, #12]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	08012720 	.word	0x08012720

080074a4 <LL_DMA_IsActiveFlag_TC5>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <LL_DMA_IsActiveFlag_TC6>:
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <LL_DMA_ClearFlag_TC5>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007502:	60da      	str	r2, [r3, #12]
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <LL_DMA_ClearFlag_TC6>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800751e:	60da      	str	r2, [r3, #12]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <LL_DMA_EnableIT_TC>:
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8007536:	4a0c      	ldr	r2, [pc, #48]	@ (8007568 <LL_DMA_EnableIT_TC+0x3c>)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	4413      	add	r3, r2
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4908      	ldr	r1, [pc, #32]	@ (8007568 <LL_DMA_EnableIT_TC+0x3c>)
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	440a      	add	r2, r1
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	4611      	mov	r1, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	440a      	add	r2, r1
 8007554:	f043 0310 	orr.w	r3, r3, #16
 8007558:	6013      	str	r3, [r2, #0]
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	08012720 	.word	0x08012720

0800756c <SRAM_Initialize>:

static uint8_t data_dummy = 0xAA;

// Hàm khởi tạo SRAM
void SRAM_Initialize(IS66_t *config)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	LL_DMA_SetMode(config->dma, config->dma_stream_tx, LL_DMA_MODE_NORMAL);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6958      	ldr	r0, [r3, #20]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	2200      	movs	r2, #0
 800757e:	4619      	mov	r1, r3
 8007580:	f7ff fee6 	bl	8007350 <LL_DMA_SetMode>
	LL_DMA_SetMode(config->dma, config->dma_stream_rx, LL_DMA_MODE_NORMAL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6958      	ldr	r0, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2200      	movs	r2, #0
 800758e:	4619      	mov	r1, r3
 8007590:	f7ff fede 	bl	8007350 <LL_DMA_SetMode>

	if (LL_DMA_IsActiveFlag_TC6(config->dma))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff ff97 	bl	80074cc <LL_DMA_IsActiveFlag_TC6>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <SRAM_Initialize+0x42>
	{
		LL_DMA_ClearFlag_TC6(config->dma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff ffb1 	bl	8007510 <LL_DMA_ClearFlag_TC6>
	}
	if (LL_DMA_IsActiveFlag_TC5(config->dma))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff ff76 	bl	80074a4 <LL_DMA_IsActiveFlag_TC5>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <SRAM_Initialize+0x5c>
	{
		LL_DMA_ClearFlag_TC5(config->dma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff ff96 	bl	80074f4 <LL_DMA_ClearFlag_TC5>
	}

	LL_DMA_EnableIT_TC(config->dma, config->dma_stream_rx);		// Kích hoạt ngắt DMA hoàn tất (cho RX)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695a      	ldr	r2, [r3, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f7ff ffaa 	bl	800752c <LL_DMA_EnableIT_TC>
	LL_SPI_EnableDMAReq_TX(config->spi);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fe66 	bl	80072ae <LL_SPI_EnableDMAReq_TX>
	LL_SPI_EnableDMAReq_RX(config->spi);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fe51 	bl	800728e <LL_SPI_EnableDMAReq_RX>
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <SRAM_read_id>:


void SRAM_read_id(IS66_t *config, uint8_t *buffer)
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	uint32_t i;
    uint8_t cmd[4] = {SRAM_READ_ID_CMD, 0, 0, 0};
 80075fe:	239f      	movs	r3, #159	@ 0x9f
 8007600:	60bb      	str	r3, [r7, #8]
    LL_GPIO_ResetOutputPin(config->cs_port, config->cs_pin); // CS thấp
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7ff fe09 	bl	8007224 <LL_GPIO_ResetOutputPin>
    for (i = 0; i < 4; i++) {
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e023      	b.n	8007660 <SRAM_read_id+0x6c>
        while (!LL_SPI_IsActiveFlag_TXE(config->spi));
 8007618:	bf00      	nop
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fe22 	bl	8007268 <LL_SPI_IsActiveFlag_TXE>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f7      	beq.n	800761a <SRAM_read_id+0x26>
        LL_SPI_TransmitData8(config->spi, cmd[i]);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f107 0208 	add.w	r2, r7, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	f7ff fe56 	bl	80072ea <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_RXNE(config->spi));
 800763e:	bf00      	nop
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fdfc 	bl	8007242 <LL_SPI_IsActiveFlag_RXNE>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0f7      	beq.n	8007640 <SRAM_read_id+0x4c>
        LL_SPI_ReceiveData8(config->spi); // Đọc bỏ dummy
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fe3a 	bl	80072ce <LL_SPI_ReceiveData8>
    for (i = 0; i < 4; i++) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d9d8      	bls.n	8007618 <SRAM_read_id+0x24>
    }
    for (i = 0; i < 8; i++) {
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	e024      	b.n	80076b6 <SRAM_read_id+0xc2>
        while (!LL_SPI_IsActiveFlag_TXE(config->spi));
 800766c:	bf00      	nop
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fdf8 	bl	8007268 <LL_SPI_IsActiveFlag_TXE>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f7      	beq.n	800766e <SRAM_read_id+0x7a>
        LL_SPI_TransmitData8(config->spi, 0xAA);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	21aa      	movs	r1, #170	@ 0xaa
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fe30 	bl	80072ea <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_RXNE(config->spi));
 800768a:	bf00      	nop
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fdd6 	bl	8007242 <LL_SPI_IsActiveFlag_RXNE>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0f7      	beq.n	800768c <SRAM_read_id+0x98>
        buffer[i] = LL_SPI_ReceiveData8(config->spi); // Đọc bỏ dummy
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	18d4      	adds	r4, r2, r3
 80076a6:	4608      	mov	r0, r1
 80076a8:	f7ff fe11 	bl	80072ce <LL_SPI_ReceiveData8>
 80076ac:	4603      	mov	r3, r0
 80076ae:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < 8; i++) {
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3301      	adds	r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b07      	cmp	r3, #7
 80076ba:	d9d7      	bls.n	800766c <SRAM_read_id+0x78>
    }
    LL_GPIO_SetOutputPin(config->cs_port, config->cs_pin); // CS thấp
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f7ff fd9e 	bl	8007208 <LL_GPIO_SetOutputPin>

}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <SRAM_write_DMA>:
 * @param address: Địa chỉ trong SRAM để ghi dữ liệu.
 * @param size: Kích thước dữ liệu cần ghi (đơn vị: byte).
 * @param buffer: Con trỏ đến bộ đệm chứa dữ liệu cần ghi.
 */
void SRAM_write_DMA(IS66_t *config, uint32_t address, uint32_t size, uint8_t *buffer)
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b089      	sub	sp, #36	@ 0x24
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]

	uint32_t i;
	uint8_t cmd[4] = {SRAM_WRITE_CMD, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 80076e2:	2302      	movs	r3, #2
 80076e4:	743b      	strb	r3, [r7, #16]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	747b      	strb	r3, [r7, #17]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	74bb      	strb	r3, [r7, #18]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	74fb      	strb	r3, [r7, #19]
	config->transfer_done = 0;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	741a      	strb	r2, [r3, #16]

	config->cs_port->BSRR = config->cs_pin;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	6892      	ldr	r2, [r2, #8]
 800770a:	619a      	str	r2, [r3, #24]
	//LL_GPIO_SetOutputPin(config->cs_port, config->cs_pin); // make sure CS is high
	// start transfer
	config->cs_port->BSRR = config->cs_pin << 16;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	0412      	lsls	r2, r2, #16
 8007716:	619a      	str	r2, [r3, #24]
	//LL_GPIO_ResetOutputPin(config->cs_port, config->cs_pin); // CS thấp

	for (i = 0; i < 4; i++) {
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e023      	b.n	8007766 <SRAM_write_DMA+0x92>
		while (!LL_SPI_IsActiveFlag_TXE(config->spi));
 800771e:	bf00      	nop
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fd9f 	bl	8007268 <LL_SPI_IsActiveFlag_TXE>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f7      	beq.n	8007720 <SRAM_write_DMA+0x4c>
		LL_SPI_TransmitData8(config->spi, cmd[i]);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	f107 0210 	add.w	r2, r7, #16
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	f7ff fdd3 	bl	80072ea <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_RXNE(config->spi));
 8007744:	bf00      	nop
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fd79 	bl	8007242 <LL_SPI_IsActiveFlag_RXNE>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f7      	beq.n	8007746 <SRAM_write_DMA+0x72>
		LL_SPI_ReceiveData8(config->spi); // Đọc bỏ dummy
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fdb7 	bl	80072ce <LL_SPI_ReceiveData8>
	for (i = 0; i < 4; i++) {
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3301      	adds	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d9d8      	bls.n	800771e <SRAM_write_DMA+0x4a>
	}

	//Config stream tx
	LL_DMA_ConfigAddresses(	config->dma,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6958      	ldr	r0, [r3, #20]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6999      	ldr	r1, [r3, #24]
 8007774:	683a      	ldr	r2, [r7, #0]
							config->dma_stream_tx,
							(uint32_t)buffer,
							(uint32_t)&(config->spi->DR),
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	330c      	adds	r3, #12
	LL_DMA_ConfigAddresses(	config->dma,
 800777c:	461c      	mov	r4, r3
 800777e:	2340      	movs	r3, #64	@ 0x40
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4623      	mov	r3, r4
 8007784:	f7ff fe52 	bl	800742c <LL_DMA_ConfigAddresses>
							LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
	LL_DMA_SetDataLength(config->dma, config->dma_stream_tx, size);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6958      	ldr	r0, [r3, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4619      	mov	r1, r3
 8007794:	f7ff fe24 	bl	80073e0 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(config->dma, config->dma_stream_tx, LL_DMA_MEMORY_INCREMENT);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6958      	ldr	r0, [r3, #20]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80077a4:	4619      	mov	r1, r3
 80077a6:	f7ff fdf7 	bl	8007398 <LL_DMA_SetMemoryIncMode>

	//Config stream rx
	LL_DMA_ConfigAddresses(	config->dma,
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6958      	ldr	r0, [r3, #20]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	69d9      	ldr	r1, [r3, #28]
							config->dma_stream_rx,
							(uint32_t)&(config->spi->DR),
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
	LL_DMA_ConfigAddresses(	config->dma,
 80077b8:	461c      	mov	r4, r3
 80077ba:	4a15      	ldr	r2, [pc, #84]	@ (8007810 <SRAM_write_DMA+0x13c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	4622      	mov	r2, r4
 80077c4:	f7ff fe32 	bl	800742c <LL_DMA_ConfigAddresses>
							(uint32_t)&data_dummy,
							LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(config->dma, config->dma_stream_rx, size);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6958      	ldr	r0, [r3, #20]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4619      	mov	r1, r3
 80077d4:	f7ff fe04 	bl	80073e0 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(config->dma, config->dma_stream_rx, LL_DMA_MEMORY_NOINCREMENT);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6958      	ldr	r0, [r3, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2200      	movs	r2, #0
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7ff fdd8 	bl	8007398 <LL_DMA_SetMemoryIncMode>

	// Kích hoạt DMA
	LL_DMA_EnableStream(config->dma, config->dma_stream_rx); 	// RX trước
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	695a      	ldr	r2, [r3, #20]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7ff fd8c 	bl	8007310 <LL_DMA_EnableStream>
	LL_DMA_EnableStream(config->dma, config->dma_stream_tx); 	// TX sau
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7ff fd84 	bl	8007310 <LL_DMA_EnableStream>


}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd90      	pop	{r4, r7, pc}
 8007810:	2000013a 	.word	0x2000013a

08007814 <SRAM_read_DMA>:


void SRAM_read_DMA(IS66_t *config, uint32_t address, uint32_t size, uint8_t *buffer) {
 8007814:	b590      	push	{r4, r7, lr}
 8007816:	b08b      	sub	sp, #44	@ 0x2c
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]

	uint32_t i;
	uint8_t cmd[5] = {SRAM_FAST_READ_CMD, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF,0};
 8007822:	230b      	movs	r3, #11
 8007824:	753b      	strb	r3, [r7, #20]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	b2db      	uxtb	r3, r3
 800782c:	757b      	strb	r3, [r7, #21]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	b2db      	uxtb	r3, r3
 8007834:	75bb      	strb	r3, [r7, #22]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	75fb      	strb	r3, [r7, #23]
 800783c:	2300      	movs	r3, #0
 800783e:	763b      	strb	r3, [r7, #24]
	config->transfer_done = 0;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	741a      	strb	r2, [r3, #16]
	LL_GPIO_SetOutputPin(config->cs_port, config->cs_pin); // make sure CS is high
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7ff fcd9 	bl	8007208 <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(config->cs_port, config->cs_pin); // CS thấp
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7ff fcdf 	bl	8007224 <LL_GPIO_ResetOutputPin>

	for (i = 0; i < 5; i++)
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e023      	b.n	80078b4 <SRAM_read_DMA+0xa0>
	{
		while (!LL_SPI_IsActiveFlag_TXE(config->spi));
 800786c:	bf00      	nop
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fcf8 	bl	8007268 <LL_SPI_IsActiveFlag_TXE>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f7      	beq.n	800786e <SRAM_read_DMA+0x5a>
		LL_SPI_TransmitData8(config->spi, cmd[i]);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f107 0214 	add.w	r2, r7, #20
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	f7ff fd2c 	bl	80072ea <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_RXNE(config->spi));
 8007892:	bf00      	nop
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fcd2 	bl	8007242 <LL_SPI_IsActiveFlag_RXNE>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f7      	beq.n	8007894 <SRAM_read_DMA+0x80>
		LL_SPI_ReceiveData8(config->spi); // Đọc bỏ dummy
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fd10 	bl	80072ce <LL_SPI_ReceiveData8>
	for (i = 0; i < 5; i++)
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d9d8      	bls.n	800786c <SRAM_read_DMA+0x58>
	}

	//Config stream tx
	//LL_DMA_SetMode(config->dma, config->dma_stream_tx, LL_DMA_MODE_NORMAL);
	LL_DMA_ConfigAddresses(	config->dma,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6958      	ldr	r0, [r3, #20]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6999      	ldr	r1, [r3, #24]
 80078c2:	4a26      	ldr	r2, [pc, #152]	@ (800795c <SRAM_read_DMA+0x148>)
							config->dma_stream_tx,
							(uint32_t)&data_dummy,
							(uint32_t)&(config->spi->DR),
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
	LL_DMA_ConfigAddresses(	config->dma,
 80078ca:	461c      	mov	r4, r3
 80078cc:	2340      	movs	r3, #64	@ 0x40
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	4623      	mov	r3, r4
 80078d2:	f7ff fdab 	bl	800742c <LL_DMA_ConfigAddresses>
							LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
	LL_DMA_SetDataLength(config->dma, config->dma_stream_tx, size);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6958      	ldr	r0, [r3, #20]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7ff fd7d 	bl	80073e0 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(config->dma, config->dma_stream_tx, LL_DMA_MEMORY_NOINCREMENT);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6958      	ldr	r0, [r3, #20]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2200      	movs	r2, #0
 80078f0:	4619      	mov	r1, r3
 80078f2:	f7ff fd51 	bl	8007398 <LL_DMA_SetMemoryIncMode>

	//Config stream rx
	//LL_DMA_SetMode(config->dma, config->dma_stream_rx, LL_DMA_MODE_NORMAL);
	LL_DMA_ConfigAddresses(	config->dma,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6958      	ldr	r0, [r3, #20]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	69d9      	ldr	r1, [r3, #28]
							config->dma_stream_rx,
							(uint32_t)&(config->spi->DR),
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
	LL_DMA_ConfigAddresses(	config->dma,
 8007904:	461c      	mov	r4, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	9200      	str	r2, [sp, #0]
 800790c:	4622      	mov	r2, r4
 800790e:	f7ff fd8d 	bl	800742c <LL_DMA_ConfigAddresses>
							(uint32_t)buffer,
							LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(config->dma, config->dma_stream_rx, size);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6958      	ldr	r0, [r3, #20]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4619      	mov	r1, r3
 800791e:	f7ff fd5f 	bl	80073e0 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(config->dma, config->dma_stream_rx, LL_DMA_MEMORY_INCREMENT);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6958      	ldr	r0, [r3, #20]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800792e:	4619      	mov	r1, r3
 8007930:	f7ff fd32 	bl	8007398 <LL_DMA_SetMemoryIncMode>

	// Kích hoạt DMA
	LL_DMA_EnableStream(config->dma, config->dma_stream_rx); 	// RX trước
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7ff fce6 	bl	8007310 <LL_DMA_EnableStream>
	LL_DMA_EnableStream(config->dma, config->dma_stream_tx); 	// TX sau
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7ff fcde 	bl	8007310 <LL_DMA_EnableStream>
}
 8007954:	bf00      	nop
 8007956:	3724      	adds	r7, #36	@ 0x24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd90      	pop	{r4, r7, pc}
 800795c:	2000013a 	.word	0x2000013a

08007960 <SRAM_IsTransferDone>:
}


// Hàm kiểm tra trạng thái truyền
uint8_t SRAM_IsTransferDone(IS66_t *config)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
    return config->transfer_done;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7c1b      	ldrb	r3, [r3, #16]
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <LL_SPI_ReceiveData8>:
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	330c      	adds	r3, #12
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b2db      	uxtb	r3, r3
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <LL_SPI_TransmitData8>:
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	330c      	adds	r3, #12
 80079ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	701a      	strb	r2, [r3, #0]
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <LL_GPIO_SetOutputPin>:
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	619a      	str	r2, [r3, #24]
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_GPIO_ResetOutputPin>:
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	041a      	lsls	r2, r3, #16
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	619a      	str	r2, [r3, #24]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(struct lt8722_dev *dev) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	891b      	ldrh	r3, [r3, #8]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f7ff ffe5 	bl	80079fa <LL_GPIO_ResetOutputPin>
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <csHIGH>:

static inline void csHIGH(struct lt8722_dev *dev) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	891b      	ldrh	r3, [r3, #8]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f7ff ffc7 	bl	80079de <LL_GPIO_SetOutputPin>
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(struct lt8722_dev *dev, uint8_t data)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
	LL_SPI_TransmitData8(SPI_TEC, data);
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	4619      	mov	r1, r3
 8007a68:	4809      	ldr	r0, [pc, #36]	@ (8007a90 <SPI_LL_Transmit+0x38>)
 8007a6a:	f7ff ffa6 	bl	80079ba <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(dev->hspi));
 8007a6e:	bf00      	nop
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff ff7f 	bl	8007978 <LL_SPI_IsActiveFlag_RXNE>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0f7      	beq.n	8007a70 <SPI_LL_Transmit+0x18>
	return LL_SPI_ReceiveData8(SPI_TEC);
 8007a80:	4803      	ldr	r0, [pc, #12]	@ (8007a90 <SPI_LL_Transmit+0x38>)
 8007a82:	f7ff ff8c 	bl	800799e <LL_SPI_ReceiveData8>
 8007a86:	4603      	mov	r3, r0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40003c00 	.word	0x40003c00

08007a94 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(struct lt8722_dev *dev, uint8_t *buffer, uint8_t byte_number)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t received_data = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]
    csLOW(dev);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff ffb6 	bl	8007a18 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 8007aac:	2300      	movs	r3, #0
 8007aae:	75bb      	strb	r3, [r7, #22]
 8007ab0:	e011      	b.n	8007ad6 <SPI_write_and_read_buffer+0x42>
    {
        received_data = SPI_LL_Transmit(dev, buffer[i]);
 8007ab2:	7dbb      	ldrb	r3, [r7, #22]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff ffcb 	bl	8007a58 <SPI_LL_Transmit>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]
        buffer[i] = received_data;
 8007ac6:	7dbb      	ldrb	r3, [r7, #22]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4413      	add	r3, r2
 8007acc:	7dfa      	ldrb	r2, [r7, #23]
 8007ace:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 8007ad0:	7dbb      	ldrb	r3, [r7, #22]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	75bb      	strb	r3, [r7, #22]
 8007ad6:	7dba      	ldrb	r2, [r7, #22]
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d3e9      	bcc.n	8007ab2 <SPI_write_and_read_buffer+0x1e>
    }
    csHIGH(dev);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff ffaa 	bl	8007a38 <csHIGH>
    return received_data;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 8007af0:	b5b0      	push	{r4, r5, r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 8007afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afe:	4d0e      	ldr	r5, [pc, #56]	@ (8007b38 <lt8722_voltage_to_dac+0x48>)
 8007b00:	2400      	movs	r4, #0
 8007b02:	1a2a      	subs	r2, r5, r0
 8007b04:	eb64 0301 	sbc.w	r3, r4, r1
 8007b08:	f04f 0000 	mov.w	r0, #0
 8007b0c:	f04f 0100 	mov.w	r1, #0
 8007b10:	0659      	lsls	r1, r3, #25
 8007b12:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8007b16:	0650      	lsls	r0, r2, #25
 8007b18:	a305      	add	r3, pc, #20	@ (adr r3, 8007b30 <lt8722_voltage_to_dac+0x40>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fbf7 	bl	8000310 <__aeabi_ldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4613      	mov	r3, r2
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b30:	9502f900 	.word	0x9502f900
 8007b34:	00000000 	.word	0x00000000
 8007b38:	4a817c80 	.word	0x4a817c80

08007b3c <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 8007b3c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	17c8      	asrs	r0, r1, #31
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	491b      	ldr	r1, [pc, #108]	@ (8007bbc <lt8722_dac_to_voltage+0x80>)
 8007b50:	fb01 f005 	mul.w	r0, r1, r5
 8007b54:	2100      	movs	r1, #0
 8007b56:	fb04 f101 	mul.w	r1, r4, r1
 8007b5a:	4401      	add	r1, r0
 8007b5c:	4817      	ldr	r0, [pc, #92]	@ (8007bbc <lt8722_dac_to_voltage+0x80>)
 8007b5e:	fba4 2300 	umull	r2, r3, r4, r0
 8007b62:	4419      	add	r1, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	4610      	mov	r0, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	da08      	bge.n	8007b80 <lt8722_dac_to_voltage+0x44>
 8007b6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b72:	18c3      	adds	r3, r0, r3
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	f141 0300 	adc.w	r3, r1, #0
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	0e42      	lsrs	r2, r0, #25
 8007b8a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007b8e:	164b      	asrs	r3, r1, #25
 8007b90:	2100      	movs	r1, #0
 8007b92:	f1d2 0a00 	rsbs	sl, r2, #0
 8007b96:	eb61 0b03 	sbc.w	fp, r1, r3
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	4908      	ldr	r1, [pc, #32]	@ (8007bc0 <lt8722_dac_to_voltage+0x84>)
 8007ba0:	eb12 0801 	adds.w	r8, r2, r1
 8007ba4:	f143 0900 	adc.w	r9, r3, #0
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
}
 8007bac:	4610      	mov	r0, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	9502f900 	.word	0x9502f900
 8007bc0:	4a817c80 	.word	0x4a817c80

08007bc4 <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_dev *dev, struct lt8722_packet *packet)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	uint8_t buffer[8] = {0};
 8007bce:	f107 030c 	add.w	r3, r7, #12
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	791b      	ldrb	r3, [r3, #4]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2bf2      	cmp	r3, #242	@ 0xf2
 8007bee:	d111      	bne.n	8007c14 <lt8722_transaction+0x50>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	f107 030c 	add.w	r3, r7, #12
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f000 fb1d 	bl	800823c <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 8007c02:	f107 030c 	add.w	r3, r7, #12
 8007c06:	2106      	movs	r1, #6
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fadb 	bl	80081c4 <Calculate_CRC8>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	74bb      	strb	r3, [r7, #18]
 8007c12:	e007      	b.n	8007c24 <lt8722_transaction+0x60>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 8007c14:	f107 030c 	add.w	r3, r7, #12
 8007c18:	2102      	movs	r1, #2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fad2 	bl	80081c4 <Calculate_CRC8>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(dev, buffer, packet->command.size);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	785a      	ldrb	r2, [r3, #1]
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff ff30 	bl	8007a94 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fb3d 	bl	80082b8 <get_unaligned_be16>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	055b      	lsls	r3, r3, #21
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	0d5b      	lsrs	r3, r3, #21
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4013      	ands	r3, r2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2bf2      	cmp	r3, #242	@ 0xf2
 8007c66:	d106      	bne.n	8007c76 <lt8722_transaction+0xb2>
	{
		packet->crc = buffer[2];
 8007c68:	7bba      	ldrb	r2, [r7, #14]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8007c6e:	7cfa      	ldrb	r2, [r7, #19]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	755a      	strb	r2, [r3, #21]
 8007c74:	e019      	b.n	8007caa <lt8722_transaction+0xe6>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2bf4      	cmp	r3, #244	@ 0xf4
 8007c7c:	d10f      	bne.n	8007c9e <lt8722_transaction+0xda>
		packet->data = get_unaligned_be32(&buffer[2]);
 8007c7e:	f107 030c 	add.w	r3, r7, #12
 8007c82:	3302      	adds	r3, #2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fafa 	bl	800827e <get_unaligned_be32>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 8007c90:	7cba      	ldrb	r2, [r7, #18]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 8007c96:	7cfa      	ldrb	r2, [r7, #19]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	755a      	strb	r2, [r3, #21]
 8007c9c:	e005      	b.n	8007caa <lt8722_transaction+0xe6>
	} else {
		packet->crc = buffer[2];
 8007c9e:	7bba      	ldrb	r2, [r7, #14]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	7d5b      	ldrb	r3, [r3, #21]
 8007cae:	2ba5      	cmp	r3, #165	@ 0xa5
 8007cb0:	d009      	beq.n	8007cc6 <lt8722_transaction+0x102>
	{
		dev->status |= (1 << TEC_FAULT_POS); //communication fault
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7e9b      	ldrb	r3, [r3, #26]
 8007cb6:	f043 0310 	orr.w	r3, r3, #16
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	769a      	strb	r2, [r3, #26]
		return -1;
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	e007      	b.n	8007cd6 <lt8722_transaction+0x112>
	}
	dev->status &= ~(1 << TEC_FAULT_POS); //communication OK
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7e9b      	ldrb	r3, [r3, #26]
 8007cca:	f023 0310 	bic.w	r3, r3, #16
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	769a      	strb	r2, [r3, #26]
	return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(struct lt8722_dev *dev, uint8_t address, uint32_t *data)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	@ 0x30
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	72fb      	strb	r3, [r7, #11]
	int8_t ret = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8007cf4:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <lt8722_reg_read+0x68>)
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	823b      	strh	r3, [r7, #16]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 8007cfa:	8a3b      	ldrh	r3, [r7, #16]
 8007cfc:	82bb      	strh	r3, [r7, #20]
	packet.reg = lt8722_regs[address];
 8007cfe:	7afa      	ldrb	r2, [r7, #11]
 8007d00:	4912      	ldr	r1, [pc, #72]	@ (8007d4c <lt8722_reg_read+0x6c>)
 8007d02:	4613      	mov	r3, r2
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	18ca      	adds	r2, r1, r3
 8007d0c:	f107 0318 	add.w	r3, r7, #24
 8007d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(dev, &packet);
 8007d16:	f107 0314 	add.w	r3, r7, #20
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ff51 	bl	8007bc4 <lt8722_transaction>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (ret)
 8007d28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <lt8722_reg_read+0x56>
		return ret;
 8007d30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d34:	e003      	b.n	8007d3e <lt8722_reg_read+0x5e>
	*data = packet.data;
 8007d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
	return 0;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3730      	adds	r7, #48	@ 0x30
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	0801219c 	.word	0x0801219c
 8007d4c:	2000013c 	.word	0x2000013c

08007d50 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(struct lt8722_dev *dev, uint8_t address, uint32_t data)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	@ 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	72fb      	strb	r3, [r7, #11]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <lt8722_reg_write+0x4c>)
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	82bb      	strh	r3, [r7, #20]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 8007d64:	8abb      	ldrh	r3, [r7, #20]
 8007d66:	833b      	strh	r3, [r7, #24]
	packet.reg = lt8722_regs[address];
 8007d68:	7afa      	ldrb	r2, [r7, #11]
 8007d6a:	490d      	ldr	r1, [pc, #52]	@ (8007da0 <lt8722_reg_write+0x50>)
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	18ca      	adds	r2, r1, r3
 8007d76:	f107 031c 	add.w	r3, r7, #28
 8007d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	62bb      	str	r3, [r7, #40]	@ 0x28
	return lt8722_transaction(dev, &packet);
 8007d84:	f107 0318 	add.w	r3, r7, #24
 8007d88:	4619      	mov	r1, r3
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff ff1a 	bl	8007bc4 <lt8722_transaction>
 8007d90:	4603      	mov	r3, r0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3730      	adds	r7, #48	@ 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	080121a0 	.word	0x080121a0
 8007da0:	2000013c 	.word	0x2000013c

08007da4 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(struct lt8722_dev *dev, uint8_t address, uint32_t mask, uint32_t data)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	460b      	mov	r3, r1
 8007db2:	72fb      	strb	r3, [r7, #11]
	uint32_t reg_data;
	lt8722_reg_read(dev, address, &reg_data);
 8007db4:	f107 0214 	add.w	r2, r7, #20
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff ff8f 	bl	8007ce0 <lt8722_reg_read>
	reg_data &= ~mask;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	43da      	mvns	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 faa2 	bl	8008318 <field_prep>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(dev, address, reg_data);
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff ffb4 	bl	8007d50 <lt8722_reg_write>
 8007de8:	4603      	mov	r3, r0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(struct lt8722_dev *dev, bool value)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
	if (value) dev->status |= (1 << TEC_ENABLED_POS);
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <lt8722_set_enable_req+0x22>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7e9b      	ldrb	r3, [r3, #26]
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	769a      	strb	r2, [r3, #26]
 8007e12:	e006      	b.n	8007e22 <lt8722_set_enable_req+0x30>
	else dev->status &= ~(1 << TEC_ENABLED_POS);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7e9b      	ldrb	r3, [r3, #26]
 8007e18:	f023 0302 	bic.w	r3, r3, #2
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	769a      	strb	r2, [r3, #26]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	2201      	movs	r2, #1
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ffbb 	bl	8007da4 <lt8722_reg_write_mask>
 8007e2e:	4603      	mov	r3, r0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(struct lt8722_dev *dev, bool value)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
	if (value) dev->status |= (1 << TEC_SWITCH_ENABLED_POS);
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d007      	beq.n	8007e5a <lt8722_set_swen_req+0x22>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	7e9b      	ldrb	r3, [r3, #26]
 8007e4e:	f043 0304 	orr.w	r3, r3, #4
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	769a      	strb	r2, [r3, #26]
 8007e58:	e006      	b.n	8007e68 <lt8722_set_swen_req+0x30>
	else dev->status &= ~(1 << TEC_SWITCH_ENABLED_POS);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7e9b      	ldrb	r3, [r3, #26]
 8007e5e:	f023 0304 	bic.w	r3, r3, #4
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	769a      	strb	r2, [r3, #26]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff ff98 	bl	8007da4 <lt8722_reg_write_mask>
 8007e74:	4603      	mov	r3, r0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(struct lt8722_dev *dev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
	dev->status &= ~((1 << TEC_INIT_POS) | (1 << TEC_ENABLED_POS) | (1 << TEC_SWITCH_ENABLED_POS) | ((1 << TEC_DIR_POS)));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7e9b      	ldrb	r3, [r3, #26]
 8007e8a:	f023 030f 	bic.w	r3, r3, #15
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	769a      	strb	r2, [r3, #26]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 8007e94:	2301      	movs	r3, #1
 8007e96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ff81 	bl	8007da4 <lt8722_reg_write_mask>
 8007ea2:	4603      	mov	r3, r0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(struct lt8722_dev *dev)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	069b      	lsls	r3, r3, #26
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	0d5b      	lsrs	r3, r3, #21
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff69 	bl	8007da4 <lt8722_reg_write_mask>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(struct lt8722_dev *dev, uint32_t value)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ff56 	bl	8007da4 <lt8722_reg_write_mask>
 8007ef8:	4603      	mov	r3, r0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(struct lt8722_dev *dev)
{
 8007f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f06:	b091      	sub	sp, #68	@ 0x44
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6178      	str	r0, [r7, #20]
	int8_t ret = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_ResetOutputPin(dev->en_port, dev->en_pin);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	8a1b      	ldrh	r3, [r3, #16]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f7ff fd6c 	bl	80079fa <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(dev->swen_port, dev->swen_pin);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	695a      	ldr	r2, [r3, #20]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	8b1b      	ldrh	r3, [r3, #24]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7ff fd64 	bl	80079fa <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(dev);
 8007f32:	6978      	ldr	r0, [r7, #20]
 8007f34:	f7ff ffa3 	bl	8007e7e <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(dev);
 8007f38:	6978      	ldr	r0, [r7, #20]
 8007f3a:	f7ff ffb7 	bl	8007eac <lt8722_clear_faults>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
	LL_GPIO_SetOutputPin(dev->en_port, dev->en_pin);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	8a1b      	ldrh	r3, [r3, #16]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f7ff fd45 	bl	80079de <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(dev, LT8722_ENABLE_REQ_ENABLED);
 8007f54:	2101      	movs	r1, #1
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f7ff ff4b 	bl	8007df2 <lt8722_set_enable_req>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 8007f62:	f643 2201 	movw	r2, #14849	@ 0x3a01
 8007f66:	2100      	movs	r1, #0
 8007f68:	6978      	ldr	r0, [r7, #20]
 8007f6a:	f7ff fef1 	bl	8007d50 <lt8722_reg_write>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(dev, 0xFF000000);
 8007f74:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 8007f78:	6978      	ldr	r0, [r7, #20]
 8007f7a:	f7ff ffaf 	bl	8007edc <lt8722_set_dac>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(dev, LT8722_SPIS_STATUS, 0);
 8007f84:	2200      	movs	r2, #0
 8007f86:	2101      	movs	r1, #1
 8007f88:	6978      	ldr	r0, [r7, #20]
 8007f8a:	f7ff fee1 	bl	8007d50 <lt8722_reg_write>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f005 ff35 	bl	800de04 <LL_mDelay>
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 8007f9a:	f643 2201 	movw	r2, #14849	@ 0x3a01
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6978      	ldr	r0, [r7, #20]
 8007fa2:	f7ff fed5 	bl	8007d50 <lt8722_reg_write>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 8007fac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8007fb0:	f7ff fdc4 	bl	8007b3c <lt8722_dac_to_voltage>
 8007fb4:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f7ff fdbf 	bl	8007b3c <lt8722_dac_to_voltage>
 8007fbe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007fc8:	e046      	b.n	8008058 <lt8722_init+0x156>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 8007fca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007fd2:	1a84      	subs	r4, r0, r2
 8007fd4:	eb61 0503 	sbc.w	r5, r1, r3
 8007fd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4698      	mov	r8, r3
 8007fe0:	4691      	mov	r9, r2
 8007fe2:	fb08 f205 	mul.w	r2, r8, r5
 8007fe6:	fb04 f309 	mul.w	r3, r4, r9
 8007fea:	4413      	add	r3, r2
 8007fec:	fba4 ab08 	umull	sl, fp, r4, r8
 8007ff0:	445b      	add	r3, fp
 8007ff2:	469b      	mov	fp, r3
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da06      	bge.n	800800a <lt8722_init+0x108>
 8007ffc:	1cd1      	adds	r1, r2, #3
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	f143 0300 	adc.w	r3, r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800800a:	f04f 0000 	mov.w	r0, #0
 800800e:	f04f 0100 	mov.w	r1, #0
 8008012:	0890      	lsrs	r0, r2, #2
 8008014:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8008018:	1099      	asrs	r1, r3, #2
 800801a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800801e:	1816      	adds	r6, r2, r0
 8008020:	603e      	str	r6, [r7, #0]
 8008022:	414b      	adcs	r3, r1
 8008024:	607b      	str	r3, [r7, #4]
 8008026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 800802e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008032:	f7ff fd5d 	bl	8007af0 <lt8722_voltage_to_dac>
 8008036:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(dev, dac);
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4619      	mov	r1, r3
 800803c:	6978      	ldr	r0, [r7, #20]
 800803e:	f7ff ff4d 	bl	8007edc <lt8722_set_dac>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 8008048:	2001      	movs	r0, #1
 800804a:	f005 fedb 	bl	800de04 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 800804e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008052:	3301      	adds	r3, #1
 8008054:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008058:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800805c:	2b04      	cmp	r3, #4
 800805e:	d9b4      	bls.n	8007fca <lt8722_init+0xc8>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_SetOutputPin(dev->swen_port, dev->swen_pin);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	8b1b      	ldrh	r3, [r3, #24]
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7ff fcb7 	bl	80079de <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(dev, LT8722_SWEN_REQ_ENABLED);
 8008070:	2101      	movs	r1, #1
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f7ff fee0 	bl	8007e38 <lt8722_set_swen_req>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
//	delay_us(200);
	LL_mDelay(1);
 800807e:	2001      	movs	r0, #1
 8008080:	f005 fec0 	bl	800de04 <LL_mDelay>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	if (!ret)
 8008084:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8008088:	2b00      	cmp	r3, #0
 800808a:	d107      	bne.n	800809c <lt8722_init+0x19a>
		{
		dev->status |= ((1 << TEC_INIT_POS) | (1 << TEC_ENABLED_POS) | (1 << TEC_SWITCH_ENABLED_POS)); //tec is initted
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	7e9b      	ldrb	r3, [r3, #26]
 8008090:	f043 0307 	orr.w	r3, r3, #7
 8008094:	b2da      	uxtb	r2, r3
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	769a      	strb	r2, [r3, #26]
 800809a:	e002      	b.n	80080a2 <lt8722_init+0x1a0>
		}
	else dev->status = 0;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2200      	movs	r2, #0
 80080a0:	769a      	strb	r2, [r3, #26]
	dev->voltage = 0;
 80080a2:	6979      	ldr	r1, [r7, #20]
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	return ret;
 80080b0:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3744      	adds	r7, #68	@ 0x44
 80080b8:	46bd      	mov	sp, r7
 80080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080080c0 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(struct lt8722_dev *dev, tec_dir_t dir, int64_t value)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b08c      	sub	sp, #48	@ 0x30
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	61f8      	str	r0, [r7, #28]
 80080ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80080ce:	460b      	mov	r3, r1
 80080d0:	76fb      	strb	r3, [r7, #27]
	uint8_t ret = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 80080e8:	7efb      	ldrb	r3, [r7, #27]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d12b      	bne.n	8008146 <lt8722_set_output_voltage_channel+0x86>
	{
		dev->status &= ~(1 << TEC_DIR_POS);
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	7e9b      	ldrb	r3, [r3, #26]
 80080f2:	f023 0308 	bic.w	r3, r3, #8
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	769a      	strb	r2, [r3, #26]
		vdac = LT8722_DAC_OFFSET - value / 16;
 80080fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008100:	4610      	mov	r0, r2
 8008102:	4619      	mov	r1, r3
 8008104:	2900      	cmp	r1, #0
 8008106:	da07      	bge.n	8008118 <lt8722_set_output_voltage_channel+0x58>
 8008108:	f110 030f 	adds.w	r3, r0, #15
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	f141 0300 	adc.w	r3, r1, #0
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	0902      	lsrs	r2, r0, #4
 8008122:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8008126:	110b      	asrs	r3, r1, #4
 8008128:	2100      	movs	r1, #0
 800812a:	4250      	negs	r0, r2
 800812c:	6038      	str	r0, [r7, #0]
 800812e:	eb61 0303 	sbc.w	r3, r1, r3
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008138:	4921      	ldr	r1, [pc, #132]	@ (80081c0 <lt8722_set_output_voltage_channel+0x100>)
 800813a:	eb12 0801 	adds.w	r8, r2, r1
 800813e:	f143 0900 	adc.w	r9, r3, #0
 8008142:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}
	if (dir == TEC_HEAT)
 8008146:	7efb      	ldrb	r3, [r7, #27]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d120      	bne.n	800818e <lt8722_set_output_voltage_channel+0xce>
	{
		dev->status |= (1 << TEC_DIR_POS);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	7e9b      	ldrb	r3, [r3, #26]
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	b2da      	uxtb	r2, r3
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	769a      	strb	r2, [r3, #26]
		vdac = LT8722_DAC_OFFSET + value / 16;
 800815a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da05      	bge.n	800816e <lt8722_set_output_voltage_channel+0xae>
 8008162:	f112 0a0f 	adds.w	sl, r2, #15
 8008166:	f143 0b00 	adc.w	fp, r3, #0
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f04f 0000 	mov.w	r0, #0
 8008172:	f04f 0100 	mov.w	r1, #0
 8008176:	0910      	lsrs	r0, r2, #4
 8008178:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800817c:	1119      	asrs	r1, r3, #4
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	490f      	ldr	r1, [pc, #60]	@ (80081c0 <lt8722_set_output_voltage_channel+0x100>)
 8008184:	1854      	adds	r4, r2, r1
 8008186:	f143 0500 	adc.w	r5, r3, #0
 800818a:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	}
	dac = lt8722_voltage_to_dac(vdac);
 800818e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008192:	f7ff fcad 	bl	8007af0 <lt8722_voltage_to_dac>
 8008196:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(dev, dac);
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	4619      	mov	r1, r3
 800819c:	69f8      	ldr	r0, [r7, #28]
 800819e:	f7ff fe9d 	bl	8007edc <lt8722_set_dac>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	dev->voltage = value;
 80081a8:	69f9      	ldr	r1, [r7, #28]
 80081aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081ae:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return ret;
 80081b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3730      	adds	r7, #48	@ 0x30
 80081ba:	46bd      	mov	sp, r7
 80081bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c0:	4a817c80 	.word	0x4a817c80

080081c4 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 80081d4:	2307      	movs	r3, #7
 80081d6:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]
 80081dc:	e023      	b.n	8008226 <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	4053      	eors	r3, r2
 80081ea:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	737b      	strb	r3, [r7, #13]
 80081f0:	e013      	b.n	800821a <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 80081f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da09      	bge.n	800820e <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 80081fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	b25a      	sxtb	r2, r3
 8008202:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008206:	4053      	eors	r3, r2
 8008208:	b25b      	sxtb	r3, r3
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	e002      	b.n	8008214 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 8008214:	7b7b      	ldrb	r3, [r7, #13]
 8008216:	3301      	adds	r3, #1
 8008218:	737b      	strb	r3, [r7, #13]
 800821a:	7b7b      	ldrb	r3, [r7, #13]
 800821c:	2b07      	cmp	r3, #7
 800821e:	d9e8      	bls.n	80081f2 <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	3301      	adds	r3, #1
 8008224:	73bb      	strb	r3, [r7, #14]
 8008226:	7bba      	ldrb	r2, [r7, #14]
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	429a      	cmp	r2, r3
 800822c:	d3d7      	bcc.n	80081de <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	3303      	adds	r3, #3
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0a1a      	lsrs	r2, r3, #8
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	3302      	adds	r3, #2
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	0c1a      	lsrs	r2, r3, #16
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0e1b      	lsrs	r3, r3, #24
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	701a      	strb	r2, [r3, #0]
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3303      	adds	r3, #3
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3302      	adds	r3, #2
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	4313      	orrs	r3, r2
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3301      	adds	r3, #1
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	4313      	orrs	r3, r2
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	4313      	orrs	r3, r2
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
	while (word) {
 80082e8:	e00c      	b.n	8008304 <find_first_set_bit+0x28>
		if (word & 0x1)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <find_first_set_bit+0x1c>
			return first_set_bit;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	e009      	b.n	800830c <find_first_set_bit+0x30>
		word >>= 1;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
	while (word) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1ef      	bne.n	80082ea <find_first_set_bit+0xe>
	}
	return 32;
 800830a:	2320      	movs	r3, #32
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff ffda 	bl	80082dc <find_first_set_bit>
 8008328:	4602      	mov	r2, r0
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	fa03 f202 	lsl.w	r2, r3, r2
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4013      	ands	r3, r2
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <LL_SPI_Enable>:
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	601a      	str	r2, [r3, #0]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <LL_SPI_IsEnabled>:
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b40      	cmp	r3, #64	@ 0x40
 800836e:	d101      	bne.n	8008374 <LL_SPI_IsEnabled+0x18>
 8008370:	2301      	movs	r3, #1
 8008372:	e000      	b.n	8008376 <LL_SPI_IsEnabled+0x1a>
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <LL_SPI_IsActiveFlag_RXNE>:
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <LL_SPI_IsActiveFlag_TXE>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d101      	bne.n	80083c0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <LL_SPI_ReceiveData8>:
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	330c      	adds	r3, #12
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b2db      	uxtb	r3, r3
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <LL_SPI_TransmitData8>:
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	330c      	adds	r3, #12
 80083fa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	701a      	strb	r2, [r3, #0]
}
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <LL_GPIO_SetOutputPin>:
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	619a      	str	r2, [r3, #24]
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_GPIO_ResetOutputPin>:
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	041a      	lsls	r2, r3, #16
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	619a      	str	r2, [r3, #24]
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <MCP4902_Write>:
/*
 * Gửi dữ liệu đến MCP4902 DAC qua giao thức SPI cho cả hai kênh.
 * @param dev: Con trỏ đến cấu trúc thiết bị MCP4902 chứa cấu hình và dữ liệu.
 */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8008450:	bf00      	nop
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ffa6 	bl	80083a8 <LL_SPI_IsActiveFlag_TXE>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f7      	beq.n	8008452 <MCP4902_Write+0xa>

    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	e080      	b.n	800856a <MCP4902_Write+0x122>
    {
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <MCP4902_Write+0x40>
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	3314      	adds	r3, #20
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	b21b      	sxth	r3, r3
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	b21a      	sxth	r2, r3
 800847e:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <MCP4902_Write+0x134>)
 8008480:	4313      	orrs	r3, r2
 8008482:	b21b      	sxth	r3, r3
 8008484:	b29b      	uxth	r3, r3
 8008486:	e00b      	b.n	80084a0 <MCP4902_Write+0x58>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	3314      	adds	r3, #20
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b21b      	sxth	r3, r3
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	b21b      	sxth	r3, r3
 8008498:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800849c:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800849e:	b29b      	uxth	r3, r3
 80084a0:	817b      	strh	r3, [r7, #10]

    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f7ff ffbc 	bl	800842a <LL_GPIO_ResetOutputPin>

        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80084b2:	bf00      	nop
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff ff75 	bl	80083a8 <LL_SPI_IsActiveFlag_TXE>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f7      	beq.n	80084b4 <MCP4902_Write+0x6c>
        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	897b      	ldrh	r3, [r7, #10]
 80084ca:	0a1b      	lsrs	r3, r3, #8
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f7ff ff89 	bl	80083ea <LL_SPI_TransmitData8>

        while (!LL_SPI_IsActiveFlag_RXNE(dev->spi)) {};
 80084d8:	bf00      	nop
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7ff ff4f 	bl	8008382 <LL_SPI_IsActiveFlag_RXNE>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f7      	beq.n	80084da <MCP4902_Write+0x92>

		LL_SPI_ReceiveData8(dev->spi);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff ff6d 	bl	80083ce <LL_SPI_ReceiveData8>

		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80084f4:	bf00      	nop
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff ff54 	bl	80083a8 <LL_SPI_IsActiveFlag_TXE>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f7      	beq.n	80084f6 <MCP4902_Write+0xae>
        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	897a      	ldrh	r2, [r7, #10]
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff ff6a 	bl	80083ea <LL_SPI_TransmitData8>

        while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8008516:	bf00      	nop
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ff30 	bl	8008382 <LL_SPI_IsActiveFlag_RXNE>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f7      	beq.n	8008518 <MCP4902_Write+0xd0>
        LL_SPI_ReceiveData8(dev->spi);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ff4e 	bl	80083ce <LL_SPI_ReceiveData8>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7ff ff66 	bl	800840e <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7ff ff6c 	bl	800842a <LL_GPIO_ResetOutputPin>
		__NOP();
 8008552:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7ff ff55 	bl	800840e <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b01      	cmp	r3, #1
 800856e:	f77f af7b 	ble.w	8008468 <MCP4902_Write+0x20>
    }
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	ffffb000 	.word	0xffffb000

08008580 <MCP4902_Shutdown>:
 * Đưa kênh DAC được chỉ định vào chế độ tắt.
 * @param dev: Con trỏ đến cấu trúc thiết bị MCP4902.
 * @param channel: Kênh DAC cần tắt (0 cho CHA, 1 cho CHB).
 */
void MCP4902_Shutdown(MCP4902_Device_t *dev, uint8_t channel)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = channel ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)) : (1<<MCP4902_GA_BIT);
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <MCP4902_Shutdown+0x18>
 8008592:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8008596:	e001      	b.n	800859c <MCP4902_Shutdown+0x1c>
 8008598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800859c:	81fb      	strh	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff ff3e 	bl	800842a <LL_GPIO_ResetOutputPin>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80085ae:	bf00      	nop
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fef7 	bl	80083a8 <LL_SPI_IsActiveFlag_TXE>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f7      	beq.n	80085b0 <MCP4902_Shutdown+0x30>
	LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7ff ff0b 	bl	80083ea <LL_SPI_TransmitData8>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 80085d4:	bf00      	nop
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fed1 	bl	8008382 <LL_SPI_IsActiveFlag_RXNE>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f7      	beq.n	80085d6 <MCP4902_Shutdown+0x56>
	LL_SPI_ReceiveData8(dev->spi);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff feef 	bl	80083ce <LL_SPI_ReceiveData8>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 80085f0:	bf00      	nop
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fed6 	bl	80083a8 <LL_SPI_IsActiveFlag_TXE>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f7      	beq.n	80085f2 <MCP4902_Shutdown+0x72>
	LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	89fa      	ldrh	r2, [r7, #14]
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff feec 	bl	80083ea <LL_SPI_TransmitData8>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 8008612:	bf00      	nop
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff feb2 	bl	8008382 <LL_SPI_IsActiveFlag_RXNE>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d0f7      	beq.n	8008614 <MCP4902_Shutdown+0x94>
	LL_SPI_ReceiveData8(dev->spi);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fed0 	bl	80083ce <LL_SPI_ReceiveData8>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7ff fee8 	bl	800840e <LL_GPIO_SetOutputPin>

    LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7ff feee 	bl	800842a <LL_GPIO_ResetOutputPin>
	__NOP();
 800864e:	bf00      	nop
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f7ff fed7 	bl	800840e <LL_GPIO_SetOutputPin>
}
 8008660:	bf00      	nop
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <MCP4902_Set_DAC>:
 * @param dev: Con trỏ đến cấu trúc thiết bị MCP4902.
 * @param channel: Kênh DAC (0 cho CHA, 1 cho CHB).
 * @param DAC_val: Giá trị DAC 8-bit cần thiết lập.
 */
void MCP4902_Set_DAC(MCP4902_Device_t *dev, uint8_t channel, uint8_t DAC_val)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
 8008674:	4613      	mov	r3, r2
 8008676:	70bb      	strb	r3, [r7, #2]
	dev->dac_channel[channel] = DAC_val;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	78ba      	ldrb	r2, [r7, #2]
 8008680:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff fee0 	bl	8008448 <MCP4902_Write>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08c      	sub	sp, #48	@ 0x30
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086b4:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086ba:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086bc:	f107 0314 	add.w	r3, r7, #20
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	60da      	str	r2, [r3, #12]
 80086ca:	611a      	str	r2, [r3, #16]
 80086cc:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80086d4:	2301      	movs	r3, #1
 80086d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80086d8:	2302      	movs	r3, #2
 80086da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80086e0:	2300      	movs	r3, #0
 80086e2:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f107 0214 	add.w	r2, r7, #20
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f004 f94b 	bl	800c98a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f107 0214 	add.w	r2, r7, #20
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f004 f940 	bl	800c98a <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7ff fe7a 	bl	800840e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f7ff fe72 	bl	800840e <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800872a:	2300      	movs	r3, #0
 800872c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800872e:	e008      	b.n	8008742 <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	4413      	add	r3, r2
 8008736:	3314      	adds	r3, #20
 8008738:	2200      	movs	r2, #0
 800873a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	3301      	adds	r3, #1
 8008740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008744:	2b01      	cmp	r3, #1
 8008746:	ddf3      	ble.n	8008730 <MCP4902_Device_Init+0xa0>
	}

	while (!LL_SPI_IsEnabled(dev->spi))
 8008748:	e005      	b.n	8008756 <MCP4902_Device_Init+0xc6>
	{
		LL_SPI_Enable(dev->spi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fdf4 	bl	800833c <LL_SPI_Enable>
		__NOP();
 8008754:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff fdfe 	bl	800835c <LL_SPI_IsEnabled>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f1      	beq.n	800874a <MCP4902_Device_Init+0xba>
	}

	MCP4902_Write(dev);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7ff fe6e 	bl	8008448 <MCP4902_Write>
	MCP4902_Shutdown(dev, MCP4902_CHA);
 800876c:	2100      	movs	r1, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff ff06 	bl	8008580 <MCP4902_Shutdown>
	MCP4902_Shutdown(dev, MCP4902_CHB);
 8008774:	2101      	movs	r1, #1
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff ff02 	bl	8008580 <MCP4902_Shutdown>
}
 800877c:	bf00      	nop
 800877e:	3730      	adds	r7, #48	@ 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <NTC_get_temperature>:
    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
}

void NTC_get_temperature(int16_t* temp)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e029      	b.n	80087e6 <NTC_get_temperature+0x62>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	4a19      	ldr	r2, [pc, #100]	@ (80087fc <NTC_get_temperature+0x78>)
 8008796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879a:	461a      	mov	r2, r3
 800879c:	4b18      	ldr	r3, [pc, #96]	@ (8008800 <NTC_get_temperature+0x7c>)
 800879e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	b20a      	sxth	r2, r1
 80087ac:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ba:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80087be:	db08      	blt.n	80087d2 <NTC_get_temperature+0x4e>
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80087d0:	dd06      	ble.n	80087e0 <NTC_get_temperature+0x5c>
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80087de:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	3301      	adds	r3, #1
 80087e4:	73fb      	strb	r3, [r7, #15]
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b07      	cmp	r3, #7
 80087ea:	d9d2      	bls.n	8008792 <NTC_get_temperature+0xe>
	}
};
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	2000e164 	.word	0x2000e164
 8008800:	2000019c 	.word	0x2000019c

08008804 <ntc_convert>:
int16_t ntc_convert(uint16_t ADC_val)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	80fb      	strh	r3, [r7, #6]
	int16_t temperature = NTC_table[ADC_val];
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	4a05      	ldr	r2, [pc, #20]	@ (8008828 <ntc_convert+0x24>)
 8008812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008816:	81fb      	strh	r3, [r7, #14]
	return temperature;
 8008818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	2000019c 	.word	0x2000019c

0800882c <embeddedCliRequiredSize>:
    defaultConfig.staticBindingCount = 0;
    defaultConfig.staticBindings = NULL;
    return &defaultConfig;
}

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <embeddedCliRequiredSize+0x16>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	e000      	b.n	8008844 <embeddedCliRequiredSize+0x18>
 8008842:	2300      	movs	r3, #0
 8008844:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	3303      	adds	r3, #3
 800884c:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	88db      	ldrh	r3, [r3, #6]
 8008852:	3303      	adds	r3, #3
 8008854:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8008856:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	891b      	ldrh	r3, [r3, #8]
 800885c:	3303      	adds	r3, #3
 800885e:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8008860:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8008862:	89fa      	ldrh	r2, [r7, #14]
 8008864:	4613      	mov	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	3303      	adds	r3, #3
 800886e:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8008870:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 8008872:	89fb      	ldrh	r3, [r7, #14]
 8008874:	3303      	adds	r3, #3
 8008876:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8008878:	4413      	add	r3, r2
 800887a:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 800887c:	b29b      	uxth	r3, r3
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	b29b      	uxth	r3, r3
    ));
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 800888e:	b580      	push	{r7, lr}
 8008890:	b088      	sub	sp, #32
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff ffc6 	bl	800882c <embeddedCliRequiredSize>
 80088a0:	4603      	mov	r3, r0
 80088a2:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <embeddedCliNew+0x2e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8a1b      	ldrh	r3, [r3, #16]
 80088b4:	461a      	mov	r2, r3
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d901      	bls.n	80088c0 <embeddedCliNew+0x32>
        return NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	e071      	b.n	80089a4 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	2100      	movs	r1, #0
 80088ca:	6938      	ldr	r0, [r7, #16]
 80088cc:	f006 fa30 	bl	800ed30 <memset>

    cli = (EmbeddedCli *) buf;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3310      	adds	r3, #16
 80088d8:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3338      	adds	r3, #56	@ 0x38
 80088e4:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	889b      	ldrh	r3, [r3, #4]
 80088f6:	3303      	adds	r3, #3
 80088f8:	f023 0303 	bic.w	r3, r3, #3
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	3303      	adds	r3, #3
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4413      	add	r3, r2
 8008916:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695a      	ldr	r2, [r3, #20]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8b1a      	ldrh	r2, [r3, #24]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	8b1a      	ldrh	r2, [r3, #24]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	891a      	ldrh	r2, [r3, #8]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	811a      	strh	r2, [r3, #8]

    if (allocated)
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800894a:	f043 0304 	orr.w	r3, r3, #4
 800894e:	b2da      	uxtb	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7c9b      	ldrb	r3, [r3, #18]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008964:	f043 0320 	orr.w	r3, r3, #32
 8008968:	b2da      	uxtb	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	889a      	ldrh	r2, [r3, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	88da      	ldrh	r2, [r3, #6]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3310      	adds	r3, #16
 80089c2:	78fa      	ldrb	r2, [r7, #3]
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ff8a 	bl	80098e0 <fifoBufPush>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f083 0301 	eor.w	r3, r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8083 	beq.w	8008b0a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d155      	bne.n	8008ac4 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008a1e:	f043 0302 	orr.w	r3, r3, #2
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fe7e 	bl	8009732 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8008a36:	e045      	b.n	8008ac4 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3310      	adds	r3, #16
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 ff27 	bl	8009890 <fifoBufPop>
 8008a42:	4603      	mov	r3, r0
 8008a44:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f9f5 	bl	8008e48 <onEscapedInput>
 8008a5e:	e02a      	b.n	8008ab6 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a66:	2b1b      	cmp	r3, #27
 8008a68:	d10c      	bne.n	8008a84 <embeddedCliProcess+0x92>
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b5b      	cmp	r3, #91	@ 0x5b
 8008a6e:	d109      	bne.n	8008a84 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008a76:	f043 0308 	orr.w	r3, r3, #8
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8008a82:	e018      	b.n	8008ab6 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 feaa 	bl	80097e0 <isControlChar>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa86 	bl	8008fa8 <onControlInput>
 8008a9c:	e00b      	b.n	8008ab6 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 febd 	bl	8009820 <isDisplayableChar>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa27 	bl	8008f04 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fd12 	bl	80094e0 <printLiveAutocompletion>

        impl->lastChar = c;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	7afa      	ldrb	r2, [r7, #11]
 8008ac0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3310      	adds	r3, #16
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fec0 	bl	800984e <fifoBufAvailable>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1b1      	bne.n	8008a38 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d014      	beq.n	8008b0c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	8c12      	ldrh	r2, [r2, #32]
 8008af0:	4413      	add	r3, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8008b08:	e000      	b.n	8008b0c <embeddedCliProcess+0x11a>
        return;
 8008b0a:	bf00      	nop
    }
}
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d03e      	beq.n	8008ba4 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008b30:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fdc1 	bl	80096c8 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	897a      	ldrh	r2, [r7, #10]
 8008b4a:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fdef 	bl	8009732 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8008b54:	4b15      	ldr	r3, [pc, #84]	@ (8008bac <embeddedCliPrint+0x98>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fde9 	bl	8009732 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11b      	bne.n	8008ba6 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fddc 	bl	8009732 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fdd6 	bl	8009732 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8c1a      	ldrh	r2, [r3, #32]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008b92:	2200      	movs	r2, #0
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fdec 	bl	8009774 <moveCursor>

        printLiveAutocompletion(cli);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fc9f 	bl	80094e0 <printLiveAutocompletion>
 8008ba2:	e000      	b.n	8008ba6 <embeddedCliPrint+0x92>
        return;
 8008ba4:	bf00      	nop
    }
}
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	2000419c 	.word	0x2000419c

08008bb0 <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d066      	beq.n	8008c8c <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8008bbe:	4b35      	ldr	r3, [pc, #212]	@ (8008c94 <embeddedCliTokenizeArgs+0xe4>)
 8008bc0:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8008bd2:	e047      	b.n	8008c64 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8008bda:	7fbb      	ldrb	r3, [r7, #30]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8008be0:	2300      	movs	r3, #0
 8008be2:	77bb      	strb	r3, [r7, #30]
 8008be4:	e029      	b.n	8008c3a <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8008be6:	7cfb      	ldrb	r3, [r7, #19]
 8008be8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008bea:	d102      	bne.n	8008bf2 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8008bec:	2301      	movs	r3, #1
 8008bee:	77bb      	strb	r3, [r7, #30]
            continue;
 8008bf0:	e038      	b.n	8008c64 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8008bf2:	7cfb      	ldrb	r3, [r7, #19]
 8008bf4:	2b22      	cmp	r3, #34	@ 0x22
 8008bf6:	d110      	bne.n	8008c1a <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8008bf8:	7ffb      	ldrb	r3, [r7, #31]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bf14      	ite	ne
 8008bfe:	2301      	movne	r3, #1
 8008c00:	2300      	moveq	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f083 0301 	eor.w	r3, r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	77fb      	strb	r3, [r7, #31]
 8008c0c:	7ffb      	ldrb	r3, [r7, #31]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8008c14:	2300      	movs	r3, #0
 8008c16:	74fb      	strb	r3, [r7, #19]
 8008c18:	e00f      	b.n	8008c3a <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8008c1a:	7ffb      	ldrb	r3, [r7, #31]
 8008c1c:	f083 0301 	eor.w	r3, r3, #1
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <embeddedCliTokenizeArgs+0x8a>
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f006 f888 	bl	800ed40 <strchr>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8008c36:	2300      	movs	r3, #0
 8008c38:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8008c3a:	7cfb      	ldrb	r3, [r7, #19]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <embeddedCliTokenizeArgs+0xa4>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd0e      	ble.n	8008c64 <embeddedCliTokenizeArgs+0xb4>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	4413      	add	r3, r2
 8008c5a:	7cfa      	ldrb	r2, [r7, #19]
 8008c5c:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	3301      	adds	r3, #1
 8008c62:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	74fb      	strb	r3, [r7, #19]
 8008c6e:	7cfb      	ldrb	r3, [r7, #19]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1af      	bne.n	8008bd4 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	3301      	adds	r3, #1
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e000      	b.n	8008c8e <embeddedCliTokenizeArgs+0xde>
        return;
 8008c8c:	bf00      	nop
}
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	080121c8 	.word	0x080121c8

08008c98 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8008ca4:	887b      	ldrh	r3, [r7, #2]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 ff20 	bl	8009aee <getTokenPosition>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8008cb2:	89fb      	ldrh	r3, [r7, #14]
 8008cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d003      	beq.n	8008cc4 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8008cbc:	89fb      	ldrh	r3, [r7, #14]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	e000      	b.n	8008cc6 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8008cda:	887b      	ldrh	r3, [r7, #2]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 ff05 	bl	8009aee <getTokenPosition>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d003      	beq.n	8008cfa <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8008cf2:	89fb      	ldrh	r3, [r7, #14]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	e000      	b.n	8008cfc <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <embeddedCliGetTokenCount+0x16>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <embeddedCliGetTokenCount+0x1a>
        return 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e019      	b.n	8008d52 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d006      	beq.n	8008d4e <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8008d40:	897b      	ldrh	r3, [r7, #10]
 8008d42:	3301      	adds	r3, #1
 8008d44:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8008d4c:	e7eb      	b.n	8008d26 <embeddedCliGetTokenCount+0x22>
                break;
 8008d4e:	bf00      	nop
    }

    return tokenCount;
 8008d50:	897b      	ldrh	r3, [r7, #10]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
	...

08008d60 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	899b      	ldrh	r3, [r3, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d05f      	beq.n	8008e3a <navigateHistory+0xda>
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	895a      	ldrh	r2, [r3, #10]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	899b      	ldrh	r3, [r3, #12]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d056      	beq.n	8008e3a <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f083 0301 	eor.w	r3, r3, #1
 8008d92:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	895b      	ldrh	r3, [r3, #10]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d04c      	beq.n	8008e3a <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc91 	bl	80096c8 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fcc0 	bl	8009732 <writeToOutput>

    if (navigateUp)
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d006      	beq.n	8008dc6 <navigateHistory+0x66>
        ++impl->history.current;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	895b      	ldrh	r3, [r3, #10]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	815a      	strh	r2, [r3, #10]
 8008dc4:	e005      	b.n	8008dd2 <navigateHistory+0x72>
    else
        --impl->history.current;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	895b      	ldrh	r3, [r3, #10]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	895b      	ldrh	r3, [r3, #10]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f000 fe0d 	bl	80099fc <historyGet>
 8008de2:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <navigateHistory+0x8e>
        item = "";
 8008dea:	4b16      	ldr	r3, [pc, #88]	@ (8008e44 <navigateHistory+0xe4>)
 8008dec:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8008dee:	6978      	ldr	r0, [r7, #20]
 8008df0:	f7f7 fa86 	bl	8000300 <strlen>
 8008df4:	4603      	mov	r3, r0
 8008df6:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	89fa      	ldrh	r2, [r7, #14]
 8008dfe:	6979      	ldr	r1, [r7, #20]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f006 f822 	bl	800ee4a <memcpy>
    impl->cmdBuffer[len] = '\0';
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	69da      	ldr	r2, [r3, #28]
 8008e0a:	89fb      	ldrh	r3, [r7, #14]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	89fa      	ldrh	r2, [r7, #14]
 8008e16:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc87 	bl	8009732 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	8c1a      	ldrh	r2, [r3, #32]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb54 	bl	80094e0 <printLiveAutocompletion>
 8008e38:	e000      	b.n	8008e3c <navigateHistory+0xdc>
        return;
 8008e3a:	bf00      	nop
}
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	080121cc 	.word	0x080121cc

08008e48 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8008e5e:	d948      	bls.n	8008ef2 <onEscapedInput+0xaa>
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	2b7e      	cmp	r3, #126	@ 0x7e
 8008e64:	d845      	bhi.n	8008ef2 <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008e6c:	f023 0308 	bic.w	r3, r3, #8
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	2b41      	cmp	r3, #65	@ 0x41
 8008e7c:	d002      	beq.n	8008e84 <onEscapedInput+0x3c>
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	2b42      	cmp	r3, #66	@ 0x42
 8008e82:	d109      	bne.n	8008e98 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	2b41      	cmp	r3, #65	@ 0x41
 8008e88:	bf0c      	ite	eq
 8008e8a:	2301      	moveq	r3, #1
 8008e8c:	2300      	movne	r3, #0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff ff64 	bl	8008d60 <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	2b43      	cmp	r3, #67	@ 0x43
 8008e9c:	d10f      	bne.n	8008ebe <onEscapedInput+0x76>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <onEscapedInput+0x76>
            impl->cursorPos--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 8008eb2:	4b12      	ldr	r3, [pc, #72]	@ (8008efc <onEscapedInput+0xb4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc3a 	bl	8009732 <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b44      	cmp	r3, #68	@ 0x44
 8008ec2:	d116      	bne.n	8008ef2 <onEscapedInput+0xaa>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008ec8:	461c      	mov	r4, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 fa16 	bl	8000300 <strlen>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d20b      	bcs.n	8008ef2 <onEscapedInput+0xaa>
            impl->cursorPos++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8008ee6:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <onEscapedInput+0xb8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc20 	bl	8009732 <writeToOutput>
        }
    }
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd90      	pop	{r4, r7, pc}
 8008efa:	bf00      	nop
 8008efc:	200041a0 	.word	0x200041a0
 8008f00:	200041a4 	.word	0x200041a4

08008f04 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8c1b      	ldrh	r3, [r3, #32]
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8008f20:	4293      	cmp	r3, r2
 8008f22:	da3b      	bge.n	8008f9c <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f7 f9e9 	bl	8000300 <strlen>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	69da      	ldr	r2, [r3, #28]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	18d0      	adds	r0, r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	69da      	ldr	r2, [r3, #28]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	18d1      	adds	r1, r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008f4e:	3301      	adds	r3, #1
 8008f50:	461a      	mov	r2, r3
 8008f52:	f005 fed3 	bl	800ecfc <memmove>

    ++impl->cmdSize;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8c1b      	ldrh	r3, [r3, #32]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008f66:	3301      	adds	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	69da      	ldr	r2, [r3, #28]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 8008f82:	4b08      	ldr	r3, [pc, #32]	@ (8008fa4 <onCharInput+0xa0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fbd2 	bl	8009732 <writeToOutput>

    cli->writeChar(cli, c);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	4611      	mov	r1, r2
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	e000      	b.n	8008f9e <onCharInput+0x9a>
        return;
 8008f9c:	bf00      	nop
}
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200041b0 	.word	0x200041b0

08008fa8 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008fc0:	2b0d      	cmp	r3, #13
 8008fc2:	d102      	bne.n	8008fca <onControlInput+0x22>
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	2b0a      	cmp	r3, #10
 8008fc8:	d078      	beq.n	80090bc <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8008fd0:	2b0a      	cmp	r3, #10
 8008fd2:	d102      	bne.n	8008fda <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	2b0d      	cmp	r3, #13
 8008fd8:	d070      	beq.n	80090bc <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	2b0d      	cmp	r3, #13
 8008fde:	d002      	beq.n	8008fe6 <onControlInput+0x3e>
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	2b0a      	cmp	r3, #10
 8008fe4:	d129      	bne.n	800903a <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fadc 	bl	80095a4 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8008fec:	4b35      	ldr	r3, [pc, #212]	@ (80090c4 <onControlInput+0x11c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb9d 	bl	8009732 <writeToOutput>

        if (impl->cmdSize > 0)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8c1b      	ldrh	r3, [r3, #32]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <onControlInput+0x5e>
            parseCommand(cli);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f865 	bl	80090d0 <parseCommand>
        impl->cmdSize = 0;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	8c12      	ldrh	r2, [r2, #32]
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb7d 	bl	8009732 <writeToOutput>
 8009038:	e041      	b.n	80090be <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	2b08      	cmp	r3, #8
 800903e:	d002      	beq.n	8009046 <onControlInput+0x9e>
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	2b7f      	cmp	r3, #127	@ 0x7f
 8009044:	d133      	bne.n	80090ae <onControlInput+0x106>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8c1b      	ldrh	r3, [r3, #32]
 800904a:	461a      	mov	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	dd2b      	ble.n	80090ae <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8009056:	4b1c      	ldr	r3, [pc, #112]	@ (80090c8 <onControlInput+0x120>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fb68 	bl	8009732 <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 8009062:	4b1a      	ldr	r3, [pc, #104]	@ (80090cc <onControlInput+0x124>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fb62 	bl	8009732 <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	4618      	mov	r0, r3
 8009074:	f7f7 f944 	bl	8000300 <strlen>
 8009078:	4602      	mov	r2, r0
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	69da      	ldr	r2, [r3, #28]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	3b01      	subs	r3, #1
 800908a:	18d0      	adds	r0, r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	18d1      	adds	r1, r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8009098:	3301      	adds	r3, #1
 800909a:	461a      	mov	r2, r3
 800909c:	f005 fe2e 	bl	800ecfc <memmove>
        --impl->cmdSize;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8c1b      	ldrh	r3, [r3, #32]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80090ac:	e007      	b.n	80090be <onControlInput+0x116>
    } else if (c == '\t') {
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d104      	bne.n	80090be <onControlInput+0x116>
        onAutocompleteRequest(cli);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa75 	bl	80095a4 <onAutocompleteRequest>
 80090ba:	e000      	b.n	80090be <onControlInput+0x116>
        return;
 80090bc:	bf00      	nop
    }

}
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	2000419c 	.word	0x2000419c
 80090c8:	200041a4 	.word	0x200041a4
 80090cc:	200041b4 	.word	0x200041b4

080090d0 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b08f      	sub	sp, #60	@ 0x3c
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090e8:	e00d      	b.n	8009106 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	69da      	ldr	r2, [r3, #28]
 80090ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f0:	4413      	add	r3, r2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d003      	beq.n	8009100 <parseCommand+0x30>
            isEmpty = false;
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80090fe:	e008      	b.n	8009112 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	3301      	adds	r3, #1
 8009104:	633b      	str	r3, [r7, #48]	@ 0x30
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	8c1b      	ldrh	r3, [r3, #32]
 800910a:	461a      	mov	r2, r3
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	4293      	cmp	r3, r2
 8009110:	dbeb      	blt.n	80090ea <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8009112:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 80fa 	bne.w	8009310 <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f000 fc04 	bl	8009934 <historyPut>

    char *cmdName = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 800913a:	2300      	movs	r3, #0
 800913c:	623b      	str	r3, [r7, #32]
 800913e:	e030      	b.n	80091a2 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	4413      	add	r3, r2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	2b20      	cmp	r3, #32
 8009150:	d10f      	bne.n	8009172 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8009152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009154:	2b00      	cmp	r3, #0
 8009156:	d105      	bne.n	8009164 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	4413      	add	r3, r2
 8009160:	2200      	movs	r2, #0
 8009162:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8009164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d018      	beq.n	800919c <parseCommand+0xcc>
                nameFinished = true;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009170:	e014      	b.n	800919c <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8009172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	4413      	add	r3, r2
 8009180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009182:	e00b      	b.n	800919c <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8009184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	d108      	bne.n	800919c <parseCommand+0xcc>
 800918a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	69da      	ldr	r2, [r3, #28]
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	4413      	add	r3, r2
 800919a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	3301      	adds	r3, #1
 80091a0:	623b      	str	r3, [r7, #32]
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	8c1b      	ldrh	r3, [r3, #32]
 80091a6:	461a      	mov	r2, r3
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	4293      	cmp	r3, r2
 80091ac:	dbc8      	blt.n	8009140 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	8c1b      	ldrh	r3, [r3, #32]
 80091b6:	3301      	adds	r3, #1
 80091b8:	4413      	add	r3, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80a7 	beq.w	8009314 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e072      	b.n	80092b2 <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	4613      	mov	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4413      	add	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	440b      	add	r3, r1
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4619      	mov	r1, r3
 80091e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091e2:	f7f7 f82d 	bl	8000240 <strcmp>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d15f      	bne.n	80092ac <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	4613      	mov	r3, r2
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	440b      	add	r3, r1
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d05e      	beq.n	80092c0 <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	440b      	add	r3, r1
 8009212:	7b1b      	ldrb	r3, [r3, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8009218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800921a:	f7ff fcc9 	bl	8008bb0 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009224:	f043 0310 	orr.w	r3, r3, #16
 8009228:	b2da      	uxtb	r2, r3
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 8009230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	d01a      	beq.n	800926c <parseCommand+0x19c>
 8009236:	4939      	ldr	r1, [pc, #228]	@ (800931c <parseCommand+0x24c>)
 8009238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923a:	f7f7 f801 	bl	8000240 <strcmp>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <parseCommand+0x182>
 8009244:	4936      	ldr	r1, [pc, #216]	@ (8009320 <parseCommand+0x250>)
 8009246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009248:	f7f6 fffa 	bl	8000240 <strcmp>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10c      	bne.n	800926c <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	4613      	mov	r3, r2
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	4413      	add	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	440b      	add	r3, r1
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f85d 	bl	8009324 <printBindingHelp>
 800926a:	e015      	b.n	8009298 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009270:	69fa      	ldr	r2, [r7, #28]
 8009272:	4613      	mov	r3, r2
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	4413      	add	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	440b      	add	r3, r1
 800927c:	695c      	ldr	r4, [r3, #20]
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009282:	69fa      	ldr	r2, [r7, #28]
 8009284:	4613      	mov	r3, r2
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	4413      	add	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	440b      	add	r3, r1
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	461a      	mov	r2, r3
 8009292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800929e:	f023 0310 	bic.w	r3, r3, #16
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 80092aa:	e034      	b.n	8009316 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	3301      	adds	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092b6:	461a      	mov	r2, r3
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	4293      	cmp	r3, r2
 80092bc:	db86      	blt.n	80091cc <parseCommand+0xfc>
 80092be:	e000      	b.n	80092c2 <parseCommand+0x1f2>
                break;
 80092c0:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d01d      	beq.n	8009306 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 80092ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d0:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80092d8:	f043 0310 	orr.w	r3, r3, #16
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f107 020c 	add.w	r2, r7, #12
 80092ec:	4611      	mov	r1, r2
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80092f8:	f023 0310 	bic.w	r3, r3, #16
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8009304:	e007      	b.n	8009316 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8009306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fe5f 	bl	8009fcc <onUnknownCommand>
 800930e:	e002      	b.n	8009316 <parseCommand+0x246>
        return;
 8009310:	bf00      	nop
 8009312:	e000      	b.n	8009316 <parseCommand+0x246>
        return;
 8009314:	bf00      	nop
    }
}
 8009316:	373c      	adds	r7, #60	@ 0x3c
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	080121d0 	.word	0x080121d0
 8009320:	080121d4 	.word	0x080121d4

08009324 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d010      	beq.n	8009358 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2109      	movs	r1, #9
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f9f3 	bl	8009732 <writeToOutput>
        writeToOutput(cli, lineBreak);
 800934c:	4b04      	ldr	r3, [pc, #16]	@ (8009360 <printBindingHelp+0x3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9ed 	bl	8009732 <writeToOutput>
    }
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	2000419c 	.word	0x2000419c

08009364 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8009370:	2300      	movs	r3, #0
 8009372:	613b      	str	r3, [r7, #16]
 8009374:	2300      	movs	r3, #0
 8009376:	82bb      	strh	r3, [r7, #20]
 8009378:	2300      	movs	r3, #0
 800937a:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7f6 ffbf 	bl	8000300 <strlen>
 8009382:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <getAutocompletedCommand+0x34>
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d108      	bne.n	80093aa <getAutocompletedCommand+0x46>
        return cmd;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	461a      	mov	r2, r3
 800939c:	f107 0310 	add.w	r3, r7, #16
 80093a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80093a8:	e095      	b.n	80094d6 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ae:	e083      	b.n	80094b8 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80093b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	440b      	add	r3, r1
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80093c4:	69f8      	ldr	r0, [r7, #28]
 80093c6:	f7f6 ff9b 	bl	8000300 <strlen>
 80093ca:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d2:	4413      	add	r3, r2
 80093d4:	781a      	ldrb	r2, [r3, #0]
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80093da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093dc:	440b      	add	r3, r1
 80093de:	f022 0201 	bic.w	r2, r2, #1
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d35e      	bcc.n	80094ac <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80093f4:	2300      	movs	r3, #0
 80093f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093f8:	e010      	b.n	800941c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	4413      	add	r3, r2
 8009400:	781a      	ldrb	r2, [r3, #0]
 8009402:	69f9      	ldr	r1, [r7, #28]
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	440b      	add	r3, r1
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d003      	beq.n	8009416 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800940e:	2300      	movs	r3, #0
 8009410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8009414:	e006      	b.n	8009424 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	3301      	adds	r3, #1
 800941a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800941c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	429a      	cmp	r2, r3
 8009422:	d3ea      	bcc.n	80093fa <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8009424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009428:	f083 0301 	eor.w	r3, r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d13e      	bne.n	80094b0 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009438:	4413      	add	r3, r2
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009442:	440b      	add	r3, r1
 8009444:	f042 0201 	orr.w	r2, r2, #1
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 800944c:	8afb      	ldrh	r3, [r7, #22]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <getAutocompletedCommand+0xf8>
 8009452:	8abb      	ldrh	r3, [r7, #20]
 8009454:	461a      	mov	r2, r3
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	4293      	cmp	r3, r2
 800945a:	d202      	bcs.n	8009462 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	b29b      	uxth	r3, r3
 8009460:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8009462:	8afb      	ldrh	r3, [r7, #22]
 8009464:	3301      	adds	r3, #1
 8009466:	b29b      	uxth	r3, r3
 8009468:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 800946a:	8afb      	ldrh	r3, [r7, #22]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d102      	bne.n	8009476 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	613b      	str	r3, [r7, #16]
            continue;
 8009474:	e01d      	b.n	80094b2 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	8c1b      	ldrh	r3, [r3, #32]
 800947a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800947c:	e010      	b.n	80094a0 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	4413      	add	r3, r2
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	69f9      	ldr	r1, [r7, #28]
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	440b      	add	r3, r1
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d003      	beq.n	800949a <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	b29b      	uxth	r3, r3
 8009496:	82bb      	strh	r3, [r7, #20]
                break;
 8009498:	e00b      	b.n	80094b2 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800949a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949c:	3301      	adds	r3, #1
 800949e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094a0:	8abb      	ldrh	r3, [r7, #20]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d3e9      	bcc.n	800947e <getAutocompletedCommand+0x11a>
 80094aa:	e002      	b.n	80094b2 <getAutocompletedCommand+0x14e>
            continue;
 80094ac:	bf00      	nop
 80094ae:	e000      	b.n	80094b2 <getAutocompletedCommand+0x14e>
            continue;
 80094b0:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80094b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b4:	3301      	adds	r3, #1
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094bc:	461a      	mov	r2, r3
 80094be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c0:	4293      	cmp	r3, r2
 80094c2:	f6ff af75 	blt.w	80093b0 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f107 0310 	add.w	r3, r7, #16
 80094ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	3738      	adds	r7, #56	@ 0x38
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d04a      	beq.n	8009592 <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	f107 030c 	add.w	r3, r7, #12
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff ff2c 	bl	8009364 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 800950c:	8a7b      	ldrh	r3, [r7, #18]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d102      	bne.n	8009518 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	8c1b      	ldrh	r3, [r3, #32]
 8009516:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8009518:	4b20      	ldr	r3, [pc, #128]	@ (800959c <printLiveAutocompletion+0xbc>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f907 	bl	8009732 <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8009528:	2201      	movs	r2, #1
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f921 	bl	8009774 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	8c1b      	ldrh	r3, [r3, #32]
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	e00b      	b.n	8009552 <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	4611      	mov	r1, r2
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	3301      	adds	r3, #1
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	8a3b      	ldrh	r3, [r7, #16]
 8009554:	461a      	mov	r2, r3
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	4293      	cmp	r3, r2
 800955a:	d3ee      	bcc.n	800953a <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 800955c:	8a3b      	ldrh	r3, [r7, #16]
 800955e:	61bb      	str	r3, [r7, #24]
 8009560:	e007      	b.n	8009572 <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2120      	movs	r1, #32
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	3301      	adds	r3, #1
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009576:	461a      	mov	r2, r3
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	4293      	cmp	r3, r2
 800957c:	d3f1      	bcc.n	8009562 <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 800957e:	8a3a      	ldrh	r2, [r7, #16]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8009584:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <printLiveAutocompletion+0xc0>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f8d1 	bl	8009732 <writeToOutput>
 8009590:	e000      	b.n	8009594 <printLiveAutocompletion+0xb4>
        return;
 8009592:	bf00      	nop
}
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200041a8 	.word	0x200041a8
 80095a0:	200041ac 	.word	0x200041ac

080095a4 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	69da      	ldr	r2, [r3, #28]
 80095b6:	f107 030c 	add.w	r3, r7, #12
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fed1 	bl	8009364 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80095c2:	8a7b      	ldrh	r3, [r7, #18]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d078      	beq.n	80096ba <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80095c8:	8a7b      	ldrh	r3, [r7, #18]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d004      	beq.n	80095d8 <onAutocompleteRequest+0x34>
 80095ce:	8a3a      	ldrh	r2, [r7, #16]
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	8c1b      	ldrh	r3, [r3, #32]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d931      	bls.n	800963c <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	68f9      	ldr	r1, [r7, #12]
 80095de:	8a3a      	ldrh	r2, [r7, #16]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f005 fc32 	bl	800ee4a <memcpy>
        if (cmd.candidateCount == 1) {
 80095e6:	8a7b      	ldrh	r3, [r7, #18]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d109      	bne.n	8009600 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	8a3a      	ldrh	r2, [r7, #16]
 80095f2:	4413      	add	r3, r2
 80095f4:	2220      	movs	r2, #32
 80095f6:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80095f8:	8a3b      	ldrh	r3, [r7, #16]
 80095fa:	3301      	adds	r3, #1
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	8a3a      	ldrh	r2, [r7, #16]
 8009606:	4413      	add	r3, r2
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	8c12      	ldrh	r2, [r2, #32]
 8009614:	4611      	mov	r1, r2
 8009616:	69ba      	ldr	r2, [r7, #24]
 8009618:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 800961a:	1a8a      	subs	r2, r1, r2
 800961c:	4413      	add	r3, r2
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f886 	bl	8009732 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8009626:	8a3a      	ldrh	r2, [r7, #16]
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	8c1a      	ldrh	r2, [r3, #32]
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	2200      	movs	r2, #0
 8009638:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 800963a:	e03f      	b.n	80096bc <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f843 	bl	80096c8 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	e021      	b.n	800968c <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d014      	beq.n	8009684 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	4613      	mov	r3, r2
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	4413      	add	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	440b      	add	r3, r1
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 800966e:	6979      	ldr	r1, [r7, #20]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f85e 	bl	8009732 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8009676:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <onAutocompleteRequest+0x120>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f858 	bl	8009732 <writeToOutput>
 8009682:	e000      	b.n	8009686 <onAutocompleteRequest+0xe2>
            continue;
 8009684:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	3301      	adds	r3, #1
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009690:	461a      	mov	r2, r3
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4293      	cmp	r3, r2
 8009696:	dbd7      	blt.n	8009648 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f847 	bl	8009732 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f841 	bl	8009732 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	8c1a      	ldrh	r2, [r3, #32]
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80096b8:	e000      	b.n	80096bc <onAutocompleteRequest+0x118>
        return;
 80096ba:	bf00      	nop
}
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	2000419c 	.word	0x2000419c

080096c8 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80096da:	461c      	mov	r4, r3
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7f6 fe0d 	bl	8000300 <strlen>
 80096e6:	4603      	mov	r3, r0
 80096e8:	4423      	add	r3, r4
 80096ea:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	210d      	movs	r1, #13
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	e007      	b.n	800970c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2120      	movs	r1, #32
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3301      	adds	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	429a      	cmp	r2, r3
 8009712:	d3f3      	bcc.n	80096fc <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	210d      	movs	r1, #13
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
    impl->inputLineLength = 0;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2200      	movs	r2, #0
 8009722:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2200      	movs	r2, #0
 8009728:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 800972a:	bf00      	nop
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}

08009732 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800973c:	6838      	ldr	r0, [r7, #0]
 800973e:	f7f6 fddf 	bl	8000300 <strlen>
 8009742:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	e00b      	b.n	8009762 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	440a      	add	r2, r1
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	4611      	mov	r1, r2
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	429a      	cmp	r2, r3
 8009768:	d3ef      	bcc.n	800974a <writeToOutput+0x18>
    }
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	807b      	strh	r3, [r7, #2]
 8009780:	4613      	mov	r3, r2
 8009782:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d020      	beq.n	80097cc <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 800978a:	f107 030c 	add.w	r3, r7, #12
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	605a      	str	r2, [r3, #4]
 8009794:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8009796:	787b      	ldrb	r3, [r7, #1]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d004      	beq.n	80097a6 <moveCursor+0x32>
 800979c:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <moveCursor+0x60>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3302      	adds	r3, #2
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	e003      	b.n	80097ae <moveCursor+0x3a>
 80097a6:	4b0c      	ldr	r3, [pc, #48]	@ (80097d8 <moveCursor+0x64>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3302      	adds	r3, #2
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 80097b0:	887a      	ldrh	r2, [r7, #2]
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	f107 000c 	add.w	r0, r7, #12
 80097b8:	4908      	ldr	r1, [pc, #32]	@ (80097dc <moveCursor+0x68>)
 80097ba:	f005 f969 	bl	800ea90 <siprintf>
    writeToOutput(cli, escBuffer);
 80097be:	f107 030c 	add.w	r3, r7, #12
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ffb4 	bl	8009732 <writeToOutput>
 80097ca:	e000      	b.n	80097ce <moveCursor+0x5a>
        return;
 80097cc:	bf00      	nop
}
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	200041a0 	.word	0x200041a0
 80097d8:	200041a4 	.word	0x200041a4
 80097dc:	080121dc 	.word	0x080121dc

080097e0 <isControlChar>:

static bool isControlChar(char c) {
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b0d      	cmp	r3, #13
 80097ee:	d00b      	beq.n	8009808 <isControlChar+0x28>
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b0a      	cmp	r3, #10
 80097f4:	d008      	beq.n	8009808 <isControlChar+0x28>
 80097f6:	79fb      	ldrb	r3, [r7, #7]
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d005      	beq.n	8009808 <isControlChar+0x28>
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d002      	beq.n	8009808 <isControlChar+0x28>
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	2b7f      	cmp	r3, #127	@ 0x7f
 8009806:	d101      	bne.n	800980c <isControlChar+0x2c>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <isControlChar+0x2e>
 800980c:	2300      	movs	r3, #0
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	b2db      	uxtb	r3, r3
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	2b1f      	cmp	r3, #31
 800982e:	d904      	bls.n	800983a <isDisplayableChar+0x1a>
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b7e      	cmp	r3, #126	@ 0x7e
 8009834:	d801      	bhi.n	800983a <isDisplayableChar+0x1a>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <isDisplayableChar+0x1c>
 800983a:	2300      	movs	r3, #0
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	88da      	ldrh	r2, [r3, #6]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	889b      	ldrh	r3, [r3, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d306      	bcc.n	8009870 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	88da      	ldrh	r2, [r3, #6]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	889b      	ldrh	r3, [r3, #4]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	b29b      	uxth	r3, r3
 800986e:	e009      	b.n	8009884 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	891a      	ldrh	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	889b      	ldrh	r3, [r3, #4]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	88db      	ldrh	r3, [r3, #6]
 8009880:	4413      	add	r3, r2
 8009882:	b29b      	uxth	r3, r3
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	889a      	ldrh	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	88db      	ldrh	r3, [r3, #6]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d014      	beq.n	80098d2 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	8892      	ldrh	r2, [r2, #4]
 80098b0:	4413      	add	r3, r2
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	889b      	ldrh	r3, [r3, #4]
 80098ba:	3301      	adds	r3, #1
 80098bc:	b29b      	uxth	r3, r3
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	8912      	ldrh	r2, [r2, #8]
 80098c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80098c6:	fb01 f202 	mul.w	r2, r1, r2
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	88db      	ldrh	r3, [r3, #6]
 80098f0:	3301      	adds	r3, #1
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	8912      	ldrh	r2, [r2, #8]
 80098f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80098fc:	fb01 f202 	mul.w	r2, r1, r2
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	889b      	ldrh	r3, [r3, #4]
 8009908:	89fa      	ldrh	r2, [r7, #14]
 800990a:	429a      	cmp	r2, r3
 800990c:	d00b      	beq.n	8009926 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	88d2      	ldrh	r2, [r2, #6]
 8009916:	4413      	add	r3, r2
 8009918:	78fa      	ldrb	r2, [r7, #3]
 800991a:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	89fa      	ldrh	r2, [r7, #14]
 8009920:	80da      	strh	r2, [r3, #6]
        return true;
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <fifoBufPush+0x48>
    }
    return false;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800993e:	6838      	ldr	r0, [r7, #0]
 8009940:	f7f6 fcde 	bl	8000300 <strlen>
 8009944:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	889b      	ldrh	r3, [r3, #4]
 800994a:	461a      	mov	r2, r3
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	3301      	adds	r3, #1
 8009950:	429a      	cmp	r2, r3
 8009952:	d201      	bcs.n	8009958 <historyPut+0x24>
        return false;
 8009954:	2300      	movs	r3, #0
 8009956:	e04d      	b.n	80099f4 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f86a 	bl	8009a34 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8009960:	e024      	b.n	80099ac <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	891b      	ldrh	r3, [r3, #8]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f847 	bl	80099fc <historyGet>
 800996e:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8009970:	6978      	ldr	r0, [r7, #20]
 8009972:	f7f6 fcc5 	bl	8000300 <strlen>
 8009976:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	461a      	mov	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	4413      	add	r3, r2
 8009986:	3301      	adds	r3, #1
 8009988:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	889b      	ldrh	r3, [r3, #4]
 800998e:	461a      	mov	r2, r3
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	3301      	adds	r3, #1
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	429a      	cmp	r2, r3
 800999e:	d20a      	bcs.n	80099b6 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	891b      	ldrh	r3, [r3, #8]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1d6      	bne.n	8009962 <historyPut+0x2e>
 80099b4:	e000      	b.n	80099b8 <historyPut+0x84>
            break;
 80099b6:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00a      	beq.n	80099d6 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	3301      	adds	r3, #1
 80099c8:	18d0      	adds	r0, r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	4619      	mov	r1, r3
 80099d2:	f005 f993 	bl	800ecfc <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	3301      	adds	r3, #1
 80099de:	461a      	mov	r2, r3
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	f005 fa32 	bl	800ee4a <memcpy>
    ++history->itemsCount;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	891b      	ldrh	r3, [r3, #8]
 80099ea:	3301      	adds	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	811a      	strh	r2, [r3, #8]

    return true;
 80099f2:	2301      	movs	r3, #1
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8009a08:	887b      	ldrh	r3, [r7, #2]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <historyGet+0x1c>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	891b      	ldrh	r3, [r3, #8]
 8009a12:	887a      	ldrh	r2, [r7, #2]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d901      	bls.n	8009a1c <historyGet+0x20>
        return NULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e007      	b.n	8009a2c <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	887a      	ldrh	r2, [r7, #2]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff f937 	bl	8008c98 <embeddedCliGetToken>
 8009a2a:	4603      	mov	r3, r0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d04c      	beq.n	8009ade <historyRemove+0xaa>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	891b      	ldrh	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d048      	beq.n	8009ade <historyRemove+0xaa>
        return;
    char *item = NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8009a50:	2301      	movs	r3, #1
 8009a52:	827b      	strh	r3, [r7, #18]
 8009a54:	e013      	b.n	8009a7e <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	8a7a      	ldrh	r2, [r7, #18]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff f935 	bl	8008cce <embeddedCliGetTokenVariable>
 8009a64:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6978      	ldr	r0, [r7, #20]
 8009a6a:	f7f6 fbe9 	bl	8000240 <strcmp>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00a      	beq.n	8009a8a <historyRemove+0x56>
            break;
        }
        item = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	827b      	strh	r3, [r7, #18]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	891b      	ldrh	r3, [r3, #8]
 8009a82:	8a7a      	ldrh	r2, [r7, #18]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d9e6      	bls.n	8009a56 <historyRemove+0x22>
 8009a88:	e000      	b.n	8009a8c <historyRemove+0x58>
            break;
 8009a8a:	bf00      	nop
    }
    if (item == NULL)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d027      	beq.n	8009ae2 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	891b      	ldrh	r3, [r3, #8]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8009a9e:	8a7a      	ldrh	r2, [r7, #18]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	891b      	ldrh	r3, [r3, #8]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d01d      	beq.n	8009ae6 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	f7f6 fc28 	bl	8000300 <strlen>
 8009ab0:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	889b      	ldrh	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	441a      	add	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	1acb      	subs	r3, r1, r3
 8009ac8:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	f005 f910 	bl	800ecfc <memmove>
 8009adc:	e004      	b.n	8009ae8 <historyRemove+0xb4>
        return;
 8009ade:	bf00      	nop
 8009ae0:	e002      	b.n	8009ae8 <historyRemove+0xb4>
        return;
 8009ae2:	bf00      	nop
 8009ae4:	e000      	b.n	8009ae8 <historyRemove+0xb4>
        return;
 8009ae6:	bf00      	nop
}
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8009aee:	b480      	push	{r7}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <getTokenPosition+0x18>
 8009b00:	887b      	ldrh	r3, [r7, #2]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d102      	bne.n	8009b0c <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8009b06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009b0a:	e028      	b.n	8009b5e <getTokenPosition+0x70>
    uint16_t i = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8009b10:	2301      	movs	r3, #1
 8009b12:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8009b14:	89ba      	ldrh	r2, [r7, #12]
 8009b16:	887b      	ldrh	r3, [r7, #2]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d013      	beq.n	8009b44 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8009b1c:	89fb      	ldrh	r3, [r7, #14]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d109      	bne.n	8009b3c <getTokenPosition+0x4e>
            ++tokenCount;
 8009b28:	89bb      	ldrh	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8009b2e:	89fb      	ldrh	r3, [r7, #14]
 8009b30:	3301      	adds	r3, #1
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	4413      	add	r3, r2
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8009b3c:	89fb      	ldrh	r3, [r7, #14]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8009b42:	e7e7      	b.n	8009b14 <getTokenPosition+0x26>
            break;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <getTokenPosition+0x5c>
                break;
 8009b48:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8009b4a:	89fb      	ldrh	r3, [r7, #14]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4413      	add	r3, r2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <getTokenPosition+0x6c>
        return i;
 8009b56:	89fb      	ldrh	r3, [r7, #14]
 8009b58:	e001      	b.n	8009b5e <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8009b5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	e010      	b.n	8009b9e <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	4413      	add	r3, r2
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7f6 fb59 	bl	8000240 <strcmp>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <findCategoryIndex+0x2e>
            return i;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	e008      	b.n	8009baa <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	dbea      	blt.n	8009b7c <findCategoryIndex+0x12>
        }
    }
    return -1;
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 8009bc0:	68b8      	ldr	r0, [r7, #8]
 8009bc2:	f7f6 fb9d 	bl	8000300 <strlen>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff fdb0 	bl	8009732 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e006      	b.n	8009be6 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8009bd8:	4908      	ldr	r1, [pc, #32]	@ (8009bfc <printAlignedColumn+0x48>)
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fda9 	bl	8009732 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3301      	adds	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	dbf2      	blt.n	8009bd8 <printAlignedColumn+0x24>
    }
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	080121c8 	.word	0x080121c8

08009c00 <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 8009c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c04:	b095      	sub	sp, #84	@ 0x54
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8009c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8009c1c:	498c      	ldr	r1, [pc, #560]	@ (8009e50 <CMD_Help+0x250>)
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff fd87 	bl	8009732 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8009c24:	4b8b      	ldr	r3, [pc, #556]	@ (8009e54 <CMD_Help+0x254>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff fd81 	bl	8009732 <writeToOutput>
        return;
 8009c30:	e1ba      	b.n	8009fa8 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8009c32:	68b8      	ldr	r0, [r7, #8]
 8009c34:	f7ff f866 	bl	8008d04 <embeddedCliGetTokenCount>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8009c3c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f040 80f6 	bne.w	8009e30 <CMD_Help+0x230>
 8009c44:	466b      	mov	r3, sp
 8009c46:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8009c48:	2320      	movs	r3, #32
 8009c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c54:	2200      	movs	r2, #0
 8009c56:	4698      	mov	r8, r3
 8009c58:	4691      	mov	r9, r2
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009c66:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009c6a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	2200      	movs	r2, #0
 8009c72:	461c      	mov	r4, r3
 8009c74:	4615      	mov	r5, r2
 8009c76:	f04f 0200 	mov.w	r2, #0
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	016b      	lsls	r3, r5, #5
 8009c80:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009c84:	0162      	lsls	r2, r4, #5
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	3307      	adds	r3, #7
 8009c8c:	08db      	lsrs	r3, r3, #3
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	ebad 0d03 	sub.w	sp, sp, r3
 8009c94:	466b      	mov	r3, sp
 8009c96:	3303      	adds	r3, #3
 8009c98:	089b      	lsrs	r3, r3, #2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ca6:	e02d      	b.n	8009d04 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009caa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cae:	4613      	mov	r3, r2
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4413      	add	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	440b      	add	r3, r1
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <CMD_Help+0xd2>
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	4413      	add	r3, r2
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	440b      	add	r3, r1
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	e000      	b.n	8009cd4 <CMD_Help+0xd4>
 8009cd2:	4b61      	ldr	r3, [pc, #388]	@ (8009e58 <CMD_Help+0x258>)
 8009cd4:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 8009cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cd8:	6a39      	ldr	r1, [r7, #32]
 8009cda:	69b8      	ldr	r0, [r7, #24]
 8009cdc:	f7ff ff45 	bl	8009b6a <findCategoryIndex>
 8009ce0:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da0a      	bge.n	8009cfe <CMD_Help+0xfe>
 8009ce8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	429a      	cmp	r2, r3
 8009cee:	da06      	bge.n	8009cfe <CMD_Help+0xfe>
                categories[catCount++] = cat;
 8009cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009cf6:	6a3a      	ldr	r2, [r7, #32]
 8009cf8:	69b9      	ldr	r1, [r7, #24]
 8009cfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8009cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d00:	3301      	adds	r3, #1
 8009d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	dbcb      	blt.n	8009ca8 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 8009d10:	2300      	movs	r3, #0
 8009d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d14:	e085      	b.n	8009e22 <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8009d16:	4951      	ldr	r1, [pc, #324]	@ (8009e5c <CMD_Help+0x25c>)
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fd0a 	bl	8009732 <writeToOutput>
            writeToOutput(cli, categories[c]);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	4619      	mov	r1, r3
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fd02 	bl	8009732 <writeToOutput>
            writeToOutput(cli, "]");
 8009d2e:	494c      	ldr	r1, [pc, #304]	@ (8009e60 <CMD_Help+0x260>)
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7ff fcfe 	bl	8009732 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8009d36:	4b47      	ldr	r3, [pc, #284]	@ (8009e54 <CMD_Help+0x254>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f7ff fcf8 	bl	8009732 <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8009d42:	2300      	movs	r3, #0
 8009d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d46:	e05d      	b.n	8009e04 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8009d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009d4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d4e:	4613      	mov	r3, r2
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4413      	add	r3, r2
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	440b      	add	r3, r1
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d009      	beq.n	8009d72 <CMD_Help+0x172>
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d64:	4613      	mov	r3, r2
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	4413      	add	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	440b      	add	r3, r1
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	e000      	b.n	8009d74 <CMD_Help+0x174>
 8009d72:	4b39      	ldr	r3, [pc, #228]	@ (8009e58 <CMD_Help+0x258>)
 8009d74:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	69f8      	ldr	r0, [r7, #28]
 8009d82:	f7f6 fa5d 	bl	8000240 <strcmp>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d138      	bne.n	8009dfe <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 8009d8c:	4935      	ldr	r1, [pc, #212]	@ (8009e64 <CMD_Help+0x264>)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff fccf 	bl	8009732 <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8009d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2210      	movs	r2, #16
 8009da8:	4619      	mov	r1, r3
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff ff02 	bl	8009bb4 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 8009db0:	492d      	ldr	r1, [pc, #180]	@ (8009e68 <CMD_Help+0x268>)
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fcbd 	bl	8009732 <writeToOutput>
                	if (impl->bindings[i].help) {
 8009db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	440b      	add	r3, r1
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00d      	beq.n	8009dea <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 8009dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	440b      	add	r3, r1
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4619      	mov	r1, r3
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7ff fca5 	bl	8009732 <writeToOutput>
 8009de8:	e003      	b.n	8009df2 <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 8009dea:	4920      	ldr	r1, [pc, #128]	@ (8009e6c <CMD_Help+0x26c>)
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff fca0 	bl	8009732 <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 8009df2:	4b18      	ldr	r3, [pc, #96]	@ (8009e54 <CMD_Help+0x254>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4619      	mov	r1, r3
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fc9a 	bl	8009732 <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8009dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e00:	3301      	adds	r3, #1
 8009e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	db9b      	blt.n	8009d48 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 8009e10:	4b10      	ldr	r3, [pc, #64]	@ (8009e54 <CMD_Help+0x254>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4619      	mov	r1, r3
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f7ff fc8b 	bl	8009732 <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8009e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e1e:	3301      	adds	r3, #1
 8009e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e26:	429a      	cmp	r2, r3
 8009e28:	f6ff af75 	blt.w	8009d16 <CMD_Help+0x116>
 8009e2c:	46b5      	mov	sp, r6
 8009e2e:	e0bb      	b.n	8009fa8 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 8009e30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	f040 80ae 	bne.w	8009f94 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8009e38:	2101      	movs	r1, #1
 8009e3a:	68b8      	ldr	r0, [r7, #8]
 8009e3c:	f7fe ff2c 	bl	8008c98 <embeddedCliGetToken>
 8009e40:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 8009e42:	2300      	movs	r3, #0
 8009e44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e4c:	e08f      	b.n	8009f6e <CMD_Help+0x36e>
 8009e4e:	bf00      	nop
 8009e50:	080121e4 	.word	0x080121e4
 8009e54:	2000419c 	.word	0x2000419c
 8009e58:	080121fc 	.word	0x080121fc
 8009e5c:	0801220c 	.word	0x0801220c
 8009e60:	08012210 	.word	0x08012210
 8009e64:	08012214 	.word	0x08012214
 8009e68:	0801221c 	.word	0x0801221c
 8009e6c:	08012220 	.word	0x08012220
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009e74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e76:	4613      	mov	r3, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	440b      	add	r3, r1
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 f9db 	bl	8000240 <strcmp>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d16b      	bne.n	8009f68 <CMD_Help+0x368>
                found = true;
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 8009e96:	4946      	ldr	r1, [pc, #280]	@ (8009fb0 <CMD_Help+0x3b0>)
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff fc4a 	bl	8009732 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	4413      	add	r3, r2
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	440b      	add	r3, r1
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff fc3d 	bl	8009732 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8009eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fb4 <CMD_Help+0x3b4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fc37 	bl	8009732 <writeToOutput>

                writeToOutput(cli, "Category: ");
 8009ec4:	493c      	ldr	r1, [pc, #240]	@ (8009fb8 <CMD_Help+0x3b8>)
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff fc33 	bl	8009732 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ece:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ed0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	4413      	add	r3, r2
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	440b      	add	r3, r1
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <CMD_Help+0x2f6>
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ee8:	4613      	mov	r3, r2
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	4413      	add	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	440b      	add	r3, r1
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	e000      	b.n	8009ef8 <CMD_Help+0x2f8>
 8009ef6:	4b31      	ldr	r3, [pc, #196]	@ (8009fbc <CMD_Help+0x3bc>)
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fc19 	bl	8009732 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8009f00:	4b2c      	ldr	r3, [pc, #176]	@ (8009fb4 <CMD_Help+0x3b4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4619      	mov	r1, r3
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7ff fc13 	bl	8009732 <writeToOutput>

                if (impl->bindings[i].help) {
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009f10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f12:	4613      	mov	r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4413      	add	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	440b      	add	r3, r1
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d017      	beq.n	8009f52 <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 8009f22:	4927      	ldr	r1, [pc, #156]	@ (8009fc0 <CMD_Help+0x3c0>)
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fc04 	bl	8009732 <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f30:	4613      	mov	r3, r2
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	4413      	add	r3, r2
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	440b      	add	r3, r1
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff fbf7 	bl	8009732 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8009f44:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb4 <CMD_Help+0x3b4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff fbf1 	bl	8009732 <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 8009f50:	e014      	b.n	8009f7c <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 8009f52:	491c      	ldr	r1, [pc, #112]	@ (8009fc4 <CMD_Help+0x3c4>)
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff fbec 	bl	8009732 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8009f5a:	4b16      	ldr	r3, [pc, #88]	@ (8009fb4 <CMD_Help+0x3b4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fbe6 	bl	8009732 <writeToOutput>
                break;
 8009f66:	e009      	b.n	8009f7c <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8009f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f72:	461a      	mov	r2, r3
 8009f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f6ff af7a 	blt.w	8009e70 <CMD_Help+0x270>
            }
        }
        if (!found) {
 8009f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009f80:	f083 0301 	eor.w	r3, r3, #1
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00e      	beq.n	8009fa8 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 8009f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 f81d 	bl	8009fcc <onUnknownCommand>
 8009f92:	e009      	b.n	8009fa8 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8009f94:	490c      	ldr	r1, [pc, #48]	@ (8009fc8 <CMD_Help+0x3c8>)
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fbcb 	bl	8009732 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8009f9c:	4b05      	ldr	r3, [pc, #20]	@ (8009fb4 <CMD_Help+0x3b4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff fbc5 	bl	8009732 <writeToOutput>
    }
}
 8009fa8:	3754      	adds	r7, #84	@ 0x54
 8009faa:	46bd      	mov	sp, r7
 8009fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fb0:	0801222c 	.word	0x0801222c
 8009fb4:	2000419c 	.word	0x2000419c
 8009fb8:	08012238 	.word	0x08012238
 8009fbc:	080121fc 	.word	0x080121fc
 8009fc0:	08012244 	.word	0x08012244
 8009fc4:	08012220 	.word	0x08012220
 8009fc8:	0801224c 	.word	0x0801224c

08009fcc <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8009fd6:	490b      	ldr	r1, [pc, #44]	@ (800a004 <onUnknownCommand+0x38>)
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fbaa 	bl	8009732 <writeToOutput>
    writeToOutput(cli, name);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff fba6 	bl	8009732 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8009fe6:	4908      	ldr	r1, [pc, #32]	@ (800a008 <onUnknownCommand+0x3c>)
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff fba2 	bl	8009732 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8009fee:	4b07      	ldr	r3, [pc, #28]	@ (800a00c <onUnknownCommand+0x40>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff fb9c 	bl	8009732 <writeToOutput>
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	0801227c 	.word	0x0801227c
 800a008:	08012290 	.word	0x08012290
 800a00c:	2000419c 	.word	0x2000419c

0800a010 <cli_printf>:


// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b580      	push	{r7, lr}
 800a014:	b0a5      	sub	sp, #148	@ 0x94
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
    // Create a buffer to store the formatted string
    char buffer[CLI_PRINT_BUFFER_SIZE];

    // Format the string using snprintf
    va_list args;
    va_start(args, format);
 800a01a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a01e:	60bb      	str	r3, [r7, #8]
    int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800a020:	f107 000c 	add.w	r0, r7, #12
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800a02a:	2180      	movs	r1, #128	@ 0x80
 800a02c:	f004 fdc4 	bl	800ebb8 <vsniprintf>
 800a030:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    va_end(args);

    // Check if string fitted in buffer else print error to stderr
    if (length < 0) {
 800a034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da08      	bge.n	800a04e <cli_printf+0x3e>
        fprintf(stderr, "Error formatting the string\r\n");
 800a03c:	4b0a      	ldr	r3, [pc, #40]	@ (800a068 <cli_printf+0x58>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	221d      	movs	r2, #29
 800a044:	2101      	movs	r1, #1
 800a046:	4809      	ldr	r0, [pc, #36]	@ (800a06c <cli_printf+0x5c>)
 800a048:	f004 fcde 	bl	800ea08 <fwrite>
 800a04c:	e005      	b.n	800a05a <cli_printf+0x4a>
        return;
    }

    // Call embeddedCliPrint with the formatted string
    embeddedCliPrint(cli, buffer);
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fe fd5d 	bl	8008b14 <embeddedCliPrint>
}
 800a05a:	3794      	adds	r7, #148	@ 0x94
 800a05c:	46bd      	mov	sp, r7
 800a05e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a062:	b003      	add	sp, #12
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	200041cc 	.word	0x200041cc
 800a06c:	080122c4 	.word	0x080122c4

0800a070 <LL_USART_Enable>:
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f043 0201 	orr.w	r2, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <LL_USART_IsActiveFlag_TC>:
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a0:	2b40      	cmp	r3, #64	@ 0x40
 800a0a2:	d101      	bne.n	800a0a8 <LL_USART_IsActiveFlag_TC+0x18>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <LL_USART_IsActiveFlag_TC+0x1a>
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <LL_USART_IsActiveFlag_TXE>:
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b083      	sub	sp, #12
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0c6:	2b80      	cmp	r3, #128	@ 0x80
 800a0c8:	d101      	bne.n	800a0ce <LL_USART_IsActiveFlag_TXE+0x18>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <LL_USART_IsActiveFlag_TXE+0x1a>
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <LL_USART_ClearFlag_TC>:
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2240      	movs	r2, #64	@ 0x40
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <LL_USART_EnableIT_RXNE>:
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b089      	sub	sp, #36	@ 0x24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	60bb      	str	r3, [r7, #8]
   return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69fa      	ldr	r2, [r7, #28]
 800a116:	61ba      	str	r2, [r7, #24]
 800a118:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6979      	ldr	r1, [r7, #20]
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	613b      	str	r3, [r7, #16]
   return(result);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e9      	bne.n	800a0fe <LL_USART_EnableIT_RXNE+0x8>
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	3724      	adds	r7, #36	@ 0x24
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <LL_USART_EnableIT_TXE>:
{
 800a138:	b480      	push	{r7}
 800a13a:	b089      	sub	sp, #36	@ 0x24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	61ba      	str	r2, [r7, #24]
 800a15a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	6979      	ldr	r1, [r7, #20]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	613b      	str	r3, [r7, #16]
   return(result);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e9      	bne.n	800a140 <LL_USART_EnableIT_TXE+0x8>
}
 800a16c:	bf00      	nop
 800a16e:	bf00      	nop
 800a170:	3724      	adds	r7, #36	@ 0x24
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <LL_USART_DisableIT_TXE>:
{
 800a17a:	b480      	push	{r7}
 800a17c:	b089      	sub	sp, #36	@ 0x24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a194:	61fb      	str	r3, [r7, #28]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	61ba      	str	r2, [r7, #24]
 800a19c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6979      	ldr	r1, [r7, #20]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e9      	bne.n	800a182 <LL_USART_DisableIT_TXE+0x8>
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	3724      	adds	r7, #36	@ 0x24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <uart_stdio_init>:
#include "atomic.h"
// Kích thước bộ đệm tạm cho printf
#define PRINTF_BUFFER_SIZE 128

// Khởi tạo UART_stdio_t
void uart_stdio_init(UART_stdio_t* me, USART_TypeDef* uart_x, circular_char_buffer_t* rx_buffer, circular_char_buffer_t* tx_buffer) {
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	603b      	str	r3, [r7, #0]
    me->uart_x = uart_x;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	601a      	str	r2, [r3, #0]
    me->rx_buffer = rx_buffer;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
    me->tx_buffer = tx_buffer;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	609a      	str	r2, [r3, #8]
    me->tx_busy = false;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	731a      	strb	r2, [r3, #12]
    me->is_active = false; // UART chưa được kích hoạt
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	735a      	strb	r2, [r3, #13]
}
 800a206:	bf00      	nop
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <uart_stdio_active>:

// Kích hoạt UART
void uart_stdio_active(UART_stdio_t* me) {
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
    if (me->uart_x != NULL && !me->is_active) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d013      	beq.n	800a24a <uart_stdio_active+0x38>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	7b5b      	ldrb	r3, [r3, #13]
 800a226:	f083 0301 	eor.w	r3, r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <uart_stdio_active+0x38>
        // Bật UART
        LL_USART_Enable(me->uart_x);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ff1b 	bl	800a070 <LL_USART_Enable>
        // Bật ngắt nhận (RXNE)
        LL_USART_EnableIT_RXNE(me->uart_x);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff ff59 	bl	800a0f6 <LL_USART_EnableIT_RXNE>
        me->is_active = true;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	735a      	strb	r2, [r3, #13]
    }
}
 800a24a:	bf00      	nop
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <uart_stdio_write>:
    *rec_num = count;
    return count > 0;
}

// Ghi dữ liệu vào bộ đệm phát
uint32_t uart_stdio_write(UART_stdio_t* me, const uint8_t * buffer, uint32_t num_data) {
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
	uint8_t data;
    uint32_t count = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]

	if (!me->is_active) {
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	7b5b      	ldrb	r3, [r3, #13]
 800a266:	f083 0301 	eor.w	r3, r3, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <uart_stdio_write+0x22>
        return ERROR_NOT_READY;
 800a270:	2304      	movs	r3, #4
 800a272:	e031      	b.n	800a2d8 <uart_stdio_write+0x86>
  __ASM volatile ("cpsid i" : : : "memory");
 800a274:	b672      	cpsid	i
}
 800a276:	bf00      	nop
    }
    // Nếu không có truyền đang diễn ra, kích hoạt truyền
	 __disable_irq();
    if (!me->tx_busy) {
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	7b1b      	ldrb	r3, [r3, #12]
 800a27c:	f083 0301 	eor.w	r3, r3, #1
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d021      	beq.n	800a2ca <uart_stdio_write+0x78>

        data = buffer[0];
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	74fb      	strb	r3, [r7, #19]
        LL_USART_TransmitData8(me->uart_x, data);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	7cfa      	ldrb	r2, [r7, #19]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff ff91 	bl	800a1bc <LL_USART_TransmitData8>
        me->tx_busy = true;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	731a      	strb	r2, [r3, #12]
        LL_USART_EnableIT_TXE(me->uart_x); // Bật ngắt TXE
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff ff47 	bl	800a138 <LL_USART_EnableIT_TXE>

        count ++;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	617b      	str	r3, [r7, #20]
    }
    // Thêm dữ liệu  vào bộ đệm
    while (count < num_data ) {
 800a2b0:	e00b      	b.n	800a2ca <uart_stdio_write+0x78>
        circular_char_buffer_push(me->tx_buffer, buffer[count]);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6898      	ldr	r0, [r3, #8]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	f000 fa76 	bl	800a7b0 <circular_char_buffer_push>
//        if (result) {
//            return ERROR_OUT_OF_MEMORY;
//        }
        count++;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	617b      	str	r3, [r7, #20]
    while (count < num_data ) {
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d3ef      	bcc.n	800a2b2 <uart_stdio_write+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
 800a2d2:	b662      	cpsie	i
}
 800a2d4:	bf00      	nop
    }
    __enable_irq();
    return ERROR_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <uart_stdio_write_char>:


// Ghi dữ liệu vào bộ đệm phát
uint32_t uart_stdio_write_char(UART_stdio_t* me, const uint8_t character) {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
uint32_t result = ERROR_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	617b      	str	r3, [r7, #20]
	if (!me->is_active) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7b5b      	ldrb	r3, [r3, #13]
 800a2f4:	f083 0301 	eor.w	r3, r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <uart_stdio_write_char+0x22>
        return ERROR_NOT_READY;
 800a2fe:	2304      	movs	r3, #4
 800a300:	e045      	b.n	800a38e <uart_stdio_write_char+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a302:	f3ef 8310 	mrs	r3, PRIMASK
 800a306:	613b      	str	r3, [r7, #16]
  return(result);
 800a308:	693b      	ldr	r3, [r7, #16]
    }
    // Nếu không có truyền đang diễn ra, kích hoạt truyền
	ENTER_CRITICAL();
 800a30a:	4a23      	ldr	r2, [pc, #140]	@ (800a398 <uart_stdio_write_char+0xb8>)
 800a30c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a30e:	b672      	cpsid	i
}
 800a310:	bf00      	nop
 800a312:	4b22      	ldr	r3, [pc, #136]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	4a20      	ldr	r2, [pc, #128]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a31a:	6013      	str	r3, [r2, #0]
    if (!me->tx_busy) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7b1b      	ldrb	r3, [r3, #12]
 800a320:	f083 0301 	eor.w	r3, r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00f      	beq.n	800a34a <uart_stdio_write_char+0x6a>

        LL_USART_TransmitData8(me->uart_x, character);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	4611      	mov	r1, r2
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ff42 	bl	800a1bc <LL_USART_TransmitData8>
        me->tx_busy = true;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	731a      	strb	r2, [r3, #12]
        LL_USART_EnableIT_TXE(me->uart_x); // Bật ngắt TXE
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fef8 	bl	800a138 <LL_USART_EnableIT_TXE>
 800a348:	e00c      	b.n	800a364 <uart_stdio_write_char+0x84>
    }
    else
    // Thêm dữ liệu  vào bộ đệm
     {
        result = circular_char_buffer_push(me->tx_buffer, character);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fa2c 	bl	800a7b0 <circular_char_buffer_push>
 800a358:	6178      	str	r0, [r7, #20]
        if (result) {
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <uart_stdio_write_char+0x84>
            result = ERROR_OUT_OF_MEMORY;
 800a360:	2307      	movs	r3, #7
 800a362:	617b      	str	r3, [r7, #20]
        }
    }
    EXIT_CRITICAL();
 800a364:	4b0d      	ldr	r3, [pc, #52]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00f      	beq.n	800a38c <uart_stdio_write_char+0xac>
 800a36c:	4b0b      	ldr	r3, [pc, #44]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3b01      	subs	r3, #1
 800a372:	4a0a      	ldr	r2, [pc, #40]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	4b09      	ldr	r3, [pc, #36]	@ (800a39c <uart_stdio_write_char+0xbc>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <uart_stdio_write_char+0xac>
 800a37e:	4b06      	ldr	r3, [pc, #24]	@ (800a398 <uart_stdio_write_char+0xb8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f383 8810 	msr	PRIMASK, r3
}
 800a38a:	bf00      	nop
    return result;
 800a38c:	697b      	ldr	r3, [r7, #20]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	2000e188 	.word	0x2000e188
 800a39c:	2000e184 	.word	0x2000e184

0800a3a0 <uart_stdio_printf>:

// In chuỗi định dạng qua UART
uint32_t uart_stdio_printf(UART_stdio_t* me, const char * format, ...) {
 800a3a0:	b40e      	push	{r1, r2, r3}
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b0a5      	sub	sp, #148	@ 0x94
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
    if (!me->is_active) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	7b5b      	ldrb	r3, [r3, #13]
 800a3ae:	f083 0301 	eor.w	r3, r3, #1
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <uart_stdio_printf+0x1c>
        return 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	e01f      	b.n	800a3fc <uart_stdio_printf+0x5c>

    char temp_buffer[PRINTF_BUFFER_SIZE];
    va_list args;

    // Khởi tạo danh sách tham số biến đổi
    va_start(args, format);
 800a3bc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a3c0:	60bb      	str	r3, [r7, #8]

    // Định dạng chuỗi vào bộ đệm tạm
    int len = vsnprintf(temp_buffer, PRINTF_BUFFER_SIZE, format, args);
 800a3c2:	f107 000c 	add.w	r0, r7, #12
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800a3cc:	2180      	movs	r1, #128	@ 0x80
 800a3ce:	f004 fbf3 	bl	800ebb8 <vsniprintf>
 800a3d2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // Kết thúc danh sách tham số
    va_end(args);

    // Kiểm tra độ dài hợp lệ
    if (len < 0 || len >= PRINTF_BUFFER_SIZE) {
 800a3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db03      	blt.n	800a3e6 <uart_stdio_printf+0x46>
 800a3de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3e4:	dd01      	ble.n	800a3ea <uart_stdio_printf+0x4a>
        return 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e008      	b.n	800a3fc <uart_stdio_printf+0x5c>
    }

    // Gửi chuỗi đã định dạng qua UART
    return uart_stdio_write(me, (uint8_t *)temp_buffer, (uint32_t)len);
 800a3ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800a3ee:	f107 030c 	add.w	r3, r7, #12
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff ff2c 	bl	800a252 <uart_stdio_write>
 800a3fa:	4603      	mov	r3, r0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3794      	adds	r7, #148	@ 0x94
 800a400:	46bd      	mov	sp, r7
 800a402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a406:	b003      	add	sp, #12
 800a408:	4770      	bx	lr

0800a40a <uart_stdio_tx_callback>:
        circular_char_buffer_push(me->rx_buffer, received_data);
    }
}

// Callback xử lý ngắt phát
void uart_stdio_tx_callback(UART_stdio_t* me) {
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
    if (LL_USART_IsActiveFlag_TXE(me->uart_x) && me->is_active) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fe4d 	bl	800a0b6 <LL_USART_IsActiveFlag_TXE>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01f      	beq.n	800a462 <uart_stdio_tx_callback+0x58>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7b5b      	ldrb	r3, [r3, #13]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d01b      	beq.n	800a462 <uart_stdio_tx_callback+0x58>
        uint8_t data;
        uint32_t result;
        result = circular_char_buffer_pop(me->tx_buffer, &data);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f107 020b 	add.w	r2, r7, #11
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fa1d 	bl	800a874 <circular_char_buffer_pop>
 800a43a:	60f8      	str	r0, [r7, #12]
        if (!result) {
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d107      	bne.n	800a452 <uart_stdio_tx_callback+0x48>
            // Tiếp tục truyền byte tiếp theo
            LL_USART_TransmitData8(me->uart_x, data);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	7afa      	ldrb	r2, [r7, #11]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff feb6 	bl	800a1bc <LL_USART_TransmitData8>
 800a450:	e007      	b.n	800a462 <uart_stdio_tx_callback+0x58>
        } else {
            // Không còn dữ liệu, tắt ngắt TXE và đặt trạng thái không bận
            LL_USART_DisableIT_TXE(me->uart_x);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fe8f 	bl	800a17a <LL_USART_DisableIT_TXE>
            me->tx_busy = false;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	731a      	strb	r2, [r3, #12]
        }
    }
    if (LL_USART_IsActiveFlag_TC(me->uart_x))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fe12 	bl	800a090 <LL_USART_IsActiveFlag_TC>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <uart_stdio_tx_callback+0x72>
	{
		LL_USART_ClearFlag_TC(me->uart_x);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fe30 	bl	800a0dc <LL_USART_ClearFlag_TC>
	}
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <circular_buffer_init>:
#include "DBC_assert.h"
#include "error_codes.h"

DBC_MODULE_NAME("circular_buffer")
/* Khởi tạo bộ đệm */
uint32_t circular_buffer_init(circular_buffer_t * const me, uint8_t *static_buffer, uint32_t buffer_size, uint32_t max_items, uint32_t item_size) {
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
    if (me == NULL || static_buffer == NULL || max_items == 0 || item_size == 0 || buffer_size == 0) {
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <circular_buffer_init+0x2c>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d008      	beq.n	800a4b0 <circular_buffer_init+0x2c>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <circular_buffer_init+0x2c>
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <circular_buffer_init+0x2c>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <circular_buffer_init+0x30>
        return ERROR_INVALID_PARAM;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e01e      	b.n	800a4f2 <circular_buffer_init+0x6e>
    }

    /* Kiểm tra xem bộ đệm tĩnh có đủ kích thước không */
    if (max_items * item_size > buffer_size) {
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	fb02 f303 	mul.w	r3, r2, r3
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d201      	bcs.n	800a4c6 <circular_buffer_init+0x42>
        return ERROR_OUT_OF_MEMORY;
 800a4c2:	2307      	movs	r3, #7
 800a4c4:	e015      	b.n	800a4f2 <circular_buffer_init+0x6e>
    }

    me->buffer = static_buffer;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	601a      	str	r2, [r3, #0]
    me->buffer_size = buffer_size;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	605a      	str	r2, [r3, #4]
    me->item_size = item_size;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	609a      	str	r2, [r3, #8]
    me->max_items = max_items;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	60da      	str	r2, [r3, #12]
    me->head = 0;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	611a      	str	r2, [r3, #16]
    me->tail = 0;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	615a      	str	r2, [r3, #20]
    me->count = 0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	619a      	str	r2, [r3, #24]

    return ERROR_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <circular_buffer_push>:

/* Đưa một phần tử vào bộ đệm */
uint32_t circular_buffer_push(circular_buffer_t * const me, void const * const item) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
    DBC_ASSERT(1u, me != NULL);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <circular_buffer_push+0x18>
 800a510:	2101      	movs	r1, #1
 800a512:	4833      	ldr	r0, [pc, #204]	@ (800a5e0 <circular_buffer_push+0xe0>)
 800a514:	f7fb f9de 	bl	80058d4 <DBC_fault_handler>
    DBC_ASSERT(2u, item != NULL);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d103      	bne.n	800a526 <circular_buffer_push+0x26>
 800a51e:	2102      	movs	r1, #2
 800a520:	482f      	ldr	r0, [pc, #188]	@ (800a5e0 <circular_buffer_push+0xe0>)
 800a522:	f7fb f9d7 	bl	80058d4 <DBC_fault_handler>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a526:	f3ef 8310 	mrs	r3, PRIMASK
 800a52a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52c:	68fb      	ldr	r3, [r7, #12]
    uint32_t result;
    ENTER_CRITICAL();
 800a52e:	4a2d      	ldr	r2, [pc, #180]	@ (800a5e4 <circular_buffer_push+0xe4>)
 800a530:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a532:	b672      	cpsid	i
}
 800a534:	bf00      	nop
 800a536:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	4a2a      	ldr	r2, [pc, #168]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a53e:	6013      	str	r3, [r2, #0]
	if (me == NULL || item == NULL ) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <circular_buffer_push+0x4c>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <circular_buffer_push+0x52>
        result = ERROR_INVALID_PARAM;
 800a54c:	2303      	movs	r3, #3
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e02c      	b.n	800a5ac <circular_buffer_push+0xac>
    }
    else if (circular_buffer_is_full(me)) {
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f8d8 	bl	800a708 <circular_buffer_is_full>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <circular_buffer_push+0x64>
        result = ERROR_BUFFER_FULL;
 800a55e:	2308      	movs	r3, #8
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	e023      	b.n	800a5ac <circular_buffer_push+0xac>
    }
	else
	{
		/* Tính vị trí trong bộ đệm */
		uint8_t *dest = me->buffer + (me->head * me->item_size);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	6889      	ldr	r1, [r1, #8]
 800a570:	fb01 f303 	mul.w	r3, r1, r3
 800a574:	4413      	add	r3, r2
 800a576:	613b      	str	r3, [r7, #16]
		memcpy(dest, item, me->item_size);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f004 fc62 	bl	800ee4a <memcpy>

		/* Cập nhật head và count */
		me->head = (me->head + 1) % me->max_items;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	3301      	adds	r3, #1
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	68d2      	ldr	r2, [r2, #12]
 800a590:	fbb3 f1f2 	udiv	r1, r3, r2
 800a594:	fb01 f202 	mul.w	r2, r1, r2
 800a598:	1a9a      	subs	r2, r3, r2
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	611a      	str	r2, [r3, #16]
		me->count++;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	619a      	str	r2, [r3, #24]
		result = ERROR_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]

	}
	EXIT_CRITICAL();
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00f      	beq.n	800a5d4 <circular_buffer_push+0xd4>
 800a5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	4a0b      	ldr	r2, [pc, #44]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <circular_buffer_push+0xe8>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <circular_buffer_push+0xd4>
 800a5c6:	4b07      	ldr	r3, [pc, #28]	@ (800a5e4 <circular_buffer_push+0xe4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f383 8810 	msr	PRIMASK, r3
}
 800a5d2:	bf00      	nop
    return result;
 800a5d4:	697b      	ldr	r3, [r7, #20]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	08012728 	.word	0x08012728
 800a5e4:	2000e188 	.word	0x2000e188
 800a5e8:	2000e184 	.word	0x2000e184

0800a5ec <circular_buffer_pop>:

/* Lấy một phần tử ra khỏi bộ đệm */
uint32_t circular_buffer_pop(circular_buffer_t * const me, void * item) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	DBC_ASSERT(3u, me != NULL);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d103      	bne.n	800a604 <circular_buffer_pop+0x18>
 800a5fc:	2103      	movs	r1, #3
 800a5fe:	4834      	ldr	r0, [pc, #208]	@ (800a6d0 <circular_buffer_pop+0xe4>)
 800a600:	f7fb f968 	bl	80058d4 <DBC_fault_handler>
	DBC_ASSERT(4u, item != NULL);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <circular_buffer_pop+0x26>
 800a60a:	2104      	movs	r1, #4
 800a60c:	4830      	ldr	r0, [pc, #192]	@ (800a6d0 <circular_buffer_pop+0xe4>)
 800a60e:	f7fb f961 	bl	80058d4 <DBC_fault_handler>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a612:	f3ef 8310 	mrs	r3, PRIMASK
 800a616:	613b      	str	r3, [r7, #16]
  return(result);
 800a618:	693b      	ldr	r3, [r7, #16]
    uint32_t result;
    ENTER_CRITICAL();
 800a61a:	4a2e      	ldr	r2, [pc, #184]	@ (800a6d4 <circular_buffer_pop+0xe8>)
 800a61c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a61e:	b672      	cpsid	i
}
 800a620:	bf00      	nop
 800a622:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3301      	adds	r3, #1
 800a628:	4a2b      	ldr	r2, [pc, #172]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a62a:	6013      	str	r3, [r2, #0]
	if (me == NULL || item == NULL ) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <circular_buffer_pop+0x4c>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d102      	bne.n	800a63e <circular_buffer_pop+0x52>
		result = ERROR_INVALID_PARAM;
 800a638:	2303      	movs	r3, #3
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e02e      	b.n	800a69c <circular_buffer_pop+0xb0>
    }
    else if (circular_buffer_is_empty(me)) {
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f84c 	bl	800a6dc <circular_buffer_is_empty>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <circular_buffer_pop+0x64>
        result = ERROR_BUFFER_EMPTY;
 800a64a:	2309      	movs	r3, #9
 800a64c:	61fb      	str	r3, [r7, #28]
 800a64e:	e025      	b.n	800a69c <circular_buffer_pop+0xb0>
    }
	else
	{

		/* Tính vị trí trong bộ đệm */
		uint8_t *src = me->buffer + (me->tail * me->item_size);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	6889      	ldr	r1, [r1, #8]
 800a65c:	fb01 f303 	mul.w	r3, r1, r3
 800a660:	4413      	add	r3, r2
 800a662:	61bb      	str	r3, [r7, #24]
		uint8_t *des = (uint8_t *)item;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	617b      	str	r3, [r7, #20]
		memcpy(des, src, me->item_size);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	461a      	mov	r2, r3
 800a66e:	69b9      	ldr	r1, [r7, #24]
 800a670:	6978      	ldr	r0, [r7, #20]
 800a672:	f004 fbea 	bl	800ee4a <memcpy>


		/* Cập nhật tail và count */
		me->tail = (me->tail + 1) % me->max_items;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	3301      	adds	r3, #1
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	68d2      	ldr	r2, [r2, #12]
 800a680:	fbb3 f1f2 	udiv	r1, r3, r2
 800a684:	fb01 f202 	mul.w	r2, r1, r2
 800a688:	1a9a      	subs	r2, r3, r2
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	615a      	str	r2, [r3, #20]
		me->count--;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	1e5a      	subs	r2, r3, #1
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	619a      	str	r2, [r3, #24]

		result = ERROR_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	61fb      	str	r3, [r7, #28]
	}
    EXIT_CRITICAL();
 800a69c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00f      	beq.n	800a6c4 <circular_buffer_pop+0xd8>
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	4a0b      	ldr	r2, [pc, #44]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <circular_buffer_pop+0xec>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <circular_buffer_pop+0xd8>
 800a6b6:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <circular_buffer_pop+0xe8>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f383 8810 	msr	PRIMASK, r3
}
 800a6c2:	bf00      	nop
    return result;
 800a6c4:	69fb      	ldr	r3, [r7, #28]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	08012728 	.word	0x08012728
 800a6d4:	2000e188 	.word	0x2000e188
 800a6d8:	2000e184 	.word	0x2000e184

0800a6dc <circular_buffer_is_empty>:

/* Kiểm tra bộ đệm rỗng */
bool circular_buffer_is_empty(circular_buffer_t * const me) {
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
    if (me == NULL) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <circular_buffer_is_empty+0x12>
        return true;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e006      	b.n	800a6fc <circular_buffer_is_empty+0x20>
    }
    return me->count == 0;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2301      	moveq	r3, #1
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <circular_buffer_is_full>:

/* Kiểm tra bộ đệm đầy */
bool circular_buffer_is_full(circular_buffer_t * const me) {
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
    if (me == NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <circular_buffer_is_full+0x12>
        return true;
 800a716:	2301      	movs	r3, #1
 800a718:	e008      	b.n	800a72c <circular_buffer_is_full+0x24>
    }
    return me->count == me->max_items;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699a      	ldr	r2, [r3, #24]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	429a      	cmp	r2, r3
 800a724:	bf0c      	ite	eq
 800a726:	2301      	moveq	r3, #1
 800a728:	2300      	movne	r3, #0
 800a72a:	b2db      	uxtb	r3, r3
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <circular_char_buffer_init>:
#include "error_codes.h"

DBC_MODULE_NAME("circular_char_buffer")

/* Khởi tạo bộ đệm */
uint32_t circular_char_buffer_init(circular_char_buffer_t * const me, uint8_t *static_buffer,  uint32_t max_items) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
	DBC_ASSERT(1u, me != NULL);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <circular_char_buffer_init+0x1a>
 800a74a:	2101      	movs	r1, #1
 800a74c:	4817      	ldr	r0, [pc, #92]	@ (800a7ac <circular_char_buffer_init+0x74>)
 800a74e:	f7fb f8c1 	bl	80058d4 <DBC_fault_handler>
	DBC_ASSERT(2u, static_buffer != NULL);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d103      	bne.n	800a760 <circular_char_buffer_init+0x28>
 800a758:	2102      	movs	r1, #2
 800a75a:	4814      	ldr	r0, [pc, #80]	@ (800a7ac <circular_char_buffer_init+0x74>)
 800a75c:	f7fb f8ba 	bl	80058d4 <DBC_fault_handler>
	DBC_ASSERT(3u, max_items > 0);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <circular_char_buffer_init+0x36>
 800a766:	2103      	movs	r1, #3
 800a768:	4810      	ldr	r0, [pc, #64]	@ (800a7ac <circular_char_buffer_init+0x74>)
 800a76a:	f7fb f8b3 	bl	80058d4 <DBC_fault_handler>
    if (me == NULL || static_buffer == NULL || max_items == 0 ) {
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <circular_char_buffer_init+0x48>
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <circular_char_buffer_init+0x48>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <circular_char_buffer_init+0x4c>
        return ERROR_INVALID_PARAM;
 800a780:	2303      	movs	r3, #3
 800a782:	e00f      	b.n	800a7a4 <circular_char_buffer_init+0x6c>
    }

    me->buffer = static_buffer;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	601a      	str	r2, [r3, #0]
    me->max_items = max_items;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	605a      	str	r2, [r3, #4]
    me->head = 0;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	609a      	str	r2, [r3, #8]
    me->tail = 0;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	60da      	str	r2, [r3, #12]
    me->count = 0;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	611a      	str	r2, [r3, #16]

    return ERROR_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	08012738 	.word	0x08012738

0800a7b0 <circular_char_buffer_push>:

/* Đưa một phần tử vào bộ đệm */
uint32_t circular_char_buffer_push(circular_char_buffer_t * const me, uint8_t const item) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
	DBC_ASSERT(6u, me != NULL);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d103      	bne.n	800a7ca <circular_char_buffer_push+0x1a>
 800a7c2:	2106      	movs	r1, #6
 800a7c4:	4828      	ldr	r0, [pc, #160]	@ (800a868 <circular_char_buffer_push+0xb8>)
 800a7c6:	f7fb f885 	bl	80058d4 <DBC_fault_handler>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ce:	613b      	str	r3, [r7, #16]
  return(result);
 800a7d0:	693b      	ldr	r3, [r7, #16]

    uint32_t result ;
    ENTER_CRITICAL();
 800a7d2:	4a26      	ldr	r2, [pc, #152]	@ (800a86c <circular_char_buffer_push+0xbc>)
 800a7d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7d6:	b672      	cpsid	i
}
 800a7d8:	bf00      	nop
 800a7da:	4b25      	ldr	r3, [pc, #148]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	4a23      	ldr	r2, [pc, #140]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a7e2:	6013      	str	r3, [r2, #0]
	if (me == NULL ) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <circular_char_buffer_push+0x40>
        result = ERROR_INVALID_PARAM;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	e036      	b.n	800a85e <circular_char_buffer_push+0xae>
    }
    else if (circular_char_buffer_is_full(me)) {
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f8c1 	bl	800a978 <circular_char_buffer_is_full>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <circular_char_buffer_push+0x52>
        result = ERROR_BUFFER_FULL;
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	e02d      	b.n	800a85e <circular_char_buffer_push+0xae>
    }
	else
	{
		/* Tính vị trí trong bộ đệm */
		me->buffer[me->head] = item;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	4413      	add	r3, r2
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	701a      	strb	r2, [r3, #0]
        /* Cập nhật head và count */
		me->head = (me->head + 1) % me->max_items;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	3301      	adds	r3, #1
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6852      	ldr	r2, [r2, #4]
 800a81a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a81e:	fb01 f202 	mul.w	r2, r1, r2
 800a822:	1a9a      	subs	r2, r3, r2
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	609a      	str	r2, [r3, #8]
		me->count++;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	611a      	str	r2, [r3, #16]
		result = ERROR_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
		EXIT_CRITICAL();
 800a836:	4b0e      	ldr	r3, [pc, #56]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00f      	beq.n	800a85e <circular_char_buffer_push+0xae>
 800a83e:	4b0c      	ldr	r3, [pc, #48]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3b01      	subs	r3, #1
 800a844:	4a0a      	ldr	r2, [pc, #40]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <circular_char_buffer_push+0xc0>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <circular_char_buffer_push+0xae>
 800a850:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <circular_char_buffer_push+0xbc>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f383 8810 	msr	PRIMASK, r3
}
 800a85c:	bf00      	nop
	}
    return result;
 800a85e:	697b      	ldr	r3, [r7, #20]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	08012738 	.word	0x08012738
 800a86c:	2000e188 	.word	0x2000e188
 800a870:	2000e184 	.word	0x2000e184

0800a874 <circular_char_buffer_pop>:

/* Lấy một phần tử ra khỏi bộ đệm */
uint32_t circular_char_buffer_pop(circular_char_buffer_t * const me, uint8_t * const item) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
    uint32_t result ;
    DBC_ASSERT(7u, me != NULL);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d103      	bne.n	800a88c <circular_char_buffer_pop+0x18>
 800a884:	2107      	movs	r1, #7
 800a886:	482e      	ldr	r0, [pc, #184]	@ (800a940 <circular_char_buffer_pop+0xcc>)
 800a888:	f7fb f824 	bl	80058d4 <DBC_fault_handler>
    DBC_ASSERT(8u, item != NULL);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <circular_char_buffer_pop+0x26>
 800a892:	2108      	movs	r1, #8
 800a894:	482a      	ldr	r0, [pc, #168]	@ (800a940 <circular_char_buffer_pop+0xcc>)
 800a896:	f7fb f81d 	bl	80058d4 <DBC_fault_handler>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a89a:	f3ef 8310 	mrs	r3, PRIMASK
 800a89e:	613b      	str	r3, [r7, #16]
  return(result);
 800a8a0:	693b      	ldr	r3, [r7, #16]
    ENTER_CRITICAL();
 800a8a2:	4a28      	ldr	r2, [pc, #160]	@ (800a944 <circular_char_buffer_pop+0xd0>)
 800a8a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a6:	b672      	cpsid	i
}
 800a8a8:	bf00      	nop
 800a8aa:	4b27      	ldr	r3, [pc, #156]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	4a25      	ldr	r2, [pc, #148]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a8b2:	6013      	str	r3, [r2, #0]
	if (me == NULL || item == NULL ) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <circular_char_buffer_pop+0x4c>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d102      	bne.n	800a8c6 <circular_char_buffer_pop+0x52>
	    result = ERROR_INVALID_PARAM;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e023      	b.n	800a90e <circular_char_buffer_pop+0x9a>
    }
    else if (circular_char_buffer_is_empty(me)) {
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f840 	bl	800a94c <circular_char_buffer_is_empty>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <circular_char_buffer_pop+0x64>
        result = ERROR_BUFFER_EMPTY;
 800a8d2:	2309      	movs	r3, #9
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	e01a      	b.n	800a90e <circular_char_buffer_pop+0x9a>
    }
	else
	{

		*item = me->buffer[me->tail];
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	701a      	strb	r2, [r3, #0]
		/* Cập nhật tail và count */
		me->tail = (me->tail + 1) % me->max_items;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	6852      	ldr	r2, [r2, #4]
 800a8f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8f6:	fb01 f202 	mul.w	r2, r1, r2
 800a8fa:	1a9a      	subs	r2, r3, r2
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60da      	str	r2, [r3, #12]
		me->count--;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	1e5a      	subs	r2, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	611a      	str	r2, [r3, #16]

		result = ERROR_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	617b      	str	r3, [r7, #20]
	}
    EXIT_CRITICAL();
 800a90e:	4b0e      	ldr	r3, [pc, #56]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00f      	beq.n	800a936 <circular_char_buffer_pop+0xc2>
 800a916:	4b0c      	ldr	r3, [pc, #48]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	4a0a      	ldr	r2, [pc, #40]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	4b09      	ldr	r3, [pc, #36]	@ (800a948 <circular_char_buffer_pop+0xd4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d106      	bne.n	800a936 <circular_char_buffer_pop+0xc2>
 800a928:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <circular_char_buffer_pop+0xd0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f383 8810 	msr	PRIMASK, r3
}
 800a934:	bf00      	nop
    return result;
 800a936:	697b      	ldr	r3, [r7, #20]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	08012738 	.word	0x08012738
 800a944:	2000e188 	.word	0x2000e188
 800a948:	2000e184 	.word	0x2000e184

0800a94c <circular_char_buffer_is_empty>:

/* Kiểm tra bộ đệm rỗng */
bool circular_char_buffer_is_empty(circular_char_buffer_t * const me) {
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
    if (me == NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <circular_char_buffer_is_empty+0x12>
        return true;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e006      	b.n	800a96c <circular_char_buffer_is_empty+0x20>
    }
    return me->count == 0;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	bf0c      	ite	eq
 800a966:	2301      	moveq	r3, #1
 800a968:	2300      	movne	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <circular_char_buffer_is_full>:

/* Kiểm tra bộ đệm đầy */
bool circular_char_buffer_is_full(circular_char_buffer_t * const me) {
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
    if (me == NULL) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <circular_char_buffer_is_full+0x12>
        return true;
 800a986:	2301      	movs	r3, #1
 800a988:	e008      	b.n	800a99c <circular_char_buffer_is_full+0x24>
    }
    return me->count == me->max_items;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691a      	ldr	r2, [r3, #16]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	bf0c      	ite	eq
 800a996:	2301      	moveq	r3, #1
 800a998:	2300      	movne	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <SST_Task_run>:
/*..........................................................................*/
void SST_init(void) {
    SST_tick = 0U; /* initialize the SST tick counter */
}
/*..........................................................................*/
int SST_Task_run(void) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
    SST_onStart(); /* configure and start the interrupts */
 800a9ae:	f7fa ff79 	bl	80058a4 <SST_onStart>

    SST_PORT_INT_DISABLE();
 800a9b2:	b672      	cpsid	i
    for (;;) { /* event loop of the SST0 kernel */

        if (task_readySet != 0U) { /* any SST tasks ready to run? */
 800a9b4:	4b20      	ldr	r3, [pc, #128]	@ (800aa38 <SST_Task_run+0x90>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d039      	beq.n	800aa30 <SST_Task_run+0x88>
            uint_fast8_t const p = SST_LOG2(task_readySet);
 800a9bc:	4b1e      	ldr	r3, [pc, #120]	@ (800aa38 <SST_Task_run+0x90>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	fab3 f383 	clz	r3, r3
 800a9c4:	f1c3 0320 	rsb	r3, r3, #32
 800a9c8:	607b      	str	r3, [r7, #4]
            SST_Task * const task = task_registry[p];
 800a9ca:	4a1c      	ldr	r2, [pc, #112]	@ (800aa3c <SST_Task_run+0x94>)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d2:	603b      	str	r3, [r7, #0]
            SST_PORT_INT_ENABLE();
 800a9d4:	b662      	cpsie	i

            /* the task must have some events in the queue */
            DBC_ASSERT(100, task->nUsed > 0U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	7c1b      	ldrb	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d103      	bne.n	800a9e6 <SST_Task_run+0x3e>
 800a9de:	2164      	movs	r1, #100	@ 0x64
 800a9e0:	4817      	ldr	r0, [pc, #92]	@ (800aa40 <SST_Task_run+0x98>)
 800a9e2:	f7fa ff77 	bl	80058d4 <DBC_fault_handler>
            //     task->tail = task->end; /* wrap around */
            // }
            // else {
            //     --task->tail;
            // }
            circular_buffer_pop(task->evt_queue, (void *)task->current_evt);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7ff fdfb 	bl	800a5ec <circular_buffer_pop>
            SST_PORT_INT_DISABLE();
 800a9f6:	b672      	cpsid	i
            //if ((--task->nUsed) == 0U) { /* no more events in the queue? */
            if (circular_buffer_is_empty(task->evt_queue)) { /* no more events? */
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fe6d 	bl	800a6dc <circular_buffer_is_empty>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <SST_Task_run+0x76>
                task_readySet &= ~(1U << (p - 1U));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa12:	43da      	mvns	r2, r3
 800aa14:	4b08      	ldr	r3, [pc, #32]	@ (800aa38 <SST_Task_run+0x90>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	4a07      	ldr	r2, [pc, #28]	@ (800aa38 <SST_Task_run+0x90>)
 800aa1c:	6013      	str	r3, [r2, #0]
            }
            SST_PORT_INT_ENABLE();
 800aa1e:	b662      	cpsie	i

            /* dispatch the received event to the task */
            (*task->dispatch)(task, task->current_evt); /* NOTE: virtual call */
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	6892      	ldr	r2, [r2, #8]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	6838      	ldr	r0, [r7, #0]
 800aa2c:	4798      	blx	r3
 800aa2e:	e7c1      	b.n	800a9b4 <SST_Task_run+0xc>
            *
            * NOTE: SST_onIdleCond() MUST enable interrupts internally,
            * ideally at the same time as putting the CPU into a power-
            * saving mode.
            */
            SST_onIdleCond();
 800aa30:	f7fa ff48 	bl	80058c4 <SST_onIdleCond>

            SST_PORT_INT_DISABLE(); /* disable before looping back */
 800aa34:	b672      	cpsid	i
        if (task_readySet != 0U) { /* any SST tasks ready to run? */
 800aa36:	e7bd      	b.n	800a9b4 <SST_Task_run+0xc>
 800aa38:	2000e18c 	.word	0x2000e18c
 800aa3c:	2000e194 	.word	0x2000e194
 800aa40:	08012750 	.word	0x08012750

0800aa44 <SST_Task_ctor>:
    SST_Task * const me,
    SST_Handler init,
    SST_Handler dispatch,
    SST_Evt const * const current_evt,
    circular_buffer_t * const evt_queue)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
    me->init = init;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	601a      	str	r2, [r3, #0]
    me->dispatch = dispatch;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	605a      	str	r2, [r3, #4]
    me->current_evt = current_evt; /*!< current event */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	609a      	str	r2, [r3, #8]
    me->evt_queue = evt_queue; /*!< circular buffer for the event queue */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	60da      	str	r2, [r3, #12]
}
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
	...

0800aa78 <SST_Task_start>:
/*..........................................................................*/
void SST_Task_start(
    SST_Task * const me,
    SST_TaskPrio prio)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
//     DBC_REQUIRE(200,
//         (0U < prio) && (prio <= SST_PORT_MAX_TASK)
//         && (qBuf != (SST_Evt const **)0) && (qLen > 0U)
//         && (task_registry[prio] == (SST_Task *)0));

     me->prio  = prio;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	78fa      	ldrb	r2, [r7, #3]
 800aa88:	745a      	strb	r2, [r3, #17]
    // me->qBuf  = qBuf;
    // me->end   = qLen - 1U;
    // me->head  = 0U;
    // me->tail  = 0U;
    // me->nUsed = 0U;
    DBC_REQUIRE(200,
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	2b1f      	cmp	r3, #31
 800aa8e:	d805      	bhi.n	800aa9c <SST_Task_start+0x24>
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	4a0c      	ldr	r2, [pc, #48]	@ (800aac4 <SST_Task_start+0x4c>)
 800aa94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <SST_Task_start+0x2c>
 800aa9c:	21c8      	movs	r1, #200	@ 0xc8
 800aa9e:	480a      	ldr	r0, [pc, #40]	@ (800aac8 <SST_Task_start+0x50>)
 800aaa0:	f7fa ff18 	bl	80058d4 <DBC_fault_handler>
        (0U <= prio) && (prio < SST_PORT_MAX_TASK)
        && (task_registry[prio] == (SST_Task *)0));
    task_registry[prio] = me;
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	4907      	ldr	r1, [pc, #28]	@ (800aac4 <SST_Task_start+0x4c>)
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    //me->nUsed = 0U; /* no events in the queue */
    /* initialize this task with the initialization event */
    (*me->init)(me, me->current_evt); /* NOTE: virtual call */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6892      	ldr	r2, [r2, #8]
 800aab6:	4611      	mov	r1, r2
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
    /* TBD: implement event recycling */
}
 800aabc:	bf00      	nop
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	2000e194 	.word	0x2000e194
 800aac8:	08012750 	.word	0x08012750

0800aacc <SST_Task_post>:
/*..........................................................................*/
void SST_Task_post(SST_Task * const me, SST_Evt const * const e) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
    /*! @pre the queue must be sized adequately and cannot overflow */
    //DBC_REQUIRE(300, me->nUsed <= me->end);

    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 800aad6:	b672      	cpsid	i
    //     me->head = me->end; /* wrap around */
    // }
    // else {
    //     --me->head;
    // }
    circular_buffer_push(me->evt_queue, e); /* insert event into the queue */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fd0e 	bl	800a500 <circular_buffer_push>
    //++me->nUsed;
    task_readySet |= (1U << (me->prio - 1U));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7c5b      	ldrb	r3, [r3, #17]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	2201      	movs	r2, #1
 800aaec:	409a      	lsls	r2, r3
 800aaee:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <SST_Task_post+0x38>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	4a03      	ldr	r2, [pc, #12]	@ (800ab04 <SST_Task_post+0x38>)
 800aaf6:	6013      	str	r3, [r2, #0]
    SST_PORT_CRIT_EXIT();
 800aaf8:	b662      	cpsie	i
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	2000e18c 	.word	0x2000e18c

0800ab08 <SST_TimeEvt_ctor>:
/*..........................................................................*/
void SST_TimeEvt_ctor(
    SST_TimeEvt * const me,
    SST_Signal sig,
    SST_Task *task)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	460b      	mov	r3, r1
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	817b      	strh	r3, [r7, #10]
    me->super.sig = sig;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	897a      	ldrh	r2, [r7, #10]
 800ab1a:	801a      	strh	r2, [r3, #0]
    me->task = task;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	609a      	str	r2, [r3, #8]
    me->ctr = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	819a      	strh	r2, [r3, #12]
    me->interval = 0U;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	81da      	strh	r2, [r3, #14]

    /* insert time event "me" into the linked-list */
    me->next = timeEvt_head;
 800ab2e:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <SST_TimeEvt_ctor+0x40>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
    timeEvt_head = me;
 800ab36:	4a04      	ldr	r2, [pc, #16]	@ (800ab48 <SST_TimeEvt_ctor+0x40>)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6013      	str	r3, [r2, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	2000e218 	.word	0x2000e218

0800ab4c <SST_TimeEvt_arm>:
/*..........................................................................*/
void SST_TimeEvt_arm(
    SST_TimeEvt * const me,
    SST_TCtr ctr,
    SST_TCtr interval)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	807b      	strh	r3, [r7, #2]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	803b      	strh	r3, [r7, #0]
    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 800ab5c:	b672      	cpsid	i
    me->ctr = ctr;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	887a      	ldrh	r2, [r7, #2]
 800ab62:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	883a      	ldrh	r2, [r7, #0]
 800ab68:	81da      	strh	r2, [r3, #14]
    SST_PORT_CRIT_EXIT();
 800ab6a:	b662      	cpsie	i
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <SST_TimeEvt_disarm>:
/*..........................................................................*/
bool SST_TimeEvt_disarm(SST_TimeEvt * const me) {
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 800ab80:	b672      	cpsid	i
    bool status = (me->ctr != 0U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	899b      	ldrh	r3, [r3, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bf14      	ite	ne
 800ab8a:	2301      	movne	r3, #1
 800ab8c:	2300      	moveq	r3, #0
 800ab8e:	73fb      	strb	r3, [r7, #15]
    me->ctr = 0U;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	819a      	strh	r2, [r3, #12]
    me->interval = 0U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	81da      	strh	r2, [r3, #14]
    SST_PORT_CRIT_EXIT();
 800ab9c:	b662      	cpsie	i
    return status;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <SST_TimeEvt_tick>:
/*..........................................................................*/
void SST_TimeEvt_tick(void) {
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
    SST_tick++; /* increment the SST tick counter */
 800abb2:	4b19      	ldr	r3, [pc, #100]	@ (800ac18 <SST_TimeEvt_tick+0x6c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3301      	adds	r3, #1
 800abb8:	4a17      	ldr	r2, [pc, #92]	@ (800ac18 <SST_TimeEvt_tick+0x6c>)
 800abba:	6013      	str	r3, [r2, #0]
    for (SST_TimeEvt *t = timeEvt_head;
 800abbc:	4b17      	ldr	r3, [pc, #92]	@ (800ac1c <SST_TimeEvt_tick+0x70>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	607b      	str	r3, [r7, #4]
 800abc2:	e021      	b.n	800ac08 <SST_TimeEvt_tick+0x5c>
         t != (SST_TimeEvt *)0;
         t = t->next)
    {
        SST_PORT_CRIT_STAT
        SST_PORT_CRIT_ENTRY();
 800abc4:	b672      	cpsid	i
        if (t->ctr == 0U) { /* disarmed? (most frequent case) */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	899b      	ldrh	r3, [r3, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <SST_TimeEvt_tick+0x26>
            SST_PORT_CRIT_EXIT();
 800abce:	b662      	cpsie	i
 800abd0:	e017      	b.n	800ac02 <SST_TimeEvt_tick+0x56>
        }
        else if (t->ctr == 1U) { /* expiring? */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	899b      	ldrh	r3, [r3, #12]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d10c      	bne.n	800abf4 <SST_TimeEvt_tick+0x48>
            t->ctr = t->interval;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	89da      	ldrh	r2, [r3, #14]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	819a      	strh	r2, [r3, #12]
            SST_PORT_CRIT_EXIT();
 800abe2:	b662      	cpsie	i

            SST_Task_post(t->task, &t->super);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ff6d 	bl	800aacc <SST_Task_post>
 800abf2:	e006      	b.n	800ac02 <SST_TimeEvt_tick+0x56>
        }
        else { /* timing out */
            --t->ctr;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	899b      	ldrh	r3, [r3, #12]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	819a      	strh	r2, [r3, #12]
            SST_PORT_CRIT_EXIT();
 800ac00:	b662      	cpsie	i
         t = t->next)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	607b      	str	r3, [r7, #4]
         t != (SST_TimeEvt *)0;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1da      	bne.n	800abc4 <SST_TimeEvt_tick+0x18>
        }
    }
}
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	2000e190 	.word	0x2000e190
 800ac1c:	2000e218 	.word	0x2000e218

0800ac20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac24:	2003      	movs	r0, #3
 800ac26:	f000 fd55 	bl	800b6d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ac2a:	200f      	movs	r0, #15
 800ac2c:	f000 f806 	bl	800ac3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ac30:	f7f7 ff28 	bl	8002a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ac44:	4b12      	ldr	r3, [pc, #72]	@ (800ac90 <HAL_InitTick+0x54>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	4b12      	ldr	r3, [pc, #72]	@ (800ac94 <HAL_InitTick+0x58>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ac52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fd6f 	bl	800b73e <HAL_SYSTICK_Config>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e00e      	b.n	800ac88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b0f      	cmp	r3, #15
 800ac6e:	d80a      	bhi.n	800ac86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac70:	2200      	movs	r2, #0
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	f000 fd37 	bl	800b6ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ac7c:	4a06      	ldr	r2, [pc, #24]	@ (800ac98 <HAL_InitTick+0x5c>)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e000      	b.n	800ac88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000000 	.word	0x20000000
 800ac94:	200041bc 	.word	0x200041bc
 800ac98:	200041b8 	.word	0x200041b8

0800ac9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aca0:	4b06      	ldr	r3, [pc, #24]	@ (800acbc <HAL_IncTick+0x20>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b06      	ldr	r3, [pc, #24]	@ (800acc0 <HAL_IncTick+0x24>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4413      	add	r3, r2
 800acac:	4a04      	ldr	r2, [pc, #16]	@ (800acc0 <HAL_IncTick+0x24>)
 800acae:	6013      	str	r3, [r2, #0]
}
 800acb0:	bf00      	nop
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	200041bc 	.word	0x200041bc
 800acc0:	2000e21c 	.word	0x2000e21c

0800acc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
  return uwTick;
 800acc8:	4b03      	ldr	r3, [pc, #12]	@ (800acd8 <HAL_GetTick+0x14>)
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	2000e21c 	.word	0x2000e21c

0800acdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e031      	b.n	800ad56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7f7 fee6 	bl	8002acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d116      	bne.n	800ad48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad1e:	4b10      	ldr	r3, [pc, #64]	@ (800ad60 <HAL_ADC_Init+0x84>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	f043 0202 	orr.w	r2, r3, #2
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa86 	bl	800b23c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3a:	f023 0303 	bic.w	r3, r3, #3
 800ad3e:	f043 0201 	orr.w	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	641a      	str	r2, [r3, #64]	@ 0x40
 800ad46:	e001      	b.n	800ad4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	ffffeefd 	.word	0xffffeefd

0800ad64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_ADC_Start_DMA+0x22>
 800ad82:	2302      	movs	r3, #2
 800ad84:	e0d6      	b.n	800af34 <HAL_ADC_Start_DMA+0x1d0>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d018      	beq.n	800adce <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800adac:	4b63      	ldr	r3, [pc, #396]	@ (800af3c <HAL_ADC_Start_DMA+0x1d8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a63      	ldr	r2, [pc, #396]	@ (800af40 <HAL_ADC_Start_DMA+0x1dc>)
 800adb2:	fba2 2303 	umull	r2, r3, r2, r3
 800adb6:	0c9a      	lsrs	r2, r3, #18
 800adb8:	4613      	mov	r3, r2
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	4413      	add	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800adc0:	e002      	b.n	800adc8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1f9      	bne.n	800adc2 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b01      	cmp	r3, #1
 800adda:	f040 809e 	bne.w	800af1a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ade2:	4b58      	ldr	r3, [pc, #352]	@ (800af44 <HAL_ADC_Start_DMA+0x1e0>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d007      	beq.n	800ae0c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800ae04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae18:	d106      	bne.n	800ae28 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae1e:	f023 0206 	bic.w	r2, r3, #6
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	645a      	str	r2, [r3, #68]	@ 0x44
 800ae26:	e002      	b.n	800ae2e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	4a43      	ldr	r2, [pc, #268]	@ (800af48 <HAL_ADC_Start_DMA+0x1e4>)
 800ae3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae42:	4a42      	ldr	r2, [pc, #264]	@ (800af4c <HAL_ADC_Start_DMA+0x1e8>)
 800ae44:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae4a:	4a41      	ldr	r2, [pc, #260]	@ (800af50 <HAL_ADC_Start_DMA+0x1ec>)
 800ae4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800ae56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ae66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689a      	ldr	r2, [r3, #8]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	334c      	adds	r3, #76	@ 0x4c
 800ae82:	4619      	mov	r1, r3
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f000 fd14 	bl	800b8b4 <HAL_DMA_Start_IT>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800ae90:	4b30      	ldr	r3, [pc, #192]	@ (800af54 <HAL_ADC_Start_DMA+0x1f0>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f003 031f 	and.w	r3, r3, #31
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10f      	bne.n	800aebc <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d143      	bne.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800aeb8:	609a      	str	r2, [r3, #8]
 800aeba:	e03a      	b.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a25      	ldr	r2, [pc, #148]	@ (800af58 <HAL_ADC_Start_DMA+0x1f4>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d10e      	bne.n	800aee4 <HAL_ADC_Start_DMA+0x180>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d107      	bne.n	800aee4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800aee2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800aee4:	4b1b      	ldr	r3, [pc, #108]	@ (800af54 <HAL_ADC_Start_DMA+0x1f0>)
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d120      	bne.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a19      	ldr	r2, [pc, #100]	@ (800af5c <HAL_ADC_Start_DMA+0x1f8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d11b      	bne.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d114      	bne.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800af16:	609a      	str	r2, [r3, #8]
 800af18:	e00b      	b.n	800af32 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	f043 0210 	orr.w	r2, r3, #16
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af2a:	f043 0201 	orr.w	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20000000 	.word	0x20000000
 800af40:	431bde83 	.word	0x431bde83
 800af44:	fffff8fe 	.word	0xfffff8fe
 800af48:	0800b431 	.word	0x0800b431
 800af4c:	0800b4eb 	.word	0x0800b4eb
 800af50:	0800b507 	.word	0x0800b507
 800af54:	40012300 	.word	0x40012300
 800af58:	40012000 	.word	0x40012000
 800af5c:	40012200 	.word	0x40012200

0800af60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_ADC_ConfigChannel+0x1c>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e13a      	b.n	800b21a <HAL_ADC_ConfigChannel+0x292>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d93a      	bls.n	800b02a <HAL_ADC_ConfigChannel+0xa2>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afbc:	d035      	beq.n	800b02a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68d9      	ldr	r1, [r3, #12]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	461a      	mov	r2, r3
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	3b1e      	subs	r3, #30
 800afd4:	2207      	movs	r2, #7
 800afd6:	fa02 f303 	lsl.w	r3, r2, r3
 800afda:	43da      	mvns	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	400a      	ands	r2, r1
 800afe2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a8f      	ldr	r2, [pc, #572]	@ (800b228 <HAL_ADC_ConfigChannel+0x2a0>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d10a      	bne.n	800b004 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68d9      	ldr	r1, [r3, #12]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	061a      	lsls	r2, r3, #24
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b002:	e039      	b.n	800b078 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68d9      	ldr	r1, [r3, #12]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	4618      	mov	r0, r3
 800b016:	4603      	mov	r3, r0
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4403      	add	r3, r0
 800b01c:	3b1e      	subs	r3, #30
 800b01e:	409a      	lsls	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b028:	e026      	b.n	800b078 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6919      	ldr	r1, [r3, #16]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	b29b      	uxth	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	4613      	mov	r3, r2
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	4413      	add	r3, r2
 800b03e:	f003 031f 	and.w	r3, r3, #31
 800b042:	2207      	movs	r2, #7
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	43da      	mvns	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	400a      	ands	r2, r1
 800b050:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6919      	ldr	r1, [r3, #16]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	b29b      	uxth	r3, r3
 800b062:	4618      	mov	r0, r3
 800b064:	4603      	mov	r3, r0
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	4403      	add	r3, r0
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	409a      	lsls	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2b06      	cmp	r3, #6
 800b07e:	d824      	bhi.n	800b0ca <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	3b05      	subs	r3, #5
 800b092:	221f      	movs	r2, #31
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	43da      	mvns	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	400a      	ands	r2, r1
 800b0a0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	3b05      	subs	r3, #5
 800b0bc:	fa00 f203 	lsl.w	r2, r0, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	635a      	str	r2, [r3, #52]	@ 0x34
 800b0c8:	e04c      	b.n	800b164 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2b0c      	cmp	r3, #12
 800b0d0:	d824      	bhi.n	800b11c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	3b23      	subs	r3, #35	@ 0x23
 800b0e4:	221f      	movs	r2, #31
 800b0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ea:	43da      	mvns	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	400a      	ands	r2, r1
 800b0f2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	4618      	mov	r0, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	3b23      	subs	r3, #35	@ 0x23
 800b10e:	fa00 f203 	lsl.w	r2, r0, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	631a      	str	r2, [r3, #48]	@ 0x30
 800b11a:	e023      	b.n	800b164 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	3b41      	subs	r3, #65	@ 0x41
 800b12e:	221f      	movs	r2, #31
 800b130:	fa02 f303 	lsl.w	r3, r2, r3
 800b134:	43da      	mvns	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	400a      	ands	r2, r1
 800b13c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4618      	mov	r0, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	3b41      	subs	r3, #65	@ 0x41
 800b158:	fa00 f203 	lsl.w	r2, r0, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a30      	ldr	r2, [pc, #192]	@ (800b22c <HAL_ADC_ConfigChannel+0x2a4>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d10a      	bne.n	800b184 <HAL_ADC_ConfigChannel+0x1fc>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b176:	d105      	bne.n	800b184 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800b178:	4b2d      	ldr	r3, [pc, #180]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	4a2c      	ldr	r2, [pc, #176]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b17e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b182:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a28      	ldr	r2, [pc, #160]	@ (800b22c <HAL_ADC_ConfigChannel+0x2a4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d10f      	bne.n	800b1ae <HAL_ADC_ConfigChannel+0x226>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b12      	cmp	r3, #18
 800b194:	d10b      	bne.n	800b1ae <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800b196:	4b26      	ldr	r3, [pc, #152]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	4a25      	ldr	r2, [pc, #148]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b19c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b1a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800b1a2:	4b23      	ldr	r3, [pc, #140]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	4a22      	ldr	r2, [pc, #136]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b1ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b22c <HAL_ADC_ConfigChannel+0x2a4>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d12b      	bne.n	800b210 <HAL_ADC_ConfigChannel+0x288>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b228 <HAL_ADC_ConfigChannel+0x2a0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d003      	beq.n	800b1ca <HAL_ADC_ConfigChannel+0x242>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b11      	cmp	r3, #17
 800b1c8:	d122      	bne.n	800b210 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800b1ca:	4b19      	ldr	r3, [pc, #100]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4a18      	ldr	r2, [pc, #96]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800b1d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b1d6:	4b16      	ldr	r3, [pc, #88]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4a15      	ldr	r2, [pc, #84]	@ (800b230 <HAL_ADC_ConfigChannel+0x2a8>)
 800b1dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b1e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a10      	ldr	r2, [pc, #64]	@ (800b228 <HAL_ADC_ConfigChannel+0x2a0>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d111      	bne.n	800b210 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b1ec:	4b11      	ldr	r3, [pc, #68]	@ (800b234 <HAL_ADC_ConfigChannel+0x2ac>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a11      	ldr	r2, [pc, #68]	@ (800b238 <HAL_ADC_ConfigChannel+0x2b0>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	0c9a      	lsrs	r2, r3, #18
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b202:	e002      	b.n	800b20a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3b01      	subs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1f9      	bne.n	800b204 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	10000012 	.word	0x10000012
 800b22c:	40012000 	.word	0x40012000
 800b230:	40012300 	.word	0x40012300
 800b234:	20000000 	.word	0x20000000
 800b238:	431bde83 	.word	0x431bde83

0800b23c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800b244:	4b78      	ldr	r3, [pc, #480]	@ (800b428 <ADC_Init+0x1ec>)
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	4a77      	ldr	r2, [pc, #476]	@ (800b428 <ADC_Init+0x1ec>)
 800b24a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b24e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800b250:	4b75      	ldr	r3, [pc, #468]	@ (800b428 <ADC_Init+0x1ec>)
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4973      	ldr	r1, [pc, #460]	@ (800b428 <ADC_Init+0x1ec>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b26c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6859      	ldr	r1, [r3, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	021a      	lsls	r2, r3, #8
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800b290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6859      	ldr	r1, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6899      	ldr	r1, [r3, #8]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ca:	4a58      	ldr	r2, [pc, #352]	@ (800b42c <ADC_Init+0x1f0>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d022      	beq.n	800b316 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b2de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6899      	ldr	r1, [r3, #8]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6899      	ldr	r1, [r3, #8]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	609a      	str	r2, [r3, #8]
 800b314:	e00f      	b.n	800b336 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 0202 	bic.w	r2, r2, #2
 800b344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6899      	ldr	r1, [r3, #8]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	005a      	lsls	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	430a      	orrs	r2, r1
 800b358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01b      	beq.n	800b39c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800b382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6859      	ldr	r1, [r3, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38e:	3b01      	subs	r3, #1
 800b390:	035a      	lsls	r2, r3, #13
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
 800b39a:	e007      	b.n	800b3ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	051a      	lsls	r2, r3, #20
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b3e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6899      	ldr	r1, [r3, #8]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3ee:	025a      	lsls	r2, r3, #9
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6899      	ldr	r1, [r3, #8]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	029a      	lsls	r2, r3, #10
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	430a      	orrs	r2, r1
 800b41a:	609a      	str	r2, [r3, #8]
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	40012300 	.word	0x40012300
 800b42c:	0f000001 	.word	0x0f000001

0800b430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b442:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b446:	2b00      	cmp	r3, #0
 800b448:	d13c      	bne.n	800b4c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d12b      	bne.n	800b4bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d127      	bne.n	800b4bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b472:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b476:	2b00      	cmp	r3, #0
 800b478:	d006      	beq.n	800b488 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b484:	2b00      	cmp	r3, #0
 800b486:	d119      	bne.n	800b4bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0220 	bic.w	r2, r2, #32
 800b496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b49c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d105      	bne.n	800b4bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b4:	f043 0201 	orr.w	r2, r3, #1
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f7fa fc25 	bl	8005d0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b4c2:	e00e      	b.n	800b4e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c8:	f003 0310 	and.w	r3, r3, #16
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff fd4f 	bl	800af74 <HAL_ADC_ErrorCallback>
}
 800b4d6:	e004      	b.n	800b4e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	4798      	blx	r3
}
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fd31 	bl	800af60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b512:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2240      	movs	r2, #64	@ 0x40
 800b518:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51e:	f043 0204 	orr.w	r2, r3, #4
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fd24 	bl	800af74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b52c:	bf00      	nop
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <__NVIC_SetPriorityGrouping>:
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b544:	4b0b      	ldr	r3, [pc, #44]	@ (800b574 <__NVIC_SetPriorityGrouping+0x40>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b550:	4013      	ands	r3, r2
 800b552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b55c:	4b06      	ldr	r3, [pc, #24]	@ (800b578 <__NVIC_SetPriorityGrouping+0x44>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b562:	4a04      	ldr	r2, [pc, #16]	@ (800b574 <__NVIC_SetPriorityGrouping+0x40>)
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	60d3      	str	r3, [r2, #12]
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	e000ed00 	.word	0xe000ed00
 800b578:	05fa0000 	.word	0x05fa0000

0800b57c <__NVIC_GetPriorityGrouping>:
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b580:	4b04      	ldr	r3, [pc, #16]	@ (800b594 <__NVIC_GetPriorityGrouping+0x18>)
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	f003 0307 	and.w	r3, r3, #7
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	e000ed00 	.word	0xe000ed00

0800b598 <__NVIC_EnableIRQ>:
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	db0b      	blt.n	800b5c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	f003 021f 	and.w	r2, r3, #31
 800b5b0:	4907      	ldr	r1, [pc, #28]	@ (800b5d0 <__NVIC_EnableIRQ+0x38>)
 800b5b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b6:	095b      	lsrs	r3, r3, #5
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	fa00 f202 	lsl.w	r2, r0, r2
 800b5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b5c2:	bf00      	nop
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	e000e100 	.word	0xe000e100

0800b5d4 <__NVIC_SetPriority>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	6039      	str	r1, [r7, #0]
 800b5de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	db0a      	blt.n	800b5fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	490c      	ldr	r1, [pc, #48]	@ (800b620 <__NVIC_SetPriority+0x4c>)
 800b5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5f2:	0112      	lsls	r2, r2, #4
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b5fc:	e00a      	b.n	800b614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	b2da      	uxtb	r2, r3
 800b602:	4908      	ldr	r1, [pc, #32]	@ (800b624 <__NVIC_SetPriority+0x50>)
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	f003 030f 	and.w	r3, r3, #15
 800b60a:	3b04      	subs	r3, #4
 800b60c:	0112      	lsls	r2, r2, #4
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	440b      	add	r3, r1
 800b612:	761a      	strb	r2, [r3, #24]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	e000e100 	.word	0xe000e100
 800b624:	e000ed00 	.word	0xe000ed00

0800b628 <NVIC_EncodePriority>:
{
 800b628:	b480      	push	{r7}
 800b62a:	b089      	sub	sp, #36	@ 0x24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	f1c3 0307 	rsb	r3, r3, #7
 800b642:	2b04      	cmp	r3, #4
 800b644:	bf28      	it	cs
 800b646:	2304      	movcs	r3, #4
 800b648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	3304      	adds	r3, #4
 800b64e:	2b06      	cmp	r3, #6
 800b650:	d902      	bls.n	800b658 <NVIC_EncodePriority+0x30>
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	3b03      	subs	r3, #3
 800b656:	e000      	b.n	800b65a <NVIC_EncodePriority+0x32>
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b65c:	f04f 32ff 	mov.w	r2, #4294967295
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	fa02 f303 	lsl.w	r3, r2, r3
 800b666:	43da      	mvns	r2, r3
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	401a      	ands	r2, r3
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b670:	f04f 31ff 	mov.w	r1, #4294967295
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	fa01 f303 	lsl.w	r3, r1, r3
 800b67a:	43d9      	mvns	r1, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b680:	4313      	orrs	r3, r2
}
 800b682:	4618      	mov	r0, r3
 800b684:	3724      	adds	r7, #36	@ 0x24
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
	...

0800b690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6a0:	d301      	bcc.n	800b6a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e00f      	b.n	800b6c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b6a6:	4a0a      	ldr	r2, [pc, #40]	@ (800b6d0 <SysTick_Config+0x40>)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b6ae:	210f      	movs	r1, #15
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	f7ff ff8e 	bl	800b5d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b6b8:	4b05      	ldr	r3, [pc, #20]	@ (800b6d0 <SysTick_Config+0x40>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b6be:	4b04      	ldr	r3, [pc, #16]	@ (800b6d0 <SysTick_Config+0x40>)
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	e000e010 	.word	0xe000e010

0800b6d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff ff29 	bl	800b534 <__NVIC_SetPriorityGrouping>
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b086      	sub	sp, #24
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
 800b6f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b6fc:	f7ff ff3e 	bl	800b57c <__NVIC_GetPriorityGrouping>
 800b700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	6978      	ldr	r0, [r7, #20]
 800b708:	f7ff ff8e 	bl	800b628 <NVIC_EncodePriority>
 800b70c:	4602      	mov	r2, r0
 800b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b712:	4611      	mov	r1, r2
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff ff5d 	bl	800b5d4 <__NVIC_SetPriority>
}
 800b71a:	bf00      	nop
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	4603      	mov	r3, r0
 800b72a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b72c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff ff31 	bl	800b598 <__NVIC_EnableIRQ>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff ffa2 	bl	800b690 <SysTick_Config>
 800b74c:	4603      	mov	r3, r0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b764:	f7ff faae 	bl	800acc4 <HAL_GetTick>
 800b768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e099      	b.n	800b8a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f022 0201 	bic.w	r2, r2, #1
 800b792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b794:	e00f      	b.n	800b7b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b796:	f7ff fa95 	bl	800acc4 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	2b05      	cmp	r3, #5
 800b7a2:	d908      	bls.n	800b7b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e078      	b.n	800b8a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e8      	bne.n	800b796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4b38      	ldr	r3, [pc, #224]	@ (800b8b0 <HAL_DMA_Init+0x158>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b7e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	4313      	orrs	r3, r2
 800b806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d107      	bne.n	800b820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b818:	4313      	orrs	r3, r2
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f023 0307 	bic.w	r3, r3, #7
 800b836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b846:	2b04      	cmp	r3, #4
 800b848:	d117      	bne.n	800b87a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	4313      	orrs	r3, r2
 800b852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00e      	beq.n	800b87a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fa77 	bl	800bd50 <DMA_CheckFifoParam>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d008      	beq.n	800b87a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2240      	movs	r2, #64	@ 0x40
 800b86c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b876:	2301      	movs	r3, #1
 800b878:	e016      	b.n	800b8a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa2e 	bl	800bce4 <DMA_CalcBaseAndBitshift>
 800b888:	4603      	mov	r3, r0
 800b88a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b890:	223f      	movs	r2, #63	@ 0x3f
 800b892:	409a      	lsls	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	e010803f 	.word	0xe010803f

0800b8b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d101      	bne.n	800b8da <HAL_DMA_Start_IT+0x26>
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e048      	b.n	800b96c <HAL_DMA_Start_IT+0xb8>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d137      	bne.n	800b95e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f9c0 	bl	800bc88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b90c:	223f      	movs	r2, #63	@ 0x3f
 800b90e:	409a      	lsls	r2, r3
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0216 	orr.w	r2, r2, #22
 800b922:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695a      	ldr	r2, [r3, #20]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b932:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0208 	orr.w	r2, r2, #8
 800b94a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f042 0201 	orr.w	r2, r2, #1
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	e005      	b.n	800b96a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b966:	2302      	movs	r3, #2
 800b968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b980:	4b8e      	ldr	r3, [pc, #568]	@ (800bbbc <HAL_DMA_IRQHandler+0x248>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a8e      	ldr	r2, [pc, #568]	@ (800bbc0 <HAL_DMA_IRQHandler+0x24c>)
 800b986:	fba2 2303 	umull	r2, r3, r2, r3
 800b98a:	0a9b      	lsrs	r3, r3, #10
 800b98c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b99e:	2208      	movs	r2, #8
 800b9a0:	409a      	lsls	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d01a      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d013      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0204 	bic.w	r2, r2, #4
 800b9c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9cc:	2208      	movs	r2, #8
 800b9ce:	409a      	lsls	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d8:	f043 0201 	orr.w	r2, r3, #1
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	409a      	lsls	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d012      	beq.n	800ba16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba02:	2201      	movs	r2, #1
 800ba04:	409a      	lsls	r2, r3
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba0e:	f043 0202 	orr.w	r2, r3, #2
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	409a      	lsls	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4013      	ands	r3, r2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d012      	beq.n	800ba4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba38:	2204      	movs	r2, #4
 800ba3a:	409a      	lsls	r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba44:	f043 0204 	orr.w	r2, r3, #4
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba50:	2210      	movs	r2, #16
 800ba52:	409a      	lsls	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4013      	ands	r3, r2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d043      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d03c      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba6e:	2210      	movs	r2, #16
 800ba70:	409a      	lsls	r2, r3
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d018      	beq.n	800bab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d108      	bne.n	800baa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d024      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	4798      	blx	r3
 800baa2:	e01f      	b.n	800bae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d01b      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	4798      	blx	r3
 800bab4:	e016      	b.n	800bae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d107      	bne.n	800bad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 0208 	bic.w	r2, r2, #8
 800bad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bae8:	2220      	movs	r2, #32
 800baea:	409a      	lsls	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4013      	ands	r3, r2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 808f 	beq.w	800bc14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0310 	and.w	r3, r3, #16
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8087 	beq.w	800bc14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	409a      	lsls	r2, r3
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d136      	bne.n	800bb8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0216 	bic.w	r2, r2, #22
 800bb2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	695a      	ldr	r2, [r3, #20]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d103      	bne.n	800bb4e <HAL_DMA_IRQHandler+0x1da>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d007      	beq.n	800bb5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0208 	bic.w	r2, r2, #8
 800bb5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb62:	223f      	movs	r2, #63	@ 0x3f
 800bb64:	409a      	lsls	r2, r3
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d07e      	beq.n	800bc80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	4798      	blx	r3
        }
        return;
 800bb8a:	e079      	b.n	800bc80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d01d      	beq.n	800bbd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10d      	bne.n	800bbc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d031      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	4798      	blx	r3
 800bbb8:	e02c      	b.n	800bc14 <HAL_DMA_IRQHandler+0x2a0>
 800bbba:	bf00      	nop
 800bbbc:	20000000 	.word	0x20000000
 800bbc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d023      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
 800bbd4:	e01e      	b.n	800bc14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10f      	bne.n	800bc04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f022 0210 	bic.w	r2, r2, #16
 800bbf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d032      	beq.n	800bc82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d022      	beq.n	800bc6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f022 0201 	bic.w	r2, r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60bb      	str	r3, [r7, #8]
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d307      	bcc.n	800bc5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1f2      	bne.n	800bc40 <HAL_DMA_IRQHandler+0x2cc>
 800bc5a:	e000      	b.n	800bc5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bc5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d005      	beq.n	800bc82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	4798      	blx	r3
 800bc7e:	e000      	b.n	800bc82 <HAL_DMA_IRQHandler+0x30e>
        return;
 800bc80:	bf00      	nop
    }
  }
}
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
 800bc94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	2b40      	cmp	r3, #64	@ 0x40
 800bcb4:	d108      	bne.n	800bcc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bcc6:	e007      	b.n	800bcd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	60da      	str	r2, [r3, #12]
}
 800bcd8:	bf00      	nop
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	3b10      	subs	r3, #16
 800bcf4:	4a13      	ldr	r2, [pc, #76]	@ (800bd44 <DMA_CalcBaseAndBitshift+0x60>)
 800bcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfa:	091b      	lsrs	r3, r3, #4
 800bcfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bcfe:	4a12      	ldr	r2, [pc, #72]	@ (800bd48 <DMA_CalcBaseAndBitshift+0x64>)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4413      	add	r3, r2
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d908      	bls.n	800bd24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	4b0c      	ldr	r3, [pc, #48]	@ (800bd4c <DMA_CalcBaseAndBitshift+0x68>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	1d1a      	adds	r2, r3, #4
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd22:	e006      	b.n	800bd32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4b08      	ldr	r3, [pc, #32]	@ (800bd4c <DMA_CalcBaseAndBitshift+0x68>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	aaaaaaab 	.word	0xaaaaaaab
 800bd48:	08012758 	.word	0x08012758
 800bd4c:	fffffc00 	.word	0xfffffc00

0800bd50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d11f      	bne.n	800bdaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d856      	bhi.n	800be1e <DMA_CheckFifoParam+0xce>
 800bd70:	a201      	add	r2, pc, #4	@ (adr r2, 800bd78 <DMA_CheckFifoParam+0x28>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800bd89 	.word	0x0800bd89
 800bd7c:	0800bd9b 	.word	0x0800bd9b
 800bd80:	0800bd89 	.word	0x0800bd89
 800bd84:	0800be1f 	.word	0x0800be1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d046      	beq.n	800be22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bd98:	e043      	b.n	800be22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bda2:	d140      	bne.n	800be26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bda8:	e03d      	b.n	800be26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdb2:	d121      	bne.n	800bdf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d837      	bhi.n	800be2a <DMA_CheckFifoParam+0xda>
 800bdba:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc0 <DMA_CheckFifoParam+0x70>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd1 	.word	0x0800bdd1
 800bdc4:	0800bdd7 	.word	0x0800bdd7
 800bdc8:	0800bdd1 	.word	0x0800bdd1
 800bdcc:	0800bde9 	.word	0x0800bde9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd4:	e030      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d025      	beq.n	800be2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bde6:	e022      	b.n	800be2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bdf0:	d11f      	bne.n	800be32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bdf6:	e01c      	b.n	800be32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d903      	bls.n	800be06 <DMA_CheckFifoParam+0xb6>
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b03      	cmp	r3, #3
 800be02:	d003      	beq.n	800be0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800be04:	e018      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	73fb      	strb	r3, [r7, #15]
      break;
 800be0a:	e015      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00e      	beq.n	800be36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	73fb      	strb	r3, [r7, #15]
      break;
 800be1c:	e00b      	b.n	800be36 <DMA_CheckFifoParam+0xe6>
      break;
 800be1e:	bf00      	nop
 800be20:	e00a      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;
 800be22:	bf00      	nop
 800be24:	e008      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;
 800be26:	bf00      	nop
 800be28:	e006      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;   
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <DMA_CheckFifoParam+0xe8>
      break;
 800be36:	bf00      	nop
    }
  } 
  
  return status; 
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop

0800be48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be48:	b480      	push	{r7}
 800be4a:	b089      	sub	sp, #36	@ 0x24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800be52:	2300      	movs	r3, #0
 800be54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800be5a:	2300      	movs	r3, #0
 800be5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be5e:	2300      	movs	r3, #0
 800be60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800be62:	2300      	movs	r3, #0
 800be64:	61fb      	str	r3, [r7, #28]
 800be66:	e175      	b.n	800c154 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be68:	2201      	movs	r2, #1
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	fa02 f303 	lsl.w	r3, r2, r3
 800be70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4013      	ands	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	429a      	cmp	r2, r3
 800be82:	f040 8164 	bne.w	800c14e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f003 0303 	and.w	r3, r3, #3
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d005      	beq.n	800be9e <HAL_GPIO_Init+0x56>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d130      	bne.n	800bf00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	2203      	movs	r2, #3
 800beaa:	fa02 f303 	lsl.w	r3, r2, r3
 800beae:	43db      	mvns	r3, r3
 800beb0:	69ba      	ldr	r2, [r7, #24]
 800beb2:	4013      	ands	r3, r2
 800beb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68da      	ldr	r2, [r3, #12]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bed4:	2201      	movs	r2, #1
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	fa02 f303 	lsl.w	r3, r2, r3
 800bedc:	43db      	mvns	r3, r3
 800bede:	69ba      	ldr	r2, [r7, #24]
 800bee0:	4013      	ands	r3, r2
 800bee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	091b      	lsrs	r3, r3, #4
 800beea:	f003 0201 	and.w	r2, r3, #1
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	fa02 f303 	lsl.w	r3, r2, r3
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d017      	beq.n	800bf3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	2203      	movs	r2, #3
 800bf18:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1c:	43db      	mvns	r3, r3
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	4013      	ands	r3, r2
 800bf22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d123      	bne.n	800bf90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	08da      	lsrs	r2, r3, #3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3208      	adds	r2, #8
 800bf50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f003 0307 	and.w	r3, r3, #7
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	220f      	movs	r2, #15
 800bf60:	fa02 f303 	lsl.w	r3, r2, r3
 800bf64:	43db      	mvns	r3, r3
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	691a      	ldr	r2, [r3, #16]
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7c:	69ba      	ldr	r2, [r7, #24]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	08da      	lsrs	r2, r3, #3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3208      	adds	r2, #8
 800bf8a:	69b9      	ldr	r1, [r7, #24]
 800bf8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa0:	43db      	mvns	r3, r3
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f003 0203 	and.w	r2, r3, #3
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 80be 	beq.w	800c14e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bfd2:	4b66      	ldr	r3, [pc, #408]	@ (800c16c <HAL_GPIO_Init+0x324>)
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfd6:	4a65      	ldr	r2, [pc, #404]	@ (800c16c <HAL_GPIO_Init+0x324>)
 800bfd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfdc:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfde:	4b63      	ldr	r3, [pc, #396]	@ (800c16c <HAL_GPIO_Init+0x324>)
 800bfe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bfea:	4a61      	ldr	r2, [pc, #388]	@ (800c170 <HAL_GPIO_Init+0x328>)
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	089b      	lsrs	r3, r3, #2
 800bff0:	3302      	adds	r3, #2
 800bff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	220f      	movs	r2, #15
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	43db      	mvns	r3, r3
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	4013      	ands	r3, r2
 800c00c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a58      	ldr	r2, [pc, #352]	@ (800c174 <HAL_GPIO_Init+0x32c>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d037      	beq.n	800c086 <HAL_GPIO_Init+0x23e>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a57      	ldr	r2, [pc, #348]	@ (800c178 <HAL_GPIO_Init+0x330>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d031      	beq.n	800c082 <HAL_GPIO_Init+0x23a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a56      	ldr	r2, [pc, #344]	@ (800c17c <HAL_GPIO_Init+0x334>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d02b      	beq.n	800c07e <HAL_GPIO_Init+0x236>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a55      	ldr	r2, [pc, #340]	@ (800c180 <HAL_GPIO_Init+0x338>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d025      	beq.n	800c07a <HAL_GPIO_Init+0x232>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a54      	ldr	r2, [pc, #336]	@ (800c184 <HAL_GPIO_Init+0x33c>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d01f      	beq.n	800c076 <HAL_GPIO_Init+0x22e>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a53      	ldr	r2, [pc, #332]	@ (800c188 <HAL_GPIO_Init+0x340>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d019      	beq.n	800c072 <HAL_GPIO_Init+0x22a>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a52      	ldr	r2, [pc, #328]	@ (800c18c <HAL_GPIO_Init+0x344>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d013      	beq.n	800c06e <HAL_GPIO_Init+0x226>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a51      	ldr	r2, [pc, #324]	@ (800c190 <HAL_GPIO_Init+0x348>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d00d      	beq.n	800c06a <HAL_GPIO_Init+0x222>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a50      	ldr	r2, [pc, #320]	@ (800c194 <HAL_GPIO_Init+0x34c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d007      	beq.n	800c066 <HAL_GPIO_Init+0x21e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a4f      	ldr	r2, [pc, #316]	@ (800c198 <HAL_GPIO_Init+0x350>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d101      	bne.n	800c062 <HAL_GPIO_Init+0x21a>
 800c05e:	2309      	movs	r3, #9
 800c060:	e012      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c062:	230a      	movs	r3, #10
 800c064:	e010      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c066:	2308      	movs	r3, #8
 800c068:	e00e      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c06a:	2307      	movs	r3, #7
 800c06c:	e00c      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c06e:	2306      	movs	r3, #6
 800c070:	e00a      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c072:	2305      	movs	r3, #5
 800c074:	e008      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c076:	2304      	movs	r3, #4
 800c078:	e006      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c07a:	2303      	movs	r3, #3
 800c07c:	e004      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c07e:	2302      	movs	r3, #2
 800c080:	e002      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c082:	2301      	movs	r3, #1
 800c084:	e000      	b.n	800c088 <HAL_GPIO_Init+0x240>
 800c086:	2300      	movs	r3, #0
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	f002 0203 	and.w	r2, r2, #3
 800c08e:	0092      	lsls	r2, r2, #2
 800c090:	4093      	lsls	r3, r2
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	4313      	orrs	r3, r2
 800c096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c098:	4935      	ldr	r1, [pc, #212]	@ (800c170 <HAL_GPIO_Init+0x328>)
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	089b      	lsrs	r3, r3, #2
 800c09e:	3302      	adds	r3, #2
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c0a6:	4b3d      	ldr	r3, [pc, #244]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	43db      	mvns	r3, r3
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0ca:	4a34      	ldr	r2, [pc, #208]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c0d0:	4b32      	ldr	r3, [pc, #200]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	69ba      	ldr	r2, [r7, #24]
 800c0dc:	4013      	ands	r3, r2
 800c0de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c0f4:	4a29      	ldr	r2, [pc, #164]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c0fa:	4b28      	ldr	r3, [pc, #160]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	43db      	mvns	r3, r3
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	4013      	ands	r3, r2
 800c108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c116:	69ba      	ldr	r2, [r7, #24]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c11e:	4a1f      	ldr	r2, [pc, #124]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c124:	4b1d      	ldr	r3, [pc, #116]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	43db      	mvns	r3, r3
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	4013      	ands	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	4313      	orrs	r3, r2
 800c146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c148:	4a14      	ldr	r2, [pc, #80]	@ (800c19c <HAL_GPIO_Init+0x354>)
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	3301      	adds	r3, #1
 800c152:	61fb      	str	r3, [r7, #28]
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	f67f ae86 	bls.w	800be68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	3724      	adds	r7, #36	@ 0x24
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	40023800 	.word	0x40023800
 800c170:	40013800 	.word	0x40013800
 800c174:	40020000 	.word	0x40020000
 800c178:	40020400 	.word	0x40020400
 800c17c:	40020800 	.word	0x40020800
 800c180:	40020c00 	.word	0x40020c00
 800c184:	40021000 	.word	0x40021000
 800c188:	40021400 	.word	0x40021400
 800c18c:	40021800 	.word	0x40021800
 800c190:	40021c00 	.word	0x40021c00
 800c194:	40022000 	.word	0x40022000
 800c198:	40022400 	.word	0x40022400
 800c19c:	40013c00 	.word	0x40013c00

0800c1a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e049      	b.n	800c246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d106      	bne.n	800c1cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7f6 fd68 	bl	8002c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	f000 f900 	bl	800c3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c264:	2b01      	cmp	r3, #1
 800c266:	d101      	bne.n	800c26c <HAL_TIM_ConfigClockSource+0x1c>
 800c268:	2302      	movs	r3, #2
 800c26a:	e0b4      	b.n	800c3d6 <HAL_TIM_ConfigClockSource+0x186>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	4b56      	ldr	r3, [pc, #344]	@ (800c3e0 <HAL_TIM_ConfigClockSource+0x190>)
 800c288:	4013      	ands	r3, r2
 800c28a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2a4:	d03e      	beq.n	800c324 <HAL_TIM_ConfigClockSource+0xd4>
 800c2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2aa:	f200 8087 	bhi.w	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2b2:	f000 8086 	beq.w	800c3c2 <HAL_TIM_ConfigClockSource+0x172>
 800c2b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ba:	d87f      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2bc:	2b70      	cmp	r3, #112	@ 0x70
 800c2be:	d01a      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0xa6>
 800c2c0:	2b70      	cmp	r3, #112	@ 0x70
 800c2c2:	d87b      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2c4:	2b60      	cmp	r3, #96	@ 0x60
 800c2c6:	d050      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x11a>
 800c2c8:	2b60      	cmp	r3, #96	@ 0x60
 800c2ca:	d877      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2cc:	2b50      	cmp	r3, #80	@ 0x50
 800c2ce:	d03c      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0xfa>
 800c2d0:	2b50      	cmp	r3, #80	@ 0x50
 800c2d2:	d873      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2d4:	2b40      	cmp	r3, #64	@ 0x40
 800c2d6:	d058      	beq.n	800c38a <HAL_TIM_ConfigClockSource+0x13a>
 800c2d8:	2b40      	cmp	r3, #64	@ 0x40
 800c2da:	d86f      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2dc:	2b30      	cmp	r3, #48	@ 0x30
 800c2de:	d064      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x15a>
 800c2e0:	2b30      	cmp	r3, #48	@ 0x30
 800c2e2:	d86b      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	d060      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x15a>
 800c2e8:	2b20      	cmp	r3, #32
 800c2ea:	d867      	bhi.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d05c      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x15a>
 800c2f0:	2b10      	cmp	r3, #16
 800c2f2:	d05a      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x15a>
 800c2f4:	e062      	b.n	800c3bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c306:	f000 f98d 	bl	800c624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	609a      	str	r2, [r3, #8]
      break;
 800c322:	e04f      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c334:	f000 f976 	bl	800c624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c346:	609a      	str	r2, [r3, #8]
      break;
 800c348:	e03c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c356:	461a      	mov	r2, r3
 800c358:	f000 f8ea 	bl	800c530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2150      	movs	r1, #80	@ 0x50
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f943 	bl	800c5ee <TIM_ITRx_SetConfig>
      break;
 800c368:	e02c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c376:	461a      	mov	r2, r3
 800c378:	f000 f909 	bl	800c58e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2160      	movs	r1, #96	@ 0x60
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f933 	bl	800c5ee <TIM_ITRx_SetConfig>
      break;
 800c388:	e01c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c396:	461a      	mov	r2, r3
 800c398:	f000 f8ca 	bl	800c530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2140      	movs	r1, #64	@ 0x40
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f923 	bl	800c5ee <TIM_ITRx_SetConfig>
      break;
 800c3a8:	e00c      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f000 f91a 	bl	800c5ee <TIM_ITRx_SetConfig>
      break;
 800c3ba:	e003      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c0:	e000      	b.n	800c3c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c3c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	fffeff88 	.word	0xfffeff88

0800c3e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a43      	ldr	r2, [pc, #268]	@ (800c504 <TIM_Base_SetConfig+0x120>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d013      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c402:	d00f      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a40      	ldr	r2, [pc, #256]	@ (800c508 <TIM_Base_SetConfig+0x124>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00b      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a3f      	ldr	r2, [pc, #252]	@ (800c50c <TIM_Base_SetConfig+0x128>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d007      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a3e      	ldr	r2, [pc, #248]	@ (800c510 <TIM_Base_SetConfig+0x12c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d003      	beq.n	800c424 <TIM_Base_SetConfig+0x40>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a3d      	ldr	r2, [pc, #244]	@ (800c514 <TIM_Base_SetConfig+0x130>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d108      	bne.n	800c436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c42a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a32      	ldr	r2, [pc, #200]	@ (800c504 <TIM_Base_SetConfig+0x120>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d02b      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c444:	d027      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a2f      	ldr	r2, [pc, #188]	@ (800c508 <TIM_Base_SetConfig+0x124>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d023      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a2e      	ldr	r2, [pc, #184]	@ (800c50c <TIM_Base_SetConfig+0x128>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d01f      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a2d      	ldr	r2, [pc, #180]	@ (800c510 <TIM_Base_SetConfig+0x12c>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d01b      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a2c      	ldr	r2, [pc, #176]	@ (800c514 <TIM_Base_SetConfig+0x130>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d017      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a2b      	ldr	r2, [pc, #172]	@ (800c518 <TIM_Base_SetConfig+0x134>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d013      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a2a      	ldr	r2, [pc, #168]	@ (800c51c <TIM_Base_SetConfig+0x138>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00f      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a29      	ldr	r2, [pc, #164]	@ (800c520 <TIM_Base_SetConfig+0x13c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d00b      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a28      	ldr	r2, [pc, #160]	@ (800c524 <TIM_Base_SetConfig+0x140>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d007      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a27      	ldr	r2, [pc, #156]	@ (800c528 <TIM_Base_SetConfig+0x144>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d003      	beq.n	800c496 <TIM_Base_SetConfig+0xb2>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a26      	ldr	r2, [pc, #152]	@ (800c52c <TIM_Base_SetConfig+0x148>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d108      	bne.n	800c4a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c49c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c504 <TIM_Base_SetConfig+0x120>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d003      	beq.n	800c4d6 <TIM_Base_SetConfig+0xf2>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a10      	ldr	r2, [pc, #64]	@ (800c514 <TIM_Base_SetConfig+0x130>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d103      	bne.n	800c4de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	691a      	ldr	r2, [r3, #16]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f043 0204 	orr.w	r2, r3, #4
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	40010000 	.word	0x40010000
 800c508:	40000400 	.word	0x40000400
 800c50c:	40000800 	.word	0x40000800
 800c510:	40000c00 	.word	0x40000c00
 800c514:	40010400 	.word	0x40010400
 800c518:	40014000 	.word	0x40014000
 800c51c:	40014400 	.word	0x40014400
 800c520:	40014800 	.word	0x40014800
 800c524:	40001800 	.word	0x40001800
 800c528:	40001c00 	.word	0x40001c00
 800c52c:	40002000 	.word	0x40002000

0800c530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	f023 0201 	bic.w	r2, r3, #1
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c55a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	011b      	lsls	r3, r3, #4
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	4313      	orrs	r3, r2
 800c564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f023 030a 	bic.w	r3, r3, #10
 800c56c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	4313      	orrs	r3, r2
 800c574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	621a      	str	r2, [r3, #32]
}
 800c582:	bf00      	nop
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c58e:	b480      	push	{r7}
 800c590:	b087      	sub	sp, #28
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	f023 0210 	bic.w	r2, r3, #16
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c5b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	031b      	lsls	r3, r3, #12
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c5ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	011b      	lsls	r3, r3, #4
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	621a      	str	r2, [r3, #32]
}
 800c5e2:	bf00      	nop
 800c5e4:	371c      	adds	r7, #28
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	f043 0307 	orr.w	r3, r3, #7
 800c610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	609a      	str	r2, [r3, #8]
}
 800c618:	bf00      	nop
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c63e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	021a      	lsls	r2, r3, #8
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	431a      	orrs	r2, r3
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	4313      	orrs	r3, r2
 800c650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	609a      	str	r2, [r3, #8]
}
 800c658:	bf00      	nop
 800c65a:	371c      	adds	r7, #28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c674:	2b01      	cmp	r3, #1
 800c676:	d101      	bne.n	800c67c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c678:	2302      	movs	r3, #2
 800c67a:	e06d      	b.n	800c758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a30      	ldr	r2, [pc, #192]	@ (800c764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d004      	beq.n	800c6b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a2f      	ldr	r2, [pc, #188]	@ (800c768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d108      	bne.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c6b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a20      	ldr	r2, [pc, #128]	@ (800c764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d022      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ee:	d01d      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c76c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d018      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1c      	ldr	r2, [pc, #112]	@ (800c770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d013      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a1a      	ldr	r2, [pc, #104]	@ (800c774 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00e      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a15      	ldr	r2, [pc, #84]	@ (800c768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d009      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a16      	ldr	r2, [pc, #88]	@ (800c778 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d004      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a15      	ldr	r2, [pc, #84]	@ (800c77c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d10c      	bne.n	800c746 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	40010000 	.word	0x40010000
 800c768:	40010400 	.word	0x40010400
 800c76c:	40000400 	.word	0x40000400
 800c770:	40000800 	.word	0x40000800
 800c774:	40000c00 	.word	0x40000c00
 800c778:	40014000 	.word	0x40014000
 800c77c:	40001800 	.word	0x40001800

0800c780 <LL_GPIO_SetPinMode>:
{
 800c780:	b480      	push	{r7}
 800c782:	b089      	sub	sp, #36	@ 0x24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	fa93 f3a3 	rbit	r3, r3
 800c79a:	613b      	str	r3, [r7, #16]
  return result;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	fab3 f383 	clz	r3, r3
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	2103      	movs	r1, #3
 800c7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ac:	43db      	mvns	r3, r3
 800c7ae:	401a      	ands	r2, r3
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	fa93 f3a3 	rbit	r3, r3
 800c7ba:	61bb      	str	r3, [r7, #24]
  return result;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	fab3 f383 	clz	r3, r3
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	6879      	ldr	r1, [r7, #4]
 800c7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]
}
 800c7d2:	bf00      	nop
 800c7d4:	3724      	adds	r7, #36	@ 0x24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <LL_GPIO_SetPinOutputType>:
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	685a      	ldr	r2, [r3, #4]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	43db      	mvns	r3, r3
 800c7f2:	401a      	ands	r2, r3
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	fb01 f303 	mul.w	r3, r1, r3
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	605a      	str	r2, [r3, #4]
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <LL_GPIO_SetPinSpeed>:
{
 800c80e:	b480      	push	{r7}
 800c810:	b089      	sub	sp, #36	@ 0x24
 800c812:	af00      	add	r7, sp, #0
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	fa93 f3a3 	rbit	r3, r3
 800c828:	613b      	str	r3, [r7, #16]
  return result;
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	fab3 f383 	clz	r3, r3
 800c830:	b2db      	uxtb	r3, r3
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	2103      	movs	r1, #3
 800c836:	fa01 f303 	lsl.w	r3, r1, r3
 800c83a:	43db      	mvns	r3, r3
 800c83c:	401a      	ands	r2, r3
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	fa93 f3a3 	rbit	r3, r3
 800c848:	61bb      	str	r3, [r7, #24]
  return result;
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	fab3 f383 	clz	r3, r3
 800c850:	b2db      	uxtb	r3, r3
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	fa01 f303 	lsl.w	r3, r1, r3
 800c85a:	431a      	orrs	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	609a      	str	r2, [r3, #8]
}
 800c860:	bf00      	nop
 800c862:	3724      	adds	r7, #36	@ 0x24
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <LL_GPIO_SetPinPull>:
{
 800c86c:	b480      	push	{r7}
 800c86e:	b089      	sub	sp, #36	@ 0x24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68da      	ldr	r2, [r3, #12]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	fa93 f3a3 	rbit	r3, r3
 800c886:	613b      	str	r3, [r7, #16]
  return result;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	fab3 f383 	clz	r3, r3
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	2103      	movs	r1, #3
 800c894:	fa01 f303 	lsl.w	r3, r1, r3
 800c898:	43db      	mvns	r3, r3
 800c89a:	401a      	ands	r2, r3
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	fa93 f3a3 	rbit	r3, r3
 800c8a6:	61bb      	str	r3, [r7, #24]
  return result;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	fab3 f383 	clz	r3, r3
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	60da      	str	r2, [r3, #12]
}
 800c8be:	bf00      	nop
 800c8c0:	3724      	adds	r7, #36	@ 0x24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <LL_GPIO_SetAFPin_0_7>:
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b089      	sub	sp, #36	@ 0x24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a1a      	ldr	r2, [r3, #32]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	fa93 f3a3 	rbit	r3, r3
 800c8e4:	613b      	str	r3, [r7, #16]
  return result;
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	fab3 f383 	clz	r3, r3
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	210f      	movs	r1, #15
 800c8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8f6:	43db      	mvns	r3, r3
 800c8f8:	401a      	ands	r2, r3
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	fa93 f3a3 	rbit	r3, r3
 800c904:	61bb      	str	r3, [r7, #24]
  return result;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	fab3 f383 	clz	r3, r3
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	fa01 f303 	lsl.w	r3, r1, r3
 800c916:	431a      	orrs	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	621a      	str	r2, [r3, #32]
}
 800c91c:	bf00      	nop
 800c91e:	3724      	adds	r7, #36	@ 0x24
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <LL_GPIO_SetAFPin_8_15>:
{
 800c928:	b480      	push	{r7}
 800c92a:	b089      	sub	sp, #36	@ 0x24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	0a1b      	lsrs	r3, r3, #8
 800c93c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	fa93 f3a3 	rbit	r3, r3
 800c944:	613b      	str	r3, [r7, #16]
  return result;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	fab3 f383 	clz	r3, r3
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	210f      	movs	r1, #15
 800c952:	fa01 f303 	lsl.w	r3, r1, r3
 800c956:	43db      	mvns	r3, r3
 800c958:	401a      	ands	r2, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	fa93 f3a3 	rbit	r3, r3
 800c966:	61bb      	str	r3, [r7, #24]
  return result;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	fab3 f383 	clz	r3, r3
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	fa01 f303 	lsl.w	r3, r1, r3
 800c978:	431a      	orrs	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c97e:	bf00      	nop
 800c980:	3724      	adds	r7, #36	@ 0x24
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b088      	sub	sp, #32
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800c998:	2300      	movs	r3, #0
 800c99a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	fa93 f3a3 	rbit	r3, r3
 800c9a8:	613b      	str	r3, [r7, #16]
  return result;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	fab3 f383 	clz	r3, r3
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c9b4:	e051      	b.n	800ca5a <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	fa01 f303 	lsl.w	r3, r1, r3
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d043      	beq.n	800ca54 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d003      	beq.n	800c9dc <LL_GPIO_Init+0x52>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d10e      	bne.n	800c9fa <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	69b9      	ldr	r1, [r7, #24]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff ff12 	bl	800c80e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	6819      	ldr	r1, [r3, #0]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff fef2 	bl	800c7de <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	69b9      	ldr	r1, [r7, #24]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff ff32 	bl	800c86c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d11a      	bne.n	800ca46 <LL_GPIO_Init+0xbc>
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	fa93 f3a3 	rbit	r3, r3
 800ca1a:	60bb      	str	r3, [r7, #8]
  return result;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ca1e:	fab3 f383 	clz	r3, r3
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b07      	cmp	r3, #7
 800ca26:	d807      	bhi.n	800ca38 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	69b9      	ldr	r1, [r7, #24]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ff4a 	bl	800c8ca <LL_GPIO_SetAFPin_0_7>
 800ca36:	e006      	b.n	800ca46 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	69b9      	ldr	r1, [r7, #24]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff ff71 	bl	800c928 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	69b9      	ldr	r1, [r7, #24]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff fe96 	bl	800c780 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	3301      	adds	r3, #1
 800ca58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	fa22 f303 	lsr.w	r3, r2, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1a6      	bne.n	800c9b6 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3720      	adds	r7, #32
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <LL_I2C_Enable>:
{
 800ca72:	b480      	push	{r7}
 800ca74:	b083      	sub	sp, #12
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f043 0201 	orr.w	r2, r3, #1
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	601a      	str	r2, [r3, #0]
}
 800ca86:	bf00      	nop
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <LL_I2C_Disable>:
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f023 0201 	bic.w	r2, r3, #1
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	601a      	str	r2, [r3, #0]
}
 800caa6:	bf00      	nop
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <LL_I2C_ConfigFilters>:
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	60f8      	str	r0, [r7, #12]
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	0219      	lsls	r1, r3, #8
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	430b      	orrs	r3, r1
 800cace:	431a      	orrs	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]
}
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <LL_I2C_SetOwnAddress1>:
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	689a      	ldr	r2, [r3, #8]
 800caf0:	4b06      	ldr	r3, [pc, #24]	@ (800cb0c <LL_I2C_SetOwnAddress1+0x2c>)
 800caf2:	4013      	ands	r3, r2
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	431a      	orrs	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	609a      	str	r2, [r3, #8]
}
 800cb00:	bf00      	nop
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	fffff800 	.word	0xfffff800

0800cb10 <LL_I2C_EnableOwnAddress1>:
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	609a      	str	r2, [r3, #8]
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <LL_I2C_DisableOwnAddress1>:
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	609a      	str	r2, [r3, #8]
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <LL_I2C_SetTiming>:
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	611a      	str	r2, [r3, #16]
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <LL_I2C_SetMode>:
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	431a      	orrs	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
}
 800cb86:	bf00      	nop
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	431a      	orrs	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	605a      	str	r2, [r3, #4]
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff ff65 	bl	800ca92 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	6899      	ldr	r1, [r3, #8]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff ff6d 	bl	800cab2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff ffb6 	bl	800cb50 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff ff44 	bl	800ca72 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7ff ffa0 	bl	800cb30 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	6919      	ldr	r1, [r3, #16]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff ff70 	bl	800cae0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff81 	bl	800cb10 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ffa9 	bl	800cb6c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff ffb6 	bl	800cb92 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <LL_RCC_HSI_IsReady>:
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800cc34:	4b06      	ldr	r3, [pc, #24]	@ (800cc50 <LL_RCC_HSI_IsReady+0x20>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 0302 	and.w	r3, r3, #2
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	bf0c      	ite	eq
 800cc40:	2301      	moveq	r3, #1
 800cc42:	2300      	movne	r3, #0
 800cc44:	b2db      	uxtb	r3, r3
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	40023800 	.word	0x40023800

0800cc54 <LL_RCC_LSE_IsReady>:
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800cc58:	4b06      	ldr	r3, [pc, #24]	@ (800cc74 <LL_RCC_LSE_IsReady+0x20>)
 800cc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc5c:	f003 0302 	and.w	r3, r3, #2
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	bf0c      	ite	eq
 800cc64:	2301      	moveq	r3, #1
 800cc66:	2300      	movne	r3, #0
 800cc68:	b2db      	uxtb	r3, r3
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	40023800 	.word	0x40023800

0800cc78 <LL_RCC_GetSysClkSource>:
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cc7c:	4b04      	ldr	r3, [pc, #16]	@ (800cc90 <LL_RCC_GetSysClkSource+0x18>)
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f003 030c 	and.w	r3, r3, #12
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	40023800 	.word	0x40023800

0800cc94 <LL_RCC_GetAHBPrescaler>:
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cc98:	4b04      	ldr	r3, [pc, #16]	@ (800ccac <LL_RCC_GetAHBPrescaler+0x18>)
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	40023800 	.word	0x40023800

0800ccb0 <LL_RCC_GetAPB1Prescaler>:
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ccb4:	4b04      	ldr	r3, [pc, #16]	@ (800ccc8 <LL_RCC_GetAPB1Prescaler+0x18>)
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	40023800 	.word	0x40023800

0800cccc <LL_RCC_GetAPB2Prescaler>:
{
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ccd0:	4b04      	ldr	r3, [pc, #16]	@ (800cce4 <LL_RCC_GetAPB2Prescaler+0x18>)
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	40023800 	.word	0x40023800

0800cce8 <LL_RCC_GetUSARTClockSource>:
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800ccf0:	4b06      	ldr	r3, [pc, #24]	@ (800cd0c <LL_RCC_GetUSARTClockSource+0x24>)
 800ccf2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	401a      	ands	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	041b      	lsls	r3, r3, #16
 800ccfe:	4313      	orrs	r3, r2
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	40023800 	.word	0x40023800

0800cd10 <LL_RCC_GetUARTClockSource>:
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 800cd18:	4b06      	ldr	r3, [pc, #24]	@ (800cd34 <LL_RCC_GetUARTClockSource+0x24>)
 800cd1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	401a      	ands	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	041b      	lsls	r3, r3, #16
 800cd26:	4313      	orrs	r3, r2
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	40023800 	.word	0x40023800

0800cd38 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800cd3c:	4b04      	ldr	r3, [pc, #16]	@ (800cd50 <LL_RCC_PLL_GetMainSource+0x18>)
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	40023800 	.word	0x40023800

0800cd54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800cd58:	4b04      	ldr	r3, [pc, #16]	@ (800cd6c <LL_RCC_PLL_GetN+0x18>)
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	099b      	lsrs	r3, r3, #6
 800cd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	40023800 	.word	0x40023800

0800cd70 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800cd70:	b480      	push	{r7}
 800cd72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800cd74:	4b04      	ldr	r3, [pc, #16]	@ (800cd88 <LL_RCC_PLL_GetP+0x18>)
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	40023800 	.word	0x40023800

0800cd8c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800cd90:	4b04      	ldr	r3, [pc, #16]	@ (800cda4 <LL_RCC_PLL_GetDivider+0x18>)
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	40023800 	.word	0x40023800

0800cda8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b03      	cmp	r3, #3
 800cdb8:	d133      	bne.n	800ce22 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff ff94 	bl	800cce8 <LL_RCC_GetUSARTClockSource>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800cdc6:	d016      	beq.n	800cdf6 <LL_RCC_GetUSARTClockFreq+0x4e>
 800cdc8:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800cdcc:	d81d      	bhi.n	800ce0a <LL_RCC_GetUSARTClockFreq+0x62>
 800cdce:	4a70      	ldr	r2, [pc, #448]	@ (800cf90 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d003      	beq.n	800cddc <LL_RCC_GetUSARTClockFreq+0x34>
 800cdd4:	4a6f      	ldr	r2, [pc, #444]	@ (800cf94 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d004      	beq.n	800cde4 <LL_RCC_GetUSARTClockFreq+0x3c>
 800cdda:	e016      	b.n	800ce0a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800cddc:	f000 f9f2 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cde0:	60f8      	str	r0, [r7, #12]
        break;
 800cde2:	e0cf      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800cde4:	f7ff ff24 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 80bb 	beq.w	800cf66 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 800cdf0:	4b69      	ldr	r3, [pc, #420]	@ (800cf98 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800cdf2:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cdf4:	e0b7      	b.n	800cf66 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800cdf6:	f7ff ff2d 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 80b4 	beq.w	800cf6a <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 800ce02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce06:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ce08:	e0af      	b.n	800cf6a <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ce0a:	f000 f9db 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f9ff 	bl	800d214 <RCC_GetHCLKClockFreq>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fa25 	bl	800d268 <RCC_GetPCLK2ClockFreq>
 800ce1e:	60f8      	str	r0, [r7, #12]
        break;
 800ce20:	e0b0      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b0c      	cmp	r3, #12
 800ce26:	d133      	bne.n	800ce90 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff ff5d 	bl	800cce8 <LL_RCC_GetUSARTClockSource>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800ce34:	d016      	beq.n	800ce64 <LL_RCC_GetUSARTClockFreq+0xbc>
 800ce36:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800ce3a:	d81d      	bhi.n	800ce78 <LL_RCC_GetUSARTClockFreq+0xd0>
 800ce3c:	4a57      	ldr	r2, [pc, #348]	@ (800cf9c <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d003      	beq.n	800ce4a <LL_RCC_GetUSARTClockFreq+0xa2>
 800ce42:	4a57      	ldr	r2, [pc, #348]	@ (800cfa0 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d004      	beq.n	800ce52 <LL_RCC_GetUSARTClockFreq+0xaa>
 800ce48:	e016      	b.n	800ce78 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800ce4a:	f000 f9bb 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800ce4e:	60f8      	str	r0, [r7, #12]
        break;
 800ce50:	e098      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800ce52:	f7ff feed 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 8088 	beq.w	800cf6e <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 800ce5e:	4b4e      	ldr	r3, [pc, #312]	@ (800cf98 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800ce60:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ce62:	e084      	b.n	800cf6e <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800ce64:	f7ff fef6 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 8081 	beq.w	800cf72 <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 800ce70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce74:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ce76:	e07c      	b.n	800cf72 <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ce78:	f000 f9a4 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 f9c8 	bl	800d214 <RCC_GetHCLKClockFreq>
 800ce84:	4603      	mov	r3, r0
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f9da 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800ce8c:	60f8      	str	r0, [r7, #12]
        break;
 800ce8e:	e079      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce96:	d131      	bne.n	800cefc <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff ff25 	bl	800cce8 <LL_RCC_GetUSARTClockSource>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800cea4:	d015      	beq.n	800ced2 <LL_RCC_GetUSARTClockFreq+0x12a>
 800cea6:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800ceaa:	d81b      	bhi.n	800cee4 <LL_RCC_GetUSARTClockFreq+0x13c>
 800ceac:	4a3d      	ldr	r2, [pc, #244]	@ (800cfa4 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d003      	beq.n	800ceba <LL_RCC_GetUSARTClockFreq+0x112>
 800ceb2:	4a3d      	ldr	r2, [pc, #244]	@ (800cfa8 <LL_RCC_GetUSARTClockFreq+0x200>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d004      	beq.n	800cec2 <LL_RCC_GetUSARTClockFreq+0x11a>
 800ceb8:	e014      	b.n	800cee4 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800ceba:	f000 f983 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cebe:	60f8      	str	r0, [r7, #12]
        break;
 800cec0:	e060      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800cec2:	f7ff feb5 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d054      	beq.n	800cf76 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 800cecc:	4b32      	ldr	r3, [pc, #200]	@ (800cf98 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800cece:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ced0:	e051      	b.n	800cf76 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800ced2:	f7ff febf 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d04e      	beq.n	800cf7a <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 800cedc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cee0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cee2:	e04a      	b.n	800cf7a <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cee4:	f000 f96e 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cee8:	4603      	mov	r3, r0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f992 	bl	800d214 <RCC_GetHCLKClockFreq>
 800cef0:	4603      	mov	r3, r0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 f9b8 	bl	800d268 <RCC_GetPCLK2ClockFreq>
 800cef8:	60f8      	str	r0, [r7, #12]
        break;
 800cefa:	e043      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b30      	cmp	r3, #48	@ 0x30
 800cf00:	d140      	bne.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fef0 	bl	800cce8 <LL_RCC_GetUSARTClockSource>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800cf0e:	d015      	beq.n	800cf3c <LL_RCC_GetUSARTClockFreq+0x194>
 800cf10:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800cf14:	d81b      	bhi.n	800cf4e <LL_RCC_GetUSARTClockFreq+0x1a6>
 800cf16:	4a25      	ldr	r2, [pc, #148]	@ (800cfac <LL_RCC_GetUSARTClockFreq+0x204>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d003      	beq.n	800cf24 <LL_RCC_GetUSARTClockFreq+0x17c>
 800cf1c:	4a24      	ldr	r2, [pc, #144]	@ (800cfb0 <LL_RCC_GetUSARTClockFreq+0x208>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d004      	beq.n	800cf2c <LL_RCC_GetUSARTClockFreq+0x184>
 800cf22:	e014      	b.n	800cf4e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800cf24:	f000 f94e 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cf28:	60f8      	str	r0, [r7, #12]
          break;
 800cf2a:	e02b      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800cf2c:	f7ff fe80 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d023      	beq.n	800cf7e <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 800cf36:	4b18      	ldr	r3, [pc, #96]	@ (800cf98 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800cf38:	60fb      	str	r3, [r7, #12]
          }
          break;
 800cf3a:	e020      	b.n	800cf7e <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800cf3c:	f7ff fe8a 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01d      	beq.n	800cf82 <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 800cf46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf4a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800cf4c:	e019      	b.n	800cf82 <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cf4e:	f000 f939 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f000 f95d 	bl	800d214 <RCC_GetHCLKClockFreq>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 f96f 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800cf62:	60f8      	str	r0, [r7, #12]
          break;
 800cf64:	e00e      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf66:	bf00      	nop
 800cf68:	e00c      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf6a:	bf00      	nop
 800cf6c:	e00a      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf6e:	bf00      	nop
 800cf70:	e008      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf72:	bf00      	nop
 800cf74:	e006      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf76:	bf00      	nop
 800cf78:	e004      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800cf7a:	bf00      	nop
 800cf7c:	e002      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800cf7e:	bf00      	nop
 800cf80:	e000      	b.n	800cf84 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800cf82:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800cf84:	68fb      	ldr	r3, [r7, #12]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	00030001 	.word	0x00030001
 800cf94:	00030002 	.word	0x00030002
 800cf98:	00f42400 	.word	0x00f42400
 800cf9c:	000c0004 	.word	0x000c0004
 800cfa0:	000c0008 	.word	0x000c0008
 800cfa4:	0c000400 	.word	0x0c000400
 800cfa8:	0c000800 	.word	0x0c000800
 800cfac:	00300010 	.word	0x00300010
 800cfb0:	00300020 	.word	0x00300020

0800cfb4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cfc4:	d133      	bne.n	800d02e <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fea2 	bl	800cd10 <LL_RCC_GetUARTClockSource>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800cfd2:	d016      	beq.n	800d002 <LL_RCC_GetUARTClockFreq+0x4e>
 800cfd4:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800cfd8:	d81d      	bhi.n	800d016 <LL_RCC_GetUARTClockFreq+0x62>
 800cfda:	4a71      	ldr	r2, [pc, #452]	@ (800d1a0 <LL_RCC_GetUARTClockFreq+0x1ec>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d003      	beq.n	800cfe8 <LL_RCC_GetUARTClockFreq+0x34>
 800cfe0:	4a70      	ldr	r2, [pc, #448]	@ (800d1a4 <LL_RCC_GetUARTClockFreq+0x1f0>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d004      	beq.n	800cff0 <LL_RCC_GetUARTClockFreq+0x3c>
 800cfe6:	e016      	b.n	800d016 <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800cfe8:	f000 f8ec 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800cfec:	60f8      	str	r0, [r7, #12]
        break;
 800cfee:	e0d1      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800cff0:	f7ff fe1e 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 80bd 	beq.w	800d176 <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 800cffc:	4b6a      	ldr	r3, [pc, #424]	@ (800d1a8 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800cffe:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d000:	e0b9      	b.n	800d176 <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800d002:	f7ff fe27 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 80b6 	beq.w	800d17a <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 800d00e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d012:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d014:	e0b1      	b.n	800d17a <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d016:	f000 f8d5 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d01a:	4603      	mov	r3, r0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f8f9 	bl	800d214 <RCC_GetHCLKClockFreq>
 800d022:	4603      	mov	r3, r0
 800d024:	4618      	mov	r0, r3
 800d026:	f000 f90b 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800d02a:	60f8      	str	r0, [r7, #12]
        break;
 800d02c:	e0b2      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d034:	d133      	bne.n	800d09e <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff fe6a 	bl	800cd10 <LL_RCC_GetUARTClockSource>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800d042:	d016      	beq.n	800d072 <LL_RCC_GetUARTClockFreq+0xbe>
 800d044:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800d048:	d81d      	bhi.n	800d086 <LL_RCC_GetUARTClockFreq+0xd2>
 800d04a:	4a58      	ldr	r2, [pc, #352]	@ (800d1ac <LL_RCC_GetUARTClockFreq+0x1f8>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d003      	beq.n	800d058 <LL_RCC_GetUARTClockFreq+0xa4>
 800d050:	4a57      	ldr	r2, [pc, #348]	@ (800d1b0 <LL_RCC_GetUARTClockFreq+0x1fc>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d004      	beq.n	800d060 <LL_RCC_GetUARTClockFreq+0xac>
 800d056:	e016      	b.n	800d086 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800d058:	f000 f8b4 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d05c:	60f8      	str	r0, [r7, #12]
        break;
 800d05e:	e099      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800d060:	f7ff fde6 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 8089 	beq.w	800d17e <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 800d06c:	4b4e      	ldr	r3, [pc, #312]	@ (800d1a8 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800d06e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d070:	e085      	b.n	800d17e <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800d072:	f7ff fdef 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 8082 	beq.w	800d182 <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 800d07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d082:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d084:	e07d      	b.n	800d182 <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d086:	f000 f89d 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d08a:	4603      	mov	r3, r0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 f8c1 	bl	800d214 <RCC_GetHCLKClockFreq>
 800d092:	4603      	mov	r3, r0
 800d094:	4618      	mov	r0, r3
 800d096:	f000 f8d3 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800d09a:	60f8      	str	r0, [r7, #12]
        break;
 800d09c:	e07a      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d0a4:	d131      	bne.n	800d10a <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7ff fe32 	bl	800cd10 <LL_RCC_GetUARTClockSource>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800d0b2:	d015      	beq.n	800d0e0 <LL_RCC_GetUARTClockFreq+0x12c>
 800d0b4:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800d0b8:	d81b      	bhi.n	800d0f2 <LL_RCC_GetUARTClockFreq+0x13e>
 800d0ba:	4a3e      	ldr	r2, [pc, #248]	@ (800d1b4 <LL_RCC_GetUARTClockFreq+0x200>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d003      	beq.n	800d0c8 <LL_RCC_GetUARTClockFreq+0x114>
 800d0c0:	4a3d      	ldr	r2, [pc, #244]	@ (800d1b8 <LL_RCC_GetUARTClockFreq+0x204>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d004      	beq.n	800d0d0 <LL_RCC_GetUARTClockFreq+0x11c>
 800d0c6:	e014      	b.n	800d0f2 <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800d0c8:	f000 f87c 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d0cc:	60f8      	str	r0, [r7, #12]
        break;
 800d0ce:	e061      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800d0d0:	f7ff fdae 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d055      	beq.n	800d186 <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 800d0da:	4b33      	ldr	r3, [pc, #204]	@ (800d1a8 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800d0dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d0de:	e052      	b.n	800d186 <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800d0e0:	f7ff fdb8 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d04f      	beq.n	800d18a <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 800d0ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d0f0:	e04b      	b.n	800d18a <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d0f2:	f000 f867 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 f88b 	bl	800d214 <RCC_GetHCLKClockFreq>
 800d0fe:	4603      	mov	r3, r0
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f89d 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800d106:	60f8      	str	r0, [r7, #12]
        break;
 800d108:	e044      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d110:	d140      	bne.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff fdfc 	bl	800cd10 <LL_RCC_GetUARTClockSource>
 800d118:	4603      	mov	r3, r0
 800d11a:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800d11e:	d015      	beq.n	800d14c <LL_RCC_GetUARTClockFreq+0x198>
 800d120:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800d124:	d81b      	bhi.n	800d15e <LL_RCC_GetUARTClockFreq+0x1aa>
 800d126:	4a25      	ldr	r2, [pc, #148]	@ (800d1bc <LL_RCC_GetUARTClockFreq+0x208>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d003      	beq.n	800d134 <LL_RCC_GetUARTClockFreq+0x180>
 800d12c:	4a24      	ldr	r2, [pc, #144]	@ (800d1c0 <LL_RCC_GetUARTClockFreq+0x20c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d004      	beq.n	800d13c <LL_RCC_GetUARTClockFreq+0x188>
 800d132:	e014      	b.n	800d15e <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 800d134:	f000 f846 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d138:	60f8      	str	r0, [r7, #12]
          break;
 800d13a:	e02b      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800d13c:	f7ff fd78 	bl	800cc30 <LL_RCC_HSI_IsReady>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d023      	beq.n	800d18e <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 800d146:	4b18      	ldr	r3, [pc, #96]	@ (800d1a8 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800d148:	60fb      	str	r3, [r7, #12]
          }
          break;
 800d14a:	e020      	b.n	800d18e <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800d14c:	f7ff fd82 	bl	800cc54 <LL_RCC_LSE_IsReady>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d01d      	beq.n	800d192 <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 800d156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d15a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800d15c:	e019      	b.n	800d192 <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d15e:	f000 f831 	bl	800d1c4 <RCC_GetSystemClockFreq>
 800d162:	4603      	mov	r3, r0
 800d164:	4618      	mov	r0, r3
 800d166:	f000 f855 	bl	800d214 <RCC_GetHCLKClockFreq>
 800d16a:	4603      	mov	r3, r0
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 f867 	bl	800d240 <RCC_GetPCLK1ClockFreq>
 800d172:	60f8      	str	r0, [r7, #12]
          break;
 800d174:	e00e      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d176:	bf00      	nop
 800d178:	e00c      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d17a:	bf00      	nop
 800d17c:	e00a      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d17e:	bf00      	nop
 800d180:	e008      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d182:	bf00      	nop
 800d184:	e006      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d186:	bf00      	nop
 800d188:	e004      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800d18a:	bf00      	nop
 800d18c:	e002      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800d18e:	bf00      	nop
 800d190:	e000      	b.n	800d194 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800d192:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 800d194:	68fb      	ldr	r3, [r7, #12]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	00c00040 	.word	0x00c00040
 800d1a4:	00c00080 	.word	0x00c00080
 800d1a8:	00f42400 	.word	0x00f42400
 800d1ac:	03000100 	.word	0x03000100
 800d1b0:	03000200 	.word	0x03000200
 800d1b4:	30001000 	.word	0x30001000
 800d1b8:	30002000 	.word	0x30002000
 800d1bc:	c0004000 	.word	0xc0004000
 800d1c0:	c0008000 	.word	0xc0008000

0800d1c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800d1ce:	f7ff fd53 	bl	800cc78 <LL_RCC_GetSysClkSource>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d00c      	beq.n	800d1f2 <RCC_GetSystemClockFreq+0x2e>
 800d1d8:	2b08      	cmp	r3, #8
 800d1da:	d80e      	bhi.n	800d1fa <RCC_GetSystemClockFreq+0x36>
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <RCC_GetSystemClockFreq+0x22>
 800d1e0:	2b04      	cmp	r3, #4
 800d1e2:	d003      	beq.n	800d1ec <RCC_GetSystemClockFreq+0x28>
 800d1e4:	e009      	b.n	800d1fa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800d1e6:	4b09      	ldr	r3, [pc, #36]	@ (800d20c <RCC_GetSystemClockFreq+0x48>)
 800d1e8:	607b      	str	r3, [r7, #4]
      break;
 800d1ea:	e009      	b.n	800d200 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800d1ec:	4b08      	ldr	r3, [pc, #32]	@ (800d210 <RCC_GetSystemClockFreq+0x4c>)
 800d1ee:	607b      	str	r3, [r7, #4]
      break;
 800d1f0:	e006      	b.n	800d200 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800d1f2:	f000 f84d 	bl	800d290 <RCC_PLL_GetFreqDomain_SYS>
 800d1f6:	6078      	str	r0, [r7, #4]
      break;
 800d1f8:	e002      	b.n	800d200 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800d1fa:	4b04      	ldr	r3, [pc, #16]	@ (800d20c <RCC_GetSystemClockFreq+0x48>)
 800d1fc:	607b      	str	r3, [r7, #4]
      break;
 800d1fe:	bf00      	nop
  }

  return frequency;
 800d200:	687b      	ldr	r3, [r7, #4]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	00f42400 	.word	0x00f42400
 800d210:	017d7840 	.word	0x017d7840

0800d214 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800d21c:	f7ff fd3a 	bl	800cc94 <LL_RCC_GetAHBPrescaler>
 800d220:	4603      	mov	r3, r0
 800d222:	091b      	lsrs	r3, r3, #4
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	4a04      	ldr	r2, [pc, #16]	@ (800d23c <RCC_GetHCLKClockFreq+0x28>)
 800d22a:	5cd3      	ldrb	r3, [r2, r3]
 800d22c:	461a      	mov	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	40d3      	lsrs	r3, r2
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	08012304 	.word	0x08012304

0800d240 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800d248:	f7ff fd32 	bl	800ccb0 <LL_RCC_GetAPB1Prescaler>
 800d24c:	4603      	mov	r3, r0
 800d24e:	0a9b      	lsrs	r3, r3, #10
 800d250:	4a04      	ldr	r2, [pc, #16]	@ (800d264 <RCC_GetPCLK1ClockFreq+0x24>)
 800d252:	5cd3      	ldrb	r3, [r2, r3]
 800d254:	461a      	mov	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	40d3      	lsrs	r3, r2
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	08012314 	.word	0x08012314

0800d268 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800d270:	f7ff fd2c 	bl	800cccc <LL_RCC_GetAPB2Prescaler>
 800d274:	4603      	mov	r3, r0
 800d276:	0b5b      	lsrs	r3, r3, #13
 800d278:	4a04      	ldr	r2, [pc, #16]	@ (800d28c <RCC_GetPCLK2ClockFreq+0x24>)
 800d27a:	5cd3      	ldrb	r3, [r2, r3]
 800d27c:	461a      	mov	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	40d3      	lsrs	r3, r2
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	08012314 	.word	0x08012314

0800d290 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	607b      	str	r3, [r7, #4]
 800d29a:	2300      	movs	r3, #0
 800d29c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800d29e:	f7ff fd4b 	bl	800cd38 <LL_RCC_PLL_GetMainSource>
 800d2a2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d004      	beq.n	800d2b4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2b0:	d003      	beq.n	800d2ba <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800d2b2:	e005      	b.n	800d2c0 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800d2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800d2b6:	607b      	str	r3, [r7, #4]
      break;
 800d2b8:	e005      	b.n	800d2c6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800d2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800d2bc:	607b      	str	r3, [r7, #4]
      break;
 800d2be:	e002      	b.n	800d2c6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 800d2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800d2c2:	607b      	str	r3, [r7, #4]
      break;
 800d2c4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d2c6:	f7ff fd61 	bl	800cd8c <LL_RCC_PLL_GetDivider>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	fbb3 f4f2 	udiv	r4, r3, r2
 800d2d2:	f7ff fd3f 	bl	800cd54 <LL_RCC_PLL_GetN>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	fb03 f404 	mul.w	r4, r3, r4
 800d2dc:	f7ff fd48 	bl	800cd70 <LL_RCC_PLL_GetP>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	0c1b      	lsrs	r3, r3, #16
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd90      	pop	{r4, r7, pc}
 800d2f4:	00f42400 	.word	0x00f42400
 800d2f8:	017d7840 	.word	0x017d7840

0800d2fc <LL_SPI_IsEnabled>:
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d30c:	2b40      	cmp	r3, #64	@ 0x40
 800d30e:	d101      	bne.n	800d314 <LL_SPI_IsEnabled+0x18>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <LL_SPI_IsEnabled+0x1a>
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <LL_SPI_SetRxFIFOThreshold>:
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	431a      	orrs	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	605a      	str	r2, [r3, #4]
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <LL_SPI_SetCRCPolynomial>:
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	b29b      	uxth	r3, r3
 800d356:	461a      	mov	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	611a      	str	r2, [r3, #16]
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff ffc0 	bl	800d2fc <LL_SPI_IsEnabled>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d141      	bne.n	800d406 <LL_SPI_Init+0x9e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	4b25      	ldr	r3, [pc, #148]	@ (800d41c <LL_SPI_Init+0xb4>)
 800d388:	4013      	ands	r3, r2
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	6811      	ldr	r1, [r2, #0]
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	6852      	ldr	r2, [r2, #4]
 800d392:	4311      	orrs	r1, r2
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	68d2      	ldr	r2, [r2, #12]
 800d398:	4311      	orrs	r1, r2
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	6912      	ldr	r2, [r2, #16]
 800d39e:	4311      	orrs	r1, r2
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	6952      	ldr	r2, [r2, #20]
 800d3a4:	4311      	orrs	r1, r2
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	6992      	ldr	r2, [r2, #24]
 800d3aa:	4311      	orrs	r1, r2
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	69d2      	ldr	r2, [r2, #28]
 800d3b0:	4311      	orrs	r1, r2
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	6a12      	ldr	r2, [r2, #32]
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	4b17      	ldr	r3, [pc, #92]	@ (800d420 <LL_SPI_Init+0xb8>)
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	6891      	ldr	r1, [r2, #8]
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	6952      	ldr	r2, [r2, #20]
 800d3ce:	0c12      	lsrs	r2, r2, #16
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3e0:	d204      	bcs.n	800d3ec <LL_SPI_Init+0x84>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800d3e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff ff9b 	bl	800d322 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	6a1b      	ldr	r3, [r3, #32]
 800d3f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3f4:	d105      	bne.n	800d402 <LL_SPI_Init+0x9a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff ffa3 	bl	800d348 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	61da      	str	r2, [r3, #28]
  return status;
 800d412:	7bfb      	ldrb	r3, [r7, #15]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	ffff0040 	.word	0xffff0040
 800d420:	fffff0fb 	.word	0xfffff0fb

0800d424 <LL_TIM_SetPrescaler>:
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <LL_TIM_SetAutoReload>:
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <LL_TIM_SetRepetitionCounter>:
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d46c:	bf00      	nop
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <LL_TIM_OC_SetCompareCH1>:
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <LL_TIM_OC_SetCompareCH2>:
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <LL_TIM_OC_SetCompareCH3>:
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <LL_TIM_OC_SetCompareCH4>:
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <LL_TIM_OC_SetCompareCH5>:
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d4f6:	4b06      	ldr	r3, [pc, #24]	@ (800d510 <LL_TIM_OC_SetCompareCH5+0x28>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	ffff0000 	.word	0xffff0000

0800d514 <LL_TIM_OC_SetCompareCH6>:
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	f043 0201 	orr.w	r2, r3, #1
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	615a      	str	r2, [r3, #20]
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a3d      	ldr	r2, [pc, #244]	@ (800d658 <LL_TIM_Init+0x108>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d013      	beq.n	800d590 <LL_TIM_Init+0x40>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d56e:	d00f      	beq.n	800d590 <LL_TIM_Init+0x40>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a3a      	ldr	r2, [pc, #232]	@ (800d65c <LL_TIM_Init+0x10c>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d00b      	beq.n	800d590 <LL_TIM_Init+0x40>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a39      	ldr	r2, [pc, #228]	@ (800d660 <LL_TIM_Init+0x110>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d007      	beq.n	800d590 <LL_TIM_Init+0x40>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a38      	ldr	r2, [pc, #224]	@ (800d664 <LL_TIM_Init+0x114>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d003      	beq.n	800d590 <LL_TIM_Init+0x40>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a37      	ldr	r2, [pc, #220]	@ (800d668 <LL_TIM_Init+0x118>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d106      	bne.n	800d59e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a2d      	ldr	r2, [pc, #180]	@ (800d658 <LL_TIM_Init+0x108>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d02b      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5ac:	d027      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a2a      	ldr	r2, [pc, #168]	@ (800d65c <LL_TIM_Init+0x10c>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d023      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a29      	ldr	r2, [pc, #164]	@ (800d660 <LL_TIM_Init+0x110>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d01f      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a28      	ldr	r2, [pc, #160]	@ (800d664 <LL_TIM_Init+0x114>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d01b      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a27      	ldr	r2, [pc, #156]	@ (800d668 <LL_TIM_Init+0x118>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d017      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a26      	ldr	r2, [pc, #152]	@ (800d66c <LL_TIM_Init+0x11c>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d013      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a25      	ldr	r2, [pc, #148]	@ (800d670 <LL_TIM_Init+0x120>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d00f      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a24      	ldr	r2, [pc, #144]	@ (800d674 <LL_TIM_Init+0x124>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d00b      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a23      	ldr	r2, [pc, #140]	@ (800d678 <LL_TIM_Init+0x128>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d007      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a22      	ldr	r2, [pc, #136]	@ (800d67c <LL_TIM_Init+0x12c>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d003      	beq.n	800d5fe <LL_TIM_Init+0xae>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a21      	ldr	r2, [pc, #132]	@ (800d680 <LL_TIM_Init+0x130>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d106      	bne.n	800d60c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	4313      	orrs	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff ff11 	bl	800d440 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fefd 	bl	800d424 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a0a      	ldr	r2, [pc, #40]	@ (800d658 <LL_TIM_Init+0x108>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d003      	beq.n	800d63a <LL_TIM_Init+0xea>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a0c      	ldr	r2, [pc, #48]	@ (800d668 <LL_TIM_Init+0x118>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d105      	bne.n	800d646 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ff0b 	bl	800d45c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff ff72 	bl	800d530 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	40010000 	.word	0x40010000
 800d65c:	40000400 	.word	0x40000400
 800d660:	40000800 	.word	0x40000800
 800d664:	40000c00 	.word	0x40000c00
 800d668:	40010400 	.word	0x40010400
 800d66c:	40014000 	.word	0x40014000
 800d670:	40014400 	.word	0x40014400
 800d674:	40014800 	.word	0x40014800
 800d678:	40001800 	.word	0x40001800
 800d67c:	40001c00 	.word	0x40001c00
 800d680:	40002000 	.word	0x40002000

0800d684 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800d690:	2301      	movs	r3, #1
 800d692:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d69a:	d045      	beq.n	800d728 <LL_TIM_OC_Init+0xa4>
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6a2:	d848      	bhi.n	800d736 <LL_TIM_OC_Init+0xb2>
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6aa:	d036      	beq.n	800d71a <LL_TIM_OC_Init+0x96>
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6b2:	d840      	bhi.n	800d736 <LL_TIM_OC_Init+0xb2>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6ba:	d027      	beq.n	800d70c <LL_TIM_OC_Init+0x88>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6c2:	d838      	bhi.n	800d736 <LL_TIM_OC_Init+0xb2>
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6ca:	d018      	beq.n	800d6fe <LL_TIM_OC_Init+0x7a>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6d2:	d830      	bhi.n	800d736 <LL_TIM_OC_Init+0xb2>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d003      	beq.n	800d6e2 <LL_TIM_OC_Init+0x5e>
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2b10      	cmp	r3, #16
 800d6de:	d007      	beq.n	800d6f0 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800d6e0:	e029      	b.n	800d736 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 f82d 	bl	800d744 <OC1Config>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75fb      	strb	r3, [r7, #23]
      break;
 800d6ee:	e023      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800d6f0:	6879      	ldr	r1, [r7, #4]
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f000 f894 	bl	800d820 <OC2Config>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d6fc:	e01c      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800d6fe:	6879      	ldr	r1, [r7, #4]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 f8ff 	bl	800d904 <OC3Config>
 800d706:	4603      	mov	r3, r0
 800d708:	75fb      	strb	r3, [r7, #23]
      break;
 800d70a:	e015      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 f96a 	bl	800d9e8 <OC4Config>
 800d714:	4603      	mov	r3, r0
 800d716:	75fb      	strb	r3, [r7, #23]
      break;
 800d718:	e00e      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 f9bd 	bl	800da9c <OC5Config>
 800d722:	4603      	mov	r3, r0
 800d724:	75fb      	strb	r3, [r7, #23]
      break;
 800d726:	e007      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800d728:	6879      	ldr	r1, [r7, #4]
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 fa08 	bl	800db40 <OC6Config>
 800d730:	4603      	mov	r3, r0
 800d732:	75fb      	strb	r3, [r7, #23]
      break;
 800d734:	e000      	b.n	800d738 <LL_TIM_OC_Init+0xb4>
      break;
 800d736:	bf00      	nop
  }

  return result;
 800d738:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	f023 0201 	bic.w	r2, r3, #1
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0303 	bic.w	r3, r3, #3
 800d772:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4b27      	ldr	r3, [pc, #156]	@ (800d814 <OC1Config+0xd0>)
 800d778:	4013      	ands	r3, r2
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f023 0202 	bic.w	r2, r3, #2
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	f023 0201 	bic.w	r2, r3, #1
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d818 <OC1Config+0xd4>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d003      	beq.n	800d7ae <OC1Config+0x6a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d81c <OC1Config+0xd8>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d11e      	bne.n	800d7ec <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f023 0208 	bic.w	r2, r3, #8
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	695b      	ldr	r3, [r3, #20]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f023 0204 	bic.w	r2, r3, #4
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fe3a 	bl	800d478 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	fffeff8f 	.word	0xfffeff8f
 800d818:	40010000 	.word	0x40010000
 800d81c:	40010400 	.word	0x40010400

0800d820 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	f023 0210 	bic.w	r2, r3, #16
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a1b      	ldr	r3, [r3, #32]
 800d83a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4b29      	ldr	r3, [pc, #164]	@ (800d8f8 <OC2Config+0xd8>)
 800d854:	4013      	ands	r3, r2
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	6812      	ldr	r2, [r2, #0]
 800d85a:	0212      	lsls	r2, r2, #8
 800d85c:	4313      	orrs	r3, r2
 800d85e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f023 0220 	bic.w	r2, r3, #32
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	011b      	lsls	r3, r3, #4
 800d86c:	4313      	orrs	r3, r2
 800d86e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f023 0210 	bic.w	r2, r3, #16
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	011b      	lsls	r3, r3, #4
 800d87c:	4313      	orrs	r3, r2
 800d87e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a1e      	ldr	r2, [pc, #120]	@ (800d8fc <OC2Config+0xdc>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d003      	beq.n	800d890 <OC2Config+0x70>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a1d      	ldr	r2, [pc, #116]	@ (800d900 <OC2Config+0xe0>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d11f      	bne.n	800d8d0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	019b      	lsls	r3, r3, #6
 800d89c:	4313      	orrs	r3, r2
 800d89e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	019b      	lsls	r3, r3, #6
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	69db      	ldr	r3, [r3, #28]
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff fdd6 	bl	800d494 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	feff8fff 	.word	0xfeff8fff
 800d8fc:	40010000 	.word	0x40010000
 800d900:	40010400 	.word	0x40010400

0800d904 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	69db      	ldr	r3, [r3, #28]
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	4b29      	ldr	r3, [pc, #164]	@ (800d9dc <OC3Config+0xd8>)
 800d938:	4013      	ands	r3, r2
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	6812      	ldr	r2, [r2, #0]
 800d93e:	4313      	orrs	r3, r2
 800d940:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	4313      	orrs	r3, r2
 800d950:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	021b      	lsls	r3, r3, #8
 800d95e:	4313      	orrs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a1e      	ldr	r2, [pc, #120]	@ (800d9e0 <OC3Config+0xdc>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d003      	beq.n	800d972 <OC3Config+0x6e>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9e4 <OC3Config+0xe0>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d11f      	bne.n	800d9b2 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	029b      	lsls	r3, r3, #10
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	029b      	lsls	r3, r3, #10
 800d98e:	4313      	orrs	r3, r2
 800d990:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	015b      	lsls	r3, r3, #5
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff fd73 	bl	800d4b0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	fffeff8f 	.word	0xfffeff8f
 800d9e0:	40010000 	.word	0x40010000
 800d9e4:	40010400 	.word	0x40010400

0800d9e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	69db      	ldr	r3, [r3, #28]
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	4b1d      	ldr	r3, [pc, #116]	@ (800da90 <OC4Config+0xa8>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	6812      	ldr	r2, [r2, #0]
 800da22:	0212      	lsls	r2, r2, #8
 800da24:	4313      	orrs	r3, r2
 800da26:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	031b      	lsls	r3, r3, #12
 800da34:	4313      	orrs	r3, r2
 800da36:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	031b      	lsls	r3, r3, #12
 800da44:	4313      	orrs	r3, r2
 800da46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a12      	ldr	r2, [pc, #72]	@ (800da94 <OC4Config+0xac>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d003      	beq.n	800da58 <OC4Config+0x70>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a11      	ldr	r2, [pc, #68]	@ (800da98 <OC4Config+0xb0>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d107      	bne.n	800da68 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	019b      	lsls	r3, r3, #6
 800da64:	4313      	orrs	r3, r2
 800da66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	4619      	mov	r1, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff fd26 	bl	800d4cc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	feff8fff 	.word	0xfeff8fff
 800da94:	40010000 	.word	0x40010000
 800da98:	40010400 	.word	0x40010400

0800da9c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dabc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	4b1c      	ldr	r3, [pc, #112]	@ (800db34 <OC5Config+0x98>)
 800dac2:	4013      	ands	r3, r2
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	6812      	ldr	r2, [r2, #0]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	041b      	lsls	r3, r3, #16
 800dad8:	4313      	orrs	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	041b      	lsls	r3, r3, #16
 800dae8:	4313      	orrs	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a12      	ldr	r2, [pc, #72]	@ (800db38 <OC5Config+0x9c>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d003      	beq.n	800dafc <OC5Config+0x60>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a11      	ldr	r2, [pc, #68]	@ (800db3c <OC5Config+0xa0>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d109      	bne.n	800db10 <OC5Config+0x74>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	021b      	lsls	r3, r3, #8
 800db0a:	431a      	orrs	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff fce3 	bl	800d4e8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	fffeff8f 	.word	0xfffeff8f
 800db38:	40010000 	.word	0x40010000
 800db3c:	40010400 	.word	0x40010400

0800db40 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db60:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	4b1c      	ldr	r3, [pc, #112]	@ (800dbd8 <OC6Config+0x98>)
 800db66:	4013      	ands	r3, r2
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	6812      	ldr	r2, [r2, #0]
 800db6c:	0212      	lsls	r2, r2, #8
 800db6e:	4313      	orrs	r3, r2
 800db70:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	051b      	lsls	r3, r3, #20
 800db7e:	4313      	orrs	r3, r2
 800db80:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	051b      	lsls	r3, r3, #20
 800db8e:	4313      	orrs	r3, r2
 800db90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4a11      	ldr	r2, [pc, #68]	@ (800dbdc <OC6Config+0x9c>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d003      	beq.n	800dba2 <OC6Config+0x62>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a10      	ldr	r2, [pc, #64]	@ (800dbe0 <OC6Config+0xa0>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d109      	bne.n	800dbb6 <OC6Config+0x76>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	029b      	lsls	r3, r3, #10
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7ff fca6 	bl	800d514 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	feff8fff 	.word	0xfeff8fff
 800dbdc:	40010000 	.word	0x40010000
 800dbe0:	40010400 	.word	0x40010400

0800dbe4 <LL_USART_IsEnabled>:
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d101      	bne.n	800dbfc <LL_USART_IsEnabled+0x18>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e000      	b.n	800dbfe <LL_USART_IsEnabled+0x1a>
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <LL_USART_SetStopBitsLength>:
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	431a      	orrs	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	605a      	str	r2, [r3, #4]
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <LL_USART_SetHWFlowCtrl>:
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	431a      	orrs	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	609a      	str	r2, [r3, #8]
}
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <LL_USART_SetBaudRate>:
{
 800dc56:	b480      	push	{r7}
 800dc58:	b087      	sub	sp, #28
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	60f8      	str	r0, [r7, #12]
 800dc5e:	60b9      	str	r1, [r7, #8]
 800dc60:	607a      	str	r2, [r7, #4]
 800dc62:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc6a:	d11a      	bne.n	800dca2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	005a      	lsls	r2, r3, #1
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	085b      	lsrs	r3, r3, #1
 800dc74:	441a      	add	r2, r3
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800dc86:	4013      	ands	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	085b      	lsrs	r3, r3, #1
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	f003 0307 	and.w	r3, r3, #7
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	60da      	str	r2, [r3, #12]
}
 800dca0:	e00a      	b.n	800dcb8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	085a      	lsrs	r2, r3, #1
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	441a      	add	r2, r3
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	60da      	str	r2, [r3, #12]
}
 800dcb8:	bf00      	nop
 800dcba:	371c      	adds	r7, #28
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff ff84 	bl	800dbe4 <LL_USART_IsEnabled>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d179      	bne.n	800ddd6 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	4b3e      	ldr	r3, [pc, #248]	@ (800dde0 <LL_USART_Init+0x11c>)
 800dce8:	4013      	ands	r3, r2
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	6851      	ldr	r1, [r2, #4]
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	68d2      	ldr	r2, [r2, #12]
 800dcf2:	4311      	orrs	r1, r2
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	6912      	ldr	r2, [r2, #16]
 800dcf8:	4311      	orrs	r1, r2
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	6992      	ldr	r2, [r2, #24]
 800dcfe:	430a      	orrs	r2, r1
 800dd00:	431a      	orrs	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff ff7c 	bl	800dc0a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ff89 	bl	800dc30 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4a30      	ldr	r2, [pc, #192]	@ (800dde4 <LL_USART_Init+0x120>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d104      	bne.n	800dd30 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800dd26:	2003      	movs	r0, #3
 800dd28:	f7ff f83e 	bl	800cda8 <LL_RCC_GetUSARTClockFreq>
 800dd2c:	60b8      	str	r0, [r7, #8]
 800dd2e:	e041      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a2d      	ldr	r2, [pc, #180]	@ (800dde8 <LL_USART_Init+0x124>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d104      	bne.n	800dd42 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800dd38:	200c      	movs	r0, #12
 800dd3a:	f7ff f835 	bl	800cda8 <LL_RCC_GetUSARTClockFreq>
 800dd3e:	60b8      	str	r0, [r7, #8]
 800dd40:	e038      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a29      	ldr	r2, [pc, #164]	@ (800ddec <LL_USART_Init+0x128>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d104      	bne.n	800dd54 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800dd4a:	2030      	movs	r0, #48	@ 0x30
 800dd4c:	f7ff f82c 	bl	800cda8 <LL_RCC_GetUSARTClockFreq>
 800dd50:	60b8      	str	r0, [r7, #8]
 800dd52:	e02f      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a26      	ldr	r2, [pc, #152]	@ (800ddf0 <LL_USART_Init+0x12c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d104      	bne.n	800dd66 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800dd5c:	20c0      	movs	r0, #192	@ 0xc0
 800dd5e:	f7ff f929 	bl	800cfb4 <LL_RCC_GetUARTClockFreq>
 800dd62:	60b8      	str	r0, [r7, #8]
 800dd64:	e026      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a22      	ldr	r2, [pc, #136]	@ (800ddf4 <LL_USART_Init+0x130>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d105      	bne.n	800dd7a <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800dd6e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800dd72:	f7ff f91f 	bl	800cfb4 <LL_RCC_GetUARTClockFreq>
 800dd76:	60b8      	str	r0, [r7, #8]
 800dd78:	e01c      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a1e      	ldr	r2, [pc, #120]	@ (800ddf8 <LL_USART_Init+0x134>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d105      	bne.n	800dd8e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800dd82:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800dd86:	f7ff f80f 	bl	800cda8 <LL_RCC_GetUSARTClockFreq>
 800dd8a:	60b8      	str	r0, [r7, #8]
 800dd8c:	e012      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a1a      	ldr	r2, [pc, #104]	@ (800ddfc <LL_USART_Init+0x138>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d105      	bne.n	800dda2 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800dd96:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800dd9a:	f7ff f90b 	bl	800cfb4 <LL_RCC_GetUARTClockFreq>
 800dd9e:	60b8      	str	r0, [r7, #8]
 800dda0:	e008      	b.n	800ddb4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a16      	ldr	r2, [pc, #88]	@ (800de00 <LL_USART_Init+0x13c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d104      	bne.n	800ddb4 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800ddaa:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800ddae:	f7ff f901 	bl	800cfb4 <LL_RCC_GetUARTClockFreq>
 800ddb2:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00d      	beq.n	800ddd6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ff40 	bl	800dc56 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	efff69f3 	.word	0xefff69f3
 800dde4:	40011000 	.word	0x40011000
 800dde8:	40004400 	.word	0x40004400
 800ddec:	40004800 	.word	0x40004800
 800ddf0:	40004c00 	.word	0x40004c00
 800ddf4:	40005000 	.word	0x40005000
 800ddf8:	40011400 	.word	0x40011400
 800ddfc:	40007800 	.word	0x40007800
 800de00:	40007c00 	.word	0x40007c00

0800de04 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800de0c:	4b0f      	ldr	r3, [pc, #60]	@ (800de4c <LL_mDelay+0x48>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800de12:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d00c      	beq.n	800de36 <LL_mDelay+0x32>
  {
    Delay++;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	3301      	adds	r3, #1
 800de20:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800de22:	e008      	b.n	800de36 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800de24:	4b09      	ldr	r3, [pc, #36]	@ (800de4c <LL_mDelay+0x48>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <LL_mDelay+0x32>
    {
      Delay--;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3b01      	subs	r3, #1
 800de34:	607b      	str	r3, [r7, #4]
  while (Delay)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f3      	bne.n	800de24 <LL_mDelay+0x20>
    }
  }
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	e000e010 	.word	0xe000e010

0800de50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800de58:	4a04      	ldr	r2, [pc, #16]	@ (800de6c <LL_SetSystemCoreClock+0x1c>)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6013      	str	r3, [r2, #0]
}
 800de5e:	bf00      	nop
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	20000000 	.word	0x20000000

0800de70 <atoi>:
 800de70:	220a      	movs	r2, #10
 800de72:	2100      	movs	r1, #0
 800de74:	f000 b87a 	b.w	800df6c <strtol>

0800de78 <_strtol_l.isra.0>:
 800de78:	2b24      	cmp	r3, #36	@ 0x24
 800de7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de7e:	4686      	mov	lr, r0
 800de80:	4690      	mov	r8, r2
 800de82:	d801      	bhi.n	800de88 <_strtol_l.isra.0+0x10>
 800de84:	2b01      	cmp	r3, #1
 800de86:	d106      	bne.n	800de96 <_strtol_l.isra.0+0x1e>
 800de88:	f000 ffb2 	bl	800edf0 <__errno>
 800de8c:	2316      	movs	r3, #22
 800de8e:	6003      	str	r3, [r0, #0]
 800de90:	2000      	movs	r0, #0
 800de92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de96:	4834      	ldr	r0, [pc, #208]	@ (800df68 <_strtol_l.isra.0+0xf0>)
 800de98:	460d      	mov	r5, r1
 800de9a:	462a      	mov	r2, r5
 800de9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dea0:	5d06      	ldrb	r6, [r0, r4]
 800dea2:	f016 0608 	ands.w	r6, r6, #8
 800dea6:	d1f8      	bne.n	800de9a <_strtol_l.isra.0+0x22>
 800dea8:	2c2d      	cmp	r4, #45	@ 0x2d
 800deaa:	d110      	bne.n	800dece <_strtol_l.isra.0+0x56>
 800deac:	782c      	ldrb	r4, [r5, #0]
 800deae:	2601      	movs	r6, #1
 800deb0:	1c95      	adds	r5, r2, #2
 800deb2:	f033 0210 	bics.w	r2, r3, #16
 800deb6:	d115      	bne.n	800dee4 <_strtol_l.isra.0+0x6c>
 800deb8:	2c30      	cmp	r4, #48	@ 0x30
 800deba:	d10d      	bne.n	800ded8 <_strtol_l.isra.0+0x60>
 800debc:	782a      	ldrb	r2, [r5, #0]
 800debe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dec2:	2a58      	cmp	r2, #88	@ 0x58
 800dec4:	d108      	bne.n	800ded8 <_strtol_l.isra.0+0x60>
 800dec6:	786c      	ldrb	r4, [r5, #1]
 800dec8:	3502      	adds	r5, #2
 800deca:	2310      	movs	r3, #16
 800decc:	e00a      	b.n	800dee4 <_strtol_l.isra.0+0x6c>
 800dece:	2c2b      	cmp	r4, #43	@ 0x2b
 800ded0:	bf04      	itt	eq
 800ded2:	782c      	ldrbeq	r4, [r5, #0]
 800ded4:	1c95      	addeq	r5, r2, #2
 800ded6:	e7ec      	b.n	800deb2 <_strtol_l.isra.0+0x3a>
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1f6      	bne.n	800deca <_strtol_l.isra.0+0x52>
 800dedc:	2c30      	cmp	r4, #48	@ 0x30
 800dede:	bf14      	ite	ne
 800dee0:	230a      	movne	r3, #10
 800dee2:	2308      	moveq	r3, #8
 800dee4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dee8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800deec:	2200      	movs	r2, #0
 800deee:	fbbc f9f3 	udiv	r9, ip, r3
 800def2:	4610      	mov	r0, r2
 800def4:	fb03 ca19 	mls	sl, r3, r9, ip
 800def8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800defc:	2f09      	cmp	r7, #9
 800defe:	d80f      	bhi.n	800df20 <_strtol_l.isra.0+0xa8>
 800df00:	463c      	mov	r4, r7
 800df02:	42a3      	cmp	r3, r4
 800df04:	dd1b      	ble.n	800df3e <_strtol_l.isra.0+0xc6>
 800df06:	1c57      	adds	r7, r2, #1
 800df08:	d007      	beq.n	800df1a <_strtol_l.isra.0+0xa2>
 800df0a:	4581      	cmp	r9, r0
 800df0c:	d314      	bcc.n	800df38 <_strtol_l.isra.0+0xc0>
 800df0e:	d101      	bne.n	800df14 <_strtol_l.isra.0+0x9c>
 800df10:	45a2      	cmp	sl, r4
 800df12:	db11      	blt.n	800df38 <_strtol_l.isra.0+0xc0>
 800df14:	fb00 4003 	mla	r0, r0, r3, r4
 800df18:	2201      	movs	r2, #1
 800df1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df1e:	e7eb      	b.n	800def8 <_strtol_l.isra.0+0x80>
 800df20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800df24:	2f19      	cmp	r7, #25
 800df26:	d801      	bhi.n	800df2c <_strtol_l.isra.0+0xb4>
 800df28:	3c37      	subs	r4, #55	@ 0x37
 800df2a:	e7ea      	b.n	800df02 <_strtol_l.isra.0+0x8a>
 800df2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800df30:	2f19      	cmp	r7, #25
 800df32:	d804      	bhi.n	800df3e <_strtol_l.isra.0+0xc6>
 800df34:	3c57      	subs	r4, #87	@ 0x57
 800df36:	e7e4      	b.n	800df02 <_strtol_l.isra.0+0x8a>
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	e7ed      	b.n	800df1a <_strtol_l.isra.0+0xa2>
 800df3e:	1c53      	adds	r3, r2, #1
 800df40:	d108      	bne.n	800df54 <_strtol_l.isra.0+0xdc>
 800df42:	2322      	movs	r3, #34	@ 0x22
 800df44:	f8ce 3000 	str.w	r3, [lr]
 800df48:	4660      	mov	r0, ip
 800df4a:	f1b8 0f00 	cmp.w	r8, #0
 800df4e:	d0a0      	beq.n	800de92 <_strtol_l.isra.0+0x1a>
 800df50:	1e69      	subs	r1, r5, #1
 800df52:	e006      	b.n	800df62 <_strtol_l.isra.0+0xea>
 800df54:	b106      	cbz	r6, 800df58 <_strtol_l.isra.0+0xe0>
 800df56:	4240      	negs	r0, r0
 800df58:	f1b8 0f00 	cmp.w	r8, #0
 800df5c:	d099      	beq.n	800de92 <_strtol_l.isra.0+0x1a>
 800df5e:	2a00      	cmp	r2, #0
 800df60:	d1f6      	bne.n	800df50 <_strtol_l.isra.0+0xd8>
 800df62:	f8c8 1000 	str.w	r1, [r8]
 800df66:	e794      	b.n	800de92 <_strtol_l.isra.0+0x1a>
 800df68:	08012761 	.word	0x08012761

0800df6c <strtol>:
 800df6c:	4613      	mov	r3, r2
 800df6e:	460a      	mov	r2, r1
 800df70:	4601      	mov	r1, r0
 800df72:	4802      	ldr	r0, [pc, #8]	@ (800df7c <strtol+0x10>)
 800df74:	6800      	ldr	r0, [r0, #0]
 800df76:	f7ff bf7f 	b.w	800de78 <_strtol_l.isra.0>
 800df7a:	bf00      	nop
 800df7c:	200041cc 	.word	0x200041cc

0800df80 <__cvt>:
 800df80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df82:	ed2d 8b02 	vpush	{d8}
 800df86:	eeb0 8b40 	vmov.f64	d8, d0
 800df8a:	b085      	sub	sp, #20
 800df8c:	4617      	mov	r7, r2
 800df8e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800df90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df92:	ee18 2a90 	vmov	r2, s17
 800df96:	f025 0520 	bic.w	r5, r5, #32
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	bfb6      	itet	lt
 800df9e:	222d      	movlt	r2, #45	@ 0x2d
 800dfa0:	2200      	movge	r2, #0
 800dfa2:	eeb1 8b40 	vneglt.f64	d8, d0
 800dfa6:	2d46      	cmp	r5, #70	@ 0x46
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	d004      	beq.n	800dfb8 <__cvt+0x38>
 800dfae:	2d45      	cmp	r5, #69	@ 0x45
 800dfb0:	d100      	bne.n	800dfb4 <__cvt+0x34>
 800dfb2:	3401      	adds	r4, #1
 800dfb4:	2102      	movs	r1, #2
 800dfb6:	e000      	b.n	800dfba <__cvt+0x3a>
 800dfb8:	2103      	movs	r1, #3
 800dfba:	ab03      	add	r3, sp, #12
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	ab02      	add	r3, sp, #8
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4633      	mov	r3, r6
 800dfc6:	eeb0 0b48 	vmov.f64	d0, d8
 800dfca:	f000 ffd5 	bl	800ef78 <_dtoa_r>
 800dfce:	2d47      	cmp	r5, #71	@ 0x47
 800dfd0:	d114      	bne.n	800dffc <__cvt+0x7c>
 800dfd2:	07fb      	lsls	r3, r7, #31
 800dfd4:	d50a      	bpl.n	800dfec <__cvt+0x6c>
 800dfd6:	1902      	adds	r2, r0, r4
 800dfd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe0:	bf08      	it	eq
 800dfe2:	9203      	streq	r2, [sp, #12]
 800dfe4:	2130      	movs	r1, #48	@ 0x30
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d319      	bcc.n	800e020 <__cvt+0xa0>
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dff0:	1a1b      	subs	r3, r3, r0
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	b005      	add	sp, #20
 800dff6:	ecbd 8b02 	vpop	{d8}
 800dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffc:	2d46      	cmp	r5, #70	@ 0x46
 800dffe:	eb00 0204 	add.w	r2, r0, r4
 800e002:	d1e9      	bne.n	800dfd8 <__cvt+0x58>
 800e004:	7803      	ldrb	r3, [r0, #0]
 800e006:	2b30      	cmp	r3, #48	@ 0x30
 800e008:	d107      	bne.n	800e01a <__cvt+0x9a>
 800e00a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e012:	bf1c      	itt	ne
 800e014:	f1c4 0401 	rsbne	r4, r4, #1
 800e018:	6034      	strne	r4, [r6, #0]
 800e01a:	6833      	ldr	r3, [r6, #0]
 800e01c:	441a      	add	r2, r3
 800e01e:	e7db      	b.n	800dfd8 <__cvt+0x58>
 800e020:	1c5c      	adds	r4, r3, #1
 800e022:	9403      	str	r4, [sp, #12]
 800e024:	7019      	strb	r1, [r3, #0]
 800e026:	e7de      	b.n	800dfe6 <__cvt+0x66>

0800e028 <__exponent>:
 800e028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e02a:	2900      	cmp	r1, #0
 800e02c:	bfba      	itte	lt
 800e02e:	4249      	neglt	r1, r1
 800e030:	232d      	movlt	r3, #45	@ 0x2d
 800e032:	232b      	movge	r3, #43	@ 0x2b
 800e034:	2909      	cmp	r1, #9
 800e036:	7002      	strb	r2, [r0, #0]
 800e038:	7043      	strb	r3, [r0, #1]
 800e03a:	dd29      	ble.n	800e090 <__exponent+0x68>
 800e03c:	f10d 0307 	add.w	r3, sp, #7
 800e040:	461d      	mov	r5, r3
 800e042:	270a      	movs	r7, #10
 800e044:	461a      	mov	r2, r3
 800e046:	fbb1 f6f7 	udiv	r6, r1, r7
 800e04a:	fb07 1416 	mls	r4, r7, r6, r1
 800e04e:	3430      	adds	r4, #48	@ 0x30
 800e050:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e054:	460c      	mov	r4, r1
 800e056:	2c63      	cmp	r4, #99	@ 0x63
 800e058:	f103 33ff 	add.w	r3, r3, #4294967295
 800e05c:	4631      	mov	r1, r6
 800e05e:	dcf1      	bgt.n	800e044 <__exponent+0x1c>
 800e060:	3130      	adds	r1, #48	@ 0x30
 800e062:	1e94      	subs	r4, r2, #2
 800e064:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e068:	1c41      	adds	r1, r0, #1
 800e06a:	4623      	mov	r3, r4
 800e06c:	42ab      	cmp	r3, r5
 800e06e:	d30a      	bcc.n	800e086 <__exponent+0x5e>
 800e070:	f10d 0309 	add.w	r3, sp, #9
 800e074:	1a9b      	subs	r3, r3, r2
 800e076:	42ac      	cmp	r4, r5
 800e078:	bf88      	it	hi
 800e07a:	2300      	movhi	r3, #0
 800e07c:	3302      	adds	r3, #2
 800e07e:	4403      	add	r3, r0
 800e080:	1a18      	subs	r0, r3, r0
 800e082:	b003      	add	sp, #12
 800e084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e086:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e08a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e08e:	e7ed      	b.n	800e06c <__exponent+0x44>
 800e090:	2330      	movs	r3, #48	@ 0x30
 800e092:	3130      	adds	r1, #48	@ 0x30
 800e094:	7083      	strb	r3, [r0, #2]
 800e096:	70c1      	strb	r1, [r0, #3]
 800e098:	1d03      	adds	r3, r0, #4
 800e09a:	e7f1      	b.n	800e080 <__exponent+0x58>
 800e09c:	0000      	movs	r0, r0
	...

0800e0a0 <_printf_float>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	b08d      	sub	sp, #52	@ 0x34
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e0ac:	4616      	mov	r6, r2
 800e0ae:	461f      	mov	r7, r3
 800e0b0:	4605      	mov	r5, r0
 800e0b2:	f000 fe53 	bl	800ed5c <_localeconv_r>
 800e0b6:	f8d0 b000 	ldr.w	fp, [r0]
 800e0ba:	4658      	mov	r0, fp
 800e0bc:	f7f2 f920 	bl	8000300 <strlen>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e0cc:	6822      	ldr	r2, [r4, #0]
 800e0ce:	9005      	str	r0, [sp, #20]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	f023 0307 	bic.w	r3, r3, #7
 800e0d6:	f103 0108 	add.w	r1, r3, #8
 800e0da:	f8c8 1000 	str.w	r1, [r8]
 800e0de:	ed93 0b00 	vldr	d0, [r3]
 800e0e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e340 <_printf_float+0x2a0>
 800e0e6:	eeb0 7bc0 	vabs.f64	d7, d0
 800e0ea:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e0f6:	dd24      	ble.n	800e142 <_printf_float+0xa2>
 800e0f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e100:	d502      	bpl.n	800e108 <_printf_float+0x68>
 800e102:	232d      	movs	r3, #45	@ 0x2d
 800e104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e108:	498f      	ldr	r1, [pc, #572]	@ (800e348 <_printf_float+0x2a8>)
 800e10a:	4b90      	ldr	r3, [pc, #576]	@ (800e34c <_printf_float+0x2ac>)
 800e10c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e110:	bf8c      	ite	hi
 800e112:	4688      	movhi	r8, r1
 800e114:	4698      	movls	r8, r3
 800e116:	f022 0204 	bic.w	r2, r2, #4
 800e11a:	2303      	movs	r3, #3
 800e11c:	6123      	str	r3, [r4, #16]
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	f04f 0a00 	mov.w	sl, #0
 800e124:	9700      	str	r7, [sp, #0]
 800e126:	4633      	mov	r3, r6
 800e128:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e12a:	4621      	mov	r1, r4
 800e12c:	4628      	mov	r0, r5
 800e12e:	f000 f9d1 	bl	800e4d4 <_printf_common>
 800e132:	3001      	adds	r0, #1
 800e134:	f040 8089 	bne.w	800e24a <_printf_float+0x1aa>
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	b00d      	add	sp, #52	@ 0x34
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	eeb4 0b40 	vcmp.f64	d0, d0
 800e146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14a:	d709      	bvc.n	800e160 <_printf_float+0xc0>
 800e14c:	ee10 3a90 	vmov	r3, s1
 800e150:	2b00      	cmp	r3, #0
 800e152:	bfbc      	itt	lt
 800e154:	232d      	movlt	r3, #45	@ 0x2d
 800e156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e15a:	497d      	ldr	r1, [pc, #500]	@ (800e350 <_printf_float+0x2b0>)
 800e15c:	4b7d      	ldr	r3, [pc, #500]	@ (800e354 <_printf_float+0x2b4>)
 800e15e:	e7d5      	b.n	800e10c <_printf_float+0x6c>
 800e160:	6863      	ldr	r3, [r4, #4]
 800e162:	1c59      	adds	r1, r3, #1
 800e164:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e168:	d139      	bne.n	800e1de <_printf_float+0x13e>
 800e16a:	2306      	movs	r3, #6
 800e16c:	6063      	str	r3, [r4, #4]
 800e16e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e172:	2300      	movs	r3, #0
 800e174:	6022      	str	r2, [r4, #0]
 800e176:	9303      	str	r3, [sp, #12]
 800e178:	ab0a      	add	r3, sp, #40	@ 0x28
 800e17a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e17e:	ab09      	add	r3, sp, #36	@ 0x24
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	6861      	ldr	r1, [r4, #4]
 800e184:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e188:	4628      	mov	r0, r5
 800e18a:	f7ff fef9 	bl	800df80 <__cvt>
 800e18e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e194:	4680      	mov	r8, r0
 800e196:	d129      	bne.n	800e1ec <_printf_float+0x14c>
 800e198:	1cc8      	adds	r0, r1, #3
 800e19a:	db02      	blt.n	800e1a2 <_printf_float+0x102>
 800e19c:	6863      	ldr	r3, [r4, #4]
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	dd41      	ble.n	800e226 <_printf_float+0x186>
 800e1a2:	f1a9 0902 	sub.w	r9, r9, #2
 800e1a6:	fa5f f989 	uxtb.w	r9, r9
 800e1aa:	3901      	subs	r1, #1
 800e1ac:	464a      	mov	r2, r9
 800e1ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e1b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1b4:	f7ff ff38 	bl	800e028 <__exponent>
 800e1b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1ba:	1813      	adds	r3, r2, r0
 800e1bc:	2a01      	cmp	r2, #1
 800e1be:	4682      	mov	sl, r0
 800e1c0:	6123      	str	r3, [r4, #16]
 800e1c2:	dc02      	bgt.n	800e1ca <_printf_float+0x12a>
 800e1c4:	6822      	ldr	r2, [r4, #0]
 800e1c6:	07d2      	lsls	r2, r2, #31
 800e1c8:	d501      	bpl.n	800e1ce <_printf_float+0x12e>
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	6123      	str	r3, [r4, #16]
 800e1ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0a6      	beq.n	800e124 <_printf_float+0x84>
 800e1d6:	232d      	movs	r3, #45	@ 0x2d
 800e1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1dc:	e7a2      	b.n	800e124 <_printf_float+0x84>
 800e1de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1e2:	d1c4      	bne.n	800e16e <_printf_float+0xce>
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1c2      	bne.n	800e16e <_printf_float+0xce>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e7bf      	b.n	800e16c <_printf_float+0xcc>
 800e1ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e1f0:	d9db      	bls.n	800e1aa <_printf_float+0x10a>
 800e1f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e1f6:	d118      	bne.n	800e22a <_printf_float+0x18a>
 800e1f8:	2900      	cmp	r1, #0
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	dd0b      	ble.n	800e216 <_printf_float+0x176>
 800e1fe:	6121      	str	r1, [r4, #16]
 800e200:	b913      	cbnz	r3, 800e208 <_printf_float+0x168>
 800e202:	6822      	ldr	r2, [r4, #0]
 800e204:	07d0      	lsls	r0, r2, #31
 800e206:	d502      	bpl.n	800e20e <_printf_float+0x16e>
 800e208:	3301      	adds	r3, #1
 800e20a:	440b      	add	r3, r1
 800e20c:	6123      	str	r3, [r4, #16]
 800e20e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e210:	f04f 0a00 	mov.w	sl, #0
 800e214:	e7db      	b.n	800e1ce <_printf_float+0x12e>
 800e216:	b913      	cbnz	r3, 800e21e <_printf_float+0x17e>
 800e218:	6822      	ldr	r2, [r4, #0]
 800e21a:	07d2      	lsls	r2, r2, #31
 800e21c:	d501      	bpl.n	800e222 <_printf_float+0x182>
 800e21e:	3302      	adds	r3, #2
 800e220:	e7f4      	b.n	800e20c <_printf_float+0x16c>
 800e222:	2301      	movs	r3, #1
 800e224:	e7f2      	b.n	800e20c <_printf_float+0x16c>
 800e226:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e22a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e22c:	4299      	cmp	r1, r3
 800e22e:	db05      	blt.n	800e23c <_printf_float+0x19c>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	6121      	str	r1, [r4, #16]
 800e234:	07d8      	lsls	r0, r3, #31
 800e236:	d5ea      	bpl.n	800e20e <_printf_float+0x16e>
 800e238:	1c4b      	adds	r3, r1, #1
 800e23a:	e7e7      	b.n	800e20c <_printf_float+0x16c>
 800e23c:	2900      	cmp	r1, #0
 800e23e:	bfd4      	ite	le
 800e240:	f1c1 0202 	rsble	r2, r1, #2
 800e244:	2201      	movgt	r2, #1
 800e246:	4413      	add	r3, r2
 800e248:	e7e0      	b.n	800e20c <_printf_float+0x16c>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	055a      	lsls	r2, r3, #21
 800e24e:	d407      	bmi.n	800e260 <_printf_float+0x1c0>
 800e250:	6923      	ldr	r3, [r4, #16]
 800e252:	4642      	mov	r2, r8
 800e254:	4631      	mov	r1, r6
 800e256:	4628      	mov	r0, r5
 800e258:	47b8      	blx	r7
 800e25a:	3001      	adds	r0, #1
 800e25c:	d12a      	bne.n	800e2b4 <_printf_float+0x214>
 800e25e:	e76b      	b.n	800e138 <_printf_float+0x98>
 800e260:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e264:	f240 80e0 	bls.w	800e428 <_printf_float+0x388>
 800e268:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e26c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e274:	d133      	bne.n	800e2de <_printf_float+0x23e>
 800e276:	4a38      	ldr	r2, [pc, #224]	@ (800e358 <_printf_float+0x2b8>)
 800e278:	2301      	movs	r3, #1
 800e27a:	4631      	mov	r1, r6
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b8      	blx	r7
 800e280:	3001      	adds	r0, #1
 800e282:	f43f af59 	beq.w	800e138 <_printf_float+0x98>
 800e286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e28a:	4543      	cmp	r3, r8
 800e28c:	db02      	blt.n	800e294 <_printf_float+0x1f4>
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	07d8      	lsls	r0, r3, #31
 800e292:	d50f      	bpl.n	800e2b4 <_printf_float+0x214>
 800e294:	9b05      	ldr	r3, [sp, #20]
 800e296:	465a      	mov	r2, fp
 800e298:	4631      	mov	r1, r6
 800e29a:	4628      	mov	r0, r5
 800e29c:	47b8      	blx	r7
 800e29e:	3001      	adds	r0, #1
 800e2a0:	f43f af4a 	beq.w	800e138 <_printf_float+0x98>
 800e2a4:	f04f 0900 	mov.w	r9, #0
 800e2a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2ac:	f104 0a1a 	add.w	sl, r4, #26
 800e2b0:	45c8      	cmp	r8, r9
 800e2b2:	dc09      	bgt.n	800e2c8 <_printf_float+0x228>
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	079b      	lsls	r3, r3, #30
 800e2b8:	f100 8107 	bmi.w	800e4ca <_printf_float+0x42a>
 800e2bc:	68e0      	ldr	r0, [r4, #12]
 800e2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2c0:	4298      	cmp	r0, r3
 800e2c2:	bfb8      	it	lt
 800e2c4:	4618      	movlt	r0, r3
 800e2c6:	e739      	b.n	800e13c <_printf_float+0x9c>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	4652      	mov	r2, sl
 800e2cc:	4631      	mov	r1, r6
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	47b8      	blx	r7
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	f43f af30 	beq.w	800e138 <_printf_float+0x98>
 800e2d8:	f109 0901 	add.w	r9, r9, #1
 800e2dc:	e7e8      	b.n	800e2b0 <_printf_float+0x210>
 800e2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dc3b      	bgt.n	800e35c <_printf_float+0x2bc>
 800e2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e358 <_printf_float+0x2b8>)
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	4631      	mov	r1, r6
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	47b8      	blx	r7
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	f43f af22 	beq.w	800e138 <_printf_float+0x98>
 800e2f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e2f8:	ea59 0303 	orrs.w	r3, r9, r3
 800e2fc:	d102      	bne.n	800e304 <_printf_float+0x264>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	07d9      	lsls	r1, r3, #31
 800e302:	d5d7      	bpl.n	800e2b4 <_printf_float+0x214>
 800e304:	9b05      	ldr	r3, [sp, #20]
 800e306:	465a      	mov	r2, fp
 800e308:	4631      	mov	r1, r6
 800e30a:	4628      	mov	r0, r5
 800e30c:	47b8      	blx	r7
 800e30e:	3001      	adds	r0, #1
 800e310:	f43f af12 	beq.w	800e138 <_printf_float+0x98>
 800e314:	f04f 0a00 	mov.w	sl, #0
 800e318:	f104 0b1a 	add.w	fp, r4, #26
 800e31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e31e:	425b      	negs	r3, r3
 800e320:	4553      	cmp	r3, sl
 800e322:	dc01      	bgt.n	800e328 <_printf_float+0x288>
 800e324:	464b      	mov	r3, r9
 800e326:	e794      	b.n	800e252 <_printf_float+0x1b2>
 800e328:	2301      	movs	r3, #1
 800e32a:	465a      	mov	r2, fp
 800e32c:	4631      	mov	r1, r6
 800e32e:	4628      	mov	r0, r5
 800e330:	47b8      	blx	r7
 800e332:	3001      	adds	r0, #1
 800e334:	f43f af00 	beq.w	800e138 <_printf_float+0x98>
 800e338:	f10a 0a01 	add.w	sl, sl, #1
 800e33c:	e7ee      	b.n	800e31c <_printf_float+0x27c>
 800e33e:	bf00      	nop
 800e340:	ffffffff 	.word	0xffffffff
 800e344:	7fefffff 	.word	0x7fefffff
 800e348:	08012865 	.word	0x08012865
 800e34c:	08012861 	.word	0x08012861
 800e350:	0801286d 	.word	0x0801286d
 800e354:	08012869 	.word	0x08012869
 800e358:	08012871 	.word	0x08012871
 800e35c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e35e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e362:	4553      	cmp	r3, sl
 800e364:	bfa8      	it	ge
 800e366:	4653      	movge	r3, sl
 800e368:	2b00      	cmp	r3, #0
 800e36a:	4699      	mov	r9, r3
 800e36c:	dc37      	bgt.n	800e3de <_printf_float+0x33e>
 800e36e:	2300      	movs	r3, #0
 800e370:	9307      	str	r3, [sp, #28]
 800e372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e376:	f104 021a 	add.w	r2, r4, #26
 800e37a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e37c:	9907      	ldr	r1, [sp, #28]
 800e37e:	9306      	str	r3, [sp, #24]
 800e380:	eba3 0309 	sub.w	r3, r3, r9
 800e384:	428b      	cmp	r3, r1
 800e386:	dc31      	bgt.n	800e3ec <_printf_float+0x34c>
 800e388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38a:	459a      	cmp	sl, r3
 800e38c:	dc3b      	bgt.n	800e406 <_printf_float+0x366>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	07da      	lsls	r2, r3, #31
 800e392:	d438      	bmi.n	800e406 <_printf_float+0x366>
 800e394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e396:	ebaa 0903 	sub.w	r9, sl, r3
 800e39a:	9b06      	ldr	r3, [sp, #24]
 800e39c:	ebaa 0303 	sub.w	r3, sl, r3
 800e3a0:	4599      	cmp	r9, r3
 800e3a2:	bfa8      	it	ge
 800e3a4:	4699      	movge	r9, r3
 800e3a6:	f1b9 0f00 	cmp.w	r9, #0
 800e3aa:	dc34      	bgt.n	800e416 <_printf_float+0x376>
 800e3ac:	f04f 0800 	mov.w	r8, #0
 800e3b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3b4:	f104 0b1a 	add.w	fp, r4, #26
 800e3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ba:	ebaa 0303 	sub.w	r3, sl, r3
 800e3be:	eba3 0309 	sub.w	r3, r3, r9
 800e3c2:	4543      	cmp	r3, r8
 800e3c4:	f77f af76 	ble.w	800e2b4 <_printf_float+0x214>
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	465a      	mov	r2, fp
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	47b8      	blx	r7
 800e3d2:	3001      	adds	r0, #1
 800e3d4:	f43f aeb0 	beq.w	800e138 <_printf_float+0x98>
 800e3d8:	f108 0801 	add.w	r8, r8, #1
 800e3dc:	e7ec      	b.n	800e3b8 <_printf_float+0x318>
 800e3de:	4642      	mov	r2, r8
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	47b8      	blx	r7
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	d1c1      	bne.n	800e36e <_printf_float+0x2ce>
 800e3ea:	e6a5      	b.n	800e138 <_printf_float+0x98>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	9206      	str	r2, [sp, #24]
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	f43f ae9e 	beq.w	800e138 <_printf_float+0x98>
 800e3fc:	9b07      	ldr	r3, [sp, #28]
 800e3fe:	9a06      	ldr	r2, [sp, #24]
 800e400:	3301      	adds	r3, #1
 800e402:	9307      	str	r3, [sp, #28]
 800e404:	e7b9      	b.n	800e37a <_printf_float+0x2da>
 800e406:	9b05      	ldr	r3, [sp, #20]
 800e408:	465a      	mov	r2, fp
 800e40a:	4631      	mov	r1, r6
 800e40c:	4628      	mov	r0, r5
 800e40e:	47b8      	blx	r7
 800e410:	3001      	adds	r0, #1
 800e412:	d1bf      	bne.n	800e394 <_printf_float+0x2f4>
 800e414:	e690      	b.n	800e138 <_printf_float+0x98>
 800e416:	9a06      	ldr	r2, [sp, #24]
 800e418:	464b      	mov	r3, r9
 800e41a:	4442      	add	r2, r8
 800e41c:	4631      	mov	r1, r6
 800e41e:	4628      	mov	r0, r5
 800e420:	47b8      	blx	r7
 800e422:	3001      	adds	r0, #1
 800e424:	d1c2      	bne.n	800e3ac <_printf_float+0x30c>
 800e426:	e687      	b.n	800e138 <_printf_float+0x98>
 800e428:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e42c:	f1b9 0f01 	cmp.w	r9, #1
 800e430:	dc01      	bgt.n	800e436 <_printf_float+0x396>
 800e432:	07db      	lsls	r3, r3, #31
 800e434:	d536      	bpl.n	800e4a4 <_printf_float+0x404>
 800e436:	2301      	movs	r3, #1
 800e438:	4642      	mov	r2, r8
 800e43a:	4631      	mov	r1, r6
 800e43c:	4628      	mov	r0, r5
 800e43e:	47b8      	blx	r7
 800e440:	3001      	adds	r0, #1
 800e442:	f43f ae79 	beq.w	800e138 <_printf_float+0x98>
 800e446:	9b05      	ldr	r3, [sp, #20]
 800e448:	465a      	mov	r2, fp
 800e44a:	4631      	mov	r1, r6
 800e44c:	4628      	mov	r0, r5
 800e44e:	47b8      	blx	r7
 800e450:	3001      	adds	r0, #1
 800e452:	f43f ae71 	beq.w	800e138 <_printf_float+0x98>
 800e456:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e45a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	f109 39ff 	add.w	r9, r9, #4294967295
 800e466:	d018      	beq.n	800e49a <_printf_float+0x3fa>
 800e468:	464b      	mov	r3, r9
 800e46a:	f108 0201 	add.w	r2, r8, #1
 800e46e:	4631      	mov	r1, r6
 800e470:	4628      	mov	r0, r5
 800e472:	47b8      	blx	r7
 800e474:	3001      	adds	r0, #1
 800e476:	d10c      	bne.n	800e492 <_printf_float+0x3f2>
 800e478:	e65e      	b.n	800e138 <_printf_float+0x98>
 800e47a:	2301      	movs	r3, #1
 800e47c:	465a      	mov	r2, fp
 800e47e:	4631      	mov	r1, r6
 800e480:	4628      	mov	r0, r5
 800e482:	47b8      	blx	r7
 800e484:	3001      	adds	r0, #1
 800e486:	f43f ae57 	beq.w	800e138 <_printf_float+0x98>
 800e48a:	f108 0801 	add.w	r8, r8, #1
 800e48e:	45c8      	cmp	r8, r9
 800e490:	dbf3      	blt.n	800e47a <_printf_float+0x3da>
 800e492:	4653      	mov	r3, sl
 800e494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e498:	e6dc      	b.n	800e254 <_printf_float+0x1b4>
 800e49a:	f04f 0800 	mov.w	r8, #0
 800e49e:	f104 0b1a 	add.w	fp, r4, #26
 800e4a2:	e7f4      	b.n	800e48e <_printf_float+0x3ee>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	4642      	mov	r2, r8
 800e4a8:	e7e1      	b.n	800e46e <_printf_float+0x3ce>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	464a      	mov	r2, r9
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	47b8      	blx	r7
 800e4b4:	3001      	adds	r0, #1
 800e4b6:	f43f ae3f 	beq.w	800e138 <_printf_float+0x98>
 800e4ba:	f108 0801 	add.w	r8, r8, #1
 800e4be:	68e3      	ldr	r3, [r4, #12]
 800e4c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4c2:	1a5b      	subs	r3, r3, r1
 800e4c4:	4543      	cmp	r3, r8
 800e4c6:	dcf0      	bgt.n	800e4aa <_printf_float+0x40a>
 800e4c8:	e6f8      	b.n	800e2bc <_printf_float+0x21c>
 800e4ca:	f04f 0800 	mov.w	r8, #0
 800e4ce:	f104 0919 	add.w	r9, r4, #25
 800e4d2:	e7f4      	b.n	800e4be <_printf_float+0x41e>

0800e4d4 <_printf_common>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	4616      	mov	r6, r2
 800e4da:	4698      	mov	r8, r3
 800e4dc:	688a      	ldr	r2, [r1, #8]
 800e4de:	690b      	ldr	r3, [r1, #16]
 800e4e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	bfb8      	it	lt
 800e4e8:	4613      	movlt	r3, r2
 800e4ea:	6033      	str	r3, [r6, #0]
 800e4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	b10a      	cbz	r2, 800e4fa <_printf_common+0x26>
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	6033      	str	r3, [r6, #0]
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	0699      	lsls	r1, r3, #26
 800e4fe:	bf42      	ittt	mi
 800e500:	6833      	ldrmi	r3, [r6, #0]
 800e502:	3302      	addmi	r3, #2
 800e504:	6033      	strmi	r3, [r6, #0]
 800e506:	6825      	ldr	r5, [r4, #0]
 800e508:	f015 0506 	ands.w	r5, r5, #6
 800e50c:	d106      	bne.n	800e51c <_printf_common+0x48>
 800e50e:	f104 0a19 	add.w	sl, r4, #25
 800e512:	68e3      	ldr	r3, [r4, #12]
 800e514:	6832      	ldr	r2, [r6, #0]
 800e516:	1a9b      	subs	r3, r3, r2
 800e518:	42ab      	cmp	r3, r5
 800e51a:	dc26      	bgt.n	800e56a <_printf_common+0x96>
 800e51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	3b00      	subs	r3, #0
 800e524:	bf18      	it	ne
 800e526:	2301      	movne	r3, #1
 800e528:	0692      	lsls	r2, r2, #26
 800e52a:	d42b      	bmi.n	800e584 <_printf_common+0xb0>
 800e52c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e530:	4641      	mov	r1, r8
 800e532:	4638      	mov	r0, r7
 800e534:	47c8      	blx	r9
 800e536:	3001      	adds	r0, #1
 800e538:	d01e      	beq.n	800e578 <_printf_common+0xa4>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	6922      	ldr	r2, [r4, #16]
 800e53e:	f003 0306 	and.w	r3, r3, #6
 800e542:	2b04      	cmp	r3, #4
 800e544:	bf02      	ittt	eq
 800e546:	68e5      	ldreq	r5, [r4, #12]
 800e548:	6833      	ldreq	r3, [r6, #0]
 800e54a:	1aed      	subeq	r5, r5, r3
 800e54c:	68a3      	ldr	r3, [r4, #8]
 800e54e:	bf0c      	ite	eq
 800e550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e554:	2500      	movne	r5, #0
 800e556:	4293      	cmp	r3, r2
 800e558:	bfc4      	itt	gt
 800e55a:	1a9b      	subgt	r3, r3, r2
 800e55c:	18ed      	addgt	r5, r5, r3
 800e55e:	2600      	movs	r6, #0
 800e560:	341a      	adds	r4, #26
 800e562:	42b5      	cmp	r5, r6
 800e564:	d11a      	bne.n	800e59c <_printf_common+0xc8>
 800e566:	2000      	movs	r0, #0
 800e568:	e008      	b.n	800e57c <_printf_common+0xa8>
 800e56a:	2301      	movs	r3, #1
 800e56c:	4652      	mov	r2, sl
 800e56e:	4641      	mov	r1, r8
 800e570:	4638      	mov	r0, r7
 800e572:	47c8      	blx	r9
 800e574:	3001      	adds	r0, #1
 800e576:	d103      	bne.n	800e580 <_printf_common+0xac>
 800e578:	f04f 30ff 	mov.w	r0, #4294967295
 800e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e580:	3501      	adds	r5, #1
 800e582:	e7c6      	b.n	800e512 <_printf_common+0x3e>
 800e584:	18e1      	adds	r1, r4, r3
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	2030      	movs	r0, #48	@ 0x30
 800e58a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e58e:	4422      	add	r2, r4
 800e590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e598:	3302      	adds	r3, #2
 800e59a:	e7c7      	b.n	800e52c <_printf_common+0x58>
 800e59c:	2301      	movs	r3, #1
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	47c8      	blx	r9
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d0e6      	beq.n	800e578 <_printf_common+0xa4>
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	e7d9      	b.n	800e562 <_printf_common+0x8e>
	...

0800e5b0 <_printf_i>:
 800e5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b4:	7e0f      	ldrb	r7, [r1, #24]
 800e5b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5b8:	2f78      	cmp	r7, #120	@ 0x78
 800e5ba:	4691      	mov	r9, r2
 800e5bc:	4680      	mov	r8, r0
 800e5be:	460c      	mov	r4, r1
 800e5c0:	469a      	mov	sl, r3
 800e5c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5c6:	d807      	bhi.n	800e5d8 <_printf_i+0x28>
 800e5c8:	2f62      	cmp	r7, #98	@ 0x62
 800e5ca:	d80a      	bhi.n	800e5e2 <_printf_i+0x32>
 800e5cc:	2f00      	cmp	r7, #0
 800e5ce:	f000 80d1 	beq.w	800e774 <_printf_i+0x1c4>
 800e5d2:	2f58      	cmp	r7, #88	@ 0x58
 800e5d4:	f000 80b8 	beq.w	800e748 <_printf_i+0x198>
 800e5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5e0:	e03a      	b.n	800e658 <_printf_i+0xa8>
 800e5e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5e6:	2b15      	cmp	r3, #21
 800e5e8:	d8f6      	bhi.n	800e5d8 <_printf_i+0x28>
 800e5ea:	a101      	add	r1, pc, #4	@ (adr r1, 800e5f0 <_printf_i+0x40>)
 800e5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5f0:	0800e649 	.word	0x0800e649
 800e5f4:	0800e65d 	.word	0x0800e65d
 800e5f8:	0800e5d9 	.word	0x0800e5d9
 800e5fc:	0800e5d9 	.word	0x0800e5d9
 800e600:	0800e5d9 	.word	0x0800e5d9
 800e604:	0800e5d9 	.word	0x0800e5d9
 800e608:	0800e65d 	.word	0x0800e65d
 800e60c:	0800e5d9 	.word	0x0800e5d9
 800e610:	0800e5d9 	.word	0x0800e5d9
 800e614:	0800e5d9 	.word	0x0800e5d9
 800e618:	0800e5d9 	.word	0x0800e5d9
 800e61c:	0800e75b 	.word	0x0800e75b
 800e620:	0800e687 	.word	0x0800e687
 800e624:	0800e715 	.word	0x0800e715
 800e628:	0800e5d9 	.word	0x0800e5d9
 800e62c:	0800e5d9 	.word	0x0800e5d9
 800e630:	0800e77d 	.word	0x0800e77d
 800e634:	0800e5d9 	.word	0x0800e5d9
 800e638:	0800e687 	.word	0x0800e687
 800e63c:	0800e5d9 	.word	0x0800e5d9
 800e640:	0800e5d9 	.word	0x0800e5d9
 800e644:	0800e71d 	.word	0x0800e71d
 800e648:	6833      	ldr	r3, [r6, #0]
 800e64a:	1d1a      	adds	r2, r3, #4
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6032      	str	r2, [r6, #0]
 800e650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e658:	2301      	movs	r3, #1
 800e65a:	e09c      	b.n	800e796 <_printf_i+0x1e6>
 800e65c:	6833      	ldr	r3, [r6, #0]
 800e65e:	6820      	ldr	r0, [r4, #0]
 800e660:	1d19      	adds	r1, r3, #4
 800e662:	6031      	str	r1, [r6, #0]
 800e664:	0606      	lsls	r6, r0, #24
 800e666:	d501      	bpl.n	800e66c <_printf_i+0xbc>
 800e668:	681d      	ldr	r5, [r3, #0]
 800e66a:	e003      	b.n	800e674 <_printf_i+0xc4>
 800e66c:	0645      	lsls	r5, r0, #25
 800e66e:	d5fb      	bpl.n	800e668 <_printf_i+0xb8>
 800e670:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e674:	2d00      	cmp	r5, #0
 800e676:	da03      	bge.n	800e680 <_printf_i+0xd0>
 800e678:	232d      	movs	r3, #45	@ 0x2d
 800e67a:	426d      	negs	r5, r5
 800e67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e680:	4858      	ldr	r0, [pc, #352]	@ (800e7e4 <_printf_i+0x234>)
 800e682:	230a      	movs	r3, #10
 800e684:	e011      	b.n	800e6aa <_printf_i+0xfa>
 800e686:	6821      	ldr	r1, [r4, #0]
 800e688:	6833      	ldr	r3, [r6, #0]
 800e68a:	0608      	lsls	r0, r1, #24
 800e68c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e690:	d402      	bmi.n	800e698 <_printf_i+0xe8>
 800e692:	0649      	lsls	r1, r1, #25
 800e694:	bf48      	it	mi
 800e696:	b2ad      	uxthmi	r5, r5
 800e698:	2f6f      	cmp	r7, #111	@ 0x6f
 800e69a:	4852      	ldr	r0, [pc, #328]	@ (800e7e4 <_printf_i+0x234>)
 800e69c:	6033      	str	r3, [r6, #0]
 800e69e:	bf14      	ite	ne
 800e6a0:	230a      	movne	r3, #10
 800e6a2:	2308      	moveq	r3, #8
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e6aa:	6866      	ldr	r6, [r4, #4]
 800e6ac:	60a6      	str	r6, [r4, #8]
 800e6ae:	2e00      	cmp	r6, #0
 800e6b0:	db05      	blt.n	800e6be <_printf_i+0x10e>
 800e6b2:	6821      	ldr	r1, [r4, #0]
 800e6b4:	432e      	orrs	r6, r5
 800e6b6:	f021 0104 	bic.w	r1, r1, #4
 800e6ba:	6021      	str	r1, [r4, #0]
 800e6bc:	d04b      	beq.n	800e756 <_printf_i+0x1a6>
 800e6be:	4616      	mov	r6, r2
 800e6c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6c4:	fb03 5711 	mls	r7, r3, r1, r5
 800e6c8:	5dc7      	ldrb	r7, [r0, r7]
 800e6ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6ce:	462f      	mov	r7, r5
 800e6d0:	42bb      	cmp	r3, r7
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	d9f4      	bls.n	800e6c0 <_printf_i+0x110>
 800e6d6:	2b08      	cmp	r3, #8
 800e6d8:	d10b      	bne.n	800e6f2 <_printf_i+0x142>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	07df      	lsls	r7, r3, #31
 800e6de:	d508      	bpl.n	800e6f2 <_printf_i+0x142>
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	6861      	ldr	r1, [r4, #4]
 800e6e4:	4299      	cmp	r1, r3
 800e6e6:	bfde      	ittt	le
 800e6e8:	2330      	movle	r3, #48	@ 0x30
 800e6ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6f2:	1b92      	subs	r2, r2, r6
 800e6f4:	6122      	str	r2, [r4, #16]
 800e6f6:	f8cd a000 	str.w	sl, [sp]
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	aa03      	add	r2, sp, #12
 800e6fe:	4621      	mov	r1, r4
 800e700:	4640      	mov	r0, r8
 800e702:	f7ff fee7 	bl	800e4d4 <_printf_common>
 800e706:	3001      	adds	r0, #1
 800e708:	d14a      	bne.n	800e7a0 <_printf_i+0x1f0>
 800e70a:	f04f 30ff 	mov.w	r0, #4294967295
 800e70e:	b004      	add	sp, #16
 800e710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	f043 0320 	orr.w	r3, r3, #32
 800e71a:	6023      	str	r3, [r4, #0]
 800e71c:	4832      	ldr	r0, [pc, #200]	@ (800e7e8 <_printf_i+0x238>)
 800e71e:	2778      	movs	r7, #120	@ 0x78
 800e720:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	6831      	ldr	r1, [r6, #0]
 800e728:	061f      	lsls	r7, r3, #24
 800e72a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e72e:	d402      	bmi.n	800e736 <_printf_i+0x186>
 800e730:	065f      	lsls	r7, r3, #25
 800e732:	bf48      	it	mi
 800e734:	b2ad      	uxthmi	r5, r5
 800e736:	6031      	str	r1, [r6, #0]
 800e738:	07d9      	lsls	r1, r3, #31
 800e73a:	bf44      	itt	mi
 800e73c:	f043 0320 	orrmi.w	r3, r3, #32
 800e740:	6023      	strmi	r3, [r4, #0]
 800e742:	b11d      	cbz	r5, 800e74c <_printf_i+0x19c>
 800e744:	2310      	movs	r3, #16
 800e746:	e7ad      	b.n	800e6a4 <_printf_i+0xf4>
 800e748:	4826      	ldr	r0, [pc, #152]	@ (800e7e4 <_printf_i+0x234>)
 800e74a:	e7e9      	b.n	800e720 <_printf_i+0x170>
 800e74c:	6823      	ldr	r3, [r4, #0]
 800e74e:	f023 0320 	bic.w	r3, r3, #32
 800e752:	6023      	str	r3, [r4, #0]
 800e754:	e7f6      	b.n	800e744 <_printf_i+0x194>
 800e756:	4616      	mov	r6, r2
 800e758:	e7bd      	b.n	800e6d6 <_printf_i+0x126>
 800e75a:	6833      	ldr	r3, [r6, #0]
 800e75c:	6825      	ldr	r5, [r4, #0]
 800e75e:	6961      	ldr	r1, [r4, #20]
 800e760:	1d18      	adds	r0, r3, #4
 800e762:	6030      	str	r0, [r6, #0]
 800e764:	062e      	lsls	r6, r5, #24
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	d501      	bpl.n	800e76e <_printf_i+0x1be>
 800e76a:	6019      	str	r1, [r3, #0]
 800e76c:	e002      	b.n	800e774 <_printf_i+0x1c4>
 800e76e:	0668      	lsls	r0, r5, #25
 800e770:	d5fb      	bpl.n	800e76a <_printf_i+0x1ba>
 800e772:	8019      	strh	r1, [r3, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	4616      	mov	r6, r2
 800e77a:	e7bc      	b.n	800e6f6 <_printf_i+0x146>
 800e77c:	6833      	ldr	r3, [r6, #0]
 800e77e:	1d1a      	adds	r2, r3, #4
 800e780:	6032      	str	r2, [r6, #0]
 800e782:	681e      	ldr	r6, [r3, #0]
 800e784:	6862      	ldr	r2, [r4, #4]
 800e786:	2100      	movs	r1, #0
 800e788:	4630      	mov	r0, r6
 800e78a:	f7f1 fd69 	bl	8000260 <memchr>
 800e78e:	b108      	cbz	r0, 800e794 <_printf_i+0x1e4>
 800e790:	1b80      	subs	r0, r0, r6
 800e792:	6060      	str	r0, [r4, #4]
 800e794:	6863      	ldr	r3, [r4, #4]
 800e796:	6123      	str	r3, [r4, #16]
 800e798:	2300      	movs	r3, #0
 800e79a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e79e:	e7aa      	b.n	800e6f6 <_printf_i+0x146>
 800e7a0:	6923      	ldr	r3, [r4, #16]
 800e7a2:	4632      	mov	r2, r6
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	47d0      	blx	sl
 800e7aa:	3001      	adds	r0, #1
 800e7ac:	d0ad      	beq.n	800e70a <_printf_i+0x15a>
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	079b      	lsls	r3, r3, #30
 800e7b2:	d413      	bmi.n	800e7dc <_printf_i+0x22c>
 800e7b4:	68e0      	ldr	r0, [r4, #12]
 800e7b6:	9b03      	ldr	r3, [sp, #12]
 800e7b8:	4298      	cmp	r0, r3
 800e7ba:	bfb8      	it	lt
 800e7bc:	4618      	movlt	r0, r3
 800e7be:	e7a6      	b.n	800e70e <_printf_i+0x15e>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	47d0      	blx	sl
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	d09d      	beq.n	800e70a <_printf_i+0x15a>
 800e7ce:	3501      	adds	r5, #1
 800e7d0:	68e3      	ldr	r3, [r4, #12]
 800e7d2:	9903      	ldr	r1, [sp, #12]
 800e7d4:	1a5b      	subs	r3, r3, r1
 800e7d6:	42ab      	cmp	r3, r5
 800e7d8:	dcf2      	bgt.n	800e7c0 <_printf_i+0x210>
 800e7da:	e7eb      	b.n	800e7b4 <_printf_i+0x204>
 800e7dc:	2500      	movs	r5, #0
 800e7de:	f104 0619 	add.w	r6, r4, #25
 800e7e2:	e7f5      	b.n	800e7d0 <_printf_i+0x220>
 800e7e4:	08012873 	.word	0x08012873
 800e7e8:	08012884 	.word	0x08012884

0800e7ec <std>:
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7fa:	6083      	str	r3, [r0, #8]
 800e7fc:	8181      	strh	r1, [r0, #12]
 800e7fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800e800:	81c2      	strh	r2, [r0, #14]
 800e802:	6183      	str	r3, [r0, #24]
 800e804:	4619      	mov	r1, r3
 800e806:	2208      	movs	r2, #8
 800e808:	305c      	adds	r0, #92	@ 0x5c
 800e80a:	f000 fa91 	bl	800ed30 <memset>
 800e80e:	4b0d      	ldr	r3, [pc, #52]	@ (800e844 <std+0x58>)
 800e810:	6263      	str	r3, [r4, #36]	@ 0x24
 800e812:	4b0d      	ldr	r3, [pc, #52]	@ (800e848 <std+0x5c>)
 800e814:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e816:	4b0d      	ldr	r3, [pc, #52]	@ (800e84c <std+0x60>)
 800e818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e81a:	4b0d      	ldr	r3, [pc, #52]	@ (800e850 <std+0x64>)
 800e81c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e81e:	4b0d      	ldr	r3, [pc, #52]	@ (800e854 <std+0x68>)
 800e820:	6224      	str	r4, [r4, #32]
 800e822:	429c      	cmp	r4, r3
 800e824:	d006      	beq.n	800e834 <std+0x48>
 800e826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e82a:	4294      	cmp	r4, r2
 800e82c:	d002      	beq.n	800e834 <std+0x48>
 800e82e:	33d0      	adds	r3, #208	@ 0xd0
 800e830:	429c      	cmp	r4, r3
 800e832:	d105      	bne.n	800e840 <std+0x54>
 800e834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e83c:	f000 bb02 	b.w	800ee44 <__retarget_lock_init_recursive>
 800e840:	bd10      	pop	{r4, pc}
 800e842:	bf00      	nop
 800e844:	0800ead5 	.word	0x0800ead5
 800e848:	0800eaf7 	.word	0x0800eaf7
 800e84c:	0800eb2f 	.word	0x0800eb2f
 800e850:	0800eb53 	.word	0x0800eb53
 800e854:	2000e220 	.word	0x2000e220

0800e858 <stdio_exit_handler>:
 800e858:	4a02      	ldr	r2, [pc, #8]	@ (800e864 <stdio_exit_handler+0xc>)
 800e85a:	4903      	ldr	r1, [pc, #12]	@ (800e868 <stdio_exit_handler+0x10>)
 800e85c:	4803      	ldr	r0, [pc, #12]	@ (800e86c <stdio_exit_handler+0x14>)
 800e85e:	f000 b869 	b.w	800e934 <_fwalk_sglue>
 800e862:	bf00      	nop
 800e864:	200041c0 	.word	0x200041c0
 800e868:	080106e1 	.word	0x080106e1
 800e86c:	200041d0 	.word	0x200041d0

0800e870 <cleanup_stdio>:
 800e870:	6841      	ldr	r1, [r0, #4]
 800e872:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a4 <cleanup_stdio+0x34>)
 800e874:	4299      	cmp	r1, r3
 800e876:	b510      	push	{r4, lr}
 800e878:	4604      	mov	r4, r0
 800e87a:	d001      	beq.n	800e880 <cleanup_stdio+0x10>
 800e87c:	f001 ff30 	bl	80106e0 <_fflush_r>
 800e880:	68a1      	ldr	r1, [r4, #8]
 800e882:	4b09      	ldr	r3, [pc, #36]	@ (800e8a8 <cleanup_stdio+0x38>)
 800e884:	4299      	cmp	r1, r3
 800e886:	d002      	beq.n	800e88e <cleanup_stdio+0x1e>
 800e888:	4620      	mov	r0, r4
 800e88a:	f001 ff29 	bl	80106e0 <_fflush_r>
 800e88e:	68e1      	ldr	r1, [r4, #12]
 800e890:	4b06      	ldr	r3, [pc, #24]	@ (800e8ac <cleanup_stdio+0x3c>)
 800e892:	4299      	cmp	r1, r3
 800e894:	d004      	beq.n	800e8a0 <cleanup_stdio+0x30>
 800e896:	4620      	mov	r0, r4
 800e898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e89c:	f001 bf20 	b.w	80106e0 <_fflush_r>
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	bf00      	nop
 800e8a4:	2000e220 	.word	0x2000e220
 800e8a8:	2000e288 	.word	0x2000e288
 800e8ac:	2000e2f0 	.word	0x2000e2f0

0800e8b0 <global_stdio_init.part.0>:
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <global_stdio_init.part.0+0x30>)
 800e8b4:	4c0b      	ldr	r4, [pc, #44]	@ (800e8e4 <global_stdio_init.part.0+0x34>)
 800e8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e8e8 <global_stdio_init.part.0+0x38>)
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2104      	movs	r1, #4
 800e8c0:	f7ff ff94 	bl	800e7ec <std>
 800e8c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	2109      	movs	r1, #9
 800e8cc:	f7ff ff8e 	bl	800e7ec <std>
 800e8d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8da:	2112      	movs	r1, #18
 800e8dc:	f7ff bf86 	b.w	800e7ec <std>
 800e8e0:	2000e358 	.word	0x2000e358
 800e8e4:	2000e220 	.word	0x2000e220
 800e8e8:	0800e859 	.word	0x0800e859

0800e8ec <__sfp_lock_acquire>:
 800e8ec:	4801      	ldr	r0, [pc, #4]	@ (800e8f4 <__sfp_lock_acquire+0x8>)
 800e8ee:	f000 baaa 	b.w	800ee46 <__retarget_lock_acquire_recursive>
 800e8f2:	bf00      	nop
 800e8f4:	2000e361 	.word	0x2000e361

0800e8f8 <__sfp_lock_release>:
 800e8f8:	4801      	ldr	r0, [pc, #4]	@ (800e900 <__sfp_lock_release+0x8>)
 800e8fa:	f000 baa5 	b.w	800ee48 <__retarget_lock_release_recursive>
 800e8fe:	bf00      	nop
 800e900:	2000e361 	.word	0x2000e361

0800e904 <__sinit>:
 800e904:	b510      	push	{r4, lr}
 800e906:	4604      	mov	r4, r0
 800e908:	f7ff fff0 	bl	800e8ec <__sfp_lock_acquire>
 800e90c:	6a23      	ldr	r3, [r4, #32]
 800e90e:	b11b      	cbz	r3, 800e918 <__sinit+0x14>
 800e910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e914:	f7ff bff0 	b.w	800e8f8 <__sfp_lock_release>
 800e918:	4b04      	ldr	r3, [pc, #16]	@ (800e92c <__sinit+0x28>)
 800e91a:	6223      	str	r3, [r4, #32]
 800e91c:	4b04      	ldr	r3, [pc, #16]	@ (800e930 <__sinit+0x2c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1f5      	bne.n	800e910 <__sinit+0xc>
 800e924:	f7ff ffc4 	bl	800e8b0 <global_stdio_init.part.0>
 800e928:	e7f2      	b.n	800e910 <__sinit+0xc>
 800e92a:	bf00      	nop
 800e92c:	0800e871 	.word	0x0800e871
 800e930:	2000e358 	.word	0x2000e358

0800e934 <_fwalk_sglue>:
 800e934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e938:	4607      	mov	r7, r0
 800e93a:	4688      	mov	r8, r1
 800e93c:	4614      	mov	r4, r2
 800e93e:	2600      	movs	r6, #0
 800e940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e944:	f1b9 0901 	subs.w	r9, r9, #1
 800e948:	d505      	bpl.n	800e956 <_fwalk_sglue+0x22>
 800e94a:	6824      	ldr	r4, [r4, #0]
 800e94c:	2c00      	cmp	r4, #0
 800e94e:	d1f7      	bne.n	800e940 <_fwalk_sglue+0xc>
 800e950:	4630      	mov	r0, r6
 800e952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e956:	89ab      	ldrh	r3, [r5, #12]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d907      	bls.n	800e96c <_fwalk_sglue+0x38>
 800e95c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e960:	3301      	adds	r3, #1
 800e962:	d003      	beq.n	800e96c <_fwalk_sglue+0x38>
 800e964:	4629      	mov	r1, r5
 800e966:	4638      	mov	r0, r7
 800e968:	47c0      	blx	r8
 800e96a:	4306      	orrs	r6, r0
 800e96c:	3568      	adds	r5, #104	@ 0x68
 800e96e:	e7e9      	b.n	800e944 <_fwalk_sglue+0x10>

0800e970 <_fwrite_r>:
 800e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e974:	9c08      	ldr	r4, [sp, #32]
 800e976:	468a      	mov	sl, r1
 800e978:	4690      	mov	r8, r2
 800e97a:	fb02 f903 	mul.w	r9, r2, r3
 800e97e:	4606      	mov	r6, r0
 800e980:	b118      	cbz	r0, 800e98a <_fwrite_r+0x1a>
 800e982:	6a03      	ldr	r3, [r0, #32]
 800e984:	b90b      	cbnz	r3, 800e98a <_fwrite_r+0x1a>
 800e986:	f7ff ffbd 	bl	800e904 <__sinit>
 800e98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e98c:	07dd      	lsls	r5, r3, #31
 800e98e:	d405      	bmi.n	800e99c <_fwrite_r+0x2c>
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	0598      	lsls	r0, r3, #22
 800e994:	d402      	bmi.n	800e99c <_fwrite_r+0x2c>
 800e996:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e998:	f000 fa55 	bl	800ee46 <__retarget_lock_acquire_recursive>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	0719      	lsls	r1, r3, #28
 800e9a0:	d516      	bpl.n	800e9d0 <_fwrite_r+0x60>
 800e9a2:	6923      	ldr	r3, [r4, #16]
 800e9a4:	b1a3      	cbz	r3, 800e9d0 <_fwrite_r+0x60>
 800e9a6:	2500      	movs	r5, #0
 800e9a8:	454d      	cmp	r5, r9
 800e9aa:	d01f      	beq.n	800e9ec <_fwrite_r+0x7c>
 800e9ac:	68a7      	ldr	r7, [r4, #8]
 800e9ae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800e9b2:	3f01      	subs	r7, #1
 800e9b4:	2f00      	cmp	r7, #0
 800e9b6:	60a7      	str	r7, [r4, #8]
 800e9b8:	da04      	bge.n	800e9c4 <_fwrite_r+0x54>
 800e9ba:	69a3      	ldr	r3, [r4, #24]
 800e9bc:	429f      	cmp	r7, r3
 800e9be:	db0f      	blt.n	800e9e0 <_fwrite_r+0x70>
 800e9c0:	290a      	cmp	r1, #10
 800e9c2:	d00d      	beq.n	800e9e0 <_fwrite_r+0x70>
 800e9c4:	6823      	ldr	r3, [r4, #0]
 800e9c6:	1c5a      	adds	r2, r3, #1
 800e9c8:	6022      	str	r2, [r4, #0]
 800e9ca:	7019      	strb	r1, [r3, #0]
 800e9cc:	3501      	adds	r5, #1
 800e9ce:	e7eb      	b.n	800e9a8 <_fwrite_r+0x38>
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f000 f93c 	bl	800ec50 <__swsetup_r>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d0e4      	beq.n	800e9a6 <_fwrite_r+0x36>
 800e9dc:	2500      	movs	r5, #0
 800e9de:	e005      	b.n	800e9ec <_fwrite_r+0x7c>
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f000 f8f6 	bl	800ebd4 <__swbuf_r>
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	d1ef      	bne.n	800e9cc <_fwrite_r+0x5c>
 800e9ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e9ee:	07da      	lsls	r2, r3, #31
 800e9f0:	d405      	bmi.n	800e9fe <_fwrite_r+0x8e>
 800e9f2:	89a3      	ldrh	r3, [r4, #12]
 800e9f4:	059b      	lsls	r3, r3, #22
 800e9f6:	d402      	bmi.n	800e9fe <_fwrite_r+0x8e>
 800e9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9fa:	f000 fa25 	bl	800ee48 <__retarget_lock_release_recursive>
 800e9fe:	fbb5 f0f8 	udiv	r0, r5, r8
 800ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800ea08 <fwrite>:
 800ea08:	b507      	push	{r0, r1, r2, lr}
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	460a      	mov	r2, r1
 800ea10:	4601      	mov	r1, r0
 800ea12:	4803      	ldr	r0, [pc, #12]	@ (800ea20 <fwrite+0x18>)
 800ea14:	6800      	ldr	r0, [r0, #0]
 800ea16:	f7ff ffab 	bl	800e970 <_fwrite_r>
 800ea1a:	b003      	add	sp, #12
 800ea1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea20:	200041cc 	.word	0x200041cc

0800ea24 <sniprintf>:
 800ea24:	b40c      	push	{r2, r3}
 800ea26:	b530      	push	{r4, r5, lr}
 800ea28:	4b18      	ldr	r3, [pc, #96]	@ (800ea8c <sniprintf+0x68>)
 800ea2a:	1e0c      	subs	r4, r1, #0
 800ea2c:	681d      	ldr	r5, [r3, #0]
 800ea2e:	b09d      	sub	sp, #116	@ 0x74
 800ea30:	da08      	bge.n	800ea44 <sniprintf+0x20>
 800ea32:	238b      	movs	r3, #139	@ 0x8b
 800ea34:	602b      	str	r3, [r5, #0]
 800ea36:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3a:	b01d      	add	sp, #116	@ 0x74
 800ea3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea40:	b002      	add	sp, #8
 800ea42:	4770      	bx	lr
 800ea44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea4c:	f04f 0300 	mov.w	r3, #0
 800ea50:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ea52:	bf14      	ite	ne
 800ea54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea58:	4623      	moveq	r3, r4
 800ea5a:	9304      	str	r3, [sp, #16]
 800ea5c:	9307      	str	r3, [sp, #28]
 800ea5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea62:	9002      	str	r0, [sp, #8]
 800ea64:	9006      	str	r0, [sp, #24]
 800ea66:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea6c:	ab21      	add	r3, sp, #132	@ 0x84
 800ea6e:	a902      	add	r1, sp, #8
 800ea70:	4628      	mov	r0, r5
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	f001 fcb4 	bl	80103e0 <_svfiprintf_r>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	bfbc      	itt	lt
 800ea7c:	238b      	movlt	r3, #139	@ 0x8b
 800ea7e:	602b      	strlt	r3, [r5, #0]
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	d0da      	beq.n	800ea3a <sniprintf+0x16>
 800ea84:	9b02      	ldr	r3, [sp, #8]
 800ea86:	2200      	movs	r2, #0
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	e7d6      	b.n	800ea3a <sniprintf+0x16>
 800ea8c:	200041cc 	.word	0x200041cc

0800ea90 <siprintf>:
 800ea90:	b40e      	push	{r1, r2, r3}
 800ea92:	b510      	push	{r4, lr}
 800ea94:	b09d      	sub	sp, #116	@ 0x74
 800ea96:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ea98:	9002      	str	r0, [sp, #8]
 800ea9a:	9006      	str	r0, [sp, #24]
 800ea9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eaa0:	480a      	ldr	r0, [pc, #40]	@ (800eacc <siprintf+0x3c>)
 800eaa2:	9107      	str	r1, [sp, #28]
 800eaa4:	9104      	str	r1, [sp, #16]
 800eaa6:	490a      	ldr	r1, [pc, #40]	@ (800ead0 <siprintf+0x40>)
 800eaa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaac:	9105      	str	r1, [sp, #20]
 800eaae:	2400      	movs	r4, #0
 800eab0:	a902      	add	r1, sp, #8
 800eab2:	6800      	ldr	r0, [r0, #0]
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eab8:	f001 fc92 	bl	80103e0 <_svfiprintf_r>
 800eabc:	9b02      	ldr	r3, [sp, #8]
 800eabe:	701c      	strb	r4, [r3, #0]
 800eac0:	b01d      	add	sp, #116	@ 0x74
 800eac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eac6:	b003      	add	sp, #12
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200041cc 	.word	0x200041cc
 800ead0:	ffff0208 	.word	0xffff0208

0800ead4 <__sread>:
 800ead4:	b510      	push	{r4, lr}
 800ead6:	460c      	mov	r4, r1
 800ead8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eadc:	f000 f964 	bl	800eda8 <_read_r>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	bfab      	itete	ge
 800eae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eae6:	89a3      	ldrhlt	r3, [r4, #12]
 800eae8:	181b      	addge	r3, r3, r0
 800eaea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eaee:	bfac      	ite	ge
 800eaf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eaf2:	81a3      	strhlt	r3, [r4, #12]
 800eaf4:	bd10      	pop	{r4, pc}

0800eaf6 <__swrite>:
 800eaf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafa:	461f      	mov	r7, r3
 800eafc:	898b      	ldrh	r3, [r1, #12]
 800eafe:	05db      	lsls	r3, r3, #23
 800eb00:	4605      	mov	r5, r0
 800eb02:	460c      	mov	r4, r1
 800eb04:	4616      	mov	r6, r2
 800eb06:	d505      	bpl.n	800eb14 <__swrite+0x1e>
 800eb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f000 f938 	bl	800ed84 <_lseek_r>
 800eb14:	89a3      	ldrh	r3, [r4, #12]
 800eb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb1e:	81a3      	strh	r3, [r4, #12]
 800eb20:	4632      	mov	r2, r6
 800eb22:	463b      	mov	r3, r7
 800eb24:	4628      	mov	r0, r5
 800eb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2a:	f000 b94f 	b.w	800edcc <_write_r>

0800eb2e <__sseek>:
 800eb2e:	b510      	push	{r4, lr}
 800eb30:	460c      	mov	r4, r1
 800eb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb36:	f000 f925 	bl	800ed84 <_lseek_r>
 800eb3a:	1c43      	adds	r3, r0, #1
 800eb3c:	89a3      	ldrh	r3, [r4, #12]
 800eb3e:	bf15      	itete	ne
 800eb40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb4a:	81a3      	strheq	r3, [r4, #12]
 800eb4c:	bf18      	it	ne
 800eb4e:	81a3      	strhne	r3, [r4, #12]
 800eb50:	bd10      	pop	{r4, pc}

0800eb52 <__sclose>:
 800eb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb56:	f000 b905 	b.w	800ed64 <_close_r>

0800eb5a <_vsniprintf_r>:
 800eb5a:	b530      	push	{r4, r5, lr}
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	2c00      	cmp	r4, #0
 800eb60:	b09b      	sub	sp, #108	@ 0x6c
 800eb62:	4605      	mov	r5, r0
 800eb64:	461a      	mov	r2, r3
 800eb66:	da05      	bge.n	800eb74 <_vsniprintf_r+0x1a>
 800eb68:	238b      	movs	r3, #139	@ 0x8b
 800eb6a:	6003      	str	r3, [r0, #0]
 800eb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb70:	b01b      	add	sp, #108	@ 0x6c
 800eb72:	bd30      	pop	{r4, r5, pc}
 800eb74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800eb78:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eb7c:	f04f 0300 	mov.w	r3, #0
 800eb80:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb82:	bf14      	ite	ne
 800eb84:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eb88:	4623      	moveq	r3, r4
 800eb8a:	9302      	str	r3, [sp, #8]
 800eb8c:	9305      	str	r3, [sp, #20]
 800eb8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb92:	9100      	str	r1, [sp, #0]
 800eb94:	9104      	str	r1, [sp, #16]
 800eb96:	f8ad 300e 	strh.w	r3, [sp, #14]
 800eb9a:	4669      	mov	r1, sp
 800eb9c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eb9e:	f001 fc1f 	bl	80103e0 <_svfiprintf_r>
 800eba2:	1c43      	adds	r3, r0, #1
 800eba4:	bfbc      	itt	lt
 800eba6:	238b      	movlt	r3, #139	@ 0x8b
 800eba8:	602b      	strlt	r3, [r5, #0]
 800ebaa:	2c00      	cmp	r4, #0
 800ebac:	d0e0      	beq.n	800eb70 <_vsniprintf_r+0x16>
 800ebae:	9b00      	ldr	r3, [sp, #0]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	701a      	strb	r2, [r3, #0]
 800ebb4:	e7dc      	b.n	800eb70 <_vsniprintf_r+0x16>
	...

0800ebb8 <vsniprintf>:
 800ebb8:	b507      	push	{r0, r1, r2, lr}
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	460a      	mov	r2, r1
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	4803      	ldr	r0, [pc, #12]	@ (800ebd0 <vsniprintf+0x18>)
 800ebc4:	6800      	ldr	r0, [r0, #0]
 800ebc6:	f7ff ffc8 	bl	800eb5a <_vsniprintf_r>
 800ebca:	b003      	add	sp, #12
 800ebcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebd0:	200041cc 	.word	0x200041cc

0800ebd4 <__swbuf_r>:
 800ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd6:	460e      	mov	r6, r1
 800ebd8:	4614      	mov	r4, r2
 800ebda:	4605      	mov	r5, r0
 800ebdc:	b118      	cbz	r0, 800ebe6 <__swbuf_r+0x12>
 800ebde:	6a03      	ldr	r3, [r0, #32]
 800ebe0:	b90b      	cbnz	r3, 800ebe6 <__swbuf_r+0x12>
 800ebe2:	f7ff fe8f 	bl	800e904 <__sinit>
 800ebe6:	69a3      	ldr	r3, [r4, #24]
 800ebe8:	60a3      	str	r3, [r4, #8]
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	071a      	lsls	r2, r3, #28
 800ebee:	d501      	bpl.n	800ebf4 <__swbuf_r+0x20>
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	b943      	cbnz	r3, 800ec06 <__swbuf_r+0x32>
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f000 f82a 	bl	800ec50 <__swsetup_r>
 800ebfc:	b118      	cbz	r0, 800ec06 <__swbuf_r+0x32>
 800ebfe:	f04f 37ff 	mov.w	r7, #4294967295
 800ec02:	4638      	mov	r0, r7
 800ec04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	6922      	ldr	r2, [r4, #16]
 800ec0a:	1a98      	subs	r0, r3, r2
 800ec0c:	6963      	ldr	r3, [r4, #20]
 800ec0e:	b2f6      	uxtb	r6, r6
 800ec10:	4283      	cmp	r3, r0
 800ec12:	4637      	mov	r7, r6
 800ec14:	dc05      	bgt.n	800ec22 <__swbuf_r+0x4e>
 800ec16:	4621      	mov	r1, r4
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f001 fd61 	bl	80106e0 <_fflush_r>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	d1ed      	bne.n	800ebfe <__swbuf_r+0x2a>
 800ec22:	68a3      	ldr	r3, [r4, #8]
 800ec24:	3b01      	subs	r3, #1
 800ec26:	60a3      	str	r3, [r4, #8]
 800ec28:	6823      	ldr	r3, [r4, #0]
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	6022      	str	r2, [r4, #0]
 800ec2e:	701e      	strb	r6, [r3, #0]
 800ec30:	6962      	ldr	r2, [r4, #20]
 800ec32:	1c43      	adds	r3, r0, #1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d004      	beq.n	800ec42 <__swbuf_r+0x6e>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	07db      	lsls	r3, r3, #31
 800ec3c:	d5e1      	bpl.n	800ec02 <__swbuf_r+0x2e>
 800ec3e:	2e0a      	cmp	r6, #10
 800ec40:	d1df      	bne.n	800ec02 <__swbuf_r+0x2e>
 800ec42:	4621      	mov	r1, r4
 800ec44:	4628      	mov	r0, r5
 800ec46:	f001 fd4b 	bl	80106e0 <_fflush_r>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d0d9      	beq.n	800ec02 <__swbuf_r+0x2e>
 800ec4e:	e7d6      	b.n	800ebfe <__swbuf_r+0x2a>

0800ec50 <__swsetup_r>:
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	4b29      	ldr	r3, [pc, #164]	@ (800ecf8 <__swsetup_r+0xa8>)
 800ec54:	4605      	mov	r5, r0
 800ec56:	6818      	ldr	r0, [r3, #0]
 800ec58:	460c      	mov	r4, r1
 800ec5a:	b118      	cbz	r0, 800ec64 <__swsetup_r+0x14>
 800ec5c:	6a03      	ldr	r3, [r0, #32]
 800ec5e:	b90b      	cbnz	r3, 800ec64 <__swsetup_r+0x14>
 800ec60:	f7ff fe50 	bl	800e904 <__sinit>
 800ec64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec68:	0719      	lsls	r1, r3, #28
 800ec6a:	d422      	bmi.n	800ecb2 <__swsetup_r+0x62>
 800ec6c:	06da      	lsls	r2, r3, #27
 800ec6e:	d407      	bmi.n	800ec80 <__swsetup_r+0x30>
 800ec70:	2209      	movs	r2, #9
 800ec72:	602a      	str	r2, [r5, #0]
 800ec74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7e:	e033      	b.n	800ece8 <__swsetup_r+0x98>
 800ec80:	0758      	lsls	r0, r3, #29
 800ec82:	d512      	bpl.n	800ecaa <__swsetup_r+0x5a>
 800ec84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec86:	b141      	cbz	r1, 800ec9a <__swsetup_r+0x4a>
 800ec88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	d002      	beq.n	800ec96 <__swsetup_r+0x46>
 800ec90:	4628      	mov	r0, r5
 800ec92:	f000 fecf 	bl	800fa34 <_free_r>
 800ec96:	2300      	movs	r3, #0
 800ec98:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	2300      	movs	r3, #0
 800eca4:	6063      	str	r3, [r4, #4]
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	f043 0308 	orr.w	r3, r3, #8
 800ecb0:	81a3      	strh	r3, [r4, #12]
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	b94b      	cbnz	r3, 800ecca <__swsetup_r+0x7a>
 800ecb6:	89a3      	ldrh	r3, [r4, #12]
 800ecb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ecbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecc0:	d003      	beq.n	800ecca <__swsetup_r+0x7a>
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	f001 fd59 	bl	801077c <__smakebuf_r>
 800ecca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecce:	f013 0201 	ands.w	r2, r3, #1
 800ecd2:	d00a      	beq.n	800ecea <__swsetup_r+0x9a>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	60a2      	str	r2, [r4, #8]
 800ecd8:	6962      	ldr	r2, [r4, #20]
 800ecda:	4252      	negs	r2, r2
 800ecdc:	61a2      	str	r2, [r4, #24]
 800ecde:	6922      	ldr	r2, [r4, #16]
 800ece0:	b942      	cbnz	r2, 800ecf4 <__swsetup_r+0xa4>
 800ece2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ece6:	d1c5      	bne.n	800ec74 <__swsetup_r+0x24>
 800ece8:	bd38      	pop	{r3, r4, r5, pc}
 800ecea:	0799      	lsls	r1, r3, #30
 800ecec:	bf58      	it	pl
 800ecee:	6962      	ldrpl	r2, [r4, #20]
 800ecf0:	60a2      	str	r2, [r4, #8]
 800ecf2:	e7f4      	b.n	800ecde <__swsetup_r+0x8e>
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	e7f7      	b.n	800ece8 <__swsetup_r+0x98>
 800ecf8:	200041cc 	.word	0x200041cc

0800ecfc <memmove>:
 800ecfc:	4288      	cmp	r0, r1
 800ecfe:	b510      	push	{r4, lr}
 800ed00:	eb01 0402 	add.w	r4, r1, r2
 800ed04:	d902      	bls.n	800ed0c <memmove+0x10>
 800ed06:	4284      	cmp	r4, r0
 800ed08:	4623      	mov	r3, r4
 800ed0a:	d807      	bhi.n	800ed1c <memmove+0x20>
 800ed0c:	1e43      	subs	r3, r0, #1
 800ed0e:	42a1      	cmp	r1, r4
 800ed10:	d008      	beq.n	800ed24 <memmove+0x28>
 800ed12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed1a:	e7f8      	b.n	800ed0e <memmove+0x12>
 800ed1c:	4402      	add	r2, r0
 800ed1e:	4601      	mov	r1, r0
 800ed20:	428a      	cmp	r2, r1
 800ed22:	d100      	bne.n	800ed26 <memmove+0x2a>
 800ed24:	bd10      	pop	{r4, pc}
 800ed26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed2e:	e7f7      	b.n	800ed20 <memmove+0x24>

0800ed30 <memset>:
 800ed30:	4402      	add	r2, r0
 800ed32:	4603      	mov	r3, r0
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d100      	bne.n	800ed3a <memset+0xa>
 800ed38:	4770      	bx	lr
 800ed3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed3e:	e7f9      	b.n	800ed34 <memset+0x4>

0800ed40 <strchr>:
 800ed40:	b2c9      	uxtb	r1, r1
 800ed42:	4603      	mov	r3, r0
 800ed44:	4618      	mov	r0, r3
 800ed46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed4a:	b112      	cbz	r2, 800ed52 <strchr+0x12>
 800ed4c:	428a      	cmp	r2, r1
 800ed4e:	d1f9      	bne.n	800ed44 <strchr+0x4>
 800ed50:	4770      	bx	lr
 800ed52:	2900      	cmp	r1, #0
 800ed54:	bf18      	it	ne
 800ed56:	2000      	movne	r0, #0
 800ed58:	4770      	bx	lr
	...

0800ed5c <_localeconv_r>:
 800ed5c:	4800      	ldr	r0, [pc, #0]	@ (800ed60 <_localeconv_r+0x4>)
 800ed5e:	4770      	bx	lr
 800ed60:	2000430c 	.word	0x2000430c

0800ed64 <_close_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4d06      	ldr	r5, [pc, #24]	@ (800ed80 <_close_r+0x1c>)
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	4608      	mov	r0, r1
 800ed6e:	602b      	str	r3, [r5, #0]
 800ed70:	f7f4 f871 	bl	8002e56 <_close>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	d102      	bne.n	800ed7e <_close_r+0x1a>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	b103      	cbz	r3, 800ed7e <_close_r+0x1a>
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	2000e35c 	.word	0x2000e35c

0800ed84 <_lseek_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d07      	ldr	r5, [pc, #28]	@ (800eda4 <_lseek_r+0x20>)
 800ed88:	4604      	mov	r4, r0
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	4611      	mov	r1, r2
 800ed8e:	2200      	movs	r2, #0
 800ed90:	602a      	str	r2, [r5, #0]
 800ed92:	461a      	mov	r2, r3
 800ed94:	f7f4 f886 	bl	8002ea4 <_lseek>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d102      	bne.n	800eda2 <_lseek_r+0x1e>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	b103      	cbz	r3, 800eda2 <_lseek_r+0x1e>
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	2000e35c 	.word	0x2000e35c

0800eda8 <_read_r>:
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	4d07      	ldr	r5, [pc, #28]	@ (800edc8 <_read_r+0x20>)
 800edac:	4604      	mov	r4, r0
 800edae:	4608      	mov	r0, r1
 800edb0:	4611      	mov	r1, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	602a      	str	r2, [r5, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	f7f4 f814 	bl	8002de4 <_read>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_read_r+0x1e>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_read_r+0x1e>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	2000e35c 	.word	0x2000e35c

0800edcc <_write_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	@ (800edec <_write_r+0x20>)
 800edd0:	4604      	mov	r4, r0
 800edd2:	4608      	mov	r0, r1
 800edd4:	4611      	mov	r1, r2
 800edd6:	2200      	movs	r2, #0
 800edd8:	602a      	str	r2, [r5, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	f7f4 f81f 	bl	8002e1e <_write>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_write_r+0x1e>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_write_r+0x1e>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	2000e35c 	.word	0x2000e35c

0800edf0 <__errno>:
 800edf0:	4b01      	ldr	r3, [pc, #4]	@ (800edf8 <__errno+0x8>)
 800edf2:	6818      	ldr	r0, [r3, #0]
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	200041cc 	.word	0x200041cc

0800edfc <__libc_init_array>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	4d0d      	ldr	r5, [pc, #52]	@ (800ee34 <__libc_init_array+0x38>)
 800ee00:	4c0d      	ldr	r4, [pc, #52]	@ (800ee38 <__libc_init_array+0x3c>)
 800ee02:	1b64      	subs	r4, r4, r5
 800ee04:	10a4      	asrs	r4, r4, #2
 800ee06:	2600      	movs	r6, #0
 800ee08:	42a6      	cmp	r6, r4
 800ee0a:	d109      	bne.n	800ee20 <__libc_init_array+0x24>
 800ee0c:	4d0b      	ldr	r5, [pc, #44]	@ (800ee3c <__libc_init_array+0x40>)
 800ee0e:	4c0c      	ldr	r4, [pc, #48]	@ (800ee40 <__libc_init_array+0x44>)
 800ee10:	f001 ff48 	bl	8010ca4 <_init>
 800ee14:	1b64      	subs	r4, r4, r5
 800ee16:	10a4      	asrs	r4, r4, #2
 800ee18:	2600      	movs	r6, #0
 800ee1a:	42a6      	cmp	r6, r4
 800ee1c:	d105      	bne.n	800ee2a <__libc_init_array+0x2e>
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}
 800ee20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee24:	4798      	blx	r3
 800ee26:	3601      	adds	r6, #1
 800ee28:	e7ee      	b.n	800ee08 <__libc_init_array+0xc>
 800ee2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee2e:	4798      	blx	r3
 800ee30:	3601      	adds	r6, #1
 800ee32:	e7f2      	b.n	800ee1a <__libc_init_array+0x1e>
 800ee34:	08012ad8 	.word	0x08012ad8
 800ee38:	08012ad8 	.word	0x08012ad8
 800ee3c:	08012ad8 	.word	0x08012ad8
 800ee40:	08012adc 	.word	0x08012adc

0800ee44 <__retarget_lock_init_recursive>:
 800ee44:	4770      	bx	lr

0800ee46 <__retarget_lock_acquire_recursive>:
 800ee46:	4770      	bx	lr

0800ee48 <__retarget_lock_release_recursive>:
 800ee48:	4770      	bx	lr

0800ee4a <memcpy>:
 800ee4a:	440a      	add	r2, r1
 800ee4c:	4291      	cmp	r1, r2
 800ee4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee52:	d100      	bne.n	800ee56 <memcpy+0xc>
 800ee54:	4770      	bx	lr
 800ee56:	b510      	push	{r4, lr}
 800ee58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee60:	4291      	cmp	r1, r2
 800ee62:	d1f9      	bne.n	800ee58 <memcpy+0xe>
 800ee64:	bd10      	pop	{r4, pc}

0800ee66 <quorem>:
 800ee66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6a:	6903      	ldr	r3, [r0, #16]
 800ee6c:	690c      	ldr	r4, [r1, #16]
 800ee6e:	42a3      	cmp	r3, r4
 800ee70:	4607      	mov	r7, r0
 800ee72:	db7e      	blt.n	800ef72 <quorem+0x10c>
 800ee74:	3c01      	subs	r4, #1
 800ee76:	f101 0814 	add.w	r8, r1, #20
 800ee7a:	00a3      	lsls	r3, r4, #2
 800ee7c:	f100 0514 	add.w	r5, r0, #20
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee90:	3301      	adds	r3, #1
 800ee92:	429a      	cmp	r2, r3
 800ee94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee9c:	d32e      	bcc.n	800eefc <quorem+0x96>
 800ee9e:	f04f 0a00 	mov.w	sl, #0
 800eea2:	46c4      	mov	ip, r8
 800eea4:	46ae      	mov	lr, r5
 800eea6:	46d3      	mov	fp, sl
 800eea8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eeac:	b298      	uxth	r0, r3
 800eeae:	fb06 a000 	mla	r0, r6, r0, sl
 800eeb2:	0c02      	lsrs	r2, r0, #16
 800eeb4:	0c1b      	lsrs	r3, r3, #16
 800eeb6:	fb06 2303 	mla	r3, r6, r3, r2
 800eeba:	f8de 2000 	ldr.w	r2, [lr]
 800eebe:	b280      	uxth	r0, r0
 800eec0:	b292      	uxth	r2, r2
 800eec2:	1a12      	subs	r2, r2, r0
 800eec4:	445a      	add	r2, fp
 800eec6:	f8de 0000 	ldr.w	r0, [lr]
 800eeca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eece:	b29b      	uxth	r3, r3
 800eed0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eed4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eed8:	b292      	uxth	r2, r2
 800eeda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eede:	45e1      	cmp	r9, ip
 800eee0:	f84e 2b04 	str.w	r2, [lr], #4
 800eee4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eee8:	d2de      	bcs.n	800eea8 <quorem+0x42>
 800eeea:	9b00      	ldr	r3, [sp, #0]
 800eeec:	58eb      	ldr	r3, [r5, r3]
 800eeee:	b92b      	cbnz	r3, 800eefc <quorem+0x96>
 800eef0:	9b01      	ldr	r3, [sp, #4]
 800eef2:	3b04      	subs	r3, #4
 800eef4:	429d      	cmp	r5, r3
 800eef6:	461a      	mov	r2, r3
 800eef8:	d32f      	bcc.n	800ef5a <quorem+0xf4>
 800eefa:	613c      	str	r4, [r7, #16]
 800eefc:	4638      	mov	r0, r7
 800eefe:	f001 f90b 	bl	8010118 <__mcmp>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	db25      	blt.n	800ef52 <quorem+0xec>
 800ef06:	4629      	mov	r1, r5
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef0e:	f8d1 c000 	ldr.w	ip, [r1]
 800ef12:	fa1f fe82 	uxth.w	lr, r2
 800ef16:	fa1f f38c 	uxth.w	r3, ip
 800ef1a:	eba3 030e 	sub.w	r3, r3, lr
 800ef1e:	4403      	add	r3, r0
 800ef20:	0c12      	lsrs	r2, r2, #16
 800ef22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef30:	45c1      	cmp	r9, r8
 800ef32:	f841 3b04 	str.w	r3, [r1], #4
 800ef36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef3a:	d2e6      	bcs.n	800ef0a <quorem+0xa4>
 800ef3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef44:	b922      	cbnz	r2, 800ef50 <quorem+0xea>
 800ef46:	3b04      	subs	r3, #4
 800ef48:	429d      	cmp	r5, r3
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	d30b      	bcc.n	800ef66 <quorem+0x100>
 800ef4e:	613c      	str	r4, [r7, #16]
 800ef50:	3601      	adds	r6, #1
 800ef52:	4630      	mov	r0, r6
 800ef54:	b003      	add	sp, #12
 800ef56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5a:	6812      	ldr	r2, [r2, #0]
 800ef5c:	3b04      	subs	r3, #4
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	d1cb      	bne.n	800eefa <quorem+0x94>
 800ef62:	3c01      	subs	r4, #1
 800ef64:	e7c6      	b.n	800eef4 <quorem+0x8e>
 800ef66:	6812      	ldr	r2, [r2, #0]
 800ef68:	3b04      	subs	r3, #4
 800ef6a:	2a00      	cmp	r2, #0
 800ef6c:	d1ef      	bne.n	800ef4e <quorem+0xe8>
 800ef6e:	3c01      	subs	r4, #1
 800ef70:	e7ea      	b.n	800ef48 <quorem+0xe2>
 800ef72:	2000      	movs	r0, #0
 800ef74:	e7ee      	b.n	800ef54 <quorem+0xee>
	...

0800ef78 <_dtoa_r>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	ed2d 8b02 	vpush	{d8}
 800ef80:	69c7      	ldr	r7, [r0, #28]
 800ef82:	b091      	sub	sp, #68	@ 0x44
 800ef84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef88:	ec55 4b10 	vmov	r4, r5, d0
 800ef8c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ef8e:	9107      	str	r1, [sp, #28]
 800ef90:	4681      	mov	r9, r0
 800ef92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef94:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef96:	b97f      	cbnz	r7, 800efb8 <_dtoa_r+0x40>
 800ef98:	2010      	movs	r0, #16
 800ef9a:	f000 fd95 	bl	800fac8 <malloc>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	f8c9 001c 	str.w	r0, [r9, #28]
 800efa4:	b920      	cbnz	r0, 800efb0 <_dtoa_r+0x38>
 800efa6:	4ba0      	ldr	r3, [pc, #640]	@ (800f228 <_dtoa_r+0x2b0>)
 800efa8:	21ef      	movs	r1, #239	@ 0xef
 800efaa:	48a0      	ldr	r0, [pc, #640]	@ (800f22c <_dtoa_r+0x2b4>)
 800efac:	f001 fc54 	bl	8010858 <__assert_func>
 800efb0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800efb4:	6007      	str	r7, [r0, #0]
 800efb6:	60c7      	str	r7, [r0, #12]
 800efb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800efbc:	6819      	ldr	r1, [r3, #0]
 800efbe:	b159      	cbz	r1, 800efd8 <_dtoa_r+0x60>
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	604a      	str	r2, [r1, #4]
 800efc4:	2301      	movs	r3, #1
 800efc6:	4093      	lsls	r3, r2
 800efc8:	608b      	str	r3, [r1, #8]
 800efca:	4648      	mov	r0, r9
 800efcc:	f000 fe72 	bl	800fcb4 <_Bfree>
 800efd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	1e2b      	subs	r3, r5, #0
 800efda:	bfbb      	ittet	lt
 800efdc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800efe0:	9303      	strlt	r3, [sp, #12]
 800efe2:	2300      	movge	r3, #0
 800efe4:	2201      	movlt	r2, #1
 800efe6:	bfac      	ite	ge
 800efe8:	6033      	strge	r3, [r6, #0]
 800efea:	6032      	strlt	r2, [r6, #0]
 800efec:	4b90      	ldr	r3, [pc, #576]	@ (800f230 <_dtoa_r+0x2b8>)
 800efee:	9e03      	ldr	r6, [sp, #12]
 800eff0:	43b3      	bics	r3, r6
 800eff2:	d110      	bne.n	800f016 <_dtoa_r+0x9e>
 800eff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eff6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800effa:	6013      	str	r3, [r2, #0]
 800effc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f000:	4323      	orrs	r3, r4
 800f002:	f000 84e6 	beq.w	800f9d2 <_dtoa_r+0xa5a>
 800f006:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f008:	4f8a      	ldr	r7, [pc, #552]	@ (800f234 <_dtoa_r+0x2bc>)
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 84e8 	beq.w	800f9e0 <_dtoa_r+0xa68>
 800f010:	1cfb      	adds	r3, r7, #3
 800f012:	f000 bce3 	b.w	800f9dc <_dtoa_r+0xa64>
 800f016:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f01a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f022:	d10a      	bne.n	800f03a <_dtoa_r+0xc2>
 800f024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f026:	2301      	movs	r3, #1
 800f028:	6013      	str	r3, [r2, #0]
 800f02a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f02c:	b113      	cbz	r3, 800f034 <_dtoa_r+0xbc>
 800f02e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f030:	4b81      	ldr	r3, [pc, #516]	@ (800f238 <_dtoa_r+0x2c0>)
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	4f81      	ldr	r7, [pc, #516]	@ (800f23c <_dtoa_r+0x2c4>)
 800f036:	f000 bcd3 	b.w	800f9e0 <_dtoa_r+0xa68>
 800f03a:	aa0e      	add	r2, sp, #56	@ 0x38
 800f03c:	a90f      	add	r1, sp, #60	@ 0x3c
 800f03e:	4648      	mov	r0, r9
 800f040:	eeb0 0b48 	vmov.f64	d0, d8
 800f044:	f001 f918 	bl	8010278 <__d2b>
 800f048:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f04e:	9001      	str	r0, [sp, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d045      	beq.n	800f0e0 <_dtoa_r+0x168>
 800f054:	eeb0 7b48 	vmov.f64	d7, d8
 800f058:	ee18 1a90 	vmov	r1, s17
 800f05c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f060:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f064:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f068:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f06c:	2500      	movs	r5, #0
 800f06e:	ee07 1a90 	vmov	s15, r1
 800f072:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f076:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f210 <_dtoa_r+0x298>
 800f07a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f07e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f218 <_dtoa_r+0x2a0>
 800f082:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f086:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f220 <_dtoa_r+0x2a8>
 800f08a:	ee07 3a90 	vmov	s15, r3
 800f08e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f092:	eeb0 7b46 	vmov.f64	d7, d6
 800f096:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f09a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f09e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a6:	ee16 8a90 	vmov	r8, s13
 800f0aa:	d508      	bpl.n	800f0be <_dtoa_r+0x146>
 800f0ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f0b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800f0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b8:	bf18      	it	ne
 800f0ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f0be:	f1b8 0f16 	cmp.w	r8, #22
 800f0c2:	d82b      	bhi.n	800f11c <_dtoa_r+0x1a4>
 800f0c4:	495e      	ldr	r1, [pc, #376]	@ (800f240 <_dtoa_r+0x2c8>)
 800f0c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f0ca:	ed91 7b00 	vldr	d7, [r1]
 800f0ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d6:	d501      	bpl.n	800f0dc <_dtoa_r+0x164>
 800f0d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0dc:	2100      	movs	r1, #0
 800f0de:	e01e      	b.n	800f11e <_dtoa_r+0x1a6>
 800f0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f0e8:	2920      	cmp	r1, #32
 800f0ea:	bfc1      	itttt	gt
 800f0ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f0f0:	408e      	lslgt	r6, r1
 800f0f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f0f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f0fa:	bfd6      	itet	le
 800f0fc:	f1c1 0120 	rsble	r1, r1, #32
 800f100:	4331      	orrgt	r1, r6
 800f102:	fa04 f101 	lslle.w	r1, r4, r1
 800f106:	ee07 1a90 	vmov	s15, r1
 800f10a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f10e:	3b01      	subs	r3, #1
 800f110:	ee17 1a90 	vmov	r1, s15
 800f114:	2501      	movs	r5, #1
 800f116:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f11a:	e7a8      	b.n	800f06e <_dtoa_r+0xf6>
 800f11c:	2101      	movs	r1, #1
 800f11e:	1ad2      	subs	r2, r2, r3
 800f120:	1e53      	subs	r3, r2, #1
 800f122:	9306      	str	r3, [sp, #24]
 800f124:	bf45      	ittet	mi
 800f126:	f1c2 0301 	rsbmi	r3, r2, #1
 800f12a:	9304      	strmi	r3, [sp, #16]
 800f12c:	2300      	movpl	r3, #0
 800f12e:	2300      	movmi	r3, #0
 800f130:	bf4c      	ite	mi
 800f132:	9306      	strmi	r3, [sp, #24]
 800f134:	9304      	strpl	r3, [sp, #16]
 800f136:	f1b8 0f00 	cmp.w	r8, #0
 800f13a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f13c:	db18      	blt.n	800f170 <_dtoa_r+0x1f8>
 800f13e:	9b06      	ldr	r3, [sp, #24]
 800f140:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f144:	4443      	add	r3, r8
 800f146:	9306      	str	r3, [sp, #24]
 800f148:	2300      	movs	r3, #0
 800f14a:	9a07      	ldr	r2, [sp, #28]
 800f14c:	2a09      	cmp	r2, #9
 800f14e:	d845      	bhi.n	800f1dc <_dtoa_r+0x264>
 800f150:	2a05      	cmp	r2, #5
 800f152:	bfc4      	itt	gt
 800f154:	3a04      	subgt	r2, #4
 800f156:	9207      	strgt	r2, [sp, #28]
 800f158:	9a07      	ldr	r2, [sp, #28]
 800f15a:	f1a2 0202 	sub.w	r2, r2, #2
 800f15e:	bfcc      	ite	gt
 800f160:	2400      	movgt	r4, #0
 800f162:	2401      	movle	r4, #1
 800f164:	2a03      	cmp	r2, #3
 800f166:	d844      	bhi.n	800f1f2 <_dtoa_r+0x27a>
 800f168:	e8df f002 	tbb	[pc, r2]
 800f16c:	0b173634 	.word	0x0b173634
 800f170:	9b04      	ldr	r3, [sp, #16]
 800f172:	2200      	movs	r2, #0
 800f174:	eba3 0308 	sub.w	r3, r3, r8
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f17c:	f1c8 0300 	rsb	r3, r8, #0
 800f180:	e7e3      	b.n	800f14a <_dtoa_r+0x1d2>
 800f182:	2201      	movs	r2, #1
 800f184:	9208      	str	r2, [sp, #32]
 800f186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f188:	eb08 0b02 	add.w	fp, r8, r2
 800f18c:	f10b 0a01 	add.w	sl, fp, #1
 800f190:	4652      	mov	r2, sl
 800f192:	2a01      	cmp	r2, #1
 800f194:	bfb8      	it	lt
 800f196:	2201      	movlt	r2, #1
 800f198:	e006      	b.n	800f1a8 <_dtoa_r+0x230>
 800f19a:	2201      	movs	r2, #1
 800f19c:	9208      	str	r2, [sp, #32]
 800f19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1a0:	2a00      	cmp	r2, #0
 800f1a2:	dd29      	ble.n	800f1f8 <_dtoa_r+0x280>
 800f1a4:	4693      	mov	fp, r2
 800f1a6:	4692      	mov	sl, r2
 800f1a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	2004      	movs	r0, #4
 800f1b0:	f100 0614 	add.w	r6, r0, #20
 800f1b4:	4296      	cmp	r6, r2
 800f1b6:	d926      	bls.n	800f206 <_dtoa_r+0x28e>
 800f1b8:	6079      	str	r1, [r7, #4]
 800f1ba:	4648      	mov	r0, r9
 800f1bc:	9305      	str	r3, [sp, #20]
 800f1be:	f000 fd39 	bl	800fc34 <_Balloc>
 800f1c2:	9b05      	ldr	r3, [sp, #20]
 800f1c4:	4607      	mov	r7, r0
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d13e      	bne.n	800f248 <_dtoa_r+0x2d0>
 800f1ca:	4b1e      	ldr	r3, [pc, #120]	@ (800f244 <_dtoa_r+0x2cc>)
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800f1d2:	e6ea      	b.n	800efaa <_dtoa_r+0x32>
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	e7e1      	b.n	800f19c <_dtoa_r+0x224>
 800f1d8:	2200      	movs	r2, #0
 800f1da:	e7d3      	b.n	800f184 <_dtoa_r+0x20c>
 800f1dc:	2401      	movs	r4, #1
 800f1de:	2200      	movs	r2, #0
 800f1e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f1e4:	f04f 3bff 	mov.w	fp, #4294967295
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	46da      	mov	sl, fp
 800f1ec:	2212      	movs	r2, #18
 800f1ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800f1f0:	e7da      	b.n	800f1a8 <_dtoa_r+0x230>
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	9208      	str	r2, [sp, #32]
 800f1f6:	e7f5      	b.n	800f1e4 <_dtoa_r+0x26c>
 800f1f8:	f04f 0b01 	mov.w	fp, #1
 800f1fc:	46da      	mov	sl, fp
 800f1fe:	465a      	mov	r2, fp
 800f200:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f204:	e7d0      	b.n	800f1a8 <_dtoa_r+0x230>
 800f206:	3101      	adds	r1, #1
 800f208:	0040      	lsls	r0, r0, #1
 800f20a:	e7d1      	b.n	800f1b0 <_dtoa_r+0x238>
 800f20c:	f3af 8000 	nop.w
 800f210:	636f4361 	.word	0x636f4361
 800f214:	3fd287a7 	.word	0x3fd287a7
 800f218:	8b60c8b3 	.word	0x8b60c8b3
 800f21c:	3fc68a28 	.word	0x3fc68a28
 800f220:	509f79fb 	.word	0x509f79fb
 800f224:	3fd34413 	.word	0x3fd34413
 800f228:	080128a2 	.word	0x080128a2
 800f22c:	080128b9 	.word	0x080128b9
 800f230:	7ff00000 	.word	0x7ff00000
 800f234:	0801289e 	.word	0x0801289e
 800f238:	08012872 	.word	0x08012872
 800f23c:	08012871 	.word	0x08012871
 800f240:	08012a08 	.word	0x08012a08
 800f244:	08012911 	.word	0x08012911
 800f248:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f24c:	f1ba 0f0e 	cmp.w	sl, #14
 800f250:	6010      	str	r0, [r2, #0]
 800f252:	d86e      	bhi.n	800f332 <_dtoa_r+0x3ba>
 800f254:	2c00      	cmp	r4, #0
 800f256:	d06c      	beq.n	800f332 <_dtoa_r+0x3ba>
 800f258:	f1b8 0f00 	cmp.w	r8, #0
 800f25c:	f340 80b4 	ble.w	800f3c8 <_dtoa_r+0x450>
 800f260:	4ac8      	ldr	r2, [pc, #800]	@ (800f584 <_dtoa_r+0x60c>)
 800f262:	f008 010f 	and.w	r1, r8, #15
 800f266:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f26a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f26e:	ed92 7b00 	vldr	d7, [r2]
 800f272:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f276:	f000 809b 	beq.w	800f3b0 <_dtoa_r+0x438>
 800f27a:	4ac3      	ldr	r2, [pc, #780]	@ (800f588 <_dtoa_r+0x610>)
 800f27c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f280:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f284:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f288:	f001 010f 	and.w	r1, r1, #15
 800f28c:	2203      	movs	r2, #3
 800f28e:	48be      	ldr	r0, [pc, #760]	@ (800f588 <_dtoa_r+0x610>)
 800f290:	2900      	cmp	r1, #0
 800f292:	f040 808f 	bne.w	800f3b4 <_dtoa_r+0x43c>
 800f296:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f29a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f29e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f2a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2a8:	2900      	cmp	r1, #0
 800f2aa:	f000 80b3 	beq.w	800f414 <_dtoa_r+0x49c>
 800f2ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f2b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ba:	f140 80ab 	bpl.w	800f414 <_dtoa_r+0x49c>
 800f2be:	f1ba 0f00 	cmp.w	sl, #0
 800f2c2:	f000 80a7 	beq.w	800f414 <_dtoa_r+0x49c>
 800f2c6:	f1bb 0f00 	cmp.w	fp, #0
 800f2ca:	dd30      	ble.n	800f32e <_dtoa_r+0x3b6>
 800f2cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f2d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2d8:	f108 31ff 	add.w	r1, r8, #4294967295
 800f2dc:	9105      	str	r1, [sp, #20]
 800f2de:	3201      	adds	r2, #1
 800f2e0:	465c      	mov	r4, fp
 800f2e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f2e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f2ea:	ee07 2a90 	vmov	s15, r2
 800f2ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f2f6:	ee15 2a90 	vmov	r2, s11
 800f2fa:	ec51 0b15 	vmov	r0, r1, d5
 800f2fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f302:	2c00      	cmp	r4, #0
 800f304:	f040 808a 	bne.w	800f41c <_dtoa_r+0x4a4>
 800f308:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f30c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f310:	ec41 0b17 	vmov	d7, r0, r1
 800f314:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31c:	f300 826a 	bgt.w	800f7f4 <_dtoa_r+0x87c>
 800f320:	eeb1 7b47 	vneg.f64	d7, d7
 800f324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32c:	d423      	bmi.n	800f376 <_dtoa_r+0x3fe>
 800f32e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f334:	2a00      	cmp	r2, #0
 800f336:	f2c0 8129 	blt.w	800f58c <_dtoa_r+0x614>
 800f33a:	f1b8 0f0e 	cmp.w	r8, #14
 800f33e:	f300 8125 	bgt.w	800f58c <_dtoa_r+0x614>
 800f342:	4b90      	ldr	r3, [pc, #576]	@ (800f584 <_dtoa_r+0x60c>)
 800f344:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f348:	ed93 6b00 	vldr	d6, [r3]
 800f34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f280 80c8 	bge.w	800f4e4 <_dtoa_r+0x56c>
 800f354:	f1ba 0f00 	cmp.w	sl, #0
 800f358:	f300 80c4 	bgt.w	800f4e4 <_dtoa_r+0x56c>
 800f35c:	d10b      	bne.n	800f376 <_dtoa_r+0x3fe>
 800f35e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f362:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f36a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f372:	f2c0 823c 	blt.w	800f7ee <_dtoa_r+0x876>
 800f376:	2400      	movs	r4, #0
 800f378:	4625      	mov	r5, r4
 800f37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37c:	43db      	mvns	r3, r3
 800f37e:	9305      	str	r3, [sp, #20]
 800f380:	463e      	mov	r6, r7
 800f382:	f04f 0800 	mov.w	r8, #0
 800f386:	4621      	mov	r1, r4
 800f388:	4648      	mov	r0, r9
 800f38a:	f000 fc93 	bl	800fcb4 <_Bfree>
 800f38e:	2d00      	cmp	r5, #0
 800f390:	f000 80a2 	beq.w	800f4d8 <_dtoa_r+0x560>
 800f394:	f1b8 0f00 	cmp.w	r8, #0
 800f398:	d005      	beq.n	800f3a6 <_dtoa_r+0x42e>
 800f39a:	45a8      	cmp	r8, r5
 800f39c:	d003      	beq.n	800f3a6 <_dtoa_r+0x42e>
 800f39e:	4641      	mov	r1, r8
 800f3a0:	4648      	mov	r0, r9
 800f3a2:	f000 fc87 	bl	800fcb4 <_Bfree>
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	4648      	mov	r0, r9
 800f3aa:	f000 fc83 	bl	800fcb4 <_Bfree>
 800f3ae:	e093      	b.n	800f4d8 <_dtoa_r+0x560>
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	e76c      	b.n	800f28e <_dtoa_r+0x316>
 800f3b4:	07cc      	lsls	r4, r1, #31
 800f3b6:	d504      	bpl.n	800f3c2 <_dtoa_r+0x44a>
 800f3b8:	ed90 6b00 	vldr	d6, [r0]
 800f3bc:	3201      	adds	r2, #1
 800f3be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3c2:	1049      	asrs	r1, r1, #1
 800f3c4:	3008      	adds	r0, #8
 800f3c6:	e763      	b.n	800f290 <_dtoa_r+0x318>
 800f3c8:	d022      	beq.n	800f410 <_dtoa_r+0x498>
 800f3ca:	f1c8 0100 	rsb	r1, r8, #0
 800f3ce:	4a6d      	ldr	r2, [pc, #436]	@ (800f584 <_dtoa_r+0x60c>)
 800f3d0:	f001 000f 	and.w	r0, r1, #15
 800f3d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f3d8:	ed92 7b00 	vldr	d7, [r2]
 800f3dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f3e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3e4:	4868      	ldr	r0, [pc, #416]	@ (800f588 <_dtoa_r+0x610>)
 800f3e6:	1109      	asrs	r1, r1, #4
 800f3e8:	2400      	movs	r4, #0
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	b929      	cbnz	r1, 800f3fa <_dtoa_r+0x482>
 800f3ee:	2c00      	cmp	r4, #0
 800f3f0:	f43f af57 	beq.w	800f2a2 <_dtoa_r+0x32a>
 800f3f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3f8:	e753      	b.n	800f2a2 <_dtoa_r+0x32a>
 800f3fa:	07ce      	lsls	r6, r1, #31
 800f3fc:	d505      	bpl.n	800f40a <_dtoa_r+0x492>
 800f3fe:	ed90 6b00 	vldr	d6, [r0]
 800f402:	3201      	adds	r2, #1
 800f404:	2401      	movs	r4, #1
 800f406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f40a:	1049      	asrs	r1, r1, #1
 800f40c:	3008      	adds	r0, #8
 800f40e:	e7ed      	b.n	800f3ec <_dtoa_r+0x474>
 800f410:	2202      	movs	r2, #2
 800f412:	e746      	b.n	800f2a2 <_dtoa_r+0x32a>
 800f414:	f8cd 8014 	str.w	r8, [sp, #20]
 800f418:	4654      	mov	r4, sl
 800f41a:	e762      	b.n	800f2e2 <_dtoa_r+0x36a>
 800f41c:	4a59      	ldr	r2, [pc, #356]	@ (800f584 <_dtoa_r+0x60c>)
 800f41e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f422:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f426:	9a08      	ldr	r2, [sp, #32]
 800f428:	ec41 0b17 	vmov	d7, r0, r1
 800f42c:	443c      	add	r4, r7
 800f42e:	b34a      	cbz	r2, 800f484 <_dtoa_r+0x50c>
 800f430:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f434:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f438:	463e      	mov	r6, r7
 800f43a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f43e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f442:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f446:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f44a:	ee14 2a90 	vmov	r2, s9
 800f44e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f452:	3230      	adds	r2, #48	@ 0x30
 800f454:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f458:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f460:	f806 2b01 	strb.w	r2, [r6], #1
 800f464:	d438      	bmi.n	800f4d8 <_dtoa_r+0x560>
 800f466:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f46a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	d46e      	bmi.n	800f552 <_dtoa_r+0x5da>
 800f474:	42a6      	cmp	r6, r4
 800f476:	f43f af5a 	beq.w	800f32e <_dtoa_r+0x3b6>
 800f47a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f47e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f482:	e7e0      	b.n	800f446 <_dtoa_r+0x4ce>
 800f484:	4621      	mov	r1, r4
 800f486:	463e      	mov	r6, r7
 800f488:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f48c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f490:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f494:	ee14 2a90 	vmov	r2, s9
 800f498:	3230      	adds	r2, #48	@ 0x30
 800f49a:	f806 2b01 	strb.w	r2, [r6], #1
 800f49e:	42a6      	cmp	r6, r4
 800f4a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f4a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f4a8:	d119      	bne.n	800f4de <_dtoa_r+0x566>
 800f4aa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f4ae:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f4b2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ba:	dc4a      	bgt.n	800f552 <_dtoa_r+0x5da>
 800f4bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f4c0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	f57f af31 	bpl.w	800f32e <_dtoa_r+0x3b6>
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	3901      	subs	r1, #1
 800f4d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f4d4:	2b30      	cmp	r3, #48	@ 0x30
 800f4d6:	d0f9      	beq.n	800f4cc <_dtoa_r+0x554>
 800f4d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f4dc:	e027      	b.n	800f52e <_dtoa_r+0x5b6>
 800f4de:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4e2:	e7d5      	b.n	800f490 <_dtoa_r+0x518>
 800f4e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4e8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f4ec:	463e      	mov	r6, r7
 800f4ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f4f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f4f6:	ee15 3a10 	vmov	r3, s10
 800f4fa:	3330      	adds	r3, #48	@ 0x30
 800f4fc:	f806 3b01 	strb.w	r3, [r6], #1
 800f500:	1bf3      	subs	r3, r6, r7
 800f502:	459a      	cmp	sl, r3
 800f504:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f508:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f50c:	d132      	bne.n	800f574 <_dtoa_r+0x5fc>
 800f50e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f512:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51a:	dc18      	bgt.n	800f54e <_dtoa_r+0x5d6>
 800f51c:	eeb4 7b46 	vcmp.f64	d7, d6
 800f520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f524:	d103      	bne.n	800f52e <_dtoa_r+0x5b6>
 800f526:	ee15 3a10 	vmov	r3, s10
 800f52a:	07db      	lsls	r3, r3, #31
 800f52c:	d40f      	bmi.n	800f54e <_dtoa_r+0x5d6>
 800f52e:	9901      	ldr	r1, [sp, #4]
 800f530:	4648      	mov	r0, r9
 800f532:	f000 fbbf 	bl	800fcb4 <_Bfree>
 800f536:	2300      	movs	r3, #0
 800f538:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f53a:	7033      	strb	r3, [r6, #0]
 800f53c:	f108 0301 	add.w	r3, r8, #1
 800f540:	6013      	str	r3, [r2, #0]
 800f542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 824b 	beq.w	800f9e0 <_dtoa_r+0xa68>
 800f54a:	601e      	str	r6, [r3, #0]
 800f54c:	e248      	b.n	800f9e0 <_dtoa_r+0xa68>
 800f54e:	f8cd 8014 	str.w	r8, [sp, #20]
 800f552:	4633      	mov	r3, r6
 800f554:	461e      	mov	r6, r3
 800f556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f55a:	2a39      	cmp	r2, #57	@ 0x39
 800f55c:	d106      	bne.n	800f56c <_dtoa_r+0x5f4>
 800f55e:	429f      	cmp	r7, r3
 800f560:	d1f8      	bne.n	800f554 <_dtoa_r+0x5dc>
 800f562:	9a05      	ldr	r2, [sp, #20]
 800f564:	3201      	adds	r2, #1
 800f566:	9205      	str	r2, [sp, #20]
 800f568:	2230      	movs	r2, #48	@ 0x30
 800f56a:	703a      	strb	r2, [r7, #0]
 800f56c:	781a      	ldrb	r2, [r3, #0]
 800f56e:	3201      	adds	r2, #1
 800f570:	701a      	strb	r2, [r3, #0]
 800f572:	e7b1      	b.n	800f4d8 <_dtoa_r+0x560>
 800f574:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f578:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f580:	d1b5      	bne.n	800f4ee <_dtoa_r+0x576>
 800f582:	e7d4      	b.n	800f52e <_dtoa_r+0x5b6>
 800f584:	08012a08 	.word	0x08012a08
 800f588:	080129e0 	.word	0x080129e0
 800f58c:	9908      	ldr	r1, [sp, #32]
 800f58e:	2900      	cmp	r1, #0
 800f590:	f000 80e9 	beq.w	800f766 <_dtoa_r+0x7ee>
 800f594:	9907      	ldr	r1, [sp, #28]
 800f596:	2901      	cmp	r1, #1
 800f598:	f300 80cb 	bgt.w	800f732 <_dtoa_r+0x7ba>
 800f59c:	2d00      	cmp	r5, #0
 800f59e:	f000 80c4 	beq.w	800f72a <_dtoa_r+0x7b2>
 800f5a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f5a6:	9e04      	ldr	r6, [sp, #16]
 800f5a8:	461c      	mov	r4, r3
 800f5aa:	9305      	str	r3, [sp, #20]
 800f5ac:	9b04      	ldr	r3, [sp, #16]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	9304      	str	r3, [sp, #16]
 800f5b2:	9b06      	ldr	r3, [sp, #24]
 800f5b4:	2101      	movs	r1, #1
 800f5b6:	4413      	add	r3, r2
 800f5b8:	4648      	mov	r0, r9
 800f5ba:	9306      	str	r3, [sp, #24]
 800f5bc:	f000 fc2e 	bl	800fe1c <__i2b>
 800f5c0:	9b05      	ldr	r3, [sp, #20]
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	b166      	cbz	r6, 800f5e0 <_dtoa_r+0x668>
 800f5c6:	9a06      	ldr	r2, [sp, #24]
 800f5c8:	2a00      	cmp	r2, #0
 800f5ca:	dd09      	ble.n	800f5e0 <_dtoa_r+0x668>
 800f5cc:	42b2      	cmp	r2, r6
 800f5ce:	9904      	ldr	r1, [sp, #16]
 800f5d0:	bfa8      	it	ge
 800f5d2:	4632      	movge	r2, r6
 800f5d4:	1a89      	subs	r1, r1, r2
 800f5d6:	9104      	str	r1, [sp, #16]
 800f5d8:	9906      	ldr	r1, [sp, #24]
 800f5da:	1ab6      	subs	r6, r6, r2
 800f5dc:	1a8a      	subs	r2, r1, r2
 800f5de:	9206      	str	r2, [sp, #24]
 800f5e0:	b30b      	cbz	r3, 800f626 <_dtoa_r+0x6ae>
 800f5e2:	9a08      	ldr	r2, [sp, #32]
 800f5e4:	2a00      	cmp	r2, #0
 800f5e6:	f000 80c5 	beq.w	800f774 <_dtoa_r+0x7fc>
 800f5ea:	2c00      	cmp	r4, #0
 800f5ec:	f000 80bf 	beq.w	800f76e <_dtoa_r+0x7f6>
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	4648      	mov	r0, r9
 800f5f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5f8:	f000 fcc8 	bl	800ff8c <__pow5mult>
 800f5fc:	9a01      	ldr	r2, [sp, #4]
 800f5fe:	4601      	mov	r1, r0
 800f600:	4605      	mov	r5, r0
 800f602:	4648      	mov	r0, r9
 800f604:	f000 fc20 	bl	800fe48 <__multiply>
 800f608:	9901      	ldr	r1, [sp, #4]
 800f60a:	9005      	str	r0, [sp, #20]
 800f60c:	4648      	mov	r0, r9
 800f60e:	f000 fb51 	bl	800fcb4 <_Bfree>
 800f612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f614:	1b1b      	subs	r3, r3, r4
 800f616:	f000 80b0 	beq.w	800f77a <_dtoa_r+0x802>
 800f61a:	9905      	ldr	r1, [sp, #20]
 800f61c:	461a      	mov	r2, r3
 800f61e:	4648      	mov	r0, r9
 800f620:	f000 fcb4 	bl	800ff8c <__pow5mult>
 800f624:	9001      	str	r0, [sp, #4]
 800f626:	2101      	movs	r1, #1
 800f628:	4648      	mov	r0, r9
 800f62a:	f000 fbf7 	bl	800fe1c <__i2b>
 800f62e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f630:	4604      	mov	r4, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	f000 81da 	beq.w	800f9ec <_dtoa_r+0xa74>
 800f638:	461a      	mov	r2, r3
 800f63a:	4601      	mov	r1, r0
 800f63c:	4648      	mov	r0, r9
 800f63e:	f000 fca5 	bl	800ff8c <__pow5mult>
 800f642:	9b07      	ldr	r3, [sp, #28]
 800f644:	2b01      	cmp	r3, #1
 800f646:	4604      	mov	r4, r0
 800f648:	f300 80a0 	bgt.w	800f78c <_dtoa_r+0x814>
 800f64c:	9b02      	ldr	r3, [sp, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f040 8096 	bne.w	800f780 <_dtoa_r+0x808>
 800f654:	9b03      	ldr	r3, [sp, #12]
 800f656:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	f040 8092 	bne.w	800f784 <_dtoa_r+0x80c>
 800f660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f664:	0d12      	lsrs	r2, r2, #20
 800f666:	0512      	lsls	r2, r2, #20
 800f668:	2a00      	cmp	r2, #0
 800f66a:	f000 808d 	beq.w	800f788 <_dtoa_r+0x810>
 800f66e:	9b04      	ldr	r3, [sp, #16]
 800f670:	3301      	adds	r3, #1
 800f672:	9304      	str	r3, [sp, #16]
 800f674:	9b06      	ldr	r3, [sp, #24]
 800f676:	3301      	adds	r3, #1
 800f678:	9306      	str	r3, [sp, #24]
 800f67a:	2301      	movs	r3, #1
 800f67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f67e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 81b9 	beq.w	800f9f8 <_dtoa_r+0xa80>
 800f686:	6922      	ldr	r2, [r4, #16]
 800f688:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f68c:	6910      	ldr	r0, [r2, #16]
 800f68e:	f000 fb79 	bl	800fd84 <__hi0bits>
 800f692:	f1c0 0020 	rsb	r0, r0, #32
 800f696:	9b06      	ldr	r3, [sp, #24]
 800f698:	4418      	add	r0, r3
 800f69a:	f010 001f 	ands.w	r0, r0, #31
 800f69e:	f000 8081 	beq.w	800f7a4 <_dtoa_r+0x82c>
 800f6a2:	f1c0 0220 	rsb	r2, r0, #32
 800f6a6:	2a04      	cmp	r2, #4
 800f6a8:	dd73      	ble.n	800f792 <_dtoa_r+0x81a>
 800f6aa:	9b04      	ldr	r3, [sp, #16]
 800f6ac:	f1c0 001c 	rsb	r0, r0, #28
 800f6b0:	4403      	add	r3, r0
 800f6b2:	9304      	str	r3, [sp, #16]
 800f6b4:	9b06      	ldr	r3, [sp, #24]
 800f6b6:	4406      	add	r6, r0
 800f6b8:	4403      	add	r3, r0
 800f6ba:	9306      	str	r3, [sp, #24]
 800f6bc:	9b04      	ldr	r3, [sp, #16]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dd05      	ble.n	800f6ce <_dtoa_r+0x756>
 800f6c2:	9901      	ldr	r1, [sp, #4]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4648      	mov	r0, r9
 800f6c8:	f000 fcba 	bl	8010040 <__lshift>
 800f6cc:	9001      	str	r0, [sp, #4]
 800f6ce:	9b06      	ldr	r3, [sp, #24]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dd05      	ble.n	800f6e0 <_dtoa_r+0x768>
 800f6d4:	4621      	mov	r1, r4
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4648      	mov	r0, r9
 800f6da:	f000 fcb1 	bl	8010040 <__lshift>
 800f6de:	4604      	mov	r4, r0
 800f6e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d060      	beq.n	800f7a8 <_dtoa_r+0x830>
 800f6e6:	9801      	ldr	r0, [sp, #4]
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	f000 fd15 	bl	8010118 <__mcmp>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	da5a      	bge.n	800f7a8 <_dtoa_r+0x830>
 800f6f2:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6f6:	9305      	str	r3, [sp, #20]
 800f6f8:	9901      	ldr	r1, [sp, #4]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	220a      	movs	r2, #10
 800f6fe:	4648      	mov	r0, r9
 800f700:	f000 fafa 	bl	800fcf8 <__multadd>
 800f704:	9b08      	ldr	r3, [sp, #32]
 800f706:	9001      	str	r0, [sp, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 8177 	beq.w	800f9fc <_dtoa_r+0xa84>
 800f70e:	4629      	mov	r1, r5
 800f710:	2300      	movs	r3, #0
 800f712:	220a      	movs	r2, #10
 800f714:	4648      	mov	r0, r9
 800f716:	f000 faef 	bl	800fcf8 <__multadd>
 800f71a:	f1bb 0f00 	cmp.w	fp, #0
 800f71e:	4605      	mov	r5, r0
 800f720:	dc6e      	bgt.n	800f800 <_dtoa_r+0x888>
 800f722:	9b07      	ldr	r3, [sp, #28]
 800f724:	2b02      	cmp	r3, #2
 800f726:	dc48      	bgt.n	800f7ba <_dtoa_r+0x842>
 800f728:	e06a      	b.n	800f800 <_dtoa_r+0x888>
 800f72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f72c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f730:	e739      	b.n	800f5a6 <_dtoa_r+0x62e>
 800f732:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f736:	42a3      	cmp	r3, r4
 800f738:	db07      	blt.n	800f74a <_dtoa_r+0x7d2>
 800f73a:	f1ba 0f00 	cmp.w	sl, #0
 800f73e:	eba3 0404 	sub.w	r4, r3, r4
 800f742:	db0b      	blt.n	800f75c <_dtoa_r+0x7e4>
 800f744:	9e04      	ldr	r6, [sp, #16]
 800f746:	4652      	mov	r2, sl
 800f748:	e72f      	b.n	800f5aa <_dtoa_r+0x632>
 800f74a:	1ae2      	subs	r2, r4, r3
 800f74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f74e:	9e04      	ldr	r6, [sp, #16]
 800f750:	4413      	add	r3, r2
 800f752:	930a      	str	r3, [sp, #40]	@ 0x28
 800f754:	4652      	mov	r2, sl
 800f756:	4623      	mov	r3, r4
 800f758:	2400      	movs	r4, #0
 800f75a:	e726      	b.n	800f5aa <_dtoa_r+0x632>
 800f75c:	9a04      	ldr	r2, [sp, #16]
 800f75e:	eba2 060a 	sub.w	r6, r2, sl
 800f762:	2200      	movs	r2, #0
 800f764:	e721      	b.n	800f5aa <_dtoa_r+0x632>
 800f766:	9e04      	ldr	r6, [sp, #16]
 800f768:	9d08      	ldr	r5, [sp, #32]
 800f76a:	461c      	mov	r4, r3
 800f76c:	e72a      	b.n	800f5c4 <_dtoa_r+0x64c>
 800f76e:	9a01      	ldr	r2, [sp, #4]
 800f770:	9205      	str	r2, [sp, #20]
 800f772:	e752      	b.n	800f61a <_dtoa_r+0x6a2>
 800f774:	9901      	ldr	r1, [sp, #4]
 800f776:	461a      	mov	r2, r3
 800f778:	e751      	b.n	800f61e <_dtoa_r+0x6a6>
 800f77a:	9b05      	ldr	r3, [sp, #20]
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	e752      	b.n	800f626 <_dtoa_r+0x6ae>
 800f780:	2300      	movs	r3, #0
 800f782:	e77b      	b.n	800f67c <_dtoa_r+0x704>
 800f784:	9b02      	ldr	r3, [sp, #8]
 800f786:	e779      	b.n	800f67c <_dtoa_r+0x704>
 800f788:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f78a:	e778      	b.n	800f67e <_dtoa_r+0x706>
 800f78c:	2300      	movs	r3, #0
 800f78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f790:	e779      	b.n	800f686 <_dtoa_r+0x70e>
 800f792:	d093      	beq.n	800f6bc <_dtoa_r+0x744>
 800f794:	9b04      	ldr	r3, [sp, #16]
 800f796:	321c      	adds	r2, #28
 800f798:	4413      	add	r3, r2
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	9b06      	ldr	r3, [sp, #24]
 800f79e:	4416      	add	r6, r2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	e78a      	b.n	800f6ba <_dtoa_r+0x742>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	e7f5      	b.n	800f794 <_dtoa_r+0x81c>
 800f7a8:	f1ba 0f00 	cmp.w	sl, #0
 800f7ac:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7b0:	46d3      	mov	fp, sl
 800f7b2:	dc21      	bgt.n	800f7f8 <_dtoa_r+0x880>
 800f7b4:	9b07      	ldr	r3, [sp, #28]
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	dd1e      	ble.n	800f7f8 <_dtoa_r+0x880>
 800f7ba:	f1bb 0f00 	cmp.w	fp, #0
 800f7be:	f47f addc 	bne.w	800f37a <_dtoa_r+0x402>
 800f7c2:	4621      	mov	r1, r4
 800f7c4:	465b      	mov	r3, fp
 800f7c6:	2205      	movs	r2, #5
 800f7c8:	4648      	mov	r0, r9
 800f7ca:	f000 fa95 	bl	800fcf8 <__multadd>
 800f7ce:	4601      	mov	r1, r0
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	9801      	ldr	r0, [sp, #4]
 800f7d4:	f000 fca0 	bl	8010118 <__mcmp>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	f77f adce 	ble.w	800f37a <_dtoa_r+0x402>
 800f7de:	463e      	mov	r6, r7
 800f7e0:	2331      	movs	r3, #49	@ 0x31
 800f7e2:	f806 3b01 	strb.w	r3, [r6], #1
 800f7e6:	9b05      	ldr	r3, [sp, #20]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	e5c9      	b.n	800f382 <_dtoa_r+0x40a>
 800f7ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7f2:	4654      	mov	r4, sl
 800f7f4:	4625      	mov	r5, r4
 800f7f6:	e7f2      	b.n	800f7de <_dtoa_r+0x866>
 800f7f8:	9b08      	ldr	r3, [sp, #32]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 8102 	beq.w	800fa04 <_dtoa_r+0xa8c>
 800f800:	2e00      	cmp	r6, #0
 800f802:	dd05      	ble.n	800f810 <_dtoa_r+0x898>
 800f804:	4629      	mov	r1, r5
 800f806:	4632      	mov	r2, r6
 800f808:	4648      	mov	r0, r9
 800f80a:	f000 fc19 	bl	8010040 <__lshift>
 800f80e:	4605      	mov	r5, r0
 800f810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d058      	beq.n	800f8c8 <_dtoa_r+0x950>
 800f816:	6869      	ldr	r1, [r5, #4]
 800f818:	4648      	mov	r0, r9
 800f81a:	f000 fa0b 	bl	800fc34 <_Balloc>
 800f81e:	4606      	mov	r6, r0
 800f820:	b928      	cbnz	r0, 800f82e <_dtoa_r+0x8b6>
 800f822:	4b82      	ldr	r3, [pc, #520]	@ (800fa2c <_dtoa_r+0xab4>)
 800f824:	4602      	mov	r2, r0
 800f826:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f82a:	f7ff bbbe 	b.w	800efaa <_dtoa_r+0x32>
 800f82e:	692a      	ldr	r2, [r5, #16]
 800f830:	3202      	adds	r2, #2
 800f832:	0092      	lsls	r2, r2, #2
 800f834:	f105 010c 	add.w	r1, r5, #12
 800f838:	300c      	adds	r0, #12
 800f83a:	f7ff fb06 	bl	800ee4a <memcpy>
 800f83e:	2201      	movs	r2, #1
 800f840:	4631      	mov	r1, r6
 800f842:	4648      	mov	r0, r9
 800f844:	f000 fbfc 	bl	8010040 <__lshift>
 800f848:	1c7b      	adds	r3, r7, #1
 800f84a:	9304      	str	r3, [sp, #16]
 800f84c:	eb07 030b 	add.w	r3, r7, fp
 800f850:	9309      	str	r3, [sp, #36]	@ 0x24
 800f852:	9b02      	ldr	r3, [sp, #8]
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	46a8      	mov	r8, r5
 800f85a:	9308      	str	r3, [sp, #32]
 800f85c:	4605      	mov	r5, r0
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	9801      	ldr	r0, [sp, #4]
 800f862:	4621      	mov	r1, r4
 800f864:	f103 3bff 	add.w	fp, r3, #4294967295
 800f868:	f7ff fafd 	bl	800ee66 <quorem>
 800f86c:	4641      	mov	r1, r8
 800f86e:	9002      	str	r0, [sp, #8]
 800f870:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f874:	9801      	ldr	r0, [sp, #4]
 800f876:	f000 fc4f 	bl	8010118 <__mcmp>
 800f87a:	462a      	mov	r2, r5
 800f87c:	9006      	str	r0, [sp, #24]
 800f87e:	4621      	mov	r1, r4
 800f880:	4648      	mov	r0, r9
 800f882:	f000 fc65 	bl	8010150 <__mdiff>
 800f886:	68c2      	ldr	r2, [r0, #12]
 800f888:	4606      	mov	r6, r0
 800f88a:	b9fa      	cbnz	r2, 800f8cc <_dtoa_r+0x954>
 800f88c:	4601      	mov	r1, r0
 800f88e:	9801      	ldr	r0, [sp, #4]
 800f890:	f000 fc42 	bl	8010118 <__mcmp>
 800f894:	4602      	mov	r2, r0
 800f896:	4631      	mov	r1, r6
 800f898:	4648      	mov	r0, r9
 800f89a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f89c:	f000 fa0a 	bl	800fcb4 <_Bfree>
 800f8a0:	9b07      	ldr	r3, [sp, #28]
 800f8a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8a4:	9e04      	ldr	r6, [sp, #16]
 800f8a6:	ea42 0103 	orr.w	r1, r2, r3
 800f8aa:	9b08      	ldr	r3, [sp, #32]
 800f8ac:	4319      	orrs	r1, r3
 800f8ae:	d10f      	bne.n	800f8d0 <_dtoa_r+0x958>
 800f8b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f8b4:	d028      	beq.n	800f908 <_dtoa_r+0x990>
 800f8b6:	9b06      	ldr	r3, [sp, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dd02      	ble.n	800f8c2 <_dtoa_r+0x94a>
 800f8bc:	9b02      	ldr	r3, [sp, #8]
 800f8be:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f8c2:	f88b a000 	strb.w	sl, [fp]
 800f8c6:	e55e      	b.n	800f386 <_dtoa_r+0x40e>
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	e7bd      	b.n	800f848 <_dtoa_r+0x8d0>
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	e7e2      	b.n	800f896 <_dtoa_r+0x91e>
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	db04      	blt.n	800f8e0 <_dtoa_r+0x968>
 800f8d6:	9907      	ldr	r1, [sp, #28]
 800f8d8:	430b      	orrs	r3, r1
 800f8da:	9908      	ldr	r1, [sp, #32]
 800f8dc:	430b      	orrs	r3, r1
 800f8de:	d120      	bne.n	800f922 <_dtoa_r+0x9aa>
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	ddee      	ble.n	800f8c2 <_dtoa_r+0x94a>
 800f8e4:	9901      	ldr	r1, [sp, #4]
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	4648      	mov	r0, r9
 800f8ea:	f000 fba9 	bl	8010040 <__lshift>
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	9001      	str	r0, [sp, #4]
 800f8f2:	f000 fc11 	bl	8010118 <__mcmp>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	dc03      	bgt.n	800f902 <_dtoa_r+0x98a>
 800f8fa:	d1e2      	bne.n	800f8c2 <_dtoa_r+0x94a>
 800f8fc:	f01a 0f01 	tst.w	sl, #1
 800f900:	d0df      	beq.n	800f8c2 <_dtoa_r+0x94a>
 800f902:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f906:	d1d9      	bne.n	800f8bc <_dtoa_r+0x944>
 800f908:	2339      	movs	r3, #57	@ 0x39
 800f90a:	f88b 3000 	strb.w	r3, [fp]
 800f90e:	4633      	mov	r3, r6
 800f910:	461e      	mov	r6, r3
 800f912:	3b01      	subs	r3, #1
 800f914:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f918:	2a39      	cmp	r2, #57	@ 0x39
 800f91a:	d052      	beq.n	800f9c2 <_dtoa_r+0xa4a>
 800f91c:	3201      	adds	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
 800f920:	e531      	b.n	800f386 <_dtoa_r+0x40e>
 800f922:	2a00      	cmp	r2, #0
 800f924:	dd07      	ble.n	800f936 <_dtoa_r+0x9be>
 800f926:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f92a:	d0ed      	beq.n	800f908 <_dtoa_r+0x990>
 800f92c:	f10a 0301 	add.w	r3, sl, #1
 800f930:	f88b 3000 	strb.w	r3, [fp]
 800f934:	e527      	b.n	800f386 <_dtoa_r+0x40e>
 800f936:	9b04      	ldr	r3, [sp, #16]
 800f938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f93a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f93e:	4293      	cmp	r3, r2
 800f940:	d029      	beq.n	800f996 <_dtoa_r+0xa1e>
 800f942:	9901      	ldr	r1, [sp, #4]
 800f944:	2300      	movs	r3, #0
 800f946:	220a      	movs	r2, #10
 800f948:	4648      	mov	r0, r9
 800f94a:	f000 f9d5 	bl	800fcf8 <__multadd>
 800f94e:	45a8      	cmp	r8, r5
 800f950:	9001      	str	r0, [sp, #4]
 800f952:	f04f 0300 	mov.w	r3, #0
 800f956:	f04f 020a 	mov.w	r2, #10
 800f95a:	4641      	mov	r1, r8
 800f95c:	4648      	mov	r0, r9
 800f95e:	d107      	bne.n	800f970 <_dtoa_r+0x9f8>
 800f960:	f000 f9ca 	bl	800fcf8 <__multadd>
 800f964:	4680      	mov	r8, r0
 800f966:	4605      	mov	r5, r0
 800f968:	9b04      	ldr	r3, [sp, #16]
 800f96a:	3301      	adds	r3, #1
 800f96c:	9304      	str	r3, [sp, #16]
 800f96e:	e776      	b.n	800f85e <_dtoa_r+0x8e6>
 800f970:	f000 f9c2 	bl	800fcf8 <__multadd>
 800f974:	4629      	mov	r1, r5
 800f976:	4680      	mov	r8, r0
 800f978:	2300      	movs	r3, #0
 800f97a:	220a      	movs	r2, #10
 800f97c:	4648      	mov	r0, r9
 800f97e:	f000 f9bb 	bl	800fcf8 <__multadd>
 800f982:	4605      	mov	r5, r0
 800f984:	e7f0      	b.n	800f968 <_dtoa_r+0x9f0>
 800f986:	f1bb 0f00 	cmp.w	fp, #0
 800f98a:	bfcc      	ite	gt
 800f98c:	465e      	movgt	r6, fp
 800f98e:	2601      	movle	r6, #1
 800f990:	443e      	add	r6, r7
 800f992:	f04f 0800 	mov.w	r8, #0
 800f996:	9901      	ldr	r1, [sp, #4]
 800f998:	2201      	movs	r2, #1
 800f99a:	4648      	mov	r0, r9
 800f99c:	f000 fb50 	bl	8010040 <__lshift>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	9001      	str	r0, [sp, #4]
 800f9a4:	f000 fbb8 	bl	8010118 <__mcmp>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	dcb0      	bgt.n	800f90e <_dtoa_r+0x996>
 800f9ac:	d102      	bne.n	800f9b4 <_dtoa_r+0xa3c>
 800f9ae:	f01a 0f01 	tst.w	sl, #1
 800f9b2:	d1ac      	bne.n	800f90e <_dtoa_r+0x996>
 800f9b4:	4633      	mov	r3, r6
 800f9b6:	461e      	mov	r6, r3
 800f9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9bc:	2a30      	cmp	r2, #48	@ 0x30
 800f9be:	d0fa      	beq.n	800f9b6 <_dtoa_r+0xa3e>
 800f9c0:	e4e1      	b.n	800f386 <_dtoa_r+0x40e>
 800f9c2:	429f      	cmp	r7, r3
 800f9c4:	d1a4      	bne.n	800f910 <_dtoa_r+0x998>
 800f9c6:	9b05      	ldr	r3, [sp, #20]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	9305      	str	r3, [sp, #20]
 800f9cc:	2331      	movs	r3, #49	@ 0x31
 800f9ce:	703b      	strb	r3, [r7, #0]
 800f9d0:	e4d9      	b.n	800f386 <_dtoa_r+0x40e>
 800f9d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9d4:	4f16      	ldr	r7, [pc, #88]	@ (800fa30 <_dtoa_r+0xab8>)
 800f9d6:	b11b      	cbz	r3, 800f9e0 <_dtoa_r+0xa68>
 800f9d8:	f107 0308 	add.w	r3, r7, #8
 800f9dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	b011      	add	sp, #68	@ 0x44
 800f9e4:	ecbd 8b02 	vpop	{d8}
 800f9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ec:	9b07      	ldr	r3, [sp, #28]
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	f77f ae2c 	ble.w	800f64c <_dtoa_r+0x6d4>
 800f9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9f8:	2001      	movs	r0, #1
 800f9fa:	e64c      	b.n	800f696 <_dtoa_r+0x71e>
 800f9fc:	f1bb 0f00 	cmp.w	fp, #0
 800fa00:	f77f aed8 	ble.w	800f7b4 <_dtoa_r+0x83c>
 800fa04:	463e      	mov	r6, r7
 800fa06:	9801      	ldr	r0, [sp, #4]
 800fa08:	4621      	mov	r1, r4
 800fa0a:	f7ff fa2c 	bl	800ee66 <quorem>
 800fa0e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fa12:	f806 ab01 	strb.w	sl, [r6], #1
 800fa16:	1bf2      	subs	r2, r6, r7
 800fa18:	4593      	cmp	fp, r2
 800fa1a:	ddb4      	ble.n	800f986 <_dtoa_r+0xa0e>
 800fa1c:	9901      	ldr	r1, [sp, #4]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	220a      	movs	r2, #10
 800fa22:	4648      	mov	r0, r9
 800fa24:	f000 f968 	bl	800fcf8 <__multadd>
 800fa28:	9001      	str	r0, [sp, #4]
 800fa2a:	e7ec      	b.n	800fa06 <_dtoa_r+0xa8e>
 800fa2c:	08012911 	.word	0x08012911
 800fa30:	08012895 	.word	0x08012895

0800fa34 <_free_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4605      	mov	r5, r0
 800fa38:	2900      	cmp	r1, #0
 800fa3a:	d041      	beq.n	800fac0 <_free_r+0x8c>
 800fa3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa40:	1f0c      	subs	r4, r1, #4
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	bfb8      	it	lt
 800fa46:	18e4      	addlt	r4, r4, r3
 800fa48:	f000 f8e8 	bl	800fc1c <__malloc_lock>
 800fa4c:	4a1d      	ldr	r2, [pc, #116]	@ (800fac4 <_free_r+0x90>)
 800fa4e:	6813      	ldr	r3, [r2, #0]
 800fa50:	b933      	cbnz	r3, 800fa60 <_free_r+0x2c>
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6014      	str	r4, [r2, #0]
 800fa56:	4628      	mov	r0, r5
 800fa58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa5c:	f000 b8e4 	b.w	800fc28 <__malloc_unlock>
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	d908      	bls.n	800fa76 <_free_r+0x42>
 800fa64:	6820      	ldr	r0, [r4, #0]
 800fa66:	1821      	adds	r1, r4, r0
 800fa68:	428b      	cmp	r3, r1
 800fa6a:	bf01      	itttt	eq
 800fa6c:	6819      	ldreq	r1, [r3, #0]
 800fa6e:	685b      	ldreq	r3, [r3, #4]
 800fa70:	1809      	addeq	r1, r1, r0
 800fa72:	6021      	streq	r1, [r4, #0]
 800fa74:	e7ed      	b.n	800fa52 <_free_r+0x1e>
 800fa76:	461a      	mov	r2, r3
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	b10b      	cbz	r3, 800fa80 <_free_r+0x4c>
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d9fa      	bls.n	800fa76 <_free_r+0x42>
 800fa80:	6811      	ldr	r1, [r2, #0]
 800fa82:	1850      	adds	r0, r2, r1
 800fa84:	42a0      	cmp	r0, r4
 800fa86:	d10b      	bne.n	800faa0 <_free_r+0x6c>
 800fa88:	6820      	ldr	r0, [r4, #0]
 800fa8a:	4401      	add	r1, r0
 800fa8c:	1850      	adds	r0, r2, r1
 800fa8e:	4283      	cmp	r3, r0
 800fa90:	6011      	str	r1, [r2, #0]
 800fa92:	d1e0      	bne.n	800fa56 <_free_r+0x22>
 800fa94:	6818      	ldr	r0, [r3, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	6053      	str	r3, [r2, #4]
 800fa9a:	4408      	add	r0, r1
 800fa9c:	6010      	str	r0, [r2, #0]
 800fa9e:	e7da      	b.n	800fa56 <_free_r+0x22>
 800faa0:	d902      	bls.n	800faa8 <_free_r+0x74>
 800faa2:	230c      	movs	r3, #12
 800faa4:	602b      	str	r3, [r5, #0]
 800faa6:	e7d6      	b.n	800fa56 <_free_r+0x22>
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	1821      	adds	r1, r4, r0
 800faac:	428b      	cmp	r3, r1
 800faae:	bf04      	itt	eq
 800fab0:	6819      	ldreq	r1, [r3, #0]
 800fab2:	685b      	ldreq	r3, [r3, #4]
 800fab4:	6063      	str	r3, [r4, #4]
 800fab6:	bf04      	itt	eq
 800fab8:	1809      	addeq	r1, r1, r0
 800faba:	6021      	streq	r1, [r4, #0]
 800fabc:	6054      	str	r4, [r2, #4]
 800fabe:	e7ca      	b.n	800fa56 <_free_r+0x22>
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	bf00      	nop
 800fac4:	2000e368 	.word	0x2000e368

0800fac8 <malloc>:
 800fac8:	4b02      	ldr	r3, [pc, #8]	@ (800fad4 <malloc+0xc>)
 800faca:	4601      	mov	r1, r0
 800facc:	6818      	ldr	r0, [r3, #0]
 800face:	f000 b825 	b.w	800fb1c <_malloc_r>
 800fad2:	bf00      	nop
 800fad4:	200041cc 	.word	0x200041cc

0800fad8 <sbrk_aligned>:
 800fad8:	b570      	push	{r4, r5, r6, lr}
 800fada:	4e0f      	ldr	r6, [pc, #60]	@ (800fb18 <sbrk_aligned+0x40>)
 800fadc:	460c      	mov	r4, r1
 800fade:	6831      	ldr	r1, [r6, #0]
 800fae0:	4605      	mov	r5, r0
 800fae2:	b911      	cbnz	r1, 800faea <sbrk_aligned+0x12>
 800fae4:	f000 fea8 	bl	8010838 <_sbrk_r>
 800fae8:	6030      	str	r0, [r6, #0]
 800faea:	4621      	mov	r1, r4
 800faec:	4628      	mov	r0, r5
 800faee:	f000 fea3 	bl	8010838 <_sbrk_r>
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	d103      	bne.n	800fafe <sbrk_aligned+0x26>
 800faf6:	f04f 34ff 	mov.w	r4, #4294967295
 800fafa:	4620      	mov	r0, r4
 800fafc:	bd70      	pop	{r4, r5, r6, pc}
 800fafe:	1cc4      	adds	r4, r0, #3
 800fb00:	f024 0403 	bic.w	r4, r4, #3
 800fb04:	42a0      	cmp	r0, r4
 800fb06:	d0f8      	beq.n	800fafa <sbrk_aligned+0x22>
 800fb08:	1a21      	subs	r1, r4, r0
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f000 fe94 	bl	8010838 <_sbrk_r>
 800fb10:	3001      	adds	r0, #1
 800fb12:	d1f2      	bne.n	800fafa <sbrk_aligned+0x22>
 800fb14:	e7ef      	b.n	800faf6 <sbrk_aligned+0x1e>
 800fb16:	bf00      	nop
 800fb18:	2000e364 	.word	0x2000e364

0800fb1c <_malloc_r>:
 800fb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb20:	1ccd      	adds	r5, r1, #3
 800fb22:	f025 0503 	bic.w	r5, r5, #3
 800fb26:	3508      	adds	r5, #8
 800fb28:	2d0c      	cmp	r5, #12
 800fb2a:	bf38      	it	cc
 800fb2c:	250c      	movcc	r5, #12
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	4606      	mov	r6, r0
 800fb32:	db01      	blt.n	800fb38 <_malloc_r+0x1c>
 800fb34:	42a9      	cmp	r1, r5
 800fb36:	d904      	bls.n	800fb42 <_malloc_r+0x26>
 800fb38:	230c      	movs	r3, #12
 800fb3a:	6033      	str	r3, [r6, #0]
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc18 <_malloc_r+0xfc>
 800fb46:	f000 f869 	bl	800fc1c <__malloc_lock>
 800fb4a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb4e:	461c      	mov	r4, r3
 800fb50:	bb44      	cbnz	r4, 800fba4 <_malloc_r+0x88>
 800fb52:	4629      	mov	r1, r5
 800fb54:	4630      	mov	r0, r6
 800fb56:	f7ff ffbf 	bl	800fad8 <sbrk_aligned>
 800fb5a:	1c43      	adds	r3, r0, #1
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	d158      	bne.n	800fc12 <_malloc_r+0xf6>
 800fb60:	f8d8 4000 	ldr.w	r4, [r8]
 800fb64:	4627      	mov	r7, r4
 800fb66:	2f00      	cmp	r7, #0
 800fb68:	d143      	bne.n	800fbf2 <_malloc_r+0xd6>
 800fb6a:	2c00      	cmp	r4, #0
 800fb6c:	d04b      	beq.n	800fc06 <_malloc_r+0xea>
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	4639      	mov	r1, r7
 800fb72:	4630      	mov	r0, r6
 800fb74:	eb04 0903 	add.w	r9, r4, r3
 800fb78:	f000 fe5e 	bl	8010838 <_sbrk_r>
 800fb7c:	4581      	cmp	r9, r0
 800fb7e:	d142      	bne.n	800fc06 <_malloc_r+0xea>
 800fb80:	6821      	ldr	r1, [r4, #0]
 800fb82:	1a6d      	subs	r5, r5, r1
 800fb84:	4629      	mov	r1, r5
 800fb86:	4630      	mov	r0, r6
 800fb88:	f7ff ffa6 	bl	800fad8 <sbrk_aligned>
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	d03a      	beq.n	800fc06 <_malloc_r+0xea>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	442b      	add	r3, r5
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	f8d8 3000 	ldr.w	r3, [r8]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	bb62      	cbnz	r2, 800fbf8 <_malloc_r+0xdc>
 800fb9e:	f8c8 7000 	str.w	r7, [r8]
 800fba2:	e00f      	b.n	800fbc4 <_malloc_r+0xa8>
 800fba4:	6822      	ldr	r2, [r4, #0]
 800fba6:	1b52      	subs	r2, r2, r5
 800fba8:	d420      	bmi.n	800fbec <_malloc_r+0xd0>
 800fbaa:	2a0b      	cmp	r2, #11
 800fbac:	d917      	bls.n	800fbde <_malloc_r+0xc2>
 800fbae:	1961      	adds	r1, r4, r5
 800fbb0:	42a3      	cmp	r3, r4
 800fbb2:	6025      	str	r5, [r4, #0]
 800fbb4:	bf18      	it	ne
 800fbb6:	6059      	strne	r1, [r3, #4]
 800fbb8:	6863      	ldr	r3, [r4, #4]
 800fbba:	bf08      	it	eq
 800fbbc:	f8c8 1000 	streq.w	r1, [r8]
 800fbc0:	5162      	str	r2, [r4, r5]
 800fbc2:	604b      	str	r3, [r1, #4]
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f000 f82f 	bl	800fc28 <__malloc_unlock>
 800fbca:	f104 000b 	add.w	r0, r4, #11
 800fbce:	1d23      	adds	r3, r4, #4
 800fbd0:	f020 0007 	bic.w	r0, r0, #7
 800fbd4:	1ac2      	subs	r2, r0, r3
 800fbd6:	bf1c      	itt	ne
 800fbd8:	1a1b      	subne	r3, r3, r0
 800fbda:	50a3      	strne	r3, [r4, r2]
 800fbdc:	e7af      	b.n	800fb3e <_malloc_r+0x22>
 800fbde:	6862      	ldr	r2, [r4, #4]
 800fbe0:	42a3      	cmp	r3, r4
 800fbe2:	bf0c      	ite	eq
 800fbe4:	f8c8 2000 	streq.w	r2, [r8]
 800fbe8:	605a      	strne	r2, [r3, #4]
 800fbea:	e7eb      	b.n	800fbc4 <_malloc_r+0xa8>
 800fbec:	4623      	mov	r3, r4
 800fbee:	6864      	ldr	r4, [r4, #4]
 800fbf0:	e7ae      	b.n	800fb50 <_malloc_r+0x34>
 800fbf2:	463c      	mov	r4, r7
 800fbf4:	687f      	ldr	r7, [r7, #4]
 800fbf6:	e7b6      	b.n	800fb66 <_malloc_r+0x4a>
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d1fb      	bne.n	800fbf8 <_malloc_r+0xdc>
 800fc00:	2300      	movs	r3, #0
 800fc02:	6053      	str	r3, [r2, #4]
 800fc04:	e7de      	b.n	800fbc4 <_malloc_r+0xa8>
 800fc06:	230c      	movs	r3, #12
 800fc08:	6033      	str	r3, [r6, #0]
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	f000 f80c 	bl	800fc28 <__malloc_unlock>
 800fc10:	e794      	b.n	800fb3c <_malloc_r+0x20>
 800fc12:	6005      	str	r5, [r0, #0]
 800fc14:	e7d6      	b.n	800fbc4 <_malloc_r+0xa8>
 800fc16:	bf00      	nop
 800fc18:	2000e368 	.word	0x2000e368

0800fc1c <__malloc_lock>:
 800fc1c:	4801      	ldr	r0, [pc, #4]	@ (800fc24 <__malloc_lock+0x8>)
 800fc1e:	f7ff b912 	b.w	800ee46 <__retarget_lock_acquire_recursive>
 800fc22:	bf00      	nop
 800fc24:	2000e360 	.word	0x2000e360

0800fc28 <__malloc_unlock>:
 800fc28:	4801      	ldr	r0, [pc, #4]	@ (800fc30 <__malloc_unlock+0x8>)
 800fc2a:	f7ff b90d 	b.w	800ee48 <__retarget_lock_release_recursive>
 800fc2e:	bf00      	nop
 800fc30:	2000e360 	.word	0x2000e360

0800fc34 <_Balloc>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	69c6      	ldr	r6, [r0, #28]
 800fc38:	4604      	mov	r4, r0
 800fc3a:	460d      	mov	r5, r1
 800fc3c:	b976      	cbnz	r6, 800fc5c <_Balloc+0x28>
 800fc3e:	2010      	movs	r0, #16
 800fc40:	f7ff ff42 	bl	800fac8 <malloc>
 800fc44:	4602      	mov	r2, r0
 800fc46:	61e0      	str	r0, [r4, #28]
 800fc48:	b920      	cbnz	r0, 800fc54 <_Balloc+0x20>
 800fc4a:	4b18      	ldr	r3, [pc, #96]	@ (800fcac <_Balloc+0x78>)
 800fc4c:	4818      	ldr	r0, [pc, #96]	@ (800fcb0 <_Balloc+0x7c>)
 800fc4e:	216b      	movs	r1, #107	@ 0x6b
 800fc50:	f000 fe02 	bl	8010858 <__assert_func>
 800fc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc58:	6006      	str	r6, [r0, #0]
 800fc5a:	60c6      	str	r6, [r0, #12]
 800fc5c:	69e6      	ldr	r6, [r4, #28]
 800fc5e:	68f3      	ldr	r3, [r6, #12]
 800fc60:	b183      	cbz	r3, 800fc84 <_Balloc+0x50>
 800fc62:	69e3      	ldr	r3, [r4, #28]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc6a:	b9b8      	cbnz	r0, 800fc9c <_Balloc+0x68>
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	fa01 f605 	lsl.w	r6, r1, r5
 800fc72:	1d72      	adds	r2, r6, #5
 800fc74:	0092      	lsls	r2, r2, #2
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 fe0c 	bl	8010894 <_calloc_r>
 800fc7c:	b160      	cbz	r0, 800fc98 <_Balloc+0x64>
 800fc7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc82:	e00e      	b.n	800fca2 <_Balloc+0x6e>
 800fc84:	2221      	movs	r2, #33	@ 0x21
 800fc86:	2104      	movs	r1, #4
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 fe03 	bl	8010894 <_calloc_r>
 800fc8e:	69e3      	ldr	r3, [r4, #28]
 800fc90:	60f0      	str	r0, [r6, #12]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e4      	bne.n	800fc62 <_Balloc+0x2e>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
 800fc9c:	6802      	ldr	r2, [r0, #0]
 800fc9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fca2:	2300      	movs	r3, #0
 800fca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fca8:	e7f7      	b.n	800fc9a <_Balloc+0x66>
 800fcaa:	bf00      	nop
 800fcac:	080128a2 	.word	0x080128a2
 800fcb0:	08012922 	.word	0x08012922

0800fcb4 <_Bfree>:
 800fcb4:	b570      	push	{r4, r5, r6, lr}
 800fcb6:	69c6      	ldr	r6, [r0, #28]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	b976      	cbnz	r6, 800fcdc <_Bfree+0x28>
 800fcbe:	2010      	movs	r0, #16
 800fcc0:	f7ff ff02 	bl	800fac8 <malloc>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	61e8      	str	r0, [r5, #28]
 800fcc8:	b920      	cbnz	r0, 800fcd4 <_Bfree+0x20>
 800fcca:	4b09      	ldr	r3, [pc, #36]	@ (800fcf0 <_Bfree+0x3c>)
 800fccc:	4809      	ldr	r0, [pc, #36]	@ (800fcf4 <_Bfree+0x40>)
 800fcce:	218f      	movs	r1, #143	@ 0x8f
 800fcd0:	f000 fdc2 	bl	8010858 <__assert_func>
 800fcd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcd8:	6006      	str	r6, [r0, #0]
 800fcda:	60c6      	str	r6, [r0, #12]
 800fcdc:	b13c      	cbz	r4, 800fcee <_Bfree+0x3a>
 800fcde:	69eb      	ldr	r3, [r5, #28]
 800fce0:	6862      	ldr	r2, [r4, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fce8:	6021      	str	r1, [r4, #0]
 800fcea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	080128a2 	.word	0x080128a2
 800fcf4:	08012922 	.word	0x08012922

0800fcf8 <__multadd>:
 800fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfc:	690d      	ldr	r5, [r1, #16]
 800fcfe:	4607      	mov	r7, r0
 800fd00:	460c      	mov	r4, r1
 800fd02:	461e      	mov	r6, r3
 800fd04:	f101 0c14 	add.w	ip, r1, #20
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fd0e:	b299      	uxth	r1, r3
 800fd10:	fb02 6101 	mla	r1, r2, r1, r6
 800fd14:	0c1e      	lsrs	r6, r3, #16
 800fd16:	0c0b      	lsrs	r3, r1, #16
 800fd18:	fb02 3306 	mla	r3, r2, r6, r3
 800fd1c:	b289      	uxth	r1, r1
 800fd1e:	3001      	adds	r0, #1
 800fd20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd24:	4285      	cmp	r5, r0
 800fd26:	f84c 1b04 	str.w	r1, [ip], #4
 800fd2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd2e:	dcec      	bgt.n	800fd0a <__multadd+0x12>
 800fd30:	b30e      	cbz	r6, 800fd76 <__multadd+0x7e>
 800fd32:	68a3      	ldr	r3, [r4, #8]
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dc19      	bgt.n	800fd6c <__multadd+0x74>
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	f7ff ff79 	bl	800fc34 <_Balloc>
 800fd42:	4680      	mov	r8, r0
 800fd44:	b928      	cbnz	r0, 800fd52 <__multadd+0x5a>
 800fd46:	4602      	mov	r2, r0
 800fd48:	4b0c      	ldr	r3, [pc, #48]	@ (800fd7c <__multadd+0x84>)
 800fd4a:	480d      	ldr	r0, [pc, #52]	@ (800fd80 <__multadd+0x88>)
 800fd4c:	21ba      	movs	r1, #186	@ 0xba
 800fd4e:	f000 fd83 	bl	8010858 <__assert_func>
 800fd52:	6922      	ldr	r2, [r4, #16]
 800fd54:	3202      	adds	r2, #2
 800fd56:	f104 010c 	add.w	r1, r4, #12
 800fd5a:	0092      	lsls	r2, r2, #2
 800fd5c:	300c      	adds	r0, #12
 800fd5e:	f7ff f874 	bl	800ee4a <memcpy>
 800fd62:	4621      	mov	r1, r4
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7ff ffa5 	bl	800fcb4 <_Bfree>
 800fd6a:	4644      	mov	r4, r8
 800fd6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd70:	3501      	adds	r5, #1
 800fd72:	615e      	str	r6, [r3, #20]
 800fd74:	6125      	str	r5, [r4, #16]
 800fd76:	4620      	mov	r0, r4
 800fd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7c:	08012911 	.word	0x08012911
 800fd80:	08012922 	.word	0x08012922

0800fd84 <__hi0bits>:
 800fd84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd88:	4603      	mov	r3, r0
 800fd8a:	bf36      	itet	cc
 800fd8c:	0403      	lslcc	r3, r0, #16
 800fd8e:	2000      	movcs	r0, #0
 800fd90:	2010      	movcc	r0, #16
 800fd92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd96:	bf3c      	itt	cc
 800fd98:	021b      	lslcc	r3, r3, #8
 800fd9a:	3008      	addcc	r0, #8
 800fd9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fda0:	bf3c      	itt	cc
 800fda2:	011b      	lslcc	r3, r3, #4
 800fda4:	3004      	addcc	r0, #4
 800fda6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdaa:	bf3c      	itt	cc
 800fdac:	009b      	lslcc	r3, r3, #2
 800fdae:	3002      	addcc	r0, #2
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	db05      	blt.n	800fdc0 <__hi0bits+0x3c>
 800fdb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fdb8:	f100 0001 	add.w	r0, r0, #1
 800fdbc:	bf08      	it	eq
 800fdbe:	2020      	moveq	r0, #32
 800fdc0:	4770      	bx	lr

0800fdc2 <__lo0bits>:
 800fdc2:	6803      	ldr	r3, [r0, #0]
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	f013 0007 	ands.w	r0, r3, #7
 800fdca:	d00b      	beq.n	800fde4 <__lo0bits+0x22>
 800fdcc:	07d9      	lsls	r1, r3, #31
 800fdce:	d421      	bmi.n	800fe14 <__lo0bits+0x52>
 800fdd0:	0798      	lsls	r0, r3, #30
 800fdd2:	bf49      	itett	mi
 800fdd4:	085b      	lsrmi	r3, r3, #1
 800fdd6:	089b      	lsrpl	r3, r3, #2
 800fdd8:	2001      	movmi	r0, #1
 800fdda:	6013      	strmi	r3, [r2, #0]
 800fddc:	bf5c      	itt	pl
 800fdde:	6013      	strpl	r3, [r2, #0]
 800fde0:	2002      	movpl	r0, #2
 800fde2:	4770      	bx	lr
 800fde4:	b299      	uxth	r1, r3
 800fde6:	b909      	cbnz	r1, 800fdec <__lo0bits+0x2a>
 800fde8:	0c1b      	lsrs	r3, r3, #16
 800fdea:	2010      	movs	r0, #16
 800fdec:	b2d9      	uxtb	r1, r3
 800fdee:	b909      	cbnz	r1, 800fdf4 <__lo0bits+0x32>
 800fdf0:	3008      	adds	r0, #8
 800fdf2:	0a1b      	lsrs	r3, r3, #8
 800fdf4:	0719      	lsls	r1, r3, #28
 800fdf6:	bf04      	itt	eq
 800fdf8:	091b      	lsreq	r3, r3, #4
 800fdfa:	3004      	addeq	r0, #4
 800fdfc:	0799      	lsls	r1, r3, #30
 800fdfe:	bf04      	itt	eq
 800fe00:	089b      	lsreq	r3, r3, #2
 800fe02:	3002      	addeq	r0, #2
 800fe04:	07d9      	lsls	r1, r3, #31
 800fe06:	d403      	bmi.n	800fe10 <__lo0bits+0x4e>
 800fe08:	085b      	lsrs	r3, r3, #1
 800fe0a:	f100 0001 	add.w	r0, r0, #1
 800fe0e:	d003      	beq.n	800fe18 <__lo0bits+0x56>
 800fe10:	6013      	str	r3, [r2, #0]
 800fe12:	4770      	bx	lr
 800fe14:	2000      	movs	r0, #0
 800fe16:	4770      	bx	lr
 800fe18:	2020      	movs	r0, #32
 800fe1a:	4770      	bx	lr

0800fe1c <__i2b>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	460c      	mov	r4, r1
 800fe20:	2101      	movs	r1, #1
 800fe22:	f7ff ff07 	bl	800fc34 <_Balloc>
 800fe26:	4602      	mov	r2, r0
 800fe28:	b928      	cbnz	r0, 800fe36 <__i2b+0x1a>
 800fe2a:	4b05      	ldr	r3, [pc, #20]	@ (800fe40 <__i2b+0x24>)
 800fe2c:	4805      	ldr	r0, [pc, #20]	@ (800fe44 <__i2b+0x28>)
 800fe2e:	f240 1145 	movw	r1, #325	@ 0x145
 800fe32:	f000 fd11 	bl	8010858 <__assert_func>
 800fe36:	2301      	movs	r3, #1
 800fe38:	6144      	str	r4, [r0, #20]
 800fe3a:	6103      	str	r3, [r0, #16]
 800fe3c:	bd10      	pop	{r4, pc}
 800fe3e:	bf00      	nop
 800fe40:	08012911 	.word	0x08012911
 800fe44:	08012922 	.word	0x08012922

0800fe48 <__multiply>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	4617      	mov	r7, r2
 800fe4e:	690a      	ldr	r2, [r1, #16]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	bfa8      	it	ge
 800fe56:	463b      	movge	r3, r7
 800fe58:	4689      	mov	r9, r1
 800fe5a:	bfa4      	itt	ge
 800fe5c:	460f      	movge	r7, r1
 800fe5e:	4699      	movge	r9, r3
 800fe60:	693d      	ldr	r5, [r7, #16]
 800fe62:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	eb05 060a 	add.w	r6, r5, sl
 800fe6e:	42b3      	cmp	r3, r6
 800fe70:	b085      	sub	sp, #20
 800fe72:	bfb8      	it	lt
 800fe74:	3101      	addlt	r1, #1
 800fe76:	f7ff fedd 	bl	800fc34 <_Balloc>
 800fe7a:	b930      	cbnz	r0, 800fe8a <__multiply+0x42>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	4b41      	ldr	r3, [pc, #260]	@ (800ff84 <__multiply+0x13c>)
 800fe80:	4841      	ldr	r0, [pc, #260]	@ (800ff88 <__multiply+0x140>)
 800fe82:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe86:	f000 fce7 	bl	8010858 <__assert_func>
 800fe8a:	f100 0414 	add.w	r4, r0, #20
 800fe8e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fe92:	4623      	mov	r3, r4
 800fe94:	2200      	movs	r2, #0
 800fe96:	4573      	cmp	r3, lr
 800fe98:	d320      	bcc.n	800fedc <__multiply+0x94>
 800fe9a:	f107 0814 	add.w	r8, r7, #20
 800fe9e:	f109 0114 	add.w	r1, r9, #20
 800fea2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fea6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800feaa:	9302      	str	r3, [sp, #8]
 800feac:	1beb      	subs	r3, r5, r7
 800feae:	3b15      	subs	r3, #21
 800feb0:	f023 0303 	bic.w	r3, r3, #3
 800feb4:	3304      	adds	r3, #4
 800feb6:	3715      	adds	r7, #21
 800feb8:	42bd      	cmp	r5, r7
 800feba:	bf38      	it	cc
 800febc:	2304      	movcc	r3, #4
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	9103      	str	r1, [sp, #12]
 800fec4:	428b      	cmp	r3, r1
 800fec6:	d80c      	bhi.n	800fee2 <__multiply+0x9a>
 800fec8:	2e00      	cmp	r6, #0
 800feca:	dd03      	ble.n	800fed4 <__multiply+0x8c>
 800fecc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d055      	beq.n	800ff80 <__multiply+0x138>
 800fed4:	6106      	str	r6, [r0, #16]
 800fed6:	b005      	add	sp, #20
 800fed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fedc:	f843 2b04 	str.w	r2, [r3], #4
 800fee0:	e7d9      	b.n	800fe96 <__multiply+0x4e>
 800fee2:	f8b1 a000 	ldrh.w	sl, [r1]
 800fee6:	f1ba 0f00 	cmp.w	sl, #0
 800feea:	d01f      	beq.n	800ff2c <__multiply+0xe4>
 800feec:	46c4      	mov	ip, r8
 800feee:	46a1      	mov	r9, r4
 800fef0:	2700      	movs	r7, #0
 800fef2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fef6:	f8d9 3000 	ldr.w	r3, [r9]
 800fefa:	fa1f fb82 	uxth.w	fp, r2
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff04:	443b      	add	r3, r7
 800ff06:	f8d9 7000 	ldr.w	r7, [r9]
 800ff0a:	0c12      	lsrs	r2, r2, #16
 800ff0c:	0c3f      	lsrs	r7, r7, #16
 800ff0e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ff12:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff1c:	4565      	cmp	r5, ip
 800ff1e:	f849 3b04 	str.w	r3, [r9], #4
 800ff22:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ff26:	d8e4      	bhi.n	800fef2 <__multiply+0xaa>
 800ff28:	9b01      	ldr	r3, [sp, #4]
 800ff2a:	50e7      	str	r7, [r4, r3]
 800ff2c:	9b03      	ldr	r3, [sp, #12]
 800ff2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff32:	3104      	adds	r1, #4
 800ff34:	f1b9 0f00 	cmp.w	r9, #0
 800ff38:	d020      	beq.n	800ff7c <__multiply+0x134>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	4647      	mov	r7, r8
 800ff3e:	46a4      	mov	ip, r4
 800ff40:	f04f 0a00 	mov.w	sl, #0
 800ff44:	f8b7 b000 	ldrh.w	fp, [r7]
 800ff48:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ff4c:	fb09 220b 	mla	r2, r9, fp, r2
 800ff50:	4452      	add	r2, sl
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff58:	f84c 3b04 	str.w	r3, [ip], #4
 800ff5c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ff60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff64:	f8bc 3000 	ldrh.w	r3, [ip]
 800ff68:	fb09 330a 	mla	r3, r9, sl, r3
 800ff6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ff70:	42bd      	cmp	r5, r7
 800ff72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff76:	d8e5      	bhi.n	800ff44 <__multiply+0xfc>
 800ff78:	9a01      	ldr	r2, [sp, #4]
 800ff7a:	50a3      	str	r3, [r4, r2]
 800ff7c:	3404      	adds	r4, #4
 800ff7e:	e79f      	b.n	800fec0 <__multiply+0x78>
 800ff80:	3e01      	subs	r6, #1
 800ff82:	e7a1      	b.n	800fec8 <__multiply+0x80>
 800ff84:	08012911 	.word	0x08012911
 800ff88:	08012922 	.word	0x08012922

0800ff8c <__pow5mult>:
 800ff8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff90:	4615      	mov	r5, r2
 800ff92:	f012 0203 	ands.w	r2, r2, #3
 800ff96:	4607      	mov	r7, r0
 800ff98:	460e      	mov	r6, r1
 800ff9a:	d007      	beq.n	800ffac <__pow5mult+0x20>
 800ff9c:	4c25      	ldr	r4, [pc, #148]	@ (8010034 <__pow5mult+0xa8>)
 800ff9e:	3a01      	subs	r2, #1
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffa6:	f7ff fea7 	bl	800fcf8 <__multadd>
 800ffaa:	4606      	mov	r6, r0
 800ffac:	10ad      	asrs	r5, r5, #2
 800ffae:	d03d      	beq.n	801002c <__pow5mult+0xa0>
 800ffb0:	69fc      	ldr	r4, [r7, #28]
 800ffb2:	b97c      	cbnz	r4, 800ffd4 <__pow5mult+0x48>
 800ffb4:	2010      	movs	r0, #16
 800ffb6:	f7ff fd87 	bl	800fac8 <malloc>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	61f8      	str	r0, [r7, #28]
 800ffbe:	b928      	cbnz	r0, 800ffcc <__pow5mult+0x40>
 800ffc0:	4b1d      	ldr	r3, [pc, #116]	@ (8010038 <__pow5mult+0xac>)
 800ffc2:	481e      	ldr	r0, [pc, #120]	@ (801003c <__pow5mult+0xb0>)
 800ffc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffc8:	f000 fc46 	bl	8010858 <__assert_func>
 800ffcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffd0:	6004      	str	r4, [r0, #0]
 800ffd2:	60c4      	str	r4, [r0, #12]
 800ffd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffdc:	b94c      	cbnz	r4, 800fff2 <__pow5mult+0x66>
 800ffde:	f240 2171 	movw	r1, #625	@ 0x271
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	f7ff ff1a 	bl	800fe1c <__i2b>
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffee:	4604      	mov	r4, r0
 800fff0:	6003      	str	r3, [r0, #0]
 800fff2:	f04f 0900 	mov.w	r9, #0
 800fff6:	07eb      	lsls	r3, r5, #31
 800fff8:	d50a      	bpl.n	8010010 <__pow5mult+0x84>
 800fffa:	4631      	mov	r1, r6
 800fffc:	4622      	mov	r2, r4
 800fffe:	4638      	mov	r0, r7
 8010000:	f7ff ff22 	bl	800fe48 <__multiply>
 8010004:	4631      	mov	r1, r6
 8010006:	4680      	mov	r8, r0
 8010008:	4638      	mov	r0, r7
 801000a:	f7ff fe53 	bl	800fcb4 <_Bfree>
 801000e:	4646      	mov	r6, r8
 8010010:	106d      	asrs	r5, r5, #1
 8010012:	d00b      	beq.n	801002c <__pow5mult+0xa0>
 8010014:	6820      	ldr	r0, [r4, #0]
 8010016:	b938      	cbnz	r0, 8010028 <__pow5mult+0x9c>
 8010018:	4622      	mov	r2, r4
 801001a:	4621      	mov	r1, r4
 801001c:	4638      	mov	r0, r7
 801001e:	f7ff ff13 	bl	800fe48 <__multiply>
 8010022:	6020      	str	r0, [r4, #0]
 8010024:	f8c0 9000 	str.w	r9, [r0]
 8010028:	4604      	mov	r4, r0
 801002a:	e7e4      	b.n	800fff6 <__pow5mult+0x6a>
 801002c:	4630      	mov	r0, r6
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010032:	bf00      	nop
 8010034:	080129d4 	.word	0x080129d4
 8010038:	080128a2 	.word	0x080128a2
 801003c:	08012922 	.word	0x08012922

08010040 <__lshift>:
 8010040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010044:	460c      	mov	r4, r1
 8010046:	6849      	ldr	r1, [r1, #4]
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801004e:	68a3      	ldr	r3, [r4, #8]
 8010050:	4607      	mov	r7, r0
 8010052:	4691      	mov	r9, r2
 8010054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010058:	f108 0601 	add.w	r6, r8, #1
 801005c:	42b3      	cmp	r3, r6
 801005e:	db0b      	blt.n	8010078 <__lshift+0x38>
 8010060:	4638      	mov	r0, r7
 8010062:	f7ff fde7 	bl	800fc34 <_Balloc>
 8010066:	4605      	mov	r5, r0
 8010068:	b948      	cbnz	r0, 801007e <__lshift+0x3e>
 801006a:	4602      	mov	r2, r0
 801006c:	4b28      	ldr	r3, [pc, #160]	@ (8010110 <__lshift+0xd0>)
 801006e:	4829      	ldr	r0, [pc, #164]	@ (8010114 <__lshift+0xd4>)
 8010070:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010074:	f000 fbf0 	bl	8010858 <__assert_func>
 8010078:	3101      	adds	r1, #1
 801007a:	005b      	lsls	r3, r3, #1
 801007c:	e7ee      	b.n	801005c <__lshift+0x1c>
 801007e:	2300      	movs	r3, #0
 8010080:	f100 0114 	add.w	r1, r0, #20
 8010084:	f100 0210 	add.w	r2, r0, #16
 8010088:	4618      	mov	r0, r3
 801008a:	4553      	cmp	r3, sl
 801008c:	db33      	blt.n	80100f6 <__lshift+0xb6>
 801008e:	6920      	ldr	r0, [r4, #16]
 8010090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010094:	f104 0314 	add.w	r3, r4, #20
 8010098:	f019 091f 	ands.w	r9, r9, #31
 801009c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100a4:	d02b      	beq.n	80100fe <__lshift+0xbe>
 80100a6:	f1c9 0e20 	rsb	lr, r9, #32
 80100aa:	468a      	mov	sl, r1
 80100ac:	2200      	movs	r2, #0
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	fa00 f009 	lsl.w	r0, r0, r9
 80100b4:	4310      	orrs	r0, r2
 80100b6:	f84a 0b04 	str.w	r0, [sl], #4
 80100ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80100be:	459c      	cmp	ip, r3
 80100c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80100c4:	d8f3      	bhi.n	80100ae <__lshift+0x6e>
 80100c6:	ebac 0304 	sub.w	r3, ip, r4
 80100ca:	3b15      	subs	r3, #21
 80100cc:	f023 0303 	bic.w	r3, r3, #3
 80100d0:	3304      	adds	r3, #4
 80100d2:	f104 0015 	add.w	r0, r4, #21
 80100d6:	4560      	cmp	r0, ip
 80100d8:	bf88      	it	hi
 80100da:	2304      	movhi	r3, #4
 80100dc:	50ca      	str	r2, [r1, r3]
 80100de:	b10a      	cbz	r2, 80100e4 <__lshift+0xa4>
 80100e0:	f108 0602 	add.w	r6, r8, #2
 80100e4:	3e01      	subs	r6, #1
 80100e6:	4638      	mov	r0, r7
 80100e8:	612e      	str	r6, [r5, #16]
 80100ea:	4621      	mov	r1, r4
 80100ec:	f7ff fde2 	bl	800fcb4 <_Bfree>
 80100f0:	4628      	mov	r0, r5
 80100f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80100fa:	3301      	adds	r3, #1
 80100fc:	e7c5      	b.n	801008a <__lshift+0x4a>
 80100fe:	3904      	subs	r1, #4
 8010100:	f853 2b04 	ldr.w	r2, [r3], #4
 8010104:	f841 2f04 	str.w	r2, [r1, #4]!
 8010108:	459c      	cmp	ip, r3
 801010a:	d8f9      	bhi.n	8010100 <__lshift+0xc0>
 801010c:	e7ea      	b.n	80100e4 <__lshift+0xa4>
 801010e:	bf00      	nop
 8010110:	08012911 	.word	0x08012911
 8010114:	08012922 	.word	0x08012922

08010118 <__mcmp>:
 8010118:	690a      	ldr	r2, [r1, #16]
 801011a:	4603      	mov	r3, r0
 801011c:	6900      	ldr	r0, [r0, #16]
 801011e:	1a80      	subs	r0, r0, r2
 8010120:	b530      	push	{r4, r5, lr}
 8010122:	d10e      	bne.n	8010142 <__mcmp+0x2a>
 8010124:	3314      	adds	r3, #20
 8010126:	3114      	adds	r1, #20
 8010128:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801012c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010130:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010134:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010138:	4295      	cmp	r5, r2
 801013a:	d003      	beq.n	8010144 <__mcmp+0x2c>
 801013c:	d205      	bcs.n	801014a <__mcmp+0x32>
 801013e:	f04f 30ff 	mov.w	r0, #4294967295
 8010142:	bd30      	pop	{r4, r5, pc}
 8010144:	42a3      	cmp	r3, r4
 8010146:	d3f3      	bcc.n	8010130 <__mcmp+0x18>
 8010148:	e7fb      	b.n	8010142 <__mcmp+0x2a>
 801014a:	2001      	movs	r0, #1
 801014c:	e7f9      	b.n	8010142 <__mcmp+0x2a>
	...

08010150 <__mdiff>:
 8010150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	4689      	mov	r9, r1
 8010156:	4606      	mov	r6, r0
 8010158:	4611      	mov	r1, r2
 801015a:	4648      	mov	r0, r9
 801015c:	4614      	mov	r4, r2
 801015e:	f7ff ffdb 	bl	8010118 <__mcmp>
 8010162:	1e05      	subs	r5, r0, #0
 8010164:	d112      	bne.n	801018c <__mdiff+0x3c>
 8010166:	4629      	mov	r1, r5
 8010168:	4630      	mov	r0, r6
 801016a:	f7ff fd63 	bl	800fc34 <_Balloc>
 801016e:	4602      	mov	r2, r0
 8010170:	b928      	cbnz	r0, 801017e <__mdiff+0x2e>
 8010172:	4b3f      	ldr	r3, [pc, #252]	@ (8010270 <__mdiff+0x120>)
 8010174:	f240 2137 	movw	r1, #567	@ 0x237
 8010178:	483e      	ldr	r0, [pc, #248]	@ (8010274 <__mdiff+0x124>)
 801017a:	f000 fb6d 	bl	8010858 <__assert_func>
 801017e:	2301      	movs	r3, #1
 8010180:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010184:	4610      	mov	r0, r2
 8010186:	b003      	add	sp, #12
 8010188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801018c:	bfbc      	itt	lt
 801018e:	464b      	movlt	r3, r9
 8010190:	46a1      	movlt	r9, r4
 8010192:	4630      	mov	r0, r6
 8010194:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010198:	bfba      	itte	lt
 801019a:	461c      	movlt	r4, r3
 801019c:	2501      	movlt	r5, #1
 801019e:	2500      	movge	r5, #0
 80101a0:	f7ff fd48 	bl	800fc34 <_Balloc>
 80101a4:	4602      	mov	r2, r0
 80101a6:	b918      	cbnz	r0, 80101b0 <__mdiff+0x60>
 80101a8:	4b31      	ldr	r3, [pc, #196]	@ (8010270 <__mdiff+0x120>)
 80101aa:	f240 2145 	movw	r1, #581	@ 0x245
 80101ae:	e7e3      	b.n	8010178 <__mdiff+0x28>
 80101b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80101b4:	6926      	ldr	r6, [r4, #16]
 80101b6:	60c5      	str	r5, [r0, #12]
 80101b8:	f109 0310 	add.w	r3, r9, #16
 80101bc:	f109 0514 	add.w	r5, r9, #20
 80101c0:	f104 0e14 	add.w	lr, r4, #20
 80101c4:	f100 0b14 	add.w	fp, r0, #20
 80101c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101d0:	9301      	str	r3, [sp, #4]
 80101d2:	46d9      	mov	r9, fp
 80101d4:	f04f 0c00 	mov.w	ip, #0
 80101d8:	9b01      	ldr	r3, [sp, #4]
 80101da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101e2:	9301      	str	r3, [sp, #4]
 80101e4:	fa1f f38a 	uxth.w	r3, sl
 80101e8:	4619      	mov	r1, r3
 80101ea:	b283      	uxth	r3, r0
 80101ec:	1acb      	subs	r3, r1, r3
 80101ee:	0c00      	lsrs	r0, r0, #16
 80101f0:	4463      	add	r3, ip
 80101f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010200:	4576      	cmp	r6, lr
 8010202:	f849 3b04 	str.w	r3, [r9], #4
 8010206:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801020a:	d8e5      	bhi.n	80101d8 <__mdiff+0x88>
 801020c:	1b33      	subs	r3, r6, r4
 801020e:	3b15      	subs	r3, #21
 8010210:	f023 0303 	bic.w	r3, r3, #3
 8010214:	3415      	adds	r4, #21
 8010216:	3304      	adds	r3, #4
 8010218:	42a6      	cmp	r6, r4
 801021a:	bf38      	it	cc
 801021c:	2304      	movcc	r3, #4
 801021e:	441d      	add	r5, r3
 8010220:	445b      	add	r3, fp
 8010222:	461e      	mov	r6, r3
 8010224:	462c      	mov	r4, r5
 8010226:	4544      	cmp	r4, r8
 8010228:	d30e      	bcc.n	8010248 <__mdiff+0xf8>
 801022a:	f108 0103 	add.w	r1, r8, #3
 801022e:	1b49      	subs	r1, r1, r5
 8010230:	f021 0103 	bic.w	r1, r1, #3
 8010234:	3d03      	subs	r5, #3
 8010236:	45a8      	cmp	r8, r5
 8010238:	bf38      	it	cc
 801023a:	2100      	movcc	r1, #0
 801023c:	440b      	add	r3, r1
 801023e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010242:	b191      	cbz	r1, 801026a <__mdiff+0x11a>
 8010244:	6117      	str	r7, [r2, #16]
 8010246:	e79d      	b.n	8010184 <__mdiff+0x34>
 8010248:	f854 1b04 	ldr.w	r1, [r4], #4
 801024c:	46e6      	mov	lr, ip
 801024e:	0c08      	lsrs	r0, r1, #16
 8010250:	fa1c fc81 	uxtah	ip, ip, r1
 8010254:	4471      	add	r1, lr
 8010256:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801025a:	b289      	uxth	r1, r1
 801025c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010260:	f846 1b04 	str.w	r1, [r6], #4
 8010264:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010268:	e7dd      	b.n	8010226 <__mdiff+0xd6>
 801026a:	3f01      	subs	r7, #1
 801026c:	e7e7      	b.n	801023e <__mdiff+0xee>
 801026e:	bf00      	nop
 8010270:	08012911 	.word	0x08012911
 8010274:	08012922 	.word	0x08012922

08010278 <__d2b>:
 8010278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801027c:	460f      	mov	r7, r1
 801027e:	2101      	movs	r1, #1
 8010280:	ec59 8b10 	vmov	r8, r9, d0
 8010284:	4616      	mov	r6, r2
 8010286:	f7ff fcd5 	bl	800fc34 <_Balloc>
 801028a:	4604      	mov	r4, r0
 801028c:	b930      	cbnz	r0, 801029c <__d2b+0x24>
 801028e:	4602      	mov	r2, r0
 8010290:	4b23      	ldr	r3, [pc, #140]	@ (8010320 <__d2b+0xa8>)
 8010292:	4824      	ldr	r0, [pc, #144]	@ (8010324 <__d2b+0xac>)
 8010294:	f240 310f 	movw	r1, #783	@ 0x30f
 8010298:	f000 fade 	bl	8010858 <__assert_func>
 801029c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102a4:	b10d      	cbz	r5, 80102aa <__d2b+0x32>
 80102a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102aa:	9301      	str	r3, [sp, #4]
 80102ac:	f1b8 0300 	subs.w	r3, r8, #0
 80102b0:	d023      	beq.n	80102fa <__d2b+0x82>
 80102b2:	4668      	mov	r0, sp
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	f7ff fd84 	bl	800fdc2 <__lo0bits>
 80102ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102be:	b1d0      	cbz	r0, 80102f6 <__d2b+0x7e>
 80102c0:	f1c0 0320 	rsb	r3, r0, #32
 80102c4:	fa02 f303 	lsl.w	r3, r2, r3
 80102c8:	430b      	orrs	r3, r1
 80102ca:	40c2      	lsrs	r2, r0
 80102cc:	6163      	str	r3, [r4, #20]
 80102ce:	9201      	str	r2, [sp, #4]
 80102d0:	9b01      	ldr	r3, [sp, #4]
 80102d2:	61a3      	str	r3, [r4, #24]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	bf0c      	ite	eq
 80102d8:	2201      	moveq	r2, #1
 80102da:	2202      	movne	r2, #2
 80102dc:	6122      	str	r2, [r4, #16]
 80102de:	b1a5      	cbz	r5, 801030a <__d2b+0x92>
 80102e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102e4:	4405      	add	r5, r0
 80102e6:	603d      	str	r5, [r7, #0]
 80102e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102ec:	6030      	str	r0, [r6, #0]
 80102ee:	4620      	mov	r0, r4
 80102f0:	b003      	add	sp, #12
 80102f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f6:	6161      	str	r1, [r4, #20]
 80102f8:	e7ea      	b.n	80102d0 <__d2b+0x58>
 80102fa:	a801      	add	r0, sp, #4
 80102fc:	f7ff fd61 	bl	800fdc2 <__lo0bits>
 8010300:	9b01      	ldr	r3, [sp, #4]
 8010302:	6163      	str	r3, [r4, #20]
 8010304:	3020      	adds	r0, #32
 8010306:	2201      	movs	r2, #1
 8010308:	e7e8      	b.n	80102dc <__d2b+0x64>
 801030a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801030e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010312:	6038      	str	r0, [r7, #0]
 8010314:	6918      	ldr	r0, [r3, #16]
 8010316:	f7ff fd35 	bl	800fd84 <__hi0bits>
 801031a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801031e:	e7e5      	b.n	80102ec <__d2b+0x74>
 8010320:	08012911 	.word	0x08012911
 8010324:	08012922 	.word	0x08012922

08010328 <__ssputs_r>:
 8010328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801032c:	688e      	ldr	r6, [r1, #8]
 801032e:	461f      	mov	r7, r3
 8010330:	42be      	cmp	r6, r7
 8010332:	680b      	ldr	r3, [r1, #0]
 8010334:	4682      	mov	sl, r0
 8010336:	460c      	mov	r4, r1
 8010338:	4690      	mov	r8, r2
 801033a:	d82d      	bhi.n	8010398 <__ssputs_r+0x70>
 801033c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010344:	d026      	beq.n	8010394 <__ssputs_r+0x6c>
 8010346:	6965      	ldr	r5, [r4, #20]
 8010348:	6909      	ldr	r1, [r1, #16]
 801034a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801034e:	eba3 0901 	sub.w	r9, r3, r1
 8010352:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010356:	1c7b      	adds	r3, r7, #1
 8010358:	444b      	add	r3, r9
 801035a:	106d      	asrs	r5, r5, #1
 801035c:	429d      	cmp	r5, r3
 801035e:	bf38      	it	cc
 8010360:	461d      	movcc	r5, r3
 8010362:	0553      	lsls	r3, r2, #21
 8010364:	d527      	bpl.n	80103b6 <__ssputs_r+0x8e>
 8010366:	4629      	mov	r1, r5
 8010368:	f7ff fbd8 	bl	800fb1c <_malloc_r>
 801036c:	4606      	mov	r6, r0
 801036e:	b360      	cbz	r0, 80103ca <__ssputs_r+0xa2>
 8010370:	6921      	ldr	r1, [r4, #16]
 8010372:	464a      	mov	r2, r9
 8010374:	f7fe fd69 	bl	800ee4a <memcpy>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801037e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	6126      	str	r6, [r4, #16]
 8010386:	6165      	str	r5, [r4, #20]
 8010388:	444e      	add	r6, r9
 801038a:	eba5 0509 	sub.w	r5, r5, r9
 801038e:	6026      	str	r6, [r4, #0]
 8010390:	60a5      	str	r5, [r4, #8]
 8010392:	463e      	mov	r6, r7
 8010394:	42be      	cmp	r6, r7
 8010396:	d900      	bls.n	801039a <__ssputs_r+0x72>
 8010398:	463e      	mov	r6, r7
 801039a:	6820      	ldr	r0, [r4, #0]
 801039c:	4632      	mov	r2, r6
 801039e:	4641      	mov	r1, r8
 80103a0:	f7fe fcac 	bl	800ecfc <memmove>
 80103a4:	68a3      	ldr	r3, [r4, #8]
 80103a6:	1b9b      	subs	r3, r3, r6
 80103a8:	60a3      	str	r3, [r4, #8]
 80103aa:	6823      	ldr	r3, [r4, #0]
 80103ac:	4433      	add	r3, r6
 80103ae:	6023      	str	r3, [r4, #0]
 80103b0:	2000      	movs	r0, #0
 80103b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103b6:	462a      	mov	r2, r5
 80103b8:	f000 fa92 	bl	80108e0 <_realloc_r>
 80103bc:	4606      	mov	r6, r0
 80103be:	2800      	cmp	r0, #0
 80103c0:	d1e0      	bne.n	8010384 <__ssputs_r+0x5c>
 80103c2:	6921      	ldr	r1, [r4, #16]
 80103c4:	4650      	mov	r0, sl
 80103c6:	f7ff fb35 	bl	800fa34 <_free_r>
 80103ca:	230c      	movs	r3, #12
 80103cc:	f8ca 3000 	str.w	r3, [sl]
 80103d0:	89a3      	ldrh	r3, [r4, #12]
 80103d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103d6:	81a3      	strh	r3, [r4, #12]
 80103d8:	f04f 30ff 	mov.w	r0, #4294967295
 80103dc:	e7e9      	b.n	80103b2 <__ssputs_r+0x8a>
	...

080103e0 <_svfiprintf_r>:
 80103e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e4:	4698      	mov	r8, r3
 80103e6:	898b      	ldrh	r3, [r1, #12]
 80103e8:	061b      	lsls	r3, r3, #24
 80103ea:	b09d      	sub	sp, #116	@ 0x74
 80103ec:	4607      	mov	r7, r0
 80103ee:	460d      	mov	r5, r1
 80103f0:	4614      	mov	r4, r2
 80103f2:	d510      	bpl.n	8010416 <_svfiprintf_r+0x36>
 80103f4:	690b      	ldr	r3, [r1, #16]
 80103f6:	b973      	cbnz	r3, 8010416 <_svfiprintf_r+0x36>
 80103f8:	2140      	movs	r1, #64	@ 0x40
 80103fa:	f7ff fb8f 	bl	800fb1c <_malloc_r>
 80103fe:	6028      	str	r0, [r5, #0]
 8010400:	6128      	str	r0, [r5, #16]
 8010402:	b930      	cbnz	r0, 8010412 <_svfiprintf_r+0x32>
 8010404:	230c      	movs	r3, #12
 8010406:	603b      	str	r3, [r7, #0]
 8010408:	f04f 30ff 	mov.w	r0, #4294967295
 801040c:	b01d      	add	sp, #116	@ 0x74
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	2340      	movs	r3, #64	@ 0x40
 8010414:	616b      	str	r3, [r5, #20]
 8010416:	2300      	movs	r3, #0
 8010418:	9309      	str	r3, [sp, #36]	@ 0x24
 801041a:	2320      	movs	r3, #32
 801041c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010420:	f8cd 800c 	str.w	r8, [sp, #12]
 8010424:	2330      	movs	r3, #48	@ 0x30
 8010426:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105c4 <_svfiprintf_r+0x1e4>
 801042a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801042e:	f04f 0901 	mov.w	r9, #1
 8010432:	4623      	mov	r3, r4
 8010434:	469a      	mov	sl, r3
 8010436:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043a:	b10a      	cbz	r2, 8010440 <_svfiprintf_r+0x60>
 801043c:	2a25      	cmp	r2, #37	@ 0x25
 801043e:	d1f9      	bne.n	8010434 <_svfiprintf_r+0x54>
 8010440:	ebba 0b04 	subs.w	fp, sl, r4
 8010444:	d00b      	beq.n	801045e <_svfiprintf_r+0x7e>
 8010446:	465b      	mov	r3, fp
 8010448:	4622      	mov	r2, r4
 801044a:	4629      	mov	r1, r5
 801044c:	4638      	mov	r0, r7
 801044e:	f7ff ff6b 	bl	8010328 <__ssputs_r>
 8010452:	3001      	adds	r0, #1
 8010454:	f000 80a7 	beq.w	80105a6 <_svfiprintf_r+0x1c6>
 8010458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801045a:	445a      	add	r2, fp
 801045c:	9209      	str	r2, [sp, #36]	@ 0x24
 801045e:	f89a 3000 	ldrb.w	r3, [sl]
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 809f 	beq.w	80105a6 <_svfiprintf_r+0x1c6>
 8010468:	2300      	movs	r3, #0
 801046a:	f04f 32ff 	mov.w	r2, #4294967295
 801046e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010472:	f10a 0a01 	add.w	sl, sl, #1
 8010476:	9304      	str	r3, [sp, #16]
 8010478:	9307      	str	r3, [sp, #28]
 801047a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801047e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010480:	4654      	mov	r4, sl
 8010482:	2205      	movs	r2, #5
 8010484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010488:	484e      	ldr	r0, [pc, #312]	@ (80105c4 <_svfiprintf_r+0x1e4>)
 801048a:	f7ef fee9 	bl	8000260 <memchr>
 801048e:	9a04      	ldr	r2, [sp, #16]
 8010490:	b9d8      	cbnz	r0, 80104ca <_svfiprintf_r+0xea>
 8010492:	06d0      	lsls	r0, r2, #27
 8010494:	bf44      	itt	mi
 8010496:	2320      	movmi	r3, #32
 8010498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801049c:	0711      	lsls	r1, r2, #28
 801049e:	bf44      	itt	mi
 80104a0:	232b      	movmi	r3, #43	@ 0x2b
 80104a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104a6:	f89a 3000 	ldrb.w	r3, [sl]
 80104aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80104ac:	d015      	beq.n	80104da <_svfiprintf_r+0xfa>
 80104ae:	9a07      	ldr	r2, [sp, #28]
 80104b0:	4654      	mov	r4, sl
 80104b2:	2000      	movs	r0, #0
 80104b4:	f04f 0c0a 	mov.w	ip, #10
 80104b8:	4621      	mov	r1, r4
 80104ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104be:	3b30      	subs	r3, #48	@ 0x30
 80104c0:	2b09      	cmp	r3, #9
 80104c2:	d94b      	bls.n	801055c <_svfiprintf_r+0x17c>
 80104c4:	b1b0      	cbz	r0, 80104f4 <_svfiprintf_r+0x114>
 80104c6:	9207      	str	r2, [sp, #28]
 80104c8:	e014      	b.n	80104f4 <_svfiprintf_r+0x114>
 80104ca:	eba0 0308 	sub.w	r3, r0, r8
 80104ce:	fa09 f303 	lsl.w	r3, r9, r3
 80104d2:	4313      	orrs	r3, r2
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	46a2      	mov	sl, r4
 80104d8:	e7d2      	b.n	8010480 <_svfiprintf_r+0xa0>
 80104da:	9b03      	ldr	r3, [sp, #12]
 80104dc:	1d19      	adds	r1, r3, #4
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	9103      	str	r1, [sp, #12]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	bfbb      	ittet	lt
 80104e6:	425b      	neglt	r3, r3
 80104e8:	f042 0202 	orrlt.w	r2, r2, #2
 80104ec:	9307      	strge	r3, [sp, #28]
 80104ee:	9307      	strlt	r3, [sp, #28]
 80104f0:	bfb8      	it	lt
 80104f2:	9204      	strlt	r2, [sp, #16]
 80104f4:	7823      	ldrb	r3, [r4, #0]
 80104f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80104f8:	d10a      	bne.n	8010510 <_svfiprintf_r+0x130>
 80104fa:	7863      	ldrb	r3, [r4, #1]
 80104fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80104fe:	d132      	bne.n	8010566 <_svfiprintf_r+0x186>
 8010500:	9b03      	ldr	r3, [sp, #12]
 8010502:	1d1a      	adds	r2, r3, #4
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	9203      	str	r2, [sp, #12]
 8010508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801050c:	3402      	adds	r4, #2
 801050e:	9305      	str	r3, [sp, #20]
 8010510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105d4 <_svfiprintf_r+0x1f4>
 8010514:	7821      	ldrb	r1, [r4, #0]
 8010516:	2203      	movs	r2, #3
 8010518:	4650      	mov	r0, sl
 801051a:	f7ef fea1 	bl	8000260 <memchr>
 801051e:	b138      	cbz	r0, 8010530 <_svfiprintf_r+0x150>
 8010520:	9b04      	ldr	r3, [sp, #16]
 8010522:	eba0 000a 	sub.w	r0, r0, sl
 8010526:	2240      	movs	r2, #64	@ 0x40
 8010528:	4082      	lsls	r2, r0
 801052a:	4313      	orrs	r3, r2
 801052c:	3401      	adds	r4, #1
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010534:	4824      	ldr	r0, [pc, #144]	@ (80105c8 <_svfiprintf_r+0x1e8>)
 8010536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801053a:	2206      	movs	r2, #6
 801053c:	f7ef fe90 	bl	8000260 <memchr>
 8010540:	2800      	cmp	r0, #0
 8010542:	d036      	beq.n	80105b2 <_svfiprintf_r+0x1d2>
 8010544:	4b21      	ldr	r3, [pc, #132]	@ (80105cc <_svfiprintf_r+0x1ec>)
 8010546:	bb1b      	cbnz	r3, 8010590 <_svfiprintf_r+0x1b0>
 8010548:	9b03      	ldr	r3, [sp, #12]
 801054a:	3307      	adds	r3, #7
 801054c:	f023 0307 	bic.w	r3, r3, #7
 8010550:	3308      	adds	r3, #8
 8010552:	9303      	str	r3, [sp, #12]
 8010554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010556:	4433      	add	r3, r6
 8010558:	9309      	str	r3, [sp, #36]	@ 0x24
 801055a:	e76a      	b.n	8010432 <_svfiprintf_r+0x52>
 801055c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010560:	460c      	mov	r4, r1
 8010562:	2001      	movs	r0, #1
 8010564:	e7a8      	b.n	80104b8 <_svfiprintf_r+0xd8>
 8010566:	2300      	movs	r3, #0
 8010568:	3401      	adds	r4, #1
 801056a:	9305      	str	r3, [sp, #20]
 801056c:	4619      	mov	r1, r3
 801056e:	f04f 0c0a 	mov.w	ip, #10
 8010572:	4620      	mov	r0, r4
 8010574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010578:	3a30      	subs	r2, #48	@ 0x30
 801057a:	2a09      	cmp	r2, #9
 801057c:	d903      	bls.n	8010586 <_svfiprintf_r+0x1a6>
 801057e:	2b00      	cmp	r3, #0
 8010580:	d0c6      	beq.n	8010510 <_svfiprintf_r+0x130>
 8010582:	9105      	str	r1, [sp, #20]
 8010584:	e7c4      	b.n	8010510 <_svfiprintf_r+0x130>
 8010586:	fb0c 2101 	mla	r1, ip, r1, r2
 801058a:	4604      	mov	r4, r0
 801058c:	2301      	movs	r3, #1
 801058e:	e7f0      	b.n	8010572 <_svfiprintf_r+0x192>
 8010590:	ab03      	add	r3, sp, #12
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	462a      	mov	r2, r5
 8010596:	4b0e      	ldr	r3, [pc, #56]	@ (80105d0 <_svfiprintf_r+0x1f0>)
 8010598:	a904      	add	r1, sp, #16
 801059a:	4638      	mov	r0, r7
 801059c:	f7fd fd80 	bl	800e0a0 <_printf_float>
 80105a0:	1c42      	adds	r2, r0, #1
 80105a2:	4606      	mov	r6, r0
 80105a4:	d1d6      	bne.n	8010554 <_svfiprintf_r+0x174>
 80105a6:	89ab      	ldrh	r3, [r5, #12]
 80105a8:	065b      	lsls	r3, r3, #25
 80105aa:	f53f af2d 	bmi.w	8010408 <_svfiprintf_r+0x28>
 80105ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105b0:	e72c      	b.n	801040c <_svfiprintf_r+0x2c>
 80105b2:	ab03      	add	r3, sp, #12
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	462a      	mov	r2, r5
 80105b8:	4b05      	ldr	r3, [pc, #20]	@ (80105d0 <_svfiprintf_r+0x1f0>)
 80105ba:	a904      	add	r1, sp, #16
 80105bc:	4638      	mov	r0, r7
 80105be:	f7fd fff7 	bl	800e5b0 <_printf_i>
 80105c2:	e7ed      	b.n	80105a0 <_svfiprintf_r+0x1c0>
 80105c4:	0801297b 	.word	0x0801297b
 80105c8:	08012985 	.word	0x08012985
 80105cc:	0800e0a1 	.word	0x0800e0a1
 80105d0:	08010329 	.word	0x08010329
 80105d4:	08012981 	.word	0x08012981

080105d8 <__sflush_r>:
 80105d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e0:	0716      	lsls	r6, r2, #28
 80105e2:	4605      	mov	r5, r0
 80105e4:	460c      	mov	r4, r1
 80105e6:	d454      	bmi.n	8010692 <__sflush_r+0xba>
 80105e8:	684b      	ldr	r3, [r1, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	dc02      	bgt.n	80105f4 <__sflush_r+0x1c>
 80105ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	dd48      	ble.n	8010686 <__sflush_r+0xae>
 80105f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105f6:	2e00      	cmp	r6, #0
 80105f8:	d045      	beq.n	8010686 <__sflush_r+0xae>
 80105fa:	2300      	movs	r3, #0
 80105fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010600:	682f      	ldr	r7, [r5, #0]
 8010602:	6a21      	ldr	r1, [r4, #32]
 8010604:	602b      	str	r3, [r5, #0]
 8010606:	d030      	beq.n	801066a <__sflush_r+0x92>
 8010608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	0759      	lsls	r1, r3, #29
 801060e:	d505      	bpl.n	801061c <__sflush_r+0x44>
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	1ad2      	subs	r2, r2, r3
 8010614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010616:	b10b      	cbz	r3, 801061c <__sflush_r+0x44>
 8010618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801061a:	1ad2      	subs	r2, r2, r3
 801061c:	2300      	movs	r3, #0
 801061e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010620:	6a21      	ldr	r1, [r4, #32]
 8010622:	4628      	mov	r0, r5
 8010624:	47b0      	blx	r6
 8010626:	1c43      	adds	r3, r0, #1
 8010628:	89a3      	ldrh	r3, [r4, #12]
 801062a:	d106      	bne.n	801063a <__sflush_r+0x62>
 801062c:	6829      	ldr	r1, [r5, #0]
 801062e:	291d      	cmp	r1, #29
 8010630:	d82b      	bhi.n	801068a <__sflush_r+0xb2>
 8010632:	4a2a      	ldr	r2, [pc, #168]	@ (80106dc <__sflush_r+0x104>)
 8010634:	40ca      	lsrs	r2, r1
 8010636:	07d6      	lsls	r6, r2, #31
 8010638:	d527      	bpl.n	801068a <__sflush_r+0xb2>
 801063a:	2200      	movs	r2, #0
 801063c:	6062      	str	r2, [r4, #4]
 801063e:	04d9      	lsls	r1, r3, #19
 8010640:	6922      	ldr	r2, [r4, #16]
 8010642:	6022      	str	r2, [r4, #0]
 8010644:	d504      	bpl.n	8010650 <__sflush_r+0x78>
 8010646:	1c42      	adds	r2, r0, #1
 8010648:	d101      	bne.n	801064e <__sflush_r+0x76>
 801064a:	682b      	ldr	r3, [r5, #0]
 801064c:	b903      	cbnz	r3, 8010650 <__sflush_r+0x78>
 801064e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010652:	602f      	str	r7, [r5, #0]
 8010654:	b1b9      	cbz	r1, 8010686 <__sflush_r+0xae>
 8010656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801065a:	4299      	cmp	r1, r3
 801065c:	d002      	beq.n	8010664 <__sflush_r+0x8c>
 801065e:	4628      	mov	r0, r5
 8010660:	f7ff f9e8 	bl	800fa34 <_free_r>
 8010664:	2300      	movs	r3, #0
 8010666:	6363      	str	r3, [r4, #52]	@ 0x34
 8010668:	e00d      	b.n	8010686 <__sflush_r+0xae>
 801066a:	2301      	movs	r3, #1
 801066c:	4628      	mov	r0, r5
 801066e:	47b0      	blx	r6
 8010670:	4602      	mov	r2, r0
 8010672:	1c50      	adds	r0, r2, #1
 8010674:	d1c9      	bne.n	801060a <__sflush_r+0x32>
 8010676:	682b      	ldr	r3, [r5, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d0c6      	beq.n	801060a <__sflush_r+0x32>
 801067c:	2b1d      	cmp	r3, #29
 801067e:	d001      	beq.n	8010684 <__sflush_r+0xac>
 8010680:	2b16      	cmp	r3, #22
 8010682:	d11e      	bne.n	80106c2 <__sflush_r+0xea>
 8010684:	602f      	str	r7, [r5, #0]
 8010686:	2000      	movs	r0, #0
 8010688:	e022      	b.n	80106d0 <__sflush_r+0xf8>
 801068a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801068e:	b21b      	sxth	r3, r3
 8010690:	e01b      	b.n	80106ca <__sflush_r+0xf2>
 8010692:	690f      	ldr	r7, [r1, #16]
 8010694:	2f00      	cmp	r7, #0
 8010696:	d0f6      	beq.n	8010686 <__sflush_r+0xae>
 8010698:	0793      	lsls	r3, r2, #30
 801069a:	680e      	ldr	r6, [r1, #0]
 801069c:	bf08      	it	eq
 801069e:	694b      	ldreq	r3, [r1, #20]
 80106a0:	600f      	str	r7, [r1, #0]
 80106a2:	bf18      	it	ne
 80106a4:	2300      	movne	r3, #0
 80106a6:	eba6 0807 	sub.w	r8, r6, r7
 80106aa:	608b      	str	r3, [r1, #8]
 80106ac:	f1b8 0f00 	cmp.w	r8, #0
 80106b0:	dde9      	ble.n	8010686 <__sflush_r+0xae>
 80106b2:	6a21      	ldr	r1, [r4, #32]
 80106b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106b6:	4643      	mov	r3, r8
 80106b8:	463a      	mov	r2, r7
 80106ba:	4628      	mov	r0, r5
 80106bc:	47b0      	blx	r6
 80106be:	2800      	cmp	r0, #0
 80106c0:	dc08      	bgt.n	80106d4 <__sflush_r+0xfc>
 80106c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106ca:	81a3      	strh	r3, [r4, #12]
 80106cc:	f04f 30ff 	mov.w	r0, #4294967295
 80106d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d4:	4407      	add	r7, r0
 80106d6:	eba8 0800 	sub.w	r8, r8, r0
 80106da:	e7e7      	b.n	80106ac <__sflush_r+0xd4>
 80106dc:	20400001 	.word	0x20400001

080106e0 <_fflush_r>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	690b      	ldr	r3, [r1, #16]
 80106e4:	4605      	mov	r5, r0
 80106e6:	460c      	mov	r4, r1
 80106e8:	b913      	cbnz	r3, 80106f0 <_fflush_r+0x10>
 80106ea:	2500      	movs	r5, #0
 80106ec:	4628      	mov	r0, r5
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	b118      	cbz	r0, 80106fa <_fflush_r+0x1a>
 80106f2:	6a03      	ldr	r3, [r0, #32]
 80106f4:	b90b      	cbnz	r3, 80106fa <_fflush_r+0x1a>
 80106f6:	f7fe f905 	bl	800e904 <__sinit>
 80106fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0f3      	beq.n	80106ea <_fflush_r+0xa>
 8010702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010704:	07d0      	lsls	r0, r2, #31
 8010706:	d404      	bmi.n	8010712 <_fflush_r+0x32>
 8010708:	0599      	lsls	r1, r3, #22
 801070a:	d402      	bmi.n	8010712 <_fflush_r+0x32>
 801070c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801070e:	f7fe fb9a 	bl	800ee46 <__retarget_lock_acquire_recursive>
 8010712:	4628      	mov	r0, r5
 8010714:	4621      	mov	r1, r4
 8010716:	f7ff ff5f 	bl	80105d8 <__sflush_r>
 801071a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801071c:	07da      	lsls	r2, r3, #31
 801071e:	4605      	mov	r5, r0
 8010720:	d4e4      	bmi.n	80106ec <_fflush_r+0xc>
 8010722:	89a3      	ldrh	r3, [r4, #12]
 8010724:	059b      	lsls	r3, r3, #22
 8010726:	d4e1      	bmi.n	80106ec <_fflush_r+0xc>
 8010728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801072a:	f7fe fb8d 	bl	800ee48 <__retarget_lock_release_recursive>
 801072e:	e7dd      	b.n	80106ec <_fflush_r+0xc>

08010730 <__swhatbuf_r>:
 8010730:	b570      	push	{r4, r5, r6, lr}
 8010732:	460c      	mov	r4, r1
 8010734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010738:	2900      	cmp	r1, #0
 801073a:	b096      	sub	sp, #88	@ 0x58
 801073c:	4615      	mov	r5, r2
 801073e:	461e      	mov	r6, r3
 8010740:	da0d      	bge.n	801075e <__swhatbuf_r+0x2e>
 8010742:	89a3      	ldrh	r3, [r4, #12]
 8010744:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010748:	f04f 0100 	mov.w	r1, #0
 801074c:	bf14      	ite	ne
 801074e:	2340      	movne	r3, #64	@ 0x40
 8010750:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010754:	2000      	movs	r0, #0
 8010756:	6031      	str	r1, [r6, #0]
 8010758:	602b      	str	r3, [r5, #0]
 801075a:	b016      	add	sp, #88	@ 0x58
 801075c:	bd70      	pop	{r4, r5, r6, pc}
 801075e:	466a      	mov	r2, sp
 8010760:	f000 f848 	bl	80107f4 <_fstat_r>
 8010764:	2800      	cmp	r0, #0
 8010766:	dbec      	blt.n	8010742 <__swhatbuf_r+0x12>
 8010768:	9901      	ldr	r1, [sp, #4]
 801076a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801076e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010772:	4259      	negs	r1, r3
 8010774:	4159      	adcs	r1, r3
 8010776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801077a:	e7eb      	b.n	8010754 <__swhatbuf_r+0x24>

0801077c <__smakebuf_r>:
 801077c:	898b      	ldrh	r3, [r1, #12]
 801077e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010780:	079d      	lsls	r5, r3, #30
 8010782:	4606      	mov	r6, r0
 8010784:	460c      	mov	r4, r1
 8010786:	d507      	bpl.n	8010798 <__smakebuf_r+0x1c>
 8010788:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	2301      	movs	r3, #1
 8010792:	6163      	str	r3, [r4, #20]
 8010794:	b003      	add	sp, #12
 8010796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010798:	ab01      	add	r3, sp, #4
 801079a:	466a      	mov	r2, sp
 801079c:	f7ff ffc8 	bl	8010730 <__swhatbuf_r>
 80107a0:	9f00      	ldr	r7, [sp, #0]
 80107a2:	4605      	mov	r5, r0
 80107a4:	4639      	mov	r1, r7
 80107a6:	4630      	mov	r0, r6
 80107a8:	f7ff f9b8 	bl	800fb1c <_malloc_r>
 80107ac:	b948      	cbnz	r0, 80107c2 <__smakebuf_r+0x46>
 80107ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b2:	059a      	lsls	r2, r3, #22
 80107b4:	d4ee      	bmi.n	8010794 <__smakebuf_r+0x18>
 80107b6:	f023 0303 	bic.w	r3, r3, #3
 80107ba:	f043 0302 	orr.w	r3, r3, #2
 80107be:	81a3      	strh	r3, [r4, #12]
 80107c0:	e7e2      	b.n	8010788 <__smakebuf_r+0xc>
 80107c2:	89a3      	ldrh	r3, [r4, #12]
 80107c4:	6020      	str	r0, [r4, #0]
 80107c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107ca:	81a3      	strh	r3, [r4, #12]
 80107cc:	9b01      	ldr	r3, [sp, #4]
 80107ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80107d2:	b15b      	cbz	r3, 80107ec <__smakebuf_r+0x70>
 80107d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107d8:	4630      	mov	r0, r6
 80107da:	f000 f81d 	bl	8010818 <_isatty_r>
 80107de:	b128      	cbz	r0, 80107ec <__smakebuf_r+0x70>
 80107e0:	89a3      	ldrh	r3, [r4, #12]
 80107e2:	f023 0303 	bic.w	r3, r3, #3
 80107e6:	f043 0301 	orr.w	r3, r3, #1
 80107ea:	81a3      	strh	r3, [r4, #12]
 80107ec:	89a3      	ldrh	r3, [r4, #12]
 80107ee:	431d      	orrs	r5, r3
 80107f0:	81a5      	strh	r5, [r4, #12]
 80107f2:	e7cf      	b.n	8010794 <__smakebuf_r+0x18>

080107f4 <_fstat_r>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	4d07      	ldr	r5, [pc, #28]	@ (8010814 <_fstat_r+0x20>)
 80107f8:	2300      	movs	r3, #0
 80107fa:	4604      	mov	r4, r0
 80107fc:	4608      	mov	r0, r1
 80107fe:	4611      	mov	r1, r2
 8010800:	602b      	str	r3, [r5, #0]
 8010802:	f7f2 fb34 	bl	8002e6e <_fstat>
 8010806:	1c43      	adds	r3, r0, #1
 8010808:	d102      	bne.n	8010810 <_fstat_r+0x1c>
 801080a:	682b      	ldr	r3, [r5, #0]
 801080c:	b103      	cbz	r3, 8010810 <_fstat_r+0x1c>
 801080e:	6023      	str	r3, [r4, #0]
 8010810:	bd38      	pop	{r3, r4, r5, pc}
 8010812:	bf00      	nop
 8010814:	2000e35c 	.word	0x2000e35c

08010818 <_isatty_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4d06      	ldr	r5, [pc, #24]	@ (8010834 <_isatty_r+0x1c>)
 801081c:	2300      	movs	r3, #0
 801081e:	4604      	mov	r4, r0
 8010820:	4608      	mov	r0, r1
 8010822:	602b      	str	r3, [r5, #0]
 8010824:	f7f2 fb33 	bl	8002e8e <_isatty>
 8010828:	1c43      	adds	r3, r0, #1
 801082a:	d102      	bne.n	8010832 <_isatty_r+0x1a>
 801082c:	682b      	ldr	r3, [r5, #0]
 801082e:	b103      	cbz	r3, 8010832 <_isatty_r+0x1a>
 8010830:	6023      	str	r3, [r4, #0]
 8010832:	bd38      	pop	{r3, r4, r5, pc}
 8010834:	2000e35c 	.word	0x2000e35c

08010838 <_sbrk_r>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	4d06      	ldr	r5, [pc, #24]	@ (8010854 <_sbrk_r+0x1c>)
 801083c:	2300      	movs	r3, #0
 801083e:	4604      	mov	r4, r0
 8010840:	4608      	mov	r0, r1
 8010842:	602b      	str	r3, [r5, #0]
 8010844:	f7f2 fb3c 	bl	8002ec0 <_sbrk>
 8010848:	1c43      	adds	r3, r0, #1
 801084a:	d102      	bne.n	8010852 <_sbrk_r+0x1a>
 801084c:	682b      	ldr	r3, [r5, #0]
 801084e:	b103      	cbz	r3, 8010852 <_sbrk_r+0x1a>
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	2000e35c 	.word	0x2000e35c

08010858 <__assert_func>:
 8010858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801085a:	4614      	mov	r4, r2
 801085c:	461a      	mov	r2, r3
 801085e:	4b09      	ldr	r3, [pc, #36]	@ (8010884 <__assert_func+0x2c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4605      	mov	r5, r0
 8010864:	68d8      	ldr	r0, [r3, #12]
 8010866:	b14c      	cbz	r4, 801087c <__assert_func+0x24>
 8010868:	4b07      	ldr	r3, [pc, #28]	@ (8010888 <__assert_func+0x30>)
 801086a:	9100      	str	r1, [sp, #0]
 801086c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010870:	4906      	ldr	r1, [pc, #24]	@ (801088c <__assert_func+0x34>)
 8010872:	462b      	mov	r3, r5
 8010874:	f000 f870 	bl	8010958 <fiprintf>
 8010878:	f000 f880 	bl	801097c <abort>
 801087c:	4b04      	ldr	r3, [pc, #16]	@ (8010890 <__assert_func+0x38>)
 801087e:	461c      	mov	r4, r3
 8010880:	e7f3      	b.n	801086a <__assert_func+0x12>
 8010882:	bf00      	nop
 8010884:	200041cc 	.word	0x200041cc
 8010888:	08012996 	.word	0x08012996
 801088c:	080129a3 	.word	0x080129a3
 8010890:	080129d1 	.word	0x080129d1

08010894 <_calloc_r>:
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	fba1 5402 	umull	r5, r4, r1, r2
 801089a:	b934      	cbnz	r4, 80108aa <_calloc_r+0x16>
 801089c:	4629      	mov	r1, r5
 801089e:	f7ff f93d 	bl	800fb1c <_malloc_r>
 80108a2:	4606      	mov	r6, r0
 80108a4:	b928      	cbnz	r0, 80108b2 <_calloc_r+0x1e>
 80108a6:	4630      	mov	r0, r6
 80108a8:	bd70      	pop	{r4, r5, r6, pc}
 80108aa:	220c      	movs	r2, #12
 80108ac:	6002      	str	r2, [r0, #0]
 80108ae:	2600      	movs	r6, #0
 80108b0:	e7f9      	b.n	80108a6 <_calloc_r+0x12>
 80108b2:	462a      	mov	r2, r5
 80108b4:	4621      	mov	r1, r4
 80108b6:	f7fe fa3b 	bl	800ed30 <memset>
 80108ba:	e7f4      	b.n	80108a6 <_calloc_r+0x12>

080108bc <__ascii_mbtowc>:
 80108bc:	b082      	sub	sp, #8
 80108be:	b901      	cbnz	r1, 80108c2 <__ascii_mbtowc+0x6>
 80108c0:	a901      	add	r1, sp, #4
 80108c2:	b142      	cbz	r2, 80108d6 <__ascii_mbtowc+0x1a>
 80108c4:	b14b      	cbz	r3, 80108da <__ascii_mbtowc+0x1e>
 80108c6:	7813      	ldrb	r3, [r2, #0]
 80108c8:	600b      	str	r3, [r1, #0]
 80108ca:	7812      	ldrb	r2, [r2, #0]
 80108cc:	1e10      	subs	r0, r2, #0
 80108ce:	bf18      	it	ne
 80108d0:	2001      	movne	r0, #1
 80108d2:	b002      	add	sp, #8
 80108d4:	4770      	bx	lr
 80108d6:	4610      	mov	r0, r2
 80108d8:	e7fb      	b.n	80108d2 <__ascii_mbtowc+0x16>
 80108da:	f06f 0001 	mvn.w	r0, #1
 80108de:	e7f8      	b.n	80108d2 <__ascii_mbtowc+0x16>

080108e0 <_realloc_r>:
 80108e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e4:	4607      	mov	r7, r0
 80108e6:	4614      	mov	r4, r2
 80108e8:	460d      	mov	r5, r1
 80108ea:	b921      	cbnz	r1, 80108f6 <_realloc_r+0x16>
 80108ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108f0:	4611      	mov	r1, r2
 80108f2:	f7ff b913 	b.w	800fb1c <_malloc_r>
 80108f6:	b92a      	cbnz	r2, 8010904 <_realloc_r+0x24>
 80108f8:	f7ff f89c 	bl	800fa34 <_free_r>
 80108fc:	4625      	mov	r5, r4
 80108fe:	4628      	mov	r0, r5
 8010900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010904:	f000 f841 	bl	801098a <_malloc_usable_size_r>
 8010908:	4284      	cmp	r4, r0
 801090a:	4606      	mov	r6, r0
 801090c:	d802      	bhi.n	8010914 <_realloc_r+0x34>
 801090e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010912:	d8f4      	bhi.n	80108fe <_realloc_r+0x1e>
 8010914:	4621      	mov	r1, r4
 8010916:	4638      	mov	r0, r7
 8010918:	f7ff f900 	bl	800fb1c <_malloc_r>
 801091c:	4680      	mov	r8, r0
 801091e:	b908      	cbnz	r0, 8010924 <_realloc_r+0x44>
 8010920:	4645      	mov	r5, r8
 8010922:	e7ec      	b.n	80108fe <_realloc_r+0x1e>
 8010924:	42b4      	cmp	r4, r6
 8010926:	4622      	mov	r2, r4
 8010928:	4629      	mov	r1, r5
 801092a:	bf28      	it	cs
 801092c:	4632      	movcs	r2, r6
 801092e:	f7fe fa8c 	bl	800ee4a <memcpy>
 8010932:	4629      	mov	r1, r5
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff f87d 	bl	800fa34 <_free_r>
 801093a:	e7f1      	b.n	8010920 <_realloc_r+0x40>

0801093c <__ascii_wctomb>:
 801093c:	4603      	mov	r3, r0
 801093e:	4608      	mov	r0, r1
 8010940:	b141      	cbz	r1, 8010954 <__ascii_wctomb+0x18>
 8010942:	2aff      	cmp	r2, #255	@ 0xff
 8010944:	d904      	bls.n	8010950 <__ascii_wctomb+0x14>
 8010946:	228a      	movs	r2, #138	@ 0x8a
 8010948:	601a      	str	r2, [r3, #0]
 801094a:	f04f 30ff 	mov.w	r0, #4294967295
 801094e:	4770      	bx	lr
 8010950:	700a      	strb	r2, [r1, #0]
 8010952:	2001      	movs	r0, #1
 8010954:	4770      	bx	lr
	...

08010958 <fiprintf>:
 8010958:	b40e      	push	{r1, r2, r3}
 801095a:	b503      	push	{r0, r1, lr}
 801095c:	4601      	mov	r1, r0
 801095e:	ab03      	add	r3, sp, #12
 8010960:	4805      	ldr	r0, [pc, #20]	@ (8010978 <fiprintf+0x20>)
 8010962:	f853 2b04 	ldr.w	r2, [r3], #4
 8010966:	6800      	ldr	r0, [r0, #0]
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	f000 f83f 	bl	80109ec <_vfiprintf_r>
 801096e:	b002      	add	sp, #8
 8010970:	f85d eb04 	ldr.w	lr, [sp], #4
 8010974:	b003      	add	sp, #12
 8010976:	4770      	bx	lr
 8010978:	200041cc 	.word	0x200041cc

0801097c <abort>:
 801097c:	b508      	push	{r3, lr}
 801097e:	2006      	movs	r0, #6
 8010980:	f000 f974 	bl	8010c6c <raise>
 8010984:	2001      	movs	r0, #1
 8010986:	f7f2 fa22 	bl	8002dce <_exit>

0801098a <_malloc_usable_size_r>:
 801098a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801098e:	1f18      	subs	r0, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	bfbc      	itt	lt
 8010994:	580b      	ldrlt	r3, [r1, r0]
 8010996:	18c0      	addlt	r0, r0, r3
 8010998:	4770      	bx	lr

0801099a <__sfputc_r>:
 801099a:	6893      	ldr	r3, [r2, #8]
 801099c:	3b01      	subs	r3, #1
 801099e:	2b00      	cmp	r3, #0
 80109a0:	b410      	push	{r4}
 80109a2:	6093      	str	r3, [r2, #8]
 80109a4:	da08      	bge.n	80109b8 <__sfputc_r+0x1e>
 80109a6:	6994      	ldr	r4, [r2, #24]
 80109a8:	42a3      	cmp	r3, r4
 80109aa:	db01      	blt.n	80109b0 <__sfputc_r+0x16>
 80109ac:	290a      	cmp	r1, #10
 80109ae:	d103      	bne.n	80109b8 <__sfputc_r+0x1e>
 80109b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109b4:	f7fe b90e 	b.w	800ebd4 <__swbuf_r>
 80109b8:	6813      	ldr	r3, [r2, #0]
 80109ba:	1c58      	adds	r0, r3, #1
 80109bc:	6010      	str	r0, [r2, #0]
 80109be:	7019      	strb	r1, [r3, #0]
 80109c0:	4608      	mov	r0, r1
 80109c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <__sfputs_r>:
 80109c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ca:	4606      	mov	r6, r0
 80109cc:	460f      	mov	r7, r1
 80109ce:	4614      	mov	r4, r2
 80109d0:	18d5      	adds	r5, r2, r3
 80109d2:	42ac      	cmp	r4, r5
 80109d4:	d101      	bne.n	80109da <__sfputs_r+0x12>
 80109d6:	2000      	movs	r0, #0
 80109d8:	e007      	b.n	80109ea <__sfputs_r+0x22>
 80109da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109de:	463a      	mov	r2, r7
 80109e0:	4630      	mov	r0, r6
 80109e2:	f7ff ffda 	bl	801099a <__sfputc_r>
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	d1f3      	bne.n	80109d2 <__sfputs_r+0xa>
 80109ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109ec <_vfiprintf_r>:
 80109ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f0:	460d      	mov	r5, r1
 80109f2:	b09d      	sub	sp, #116	@ 0x74
 80109f4:	4614      	mov	r4, r2
 80109f6:	4698      	mov	r8, r3
 80109f8:	4606      	mov	r6, r0
 80109fa:	b118      	cbz	r0, 8010a04 <_vfiprintf_r+0x18>
 80109fc:	6a03      	ldr	r3, [r0, #32]
 80109fe:	b90b      	cbnz	r3, 8010a04 <_vfiprintf_r+0x18>
 8010a00:	f7fd ff80 	bl	800e904 <__sinit>
 8010a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a06:	07d9      	lsls	r1, r3, #31
 8010a08:	d405      	bmi.n	8010a16 <_vfiprintf_r+0x2a>
 8010a0a:	89ab      	ldrh	r3, [r5, #12]
 8010a0c:	059a      	lsls	r2, r3, #22
 8010a0e:	d402      	bmi.n	8010a16 <_vfiprintf_r+0x2a>
 8010a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a12:	f7fe fa18 	bl	800ee46 <__retarget_lock_acquire_recursive>
 8010a16:	89ab      	ldrh	r3, [r5, #12]
 8010a18:	071b      	lsls	r3, r3, #28
 8010a1a:	d501      	bpl.n	8010a20 <_vfiprintf_r+0x34>
 8010a1c:	692b      	ldr	r3, [r5, #16]
 8010a1e:	b99b      	cbnz	r3, 8010a48 <_vfiprintf_r+0x5c>
 8010a20:	4629      	mov	r1, r5
 8010a22:	4630      	mov	r0, r6
 8010a24:	f7fe f914 	bl	800ec50 <__swsetup_r>
 8010a28:	b170      	cbz	r0, 8010a48 <_vfiprintf_r+0x5c>
 8010a2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a2c:	07dc      	lsls	r4, r3, #31
 8010a2e:	d504      	bpl.n	8010a3a <_vfiprintf_r+0x4e>
 8010a30:	f04f 30ff 	mov.w	r0, #4294967295
 8010a34:	b01d      	add	sp, #116	@ 0x74
 8010a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3a:	89ab      	ldrh	r3, [r5, #12]
 8010a3c:	0598      	lsls	r0, r3, #22
 8010a3e:	d4f7      	bmi.n	8010a30 <_vfiprintf_r+0x44>
 8010a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a42:	f7fe fa01 	bl	800ee48 <__retarget_lock_release_recursive>
 8010a46:	e7f3      	b.n	8010a30 <_vfiprintf_r+0x44>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a4c:	2320      	movs	r3, #32
 8010a4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a56:	2330      	movs	r3, #48	@ 0x30
 8010a58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c08 <_vfiprintf_r+0x21c>
 8010a5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a60:	f04f 0901 	mov.w	r9, #1
 8010a64:	4623      	mov	r3, r4
 8010a66:	469a      	mov	sl, r3
 8010a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a6c:	b10a      	cbz	r2, 8010a72 <_vfiprintf_r+0x86>
 8010a6e:	2a25      	cmp	r2, #37	@ 0x25
 8010a70:	d1f9      	bne.n	8010a66 <_vfiprintf_r+0x7a>
 8010a72:	ebba 0b04 	subs.w	fp, sl, r4
 8010a76:	d00b      	beq.n	8010a90 <_vfiprintf_r+0xa4>
 8010a78:	465b      	mov	r3, fp
 8010a7a:	4622      	mov	r2, r4
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f7ff ffa2 	bl	80109c8 <__sfputs_r>
 8010a84:	3001      	adds	r0, #1
 8010a86:	f000 80a7 	beq.w	8010bd8 <_vfiprintf_r+0x1ec>
 8010a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a8c:	445a      	add	r2, fp
 8010a8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a90:	f89a 3000 	ldrb.w	r3, [sl]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f000 809f 	beq.w	8010bd8 <_vfiprintf_r+0x1ec>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010aa4:	f10a 0a01 	add.w	sl, sl, #1
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	9307      	str	r3, [sp, #28]
 8010aac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ab0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ab2:	4654      	mov	r4, sl
 8010ab4:	2205      	movs	r2, #5
 8010ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aba:	4853      	ldr	r0, [pc, #332]	@ (8010c08 <_vfiprintf_r+0x21c>)
 8010abc:	f7ef fbd0 	bl	8000260 <memchr>
 8010ac0:	9a04      	ldr	r2, [sp, #16]
 8010ac2:	b9d8      	cbnz	r0, 8010afc <_vfiprintf_r+0x110>
 8010ac4:	06d1      	lsls	r1, r2, #27
 8010ac6:	bf44      	itt	mi
 8010ac8:	2320      	movmi	r3, #32
 8010aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ace:	0713      	lsls	r3, r2, #28
 8010ad0:	bf44      	itt	mi
 8010ad2:	232b      	movmi	r3, #43	@ 0x2b
 8010ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8010adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ade:	d015      	beq.n	8010b0c <_vfiprintf_r+0x120>
 8010ae0:	9a07      	ldr	r2, [sp, #28]
 8010ae2:	4654      	mov	r4, sl
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	f04f 0c0a 	mov.w	ip, #10
 8010aea:	4621      	mov	r1, r4
 8010aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010af0:	3b30      	subs	r3, #48	@ 0x30
 8010af2:	2b09      	cmp	r3, #9
 8010af4:	d94b      	bls.n	8010b8e <_vfiprintf_r+0x1a2>
 8010af6:	b1b0      	cbz	r0, 8010b26 <_vfiprintf_r+0x13a>
 8010af8:	9207      	str	r2, [sp, #28]
 8010afa:	e014      	b.n	8010b26 <_vfiprintf_r+0x13a>
 8010afc:	eba0 0308 	sub.w	r3, r0, r8
 8010b00:	fa09 f303 	lsl.w	r3, r9, r3
 8010b04:	4313      	orrs	r3, r2
 8010b06:	9304      	str	r3, [sp, #16]
 8010b08:	46a2      	mov	sl, r4
 8010b0a:	e7d2      	b.n	8010ab2 <_vfiprintf_r+0xc6>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	1d19      	adds	r1, r3, #4
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	9103      	str	r1, [sp, #12]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bfbb      	ittet	lt
 8010b18:	425b      	neglt	r3, r3
 8010b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8010b1e:	9307      	strge	r3, [sp, #28]
 8010b20:	9307      	strlt	r3, [sp, #28]
 8010b22:	bfb8      	it	lt
 8010b24:	9204      	strlt	r2, [sp, #16]
 8010b26:	7823      	ldrb	r3, [r4, #0]
 8010b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b2a:	d10a      	bne.n	8010b42 <_vfiprintf_r+0x156>
 8010b2c:	7863      	ldrb	r3, [r4, #1]
 8010b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b30:	d132      	bne.n	8010b98 <_vfiprintf_r+0x1ac>
 8010b32:	9b03      	ldr	r3, [sp, #12]
 8010b34:	1d1a      	adds	r2, r3, #4
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	9203      	str	r2, [sp, #12]
 8010b3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b3e:	3402      	adds	r4, #2
 8010b40:	9305      	str	r3, [sp, #20]
 8010b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c18 <_vfiprintf_r+0x22c>
 8010b46:	7821      	ldrb	r1, [r4, #0]
 8010b48:	2203      	movs	r2, #3
 8010b4a:	4650      	mov	r0, sl
 8010b4c:	f7ef fb88 	bl	8000260 <memchr>
 8010b50:	b138      	cbz	r0, 8010b62 <_vfiprintf_r+0x176>
 8010b52:	9b04      	ldr	r3, [sp, #16]
 8010b54:	eba0 000a 	sub.w	r0, r0, sl
 8010b58:	2240      	movs	r2, #64	@ 0x40
 8010b5a:	4082      	lsls	r2, r0
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	3401      	adds	r4, #1
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b66:	4829      	ldr	r0, [pc, #164]	@ (8010c0c <_vfiprintf_r+0x220>)
 8010b68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b6c:	2206      	movs	r2, #6
 8010b6e:	f7ef fb77 	bl	8000260 <memchr>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	d03f      	beq.n	8010bf6 <_vfiprintf_r+0x20a>
 8010b76:	4b26      	ldr	r3, [pc, #152]	@ (8010c10 <_vfiprintf_r+0x224>)
 8010b78:	bb1b      	cbnz	r3, 8010bc2 <_vfiprintf_r+0x1d6>
 8010b7a:	9b03      	ldr	r3, [sp, #12]
 8010b7c:	3307      	adds	r3, #7
 8010b7e:	f023 0307 	bic.w	r3, r3, #7
 8010b82:	3308      	adds	r3, #8
 8010b84:	9303      	str	r3, [sp, #12]
 8010b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b88:	443b      	add	r3, r7
 8010b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b8c:	e76a      	b.n	8010a64 <_vfiprintf_r+0x78>
 8010b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b92:	460c      	mov	r4, r1
 8010b94:	2001      	movs	r0, #1
 8010b96:	e7a8      	b.n	8010aea <_vfiprintf_r+0xfe>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	3401      	adds	r4, #1
 8010b9c:	9305      	str	r3, [sp, #20]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	f04f 0c0a 	mov.w	ip, #10
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010baa:	3a30      	subs	r2, #48	@ 0x30
 8010bac:	2a09      	cmp	r2, #9
 8010bae:	d903      	bls.n	8010bb8 <_vfiprintf_r+0x1cc>
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d0c6      	beq.n	8010b42 <_vfiprintf_r+0x156>
 8010bb4:	9105      	str	r1, [sp, #20]
 8010bb6:	e7c4      	b.n	8010b42 <_vfiprintf_r+0x156>
 8010bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e7f0      	b.n	8010ba4 <_vfiprintf_r+0x1b8>
 8010bc2:	ab03      	add	r3, sp, #12
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	462a      	mov	r2, r5
 8010bc8:	4b12      	ldr	r3, [pc, #72]	@ (8010c14 <_vfiprintf_r+0x228>)
 8010bca:	a904      	add	r1, sp, #16
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f7fd fa67 	bl	800e0a0 <_printf_float>
 8010bd2:	4607      	mov	r7, r0
 8010bd4:	1c78      	adds	r0, r7, #1
 8010bd6:	d1d6      	bne.n	8010b86 <_vfiprintf_r+0x19a>
 8010bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bda:	07d9      	lsls	r1, r3, #31
 8010bdc:	d405      	bmi.n	8010bea <_vfiprintf_r+0x1fe>
 8010bde:	89ab      	ldrh	r3, [r5, #12]
 8010be0:	059a      	lsls	r2, r3, #22
 8010be2:	d402      	bmi.n	8010bea <_vfiprintf_r+0x1fe>
 8010be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010be6:	f7fe f92f 	bl	800ee48 <__retarget_lock_release_recursive>
 8010bea:	89ab      	ldrh	r3, [r5, #12]
 8010bec:	065b      	lsls	r3, r3, #25
 8010bee:	f53f af1f 	bmi.w	8010a30 <_vfiprintf_r+0x44>
 8010bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bf4:	e71e      	b.n	8010a34 <_vfiprintf_r+0x48>
 8010bf6:	ab03      	add	r3, sp, #12
 8010bf8:	9300      	str	r3, [sp, #0]
 8010bfa:	462a      	mov	r2, r5
 8010bfc:	4b05      	ldr	r3, [pc, #20]	@ (8010c14 <_vfiprintf_r+0x228>)
 8010bfe:	a904      	add	r1, sp, #16
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7fd fcd5 	bl	800e5b0 <_printf_i>
 8010c06:	e7e4      	b.n	8010bd2 <_vfiprintf_r+0x1e6>
 8010c08:	0801297b 	.word	0x0801297b
 8010c0c:	08012985 	.word	0x08012985
 8010c10:	0800e0a1 	.word	0x0800e0a1
 8010c14:	080109c9 	.word	0x080109c9
 8010c18:	08012981 	.word	0x08012981

08010c1c <_raise_r>:
 8010c1c:	291f      	cmp	r1, #31
 8010c1e:	b538      	push	{r3, r4, r5, lr}
 8010c20:	4605      	mov	r5, r0
 8010c22:	460c      	mov	r4, r1
 8010c24:	d904      	bls.n	8010c30 <_raise_r+0x14>
 8010c26:	2316      	movs	r3, #22
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c32:	b112      	cbz	r2, 8010c3a <_raise_r+0x1e>
 8010c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c38:	b94b      	cbnz	r3, 8010c4e <_raise_r+0x32>
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f000 f830 	bl	8010ca0 <_getpid_r>
 8010c40:	4622      	mov	r2, r4
 8010c42:	4601      	mov	r1, r0
 8010c44:	4628      	mov	r0, r5
 8010c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c4a:	f000 b817 	b.w	8010c7c <_kill_r>
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d00a      	beq.n	8010c68 <_raise_r+0x4c>
 8010c52:	1c59      	adds	r1, r3, #1
 8010c54:	d103      	bne.n	8010c5e <_raise_r+0x42>
 8010c56:	2316      	movs	r3, #22
 8010c58:	6003      	str	r3, [r0, #0]
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	e7e7      	b.n	8010c2e <_raise_r+0x12>
 8010c5e:	2100      	movs	r1, #0
 8010c60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c64:	4620      	mov	r0, r4
 8010c66:	4798      	blx	r3
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e7e0      	b.n	8010c2e <_raise_r+0x12>

08010c6c <raise>:
 8010c6c:	4b02      	ldr	r3, [pc, #8]	@ (8010c78 <raise+0xc>)
 8010c6e:	4601      	mov	r1, r0
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	f7ff bfd3 	b.w	8010c1c <_raise_r>
 8010c76:	bf00      	nop
 8010c78:	200041cc 	.word	0x200041cc

08010c7c <_kill_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	4d07      	ldr	r5, [pc, #28]	@ (8010c9c <_kill_r+0x20>)
 8010c80:	2300      	movs	r3, #0
 8010c82:	4604      	mov	r4, r0
 8010c84:	4608      	mov	r0, r1
 8010c86:	4611      	mov	r1, r2
 8010c88:	602b      	str	r3, [r5, #0]
 8010c8a:	f7f2 f890 	bl	8002dae <_kill>
 8010c8e:	1c43      	adds	r3, r0, #1
 8010c90:	d102      	bne.n	8010c98 <_kill_r+0x1c>
 8010c92:	682b      	ldr	r3, [r5, #0]
 8010c94:	b103      	cbz	r3, 8010c98 <_kill_r+0x1c>
 8010c96:	6023      	str	r3, [r4, #0]
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	bf00      	nop
 8010c9c:	2000e35c 	.word	0x2000e35c

08010ca0 <_getpid_r>:
 8010ca0:	f7f2 b87d 	b.w	8002d9e <_getpid>

08010ca4 <_init>:
 8010ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca6:	bf00      	nop
 8010ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010caa:	bc08      	pop	{r3}
 8010cac:	469e      	mov	lr, r3
 8010cae:	4770      	bx	lr

08010cb0 <_fini>:
 8010cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb2:	bf00      	nop
 8010cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb6:	bc08      	pop	{r3}
 8010cb8:	469e      	mov	lr, r3
 8010cba:	4770      	bx	lr
