
EXP_V120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c94  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08012e98  08012e98  00013e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149a8  080149a8  0001a3ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080149a8  080149a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149b0  080149b0  0001a3ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149b0  080149b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080149b4  080149b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000043ec  20000000  080149b8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c68  200043ec  08018da4  0001a3ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e054  08018da4  0001b054  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a3ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f11d  00000000  00000000  0001a41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b3c  00000000  00000000  00039537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0003f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001709  00000000  00000000  00040f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033466  00000000  00000000  00042639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f51  00000000  00000000  00075a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a03c  00000000  00000000  0009b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b5a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000939c  00000000  00000000  001b5a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001bee0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200043ec 	.word	0x200043ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08012e7c 	.word	0x08012e7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200043f0 	.word	0x200043f0
 800023c:	08012e7c 	.word	0x08012e7c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_frsub>:
 8000688:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800068c:	e002      	b.n	8000694 <__addsf3>
 800068e:	bf00      	nop

08000690 <__aeabi_fsub>:
 8000690:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000694 <__addsf3>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	bf1f      	itttt	ne
 8000698:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800069c:	ea92 0f03 	teqne	r2, r3
 80006a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006a8:	d06a      	beq.n	8000780 <__addsf3+0xec>
 80006aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006b2:	bfc1      	itttt	gt
 80006b4:	18d2      	addgt	r2, r2, r3
 80006b6:	4041      	eorgt	r1, r0
 80006b8:	4048      	eorgt	r0, r1
 80006ba:	4041      	eorgt	r1, r0
 80006bc:	bfb8      	it	lt
 80006be:	425b      	neglt	r3, r3
 80006c0:	2b19      	cmp	r3, #25
 80006c2:	bf88      	it	hi
 80006c4:	4770      	bxhi	lr
 80006c6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006da:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006e2:	bf18      	it	ne
 80006e4:	4249      	negne	r1, r1
 80006e6:	ea92 0f03 	teq	r2, r3
 80006ea:	d03f      	beq.n	800076c <__addsf3+0xd8>
 80006ec:	f1a2 0201 	sub.w	r2, r2, #1
 80006f0:	fa41 fc03 	asr.w	ip, r1, r3
 80006f4:	eb10 000c 	adds.w	r0, r0, ip
 80006f8:	f1c3 0320 	rsb	r3, r3, #32
 80006fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000700:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000704:	d502      	bpl.n	800070c <__addsf3+0x78>
 8000706:	4249      	negs	r1, r1
 8000708:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800070c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000710:	d313      	bcc.n	800073a <__addsf3+0xa6>
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000716:	d306      	bcc.n	8000726 <__addsf3+0x92>
 8000718:	0840      	lsrs	r0, r0, #1
 800071a:	ea4f 0131 	mov.w	r1, r1, rrx
 800071e:	f102 0201 	add.w	r2, r2, #1
 8000722:	2afe      	cmp	r2, #254	@ 0xfe
 8000724:	d251      	bcs.n	80007ca <__addsf3+0x136>
 8000726:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800072a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800072e:	bf08      	it	eq
 8000730:	f020 0001 	biceq.w	r0, r0, #1
 8000734:	ea40 0003 	orr.w	r0, r0, r3
 8000738:	4770      	bx	lr
 800073a:	0049      	lsls	r1, r1, #1
 800073c:	eb40 0000 	adc.w	r0, r0, r0
 8000740:	3a01      	subs	r2, #1
 8000742:	bf28      	it	cs
 8000744:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000748:	d2ed      	bcs.n	8000726 <__addsf3+0x92>
 800074a:	fab0 fc80 	clz	ip, r0
 800074e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000752:	ebb2 020c 	subs.w	r2, r2, ip
 8000756:	fa00 f00c 	lsl.w	r0, r0, ip
 800075a:	bfaa      	itet	ge
 800075c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000760:	4252      	neglt	r2, r2
 8000762:	4318      	orrge	r0, r3
 8000764:	bfbc      	itt	lt
 8000766:	40d0      	lsrlt	r0, r2
 8000768:	4318      	orrlt	r0, r3
 800076a:	4770      	bx	lr
 800076c:	f092 0f00 	teq	r2, #0
 8000770:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000774:	bf06      	itte	eq
 8000776:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800077a:	3201      	addeq	r2, #1
 800077c:	3b01      	subne	r3, #1
 800077e:	e7b5      	b.n	80006ec <__addsf3+0x58>
 8000780:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000784:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000788:	bf18      	it	ne
 800078a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078e:	d021      	beq.n	80007d4 <__addsf3+0x140>
 8000790:	ea92 0f03 	teq	r2, r3
 8000794:	d004      	beq.n	80007a0 <__addsf3+0x10c>
 8000796:	f092 0f00 	teq	r2, #0
 800079a:	bf08      	it	eq
 800079c:	4608      	moveq	r0, r1
 800079e:	4770      	bx	lr
 80007a0:	ea90 0f01 	teq	r0, r1
 80007a4:	bf1c      	itt	ne
 80007a6:	2000      	movne	r0, #0
 80007a8:	4770      	bxne	lr
 80007aa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80007ae:	d104      	bne.n	80007ba <__addsf3+0x126>
 80007b0:	0040      	lsls	r0, r0, #1
 80007b2:	bf28      	it	cs
 80007b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80007b8:	4770      	bx	lr
 80007ba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80007be:	bf3c      	itt	cc
 80007c0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80007c4:	4770      	bxcc	lr
 80007c6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007ca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007d2:	4770      	bx	lr
 80007d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007d8:	bf16      	itet	ne
 80007da:	4608      	movne	r0, r1
 80007dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007e0:	4601      	movne	r1, r0
 80007e2:	0242      	lsls	r2, r0, #9
 80007e4:	bf06      	itte	eq
 80007e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ea:	ea90 0f01 	teqeq	r0, r1
 80007ee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_ui2f>:
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	e004      	b.n	8000804 <__aeabi_i2f+0x8>
 80007fa:	bf00      	nop

080007fc <__aeabi_i2f>:
 80007fc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	ea5f 0c00 	movs.w	ip, r0
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000810:	4601      	mov	r1, r0
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	e01c      	b.n	8000852 <__aeabi_l2f+0x2a>

08000818 <__aeabi_ul2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e00a      	b.n	800083c <__aeabi_l2f+0x14>
 8000826:	bf00      	nop

08000828 <__aeabi_l2f>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000834:	d502      	bpl.n	800083c <__aeabi_l2f+0x14>
 8000836:	4240      	negs	r0, r0
 8000838:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083c:	ea5f 0c01 	movs.w	ip, r1
 8000840:	bf02      	ittt	eq
 8000842:	4684      	moveq	ip, r0
 8000844:	4601      	moveq	r1, r0
 8000846:	2000      	moveq	r0, #0
 8000848:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800084c:	bf08      	it	eq
 800084e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000852:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000856:	fabc f28c 	clz	r2, ip
 800085a:	3a08      	subs	r2, #8
 800085c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000860:	db10      	blt.n	8000884 <__aeabi_l2f+0x5c>
 8000862:	fa01 fc02 	lsl.w	ip, r1, r2
 8000866:	4463      	add	r3, ip
 8000868:	fa00 fc02 	lsl.w	ip, r0, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000874:	fa20 f202 	lsr.w	r2, r0, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	f020 0001 	biceq.w	r0, r0, #1
 8000882:	4770      	bx	lr
 8000884:	f102 0220 	add.w	r2, r2, #32
 8000888:	fa01 fc02 	lsl.w	ip, r1, r2
 800088c:	f1c2 0220 	rsb	r2, r2, #32
 8000890:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000894:	fa21 f202 	lsr.w	r2, r1, r2
 8000898:	eb43 0002 	adc.w	r0, r3, r2
 800089c:	bf08      	it	eq
 800089e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008a2:	4770      	bx	lr

080008a4 <__aeabi_ldivmod>:
 80008a4:	b97b      	cbnz	r3, 80008c6 <__aeabi_ldivmod+0x22>
 80008a6:	b972      	cbnz	r2, 80008c6 <__aeabi_ldivmod+0x22>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bfbe      	ittt	lt
 80008ac:	2000      	movlt	r0, #0
 80008ae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80008b2:	e006      	blt.n	80008c2 <__aeabi_ldivmod+0x1e>
 80008b4:	bf08      	it	eq
 80008b6:	2800      	cmpeq	r0, #0
 80008b8:	bf1c      	itt	ne
 80008ba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80008be:	f04f 30ff 	movne.w	r0, #4294967295
 80008c2:	f000 ba0d 	b.w	8000ce0 <__aeabi_idiv0>
 80008c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80008ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ce:	2900      	cmp	r1, #0
 80008d0:	db09      	blt.n	80008e6 <__aeabi_ldivmod+0x42>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db1a      	blt.n	800090c <__aeabi_ldivmod+0x68>
 80008d6:	f000 f887 	bl	80009e8 <__udivmoddi4>
 80008da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e2:	b004      	add	sp, #16
 80008e4:	4770      	bx	lr
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db1b      	blt.n	8000928 <__aeabi_ldivmod+0x84>
 80008f0:	f000 f87a 	bl	80009e8 <__udivmoddi4>
 80008f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008fc:	b004      	add	sp, #16
 80008fe:	4240      	negs	r0, r0
 8000900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000904:	4252      	negs	r2, r2
 8000906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800090a:	4770      	bx	lr
 800090c:	4252      	negs	r2, r2
 800090e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000912:	f000 f869 	bl	80009e8 <__udivmoddi4>
 8000916:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800091e:	b004      	add	sp, #16
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	4770      	bx	lr
 8000928:	4252      	negs	r2, r2
 800092a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092e:	f000 f85b 	bl	80009e8 <__udivmoddi4>
 8000932:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800093a:	b004      	add	sp, #16
 800093c:	4252      	negs	r2, r2
 800093e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b9c2 	b.w	8000ce0 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f840 	bl	80009e8 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__aeabi_d2lz>:
 8000974:	b508      	push	{r3, lr}
 8000976:	4602      	mov	r2, r0
 8000978:	460b      	mov	r3, r1
 800097a:	ec43 2b17 	vmov	d7, r2, r3
 800097e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d403      	bmi.n	8000990 <__aeabi_d2lz+0x1c>
 8000988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800098c:	f000 b80c 	b.w	80009a8 <__aeabi_d2ulz>
 8000990:	eeb1 7b47 	vneg.f64	d7, d7
 8000994:	ec51 0b17 	vmov	r0, r1, d7
 8000998:	f000 f806 	bl	80009a8 <__aeabi_d2ulz>
 800099c:	4240      	negs	r0, r0
 800099e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a2:	bd08      	pop	{r3, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <__aeabi_d2ulz>:
 80009a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009d8 <__aeabi_d2ulz+0x30>
 80009ac:	ec41 0b17 	vmov	d7, r0, r1
 80009b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009e0 <__aeabi_d2ulz+0x38>
 80009b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80009bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c8:	ee16 1a10 	vmov	r1, s12
 80009cc:	ee17 0a90 	vmov	r0, s15
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	f3af 8000 	nop.w
 80009d8:	00000000 	.word	0x00000000
 80009dc:	3df00000 	.word	0x3df00000
 80009e0:	00000000 	.word	0x00000000
 80009e4:	41f00000 	.word	0x41f00000

080009e8 <__udivmoddi4>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	9d08      	ldr	r5, [sp, #32]
 80009ee:	468e      	mov	lr, r1
 80009f0:	4604      	mov	r4, r0
 80009f2:	4688      	mov	r8, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14a      	bne.n	8000a8e <__udivmoddi4+0xa6>
 80009f8:	428a      	cmp	r2, r1
 80009fa:	4617      	mov	r7, r2
 80009fc:	d962      	bls.n	8000ac4 <__udivmoddi4+0xdc>
 80009fe:	fab2 f682 	clz	r6, r2
 8000a02:	b14e      	cbz	r6, 8000a18 <__udivmoddi4+0x30>
 8000a04:	f1c6 0320 	rsb	r3, r6, #32
 8000a08:	fa01 f806 	lsl.w	r8, r1, r6
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	40b7      	lsls	r7, r6
 8000a12:	ea43 0808 	orr.w	r8, r3, r8
 8000a16:	40b4      	lsls	r4, r6
 8000a18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x62>
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a3c:	f080 80ea 	bcs.w	8000c14 <__udivmoddi4+0x22c>
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f240 80e7 	bls.w	8000c14 <__udivmoddi4+0x22c>
 8000a46:	3902      	subs	r1, #2
 8000a48:	443b      	add	r3, r7
 8000a4a:	1a9a      	subs	r2, r3, r2
 8000a4c:	b2a3      	uxth	r3, r4
 8000a4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a5e:	459c      	cmp	ip, r3
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0x8e>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a68:	f080 80d6 	bcs.w	8000c18 <__udivmoddi4+0x230>
 8000a6c:	459c      	cmp	ip, r3
 8000a6e:	f240 80d3 	bls.w	8000c18 <__udivmoddi4+0x230>
 8000a72:	443b      	add	r3, r7
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a7a:	eba3 030c 	sub.w	r3, r3, ip
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa2>
 8000a82:	40f3      	lsrs	r3, r6
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xb6>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb0>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x14c>
 8000aa6:	4573      	cmp	r3, lr
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xc8>
 8000aaa:	4282      	cmp	r2, r0
 8000aac:	f200 8105 	bhi.w	8000cba <__udivmoddi4+0x2d2>
 8000ab0:	1a84      	subs	r4, r0, r2
 8000ab2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	4690      	mov	r8, r2
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d0e5      	beq.n	8000a8a <__udivmoddi4+0xa2>
 8000abe:	e9c5 4800 	strd	r4, r8, [r5]
 8000ac2:	e7e2      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f000 8090 	beq.w	8000bea <__udivmoddi4+0x202>
 8000aca:	fab2 f682 	clz	r6, r2
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f040 80a4 	bne.w	8000c1c <__udivmoddi4+0x234>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	b280      	uxth	r0, r0
 8000ade:	b2bc      	uxth	r4, r7
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ae6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb04 f20c 	mul.w	r2, r4, ip
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x11e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000afc:	d202      	bcs.n	8000b04 <__udivmoddi4+0x11c>
 8000afe:	429a      	cmp	r2, r3
 8000b00:	f200 80e0 	bhi.w	8000cc4 <__udivmoddi4+0x2dc>
 8000b04:	46c4      	mov	ip, r8
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b14:	fb02 f404 	mul.w	r4, r2, r4
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	d907      	bls.n	8000b2c <__udivmoddi4+0x144>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x142>
 8000b24:	429c      	cmp	r4, r3
 8000b26:	f200 80ca 	bhi.w	8000cbe <__udivmoddi4+0x2d6>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	1b1b      	subs	r3, r3, r4
 8000b2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x98>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa0e f401 	lsl.w	r4, lr, r1
 8000b44:	fa20 f306 	lsr.w	r3, r0, r6
 8000b48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b50:	4323      	orrs	r3, r4
 8000b52:	fa00 f801 	lsl.w	r8, r0, r1
 8000b56:	fa1f fc87 	uxth.w	ip, r7
 8000b5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b5e:	0c1c      	lsrs	r4, r3, #16
 8000b60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1a0>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b7a:	f080 809c 	bcs.w	8000cb6 <__udivmoddi4+0x2ce>
 8000b7e:	45a6      	cmp	lr, r4
 8000b80:	f240 8099 	bls.w	8000cb6 <__udivmoddi4+0x2ce>
 8000b84:	3802      	subs	r0, #2
 8000b86:	443c      	add	r4, r7
 8000b88:	eba4 040e 	sub.w	r4, r4, lr
 8000b8c:	fa1f fe83 	uxth.w	lr, r3
 8000b90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b94:	fb09 4413 	mls	r4, r9, r3, r4
 8000b98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1ce>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000baa:	f080 8082 	bcs.w	8000cb2 <__udivmoddi4+0x2ca>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d97f      	bls.n	8000cb2 <__udivmoddi4+0x2ca>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bba:	eba4 040c 	sub.w	r4, r4, ip
 8000bbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bc2:	4564      	cmp	r4, ip
 8000bc4:	4673      	mov	r3, lr
 8000bc6:	46e1      	mov	r9, ip
 8000bc8:	d362      	bcc.n	8000c90 <__udivmoddi4+0x2a8>
 8000bca:	d05f      	beq.n	8000c8c <__udivmoddi4+0x2a4>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x1fe>
 8000bce:	ebb8 0203 	subs.w	r2, r8, r3
 8000bd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	fa22 f301 	lsr.w	r3, r2, r1
 8000bde:	431e      	orrs	r6, r3
 8000be0:	40cc      	lsrs	r4, r1
 8000be2:	e9c5 6400 	strd	r6, r4, [r5]
 8000be6:	2100      	movs	r1, #0
 8000be8:	e74f      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000bea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bee:	0c01      	lsrs	r1, r0, #16
 8000bf0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bf4:	b280      	uxth	r0, r0
 8000bf6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	463c      	mov	r4, r7
 8000c00:	46b8      	mov	r8, r7
 8000c02:	46be      	mov	lr, r7
 8000c04:	2620      	movs	r6, #32
 8000c06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c0a:	eba2 0208 	sub.w	r2, r2, r8
 8000c0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c12:	e766      	b.n	8000ae2 <__udivmoddi4+0xfa>
 8000c14:	4601      	mov	r1, r0
 8000c16:	e718      	b.n	8000a4a <__udivmoddi4+0x62>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	e72c      	b.n	8000a76 <__udivmoddi4+0x8e>
 8000c1c:	f1c6 0220 	rsb	r2, r6, #32
 8000c20:	fa2e f302 	lsr.w	r3, lr, r2
 8000c24:	40b7      	lsls	r7, r6
 8000c26:	40b1      	lsls	r1, r6
 8000c28:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	430a      	orrs	r2, r1
 8000c32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c36:	b2bc      	uxth	r4, r7
 8000c38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c3c:	0c11      	lsrs	r1, r2, #16
 8000c3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c42:	fb08 f904 	mul.w	r9, r8, r4
 8000c46:	40b0      	lsls	r0, r6
 8000c48:	4589      	cmp	r9, r1
 8000c4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c4e:	b280      	uxth	r0, r0
 8000c50:	d93e      	bls.n	8000cd0 <__udivmoddi4+0x2e8>
 8000c52:	1879      	adds	r1, r7, r1
 8000c54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c58:	d201      	bcs.n	8000c5e <__udivmoddi4+0x276>
 8000c5a:	4589      	cmp	r9, r1
 8000c5c:	d81f      	bhi.n	8000c9e <__udivmoddi4+0x2b6>
 8000c5e:	eba1 0109 	sub.w	r1, r1, r9
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fb09 f804 	mul.w	r8, r9, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	b292      	uxth	r2, r2
 8000c70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c74:	4542      	cmp	r2, r8
 8000c76:	d229      	bcs.n	8000ccc <__udivmoddi4+0x2e4>
 8000c78:	18ba      	adds	r2, r7, r2
 8000c7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c7e:	d2c4      	bcs.n	8000c0a <__udivmoddi4+0x222>
 8000c80:	4542      	cmp	r2, r8
 8000c82:	d2c2      	bcs.n	8000c0a <__udivmoddi4+0x222>
 8000c84:	f1a9 0102 	sub.w	r1, r9, #2
 8000c88:	443a      	add	r2, r7
 8000c8a:	e7be      	b.n	8000c0a <__udivmoddi4+0x222>
 8000c8c:	45f0      	cmp	r8, lr
 8000c8e:	d29d      	bcs.n	8000bcc <__udivmoddi4+0x1e4>
 8000c90:	ebbe 0302 	subs.w	r3, lr, r2
 8000c94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c98:	3801      	subs	r0, #1
 8000c9a:	46e1      	mov	r9, ip
 8000c9c:	e796      	b.n	8000bcc <__udivmoddi4+0x1e4>
 8000c9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ca2:	4449      	add	r1, r9
 8000ca4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ca8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cac:	fb09 f804 	mul.w	r8, r9, r4
 8000cb0:	e7db      	b.n	8000c6a <__udivmoddi4+0x282>
 8000cb2:	4673      	mov	r3, lr
 8000cb4:	e77f      	b.n	8000bb6 <__udivmoddi4+0x1ce>
 8000cb6:	4650      	mov	r0, sl
 8000cb8:	e766      	b.n	8000b88 <__udivmoddi4+0x1a0>
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e6fd      	b.n	8000aba <__udivmoddi4+0xd2>
 8000cbe:	443b      	add	r3, r7
 8000cc0:	3a02      	subs	r2, #2
 8000cc2:	e733      	b.n	8000b2c <__udivmoddi4+0x144>
 8000cc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	e71c      	b.n	8000b06 <__udivmoddi4+0x11e>
 8000ccc:	4649      	mov	r1, r9
 8000cce:	e79c      	b.n	8000c0a <__udivmoddi4+0x222>
 8000cd0:	eba1 0109 	sub.w	r1, r1, r9
 8000cd4:	46c4      	mov	ip, r8
 8000cd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cda:	fb09 f804 	mul.w	r8, r9, r4
 8000cde:	e7c4      	b.n	8000c6a <__udivmoddi4+0x282>

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F7, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F75x, STM32F74x, STM32F76x, STM32F77x, STM32F72x and STM32F73x: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b089      	sub	sp, #36	@ 0x24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	332c      	adds	r3, #44	@ 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000e0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e12:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	fa92 f2a2 	rbit	r2, r2
 8000e1a:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	40d3      	lsrs	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	211f      	movs	r1, #31
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 011f 	and.w	r1, r3, #31
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	431a      	orrs	r2, r3
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e56:	bf00      	nop
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b08d      	sub	sp, #52	@ 0x34
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	330c      	adds	r3, #12
 8000e98:	4619      	mov	r1, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ea4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	fa92 f2a2 	rbit	r2, r2
 8000eac:	617a      	str	r2, [r7, #20]
  return result;
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	40d3      	lsrs	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000ec8:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000ecc:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	6a39      	ldr	r1, [r7, #32]
 8000ed0:	fa91 f1a1 	rbit	r1, r1
 8000ed4:	61f9      	str	r1, [r7, #28]
  return result;
 8000ed6:	69f9      	ldr	r1, [r7, #28]
 8000ed8:	fab1 f181 	clz	r1, r1
 8000edc:	b2c9      	uxtb	r1, r1
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000ef0:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000ef4:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ef8:	fa91 f1a1 	rbit	r1, r1
 8000efc:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f00:	fab1 f181 	clz	r1, r1
 8000f04:	b2c9      	uxtb	r1, r1
 8000f06:	40cb      	lsrs	r3, r1
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f12:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000f14:	bf00      	nop
 8000f16:	3734      	adds	r7, #52	@ 0x34
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000f40:	4908      	ldr	r1, [pc, #32]	@ (8000f64 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	08014180 	.word	0x08014180

08000f68 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LL_DMA_SetMode+0x44>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8000f88:	4908      	ldr	r1, [pc, #32]	@ (8000fac <LL_DMA_SetMode+0x44>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	440b      	add	r3, r1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	440b      	add	r3, r1
 8000f96:	4619      	mov	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	08014180 	.word	0x08014180

08000fb0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000fd0:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	440b      	add	r3, r1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	440b      	add	r3, r1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	08014180 	.word	0x08014180

08000ff8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LL_DMA_SetMemoryIncMode+0x44>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001018:	4908      	ldr	r1, [pc, #32]	@ (800103c <LL_DMA_SetMemoryIncMode+0x44>)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	440b      	add	r3, r1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	440b      	add	r3, r1
 8001026:	4619      	mov	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	08014180 	.word	0x08014180

08001040 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <LL_DMA_SetPeriphSize+0x44>)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001060:	4908      	ldr	r1, [pc, #32]	@ (8001084 <LL_DMA_SetPeriphSize+0x44>)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	440b      	add	r3, r1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	440b      	add	r3, r1
 800106e:	4619      	mov	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	08014180 	.word	0x08014180

08001088 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <LL_DMA_SetMemorySize+0x44>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80010a8:	4908      	ldr	r1, [pc, #32]	@ (80010cc <LL_DMA_SetMemorySize+0x44>)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	440b      	add	r3, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	440b      	add	r3, r1
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	08014180 	.word	0x08014180

080010d0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010f0:	4908      	ldr	r1, [pc, #32]	@ (8001114 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	440b      	add	r3, r1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	440b      	add	r3, r1
 80010fe:	4619      	mov	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	08014180 	.word	0x08014180

08001118 <LL_DMA_SetChannelSelection>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LL_DMA_SetChannelSelection+0x44>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 52f0 	bic.w	r2, r3, #503316480	@ 0x1e000000
 8001138:	4908      	ldr	r1, [pc, #32]	@ (800115c <LL_DMA_SetChannelSelection+0x44>)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	440b      	add	r3, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	440b      	add	r3, r1
 8001146:	4619      	mov	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	08014180 	.word	0x08014180

08001160 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <LL_DMA_DisableFifoMode+0x3c>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4908      	ldr	r1, [pc, #32]	@ (800119c <LL_DMA_DisableFifoMode+0x3c>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	440a      	add	r2, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	4611      	mov	r1, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	440a      	add	r2, r1
 8001188:	f023 0304 	bic.w	r3, r3, #4
 800118c:	6153      	str	r3, [r2, #20]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	08014180 	.word	0x08014180

080011a0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <LL_I2C_SetOwnAddress2+0x2c>)
 8001212:	4013      	ands	r3, r2
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	430a      	orrs	r2, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	60da      	str	r2, [r3, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	fffff801 	.word	0xfffff801

08001230 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <LL_RCC_HSE_Enable+0x1c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <LL_RCC_HSE_Enable+0x1c>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <LL_RCC_HSE_IsReady+0x24>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <LL_RCC_SetSysClkSource+0x24>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 0203 	bic.w	r2, r3, #3
 80012c8:	4904      	ldr	r1, [pc, #16]	@ (80012dc <LL_RCC_SetSysClkSource+0x24>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40023800 	.word	0x40023800

080012e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <LL_RCC_GetSysClkSource+0x18>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <LL_RCC_SetAHBPrescaler+0x24>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800130c:	4904      	ldr	r1, [pc, #16]	@ (8001320 <LL_RCC_SetAHBPrescaler+0x24>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800

08001324 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <LL_RCC_SetAPB1Prescaler+0x24>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001334:	4904      	ldr	r1, [pc, #16]	@ (8001348 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4313      	orrs	r3, r2
 800133a:	608b      	str	r3, [r1, #8]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800

0800134c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800135c:	4904      	ldr	r1, [pc, #16]	@ (8001370 <LL_RCC_SetAPB2Prescaler+0x24>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800

08001374 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <LL_RCC_SetUSARTClockSource+0x30>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	43db      	mvns	r3, r3
 8001388:	401a      	ands	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4905      	ldr	r1, [pc, #20]	@ (80013a4 <LL_RCC_SetUSARTClockSource+0x30>)
 8001390:	4313      	orrs	r3, r2
 8001392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (UARTxSource >> 16U), (UARTxSource & 0x0000FFFFU));
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <LL_RCC_SetUARTClockSource+0x30>)
 80013b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0c1b      	lsrs	r3, r3, #16
 80013ba:	43db      	mvns	r3, r3
 80013bc:	401a      	ands	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4905      	ldr	r1, [pc, #20]	@ (80013d8 <LL_RCC_SetUARTClockSource+0x30>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (I2CxSource & 0xFFFF0000U),  (I2CxSource << 16U));
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <LL_RCC_SetI2CClockSource+0x30>)
 80013e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <LL_RCC_SetI2CClockSource+0x34>)
 80013ee:	400b      	ands	r3, r1
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	4904      	ldr	r1, [pc, #16]	@ (800140c <LL_RCC_SetI2CClockSource+0x30>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40023800 	.word	0x40023800
 8001410:	ffff0000 	.word	0xffff0000

08001414 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <LL_RCC_SetTIMPrescaler+0x28>)
 800141e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001422:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001426:	4905      	ldr	r1, [pc, #20]	@ (800143c <LL_RCC_SetTIMPrescaler+0x28>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4313      	orrs	r3, r2
 800142c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800

08001440 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <LL_RCC_PLL_Enable+0x1c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <LL_RCC_PLL_Enable+0x1c>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <LL_RCC_PLL_IsReady+0x24>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2db      	uxtb	r3, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800149c:	4013      	ands	r3, r2
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	4311      	orrs	r1, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	0192      	lsls	r2, r2, #6
 80014a8:	4311      	orrs	r1, r2
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	4904      	ldr	r1, [pc, #16]	@ (80014c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40023800 	.word	0x40023800
 80014c4:	ffbc8000 	.word	0xffbc8000

080014c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014d4:	4907      	ldr	r1, [pc, #28]	@ (80014f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4013      	ands	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023800 	.word	0x40023800

080014f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001504:	4907      	ldr	r1, [pc, #28]	@ (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800150e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40023800 	.word	0x40023800

08001528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001534:	4907      	ldr	r1, [pc, #28]	@ (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800153e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800

08001558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <LL_FLASH_SetLatency+0x24>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 020f 	bic.w	r2, r3, #15
 8001568:	4904      	ldr	r1, [pc, #16]	@ (800157c <LL_FLASH_SetLatency+0x24>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40023c00 	.word	0x40023c00

08001580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <LL_FLASH_GetLatency+0x18>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <LL_PWR_EnableOverDriveMode+0x1c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <LL_PWR_EnableOverDriveMode+0x1c>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000

080015bc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80015cc:	4904      	ldr	r1, [pc, #16]	@ (80015e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40007000 	.word	0x40007000

080015e4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000

0800160c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 0210 	bic.w	r2, r3, #16
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	605a      	str	r2, [r3, #4]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f043 0208 	orr.w	r2, r3, #8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	605a      	str	r2, [r3, #4]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 0208 	bic.w	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d028      	beq.n	8001716 <LL_TIM_OC_DisableFast+0x62>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d023      	beq.n	8001712 <LL_TIM_OC_DisableFast+0x5e>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	d01e      	beq.n	800170e <LL_TIM_OC_DisableFast+0x5a>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b40      	cmp	r3, #64	@ 0x40
 80016d4:	d019      	beq.n	800170a <LL_TIM_OC_DisableFast+0x56>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016dc:	d013      	beq.n	8001706 <LL_TIM_OC_DisableFast+0x52>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e4:	d00d      	beq.n	8001702 <LL_TIM_OC_DisableFast+0x4e>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ec:	d007      	beq.n	80016fe <LL_TIM_OC_DisableFast+0x4a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f4:	d101      	bne.n	80016fa <LL_TIM_OC_DisableFast+0x46>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00e      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 80016fa:	2308      	movs	r3, #8
 80016fc:	e00c      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00a      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3318      	adds	r3, #24
 800171e:	4619      	mov	r1, r3
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <LL_TIM_OC_DisableFast+0x9c>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	440b      	add	r3, r1
 8001728:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4908      	ldr	r1, [pc, #32]	@ (8001754 <LL_TIM_OC_DisableFast+0xa0>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	4619      	mov	r1, r3
 8001736:	2304      	movs	r3, #4
 8001738:	408b      	lsls	r3, r1
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	601a      	str	r2, [r3, #0]

}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	08014188 	.word	0x08014188
 8001754:	08014194 	.word	0x08014194

08001758 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d028      	beq.n	80017ba <LL_TIM_OC_EnablePreload+0x62>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d023      	beq.n	80017b6 <LL_TIM_OC_EnablePreload+0x5e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d01e      	beq.n	80017b2 <LL_TIM_OC_EnablePreload+0x5a>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b40      	cmp	r3, #64	@ 0x40
 8001778:	d019      	beq.n	80017ae <LL_TIM_OC_EnablePreload+0x56>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001780:	d013      	beq.n	80017aa <LL_TIM_OC_EnablePreload+0x52>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001788:	d00d      	beq.n	80017a6 <LL_TIM_OC_EnablePreload+0x4e>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001790:	d007      	beq.n	80017a2 <LL_TIM_OC_EnablePreload+0x4a>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001798:	d101      	bne.n	800179e <LL_TIM_OC_EnablePreload+0x46>
 800179a:	2307      	movs	r3, #7
 800179c:	e00e      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00c      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3318      	adds	r3, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <LL_TIM_OC_EnablePreload+0x98>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	440b      	add	r3, r1
 80017cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4907      	ldr	r1, [pc, #28]	@ (80017f4 <LL_TIM_OC_EnablePreload+0x9c>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	4619      	mov	r1, r3
 80017da:	2308      	movs	r3, #8
 80017dc:	408b      	lsls	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	08014188 	.word	0x08014188
 80017f4:	08014194 	.word	0x08014194

080017f8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_USART_SetDEDeassertionTime>:
  * @param  USARTx USART Instance
  * @param  Time Value between Min_Data=0 and Max_Data=31
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_USART_SetDEAssertionTime>:
  * @param  USARTx USART Instance
  * @param  Time Value between Min_Data=0 and Max_Data=31
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	055b      	lsls	r3, r3, #21
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_USART_EnableDEMode>:
  * @rmtoll CR3          DEM           LL_USART_EnableDEMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_USART_SetDESignalPolarity>:
  *         @arg @ref LL_USART_DE_POLARITY_HIGH
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	619a      	str	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f00a f887 	bl	800ba74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f885 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f000 ffc9 	bl	8002900 <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f000 ffaf 	bl	80028d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001972:	f000 fa4f 	bl	8001e14 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001976:	f000 fac1 	bl	8001efc <MX_I2C2_Init>
  MX_SPI1_Init();
 800197a:	f000 fb33 	bl	8001fe4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800197e:	f000 fbbd 	bl	80020fc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001982:	f000 fc39 	bl	80021f8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001986:	f000 f8c9 	bl	8001b1c <MX_ADC1_Init>
  MX_SPI4_Init();
 800198a:	f000 fcb3 	bl	80022f4 <MX_SPI4_Init>
  MX_TIM4_Init();
 800198e:	f000 fdab 	bl	80024e8 <MX_TIM4_Init>
  MX_UART7_Init();
 8001992:	f000 fe7f 	bl	8002694 <MX_UART7_Init>
  MX_SPI6_Init();
 8001996:	f000 fd2b 	bl	80023f0 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 800199a:	f000 fee1 	bl	8002760 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800199e:	f000 ff67 	bl	8002870 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  Ex_Watchdog_Init();
 80019a2:	f00a f81d 	bl	800b9e0 <Ex_Watchdog_Init>
  LED_Status_Init();
 80019a6:	f006 ff41 	bl	800882c <LED_Status_Init>
  UART_Driver_Init();
 80019aa:	f002 f8bd 	bl	8003b28 <UART_Driver_Init>
  CLI_Command_Init(EXP_UART_CONSOLE_HANDLE);
 80019ae:	4826      	ldr	r0, [pc, #152]	@ (8001a48 <main+0xec>)
 80019b0:	f002 faf8 	bl	8003fa4 <CLI_Command_Init>
  NTC_DMA_ADC_Init();
 80019b4:	f009 fb4e 	bl	800b054 <NTC_DMA_ADC_Init>
  Sensor_I2C_Init();
 80019b8:	f008 fc56 	bl	800a268 <Sensor_I2C_Init>
//  MIN_Process_Init();

  // Laser board
  MCP4902_Device_Init(&DAC_device, SPI4, LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin, LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 80019bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <main+0xf0>)
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2304      	movs	r3, #4
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <main+0xf0>)
 80019ca:	4921      	ldr	r1, [pc, #132]	@ (8001a50 <main+0xf4>)
 80019cc:	4821      	ldr	r0, [pc, #132]	@ (8001a54 <main+0xf8>)
 80019ce:	f006 fe9d 	bl	800870c <MCP4902_Device_Init>
  ADG1414_Chain_Init(&laser_int, SPI4, LASER_INT_SW_CS_GPIO_Port, LASER_INT_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 80019d2:	2306      	movs	r3, #6
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019da:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <main+0xfc>)
 80019dc:	491c      	ldr	r1, [pc, #112]	@ (8001a50 <main+0xf4>)
 80019de:	481f      	ldr	r0, [pc, #124]	@ (8001a5c <main+0x100>)
 80019e0:	f006 f8f7 	bl	8007bd2 <ADG1414_Chain_Init>
  ADG1414_Chain_Init(&laser_ext, SPI4, LASER_EXT_SW_CS_GPIO_Port, LASER_EXT_SW_CS_Pin, EXTERNAL_CHAIN_SWITCH_NUM);
 80019e4:	2301      	movs	r3, #1
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001a58 <main+0xfc>)
 80019ee:	4918      	ldr	r1, [pc, #96]	@ (8001a50 <main+0xf4>)
 80019f0:	481b      	ldr	r0, [pc, #108]	@ (8001a60 <main+0x104>)
 80019f2:	f006 f8ee 	bl	8007bd2 <ADG1414_Chain_Init>

  // Photo board
  ADG1414_Chain_Init(&photo_sw, SPI2, PHOTO_SW_CS_GPIO_Port, PHOTO_SW_CS_Pin, INTERNAL_CHAIN_SWITCH_NUM);
 80019f6:	2306      	movs	r3, #6
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019fe:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <main+0x108>)
 8001a00:	4919      	ldr	r1, [pc, #100]	@ (8001a68 <main+0x10c>)
 8001a02:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <main+0x110>)
 8001a04:	f006 f8e5 	bl	8007bd2 <ADG1414_Chain_Init>
  ADS8327_Device_Init(&photo_adc, SPI2, PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin, PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin, PHOTO_ADC_EOC_GPIO_Port, PHOTO_ADC_EOC_Pin);
 8001a08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <main+0x108>)
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <main+0x108>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <main+0x108>)
 8001a22:	4911      	ldr	r1, [pc, #68]	@ (8001a68 <main+0x10c>)
 8001a24:	4812      	ldr	r0, [pc, #72]	@ (8001a70 <main+0x114>)
 8001a26:	f006 fcac 	bl	8008382 <ADS8327_Device_Init>

  SCH_Initialize();
 8001a2a:	f007 f823 	bl	8008a74 <SCH_Initialize>

  Ex_Watchdog_CreateTask();
 8001a2e:	f009 ffe3 	bl	800b9f8 <Ex_Watchdog_CreateTask>
  LED_Status_CreateTask();
 8001a32:	f007 f813 	bl	8008a5c <LED_Status_CreateTask>
  CLI_Command_CreateTask();
 8001a36:	f002 fac5 	bl	8003fc4 <CLI_Command_CreateTask>
  Temperature_GetSet_CreateTask();
 8001a3a:	f009 fd15 	bl	800b468 <Temperature_GetSet_CreateTask>
//  MIN_CreateTask();
  SCH_StartSchedular();
 8001a3e:	f007 f943 	bl	8008cc8 <SCH_StartSchedular>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_HandleScheduledTask();
 8001a42:	f007 f947 	bl	8008cd4 <SCH_HandleScheduledTask>
 8001a46:	e7fc      	b.n	8001a42 <main+0xe6>
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40013400 	.word	0x40013400
 8001a54:	20004c94 	.word	0x20004c94
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	20004cac 	.word	0x20004cac
 8001a60:	20004ccc 	.word	0x20004ccc
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	20004cec 	.word	0x20004cec
 8001a70:	20004d0c 	.word	0x20004d0c

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_6);
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff fd6d 	bl	8001558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_6)
 8001a7e:	bf00      	nop
 8001a80:	f7ff fd7e 	bl	8001580 <LL_FLASH_GetLatency>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d1fa      	bne.n	8001a80 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a8a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001a8e:	f7ff fd95 	bl	80015bc <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001a92:	f7ff fd83 	bl	800159c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8001a96:	f7ff fbeb 	bl	8001270 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff fbf8 	bl	8001290 <LL_RCC_HSE_IsReady>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d1fa      	bne.n	8001a9c <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_12, 192, LL_RCC_PLLP_DIV_2);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	22c0      	movs	r2, #192	@ 0xc0
 8001aaa:	210c      	movs	r1, #12
 8001aac:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001ab0:	f7ff fcea 	bl	8001488 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001ab4:	f7ff fcc4 	bl	8001440 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001ab8:	bf00      	nop
 8001aba:	f7ff fcd1 	bl	8001460 <LL_RCC_PLL_IsReady>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1fa      	bne.n	8001aba <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001ac4:	bf00      	nop
 8001ac6:	f7ff fd8d 	bl	80015e4 <LL_PWR_IsActiveFlag_VOS>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0fa      	beq.n	8001ac6 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff fc13 	bl	80012fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001ad6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001ada:	f7ff fc23 	bl	8001324 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001ade:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ae2:	f7ff fc33 	bl	800134c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7ff fbe6 	bl	80012b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001aec:	bf00      	nop
 8001aee:	f7ff fbf7 	bl	80012e0 <LL_RCC_GetSysClkSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d1fa      	bne.n	8001aee <SystemClock_Config+0x7a>
  {

  }
  LL_SetSystemCoreClock(200000000);
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <SystemClock_Config+0xa4>)
 8001afa:	f00d f8c7 	bl	800ec8c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	200f      	movs	r0, #15
 8001b00:	f009 ffc6 	bl	800ba90 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b0a:	f001 f9af 	bl	8002e6c <Error_Handler>
  }

   /* Set Timers Clock Prescalers */
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fc80 	bl	8001414 <LL_RCC_SetTIMPrescaler>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	0bebc200 	.word	0x0bebc200

08001b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b092      	sub	sp, #72	@ 0x48
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001b22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001b5c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b60:	f7ff fce2 	bl	8001528 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b64:	2004      	movs	r0, #4
 8001b66:	f7ff fcaf 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff fcac 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b70:	2002      	movs	r0, #2
 8001b72:	f7ff fca9 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001b76:	2301      	movs	r3, #1
 8001b78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b82:	463b      	mov	r3, r7
 8001b84:	4619      	mov	r1, r3
 8001b86:	4896      	ldr	r0, [pc, #600]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001b88:	f00b fe23 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4890      	ldr	r0, [pc, #576]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001b9e:	f00b fe18 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	488b      	ldr	r0, [pc, #556]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001bb4:	f00b fe0d 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4885      	ldr	r0, [pc, #532]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001bca:	f00b fe02 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4881      	ldr	r0, [pc, #516]	@ (8001de4 <MX_ADC1_Init+0x2c8>)
 8001be0:	f00b fdf7 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001be4:	2304      	movs	r3, #4
 8001be6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	487b      	ldr	r0, [pc, #492]	@ (8001de4 <MX_ADC1_Init+0x2c8>)
 8001bf6:	f00b fdec 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	463b      	mov	r3, r7
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4876      	ldr	r0, [pc, #472]	@ (8001de4 <MX_ADC1_Init+0x2c8>)
 8001c0c:	f00b fde1 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001c10:	2310      	movs	r3, #16
 8001c12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c14:	2303      	movs	r3, #3
 8001c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4619      	mov	r1, r3
 8001c20:	486f      	ldr	r0, [pc, #444]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001c22:	f00b fdd6 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001c26:	2320      	movs	r3, #32
 8001c28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	486a      	ldr	r0, [pc, #424]	@ (8001de0 <MX_ADC1_Init+0x2c4>)
 8001c38:	f00b fdcb 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4866      	ldr	r0, [pc, #408]	@ (8001de8 <MX_ADC1_Init+0x2cc>)
 8001c4e:	f00b fdc0 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001c52:	2302      	movs	r3, #2
 8001c54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4619      	mov	r1, r3
 8001c62:	4861      	ldr	r0, [pc, #388]	@ (8001de8 <MX_ADC1_Init+0x2cc>)
 8001c64:	f00b fdb5 	bl	800d7d2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	485f      	ldr	r0, [pc, #380]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001c6e:	f7ff fa53 	bl	8001118 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	485d      	ldr	r0, [pc, #372]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001c78:	f7ff f952 	bl	8000f20 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_HIGH);
 8001c7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c80:	2100      	movs	r1, #0
 8001c82:	485a      	ldr	r0, [pc, #360]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001c84:	f7ff fa24 	bl	80010d0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4857      	ldr	r0, [pc, #348]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001c90:	f7ff f96a 	bl	8000f68 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	4854      	ldr	r0, [pc, #336]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001c9a:	f7ff f989 	bl	8000fb0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4851      	ldr	r0, [pc, #324]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001ca6:	f7ff f9a7 	bl	8000ff8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_WORD);
 8001caa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cae:	2100      	movs	r1, #0
 8001cb0:	484e      	ldr	r0, [pc, #312]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001cb2:	f7ff f9c5 	bl	8001040 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_WORD);
 8001cb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cba:	2100      	movs	r1, #0
 8001cbc:	484b      	ldr	r0, [pc, #300]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001cbe:	f7ff f9e3 	bl	8001088 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4849      	ldr	r0, [pc, #292]	@ (8001dec <MX_ADC1_Init+0x2d0>)
 8001cc6:	f7ff fa4b 	bl	8001160 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001cd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001cd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4844      	ldr	r0, [pc, #272]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001ce0:	f00b fbfe 	bl	800d4e0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8001ce8:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001cf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001cfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d00:	4619      	mov	r1, r3
 8001d02:	483b      	ldr	r0, [pc, #236]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d04:	f00b fc18 	bl	800d538 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001d08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d0c:	4838      	ldr	r0, [pc, #224]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d0e:	f7ff f8a8 	bl	8000e62 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d16:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4834      	ldr	r0, [pc, #208]	@ (8001df4 <MX_ADC1_Init+0x2d8>)
 8001d24:	f00b fb94 	bl	800d450 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_10);
 8001d28:	220a      	movs	r2, #10
 8001d2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d2e:	4830      	ldr	r0, [pc, #192]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d30:	f7ff f861 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d34:	2201      	movs	r2, #1
 8001d36:	210a      	movs	r1, #10
 8001d38:	482d      	ldr	r0, [pc, #180]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d3a:	f7ff f8a5 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8001d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001df8 <MX_ADC1_Init+0x2dc>)
 8001d40:	f240 2105 	movw	r1, #517	@ 0x205
 8001d44:	482a      	ldr	r0, [pc, #168]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d46:	f7ff f856 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	492a      	ldr	r1, [pc, #168]	@ (8001df8 <MX_ADC1_Init+0x2dc>)
 8001d4e:	4828      	ldr	r0, [pc, #160]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d50:	f7ff f89a 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_12);
 8001d54:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <MX_ADC1_Init+0x2e0>)
 8001d56:	f240 210a 	movw	r1, #522	@ 0x20a
 8001d5a:	4825      	ldr	r0, [pc, #148]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d5c:	f7ff f84b 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d60:	2201      	movs	r2, #1
 8001d62:	4926      	ldr	r1, [pc, #152]	@ (8001dfc <MX_ADC1_Init+0x2e0>)
 8001d64:	4822      	ldr	r0, [pc, #136]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d66:	f7ff f88f 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
 8001d6a:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <MX_ADC1_Init+0x2e4>)
 8001d6c:	f240 210f 	movw	r1, #527	@ 0x20f
 8001d70:	481f      	ldr	r0, [pc, #124]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d72:	f7ff f840 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d76:	2201      	movs	r2, #1
 8001d78:	4921      	ldr	r1, [pc, #132]	@ (8001e00 <MX_ADC1_Init+0x2e4>)
 8001d7a:	481d      	ldr	r0, [pc, #116]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d7c:	f7ff f884 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_14);
 8001d80:	4a20      	ldr	r2, [pc, #128]	@ (8001e04 <MX_ADC1_Init+0x2e8>)
 8001d82:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8001d86:	481a      	ldr	r0, [pc, #104]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d88:	f7ff f835 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	491d      	ldr	r1, [pc, #116]	@ (8001e04 <MX_ADC1_Init+0x2e8>)
 8001d90:	4817      	ldr	r0, [pc, #92]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d92:	f7ff f879 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_15);
 8001d96:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <MX_ADC1_Init+0x2ec>)
 8001d98:	f240 2119 	movw	r1, #537	@ 0x219
 8001d9c:	4814      	ldr	r0, [pc, #80]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001d9e:	f7ff f82a 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001da2:	2201      	movs	r2, #1
 8001da4:	4918      	ldr	r1, [pc, #96]	@ (8001e08 <MX_ADC1_Init+0x2ec>)
 8001da6:	4812      	ldr	r0, [pc, #72]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001da8:	f7ff f86e 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_8);
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <MX_ADC1_Init+0x2f0>)
 8001dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db2:	480f      	ldr	r0, [pc, #60]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001db4:	f7ff f81f 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001db8:	2201      	movs	r2, #1
 8001dba:	4914      	ldr	r1, [pc, #80]	@ (8001e0c <MX_ADC1_Init+0x2f0>)
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001dbe:	f7ff f863 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_9);
 8001dc2:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <MX_ADC1_Init+0x2f4>)
 8001dc4:	f240 1105 	movw	r1, #261	@ 0x105
 8001dc8:	4809      	ldr	r0, [pc, #36]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001dca:	f7ff f814 	bl	8000df6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	490f      	ldr	r1, [pc, #60]	@ (8001e10 <MX_ADC1_Init+0x2f4>)
 8001dd2:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <MX_ADC1_Init+0x2d4>)
 8001dd4:	f7ff f858 	bl	8000e88 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3748      	adds	r7, #72	@ 0x48
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40026400 	.word	0x40026400
 8001df0:	40012000 	.word	0x40012000
 8001df4:	40012300 	.word	0x40012300
 8001df8:	0030000b 	.word	0x0030000b
 8001dfc:	0060000c 	.word	0x0060000c
 8001e00:	0090000d 	.word	0x0090000d
 8001e04:	00c0000e 	.word	0x00c0000e
 8001e08:	00f0000f 	.word	0x00f0000f
 8001e0c:	03800008 	.word	0x03800008
 8001e10:	03b00009 	.word	0x03b00009

08001e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	@ 0x38
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001e3e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001e42:	f7ff facb 	bl	80013dc <LL_RCC_SetI2CClockSource>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7ff fb3e 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = SENSOR_SCL_Pin;
 8001e4c:	2340      	movs	r3, #64	@ 0x40
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001e60:	2304      	movs	r3, #4
 8001e62:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SENSOR_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4821      	ldr	r0, [pc, #132]	@ (8001ef0 <MX_I2C1_Init+0xdc>)
 8001e6a:	f00b fcb2 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SENSOR_SDA_Pin;
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e72:	2302      	movs	r3, #2
 8001e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001e82:	2304      	movs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SENSOR_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4819      	ldr	r0, [pc, #100]	@ (8001ef0 <MX_I2C1_Init+0xdc>)
 8001e8c:	f00b fca1 	bl	800d7d2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001e90:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e94:	f7ff fb30 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001e98:	4816      	ldr	r0, [pc, #88]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001e9a:	f7ff f9d9 	bl	8001250 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4814      	ldr	r0, [pc, #80]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001ea4:	f7ff f9ac 	bl	8001200 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001ea8:	4812      	ldr	r0, [pc, #72]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001eaa:	f7ff f9c1 	bl	8001230 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001eae:	4811      	ldr	r0, [pc, #68]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001eb0:	f7ff f996 	bl	80011e0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001eb4:	480f      	ldr	r0, [pc, #60]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001eb6:	f7ff f983 	bl	80011c0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x601063FF;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_I2C1_Init+0xe4>)
 8001ec0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001ede:	f00b fd8f 	bl	800da00 <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001ee2:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <MX_I2C1_Init+0xe0>)
 8001ee4:	f7ff f95c 	bl	80011a0 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3738      	adds	r7, #56	@ 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	601063ff 	.word	0x601063ff

08001efc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	@ 0x38
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 8001f26:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001f2a:	f7ff fa57 	bl	80013dc <LL_RCC_SetI2CClockSource>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff faca 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = EXP_I2C_SCL_Pin;
 8001f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001f42:	2301      	movs	r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4821      	ldr	r0, [pc, #132]	@ (8001fd8 <MX_I2C2_Init+0xdc>)
 8001f54:	f00b fc3d 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_I2C_SDA_Pin;
 8001f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4818      	ldr	r0, [pc, #96]	@ (8001fd8 <MX_I2C2_Init+0xdc>)
 8001f78:	f00b fc2b 	bl	800d7d2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001f7c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001f80:	f7ff faba 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 8001f84:	4815      	ldr	r0, [pc, #84]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001f86:	f7ff f963 	bl	8001250 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4813      	ldr	r0, [pc, #76]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001f90:	f7ff f936 	bl	8001200 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 8001f94:	4811      	ldr	r0, [pc, #68]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001f96:	f7ff f94b 	bl	8001230 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001f9a:	4810      	ldr	r0, [pc, #64]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001f9c:	f7ff f920 	bl	80011e0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001fa0:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001fa2:	f7ff f90d 	bl	80011c0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00C0EAFF;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_I2C2_Init+0xe4>)
 8001fac:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4804      	ldr	r0, [pc, #16]	@ (8001fdc <MX_I2C2_Init+0xe0>)
 8001fca:	f00b fd19 	bl	800da00 <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	3738      	adds	r7, #56	@ 0x38
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40005800 	.word	0x40005800
 8001fe0:	00c0eaff 	.word	0x00c0eaff

08001fe4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	@ 0x40
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	2228      	movs	r2, #40	@ 0x28
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00e fa51 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002008:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800200c:	f7ff fa8c 	bl	8001528 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff fa59 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = EXP_SPI_NSS_Pin;
 8002016:	2310      	movs	r3, #16
 8002018:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800201a:	2302      	movs	r3, #2
 800201c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800202a:	2305      	movs	r3, #5
 800202c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <MX_SPI1_Init+0x110>)
 8002034:	f00b fbcd 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_SCK_Pin;
 8002038:	2320      	movs	r3, #32
 800203a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800203c:	2302      	movs	r3, #2
 800203e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800204c:	2305      	movs	r3, #5
 800204e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4827      	ldr	r0, [pc, #156]	@ (80020f4 <MX_SPI1_Init+0x110>)
 8002056:	f00b fbbc 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_MISO_Pin;
 800205a:	2340      	movs	r3, #64	@ 0x40
 800205c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800205e:	2302      	movs	r3, #2
 8002060:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800206e:	2305      	movs	r3, #5
 8002070:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	481f      	ldr	r0, [pc, #124]	@ (80020f4 <MX_SPI1_Init+0x110>)
 8002078:	f00b fbab 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_SPI_MOSI_Pin;
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002080:	2302      	movs	r3, #2
 8002082:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002090:	2305      	movs	r3, #5
 8002092:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EXP_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4816      	ldr	r0, [pc, #88]	@ (80020f4 <MX_SPI1_Init+0x110>)
 800209a:	f00b fb9a 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80020a2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80020a6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80020a8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80020ac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80020c6:	2307      	movs	r3, #7
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	4619      	mov	r1, r3
 80020d0:	4809      	ldr	r0, [pc, #36]	@ (80020f8 <MX_SPI1_Init+0x114>)
 80020d2:	f00c f86d 	bl	800e1b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80020d6:	2100      	movs	r1, #0
 80020d8:	4807      	ldr	r0, [pc, #28]	@ (80020f8 <MX_SPI1_Init+0x114>)
 80020da:	f7ff faa7 	bl	800162c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <MX_SPI1_Init+0x114>)
 80020e0:	f7ff fab7 	bl	8001652 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80020e4:	4804      	ldr	r0, [pc, #16]	@ (80020f8 <MX_SPI1_Init+0x114>)
 80020e6:	f7ff fa91 	bl	800160c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3740      	adds	r7, #64	@ 0x40
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40013000 	.word	0x40013000

080020fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b090      	sub	sp, #64	@ 0x40
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	2228      	movs	r2, #40	@ 0x28
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f00e f9c5 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002120:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002124:	f7ff f9e8 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002128:	2002      	movs	r0, #2
 800212a:	f7ff f9cd 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = PHOTO_SCK_Pin;
 800212e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002132:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002134:	2302      	movs	r3, #2
 8002136:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002144:	2305      	movs	r3, #5
 8002146:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_SCK_GPIO_Port, &GPIO_InitStruct);
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	@ (80021f0 <MX_SPI2_Init+0xf4>)
 800214e:	f00b fb40 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHOTO_MISO_Pin;
 8002152:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002156:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002158:	2302      	movs	r3, #2
 800215a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002168:	2305      	movs	r3, #5
 800216a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_MISO_GPIO_Port, &GPIO_InitStruct);
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	481f      	ldr	r0, [pc, #124]	@ (80021f0 <MX_SPI2_Init+0xf4>)
 8002172:	f00b fb2e 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = PHOTO_MOSI_Pin;
 8002176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800217a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800217c:	2302      	movs	r3, #2
 800217e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800218c:	2305      	movs	r3, #5
 800218e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PHOTO_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002190:	463b      	mov	r3, r7
 8002192:	4619      	mov	r1, r3
 8002194:	4816      	ldr	r0, [pc, #88]	@ (80021f0 <MX_SPI2_Init+0xf4>)
 8002196:	f00b fb1c 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800219e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80021a2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80021a4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021a8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80021b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80021b8:	2318      	movs	r3, #24
 80021ba:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80021bc:	2300      	movs	r3, #0
 80021be:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80021c4:	2307      	movs	r3, #7
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	4619      	mov	r1, r3
 80021ce:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <MX_SPI2_Init+0xf8>)
 80021d0:	f00b ffee 	bl	800e1b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80021d4:	2100      	movs	r1, #0
 80021d6:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <MX_SPI2_Init+0xf8>)
 80021d8:	f7ff fa28 	bl	800162c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80021dc:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_SPI2_Init+0xf8>)
 80021de:	f7ff fa48 	bl	8001672 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 80021e2:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <MX_SPI2_Init+0xf8>)
 80021e4:	f7ff fa12 	bl	800160c <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3740      	adds	r7, #64	@ 0x40
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40003800 	.word	0x40003800

080021f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b090      	sub	sp, #64	@ 0x40
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	2228      	movs	r2, #40	@ 0x28
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f00e f947 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	463b      	mov	r3, r7
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800221c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002220:	f7ff f96a 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002224:	2004      	movs	r0, #4
 8002226:	f7ff f94f 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = TEC_SCK_Pin;
 800222a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002230:	2302      	movs	r3, #2
 8002232:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002240:	2306      	movs	r3, #6
 8002242:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_SCK_GPIO_Port, &GPIO_InitStruct);
 8002244:	463b      	mov	r3, r7
 8002246:	4619      	mov	r1, r3
 8002248:	4828      	ldr	r0, [pc, #160]	@ (80022ec <MX_SPI3_Init+0xf4>)
 800224a:	f00b fac2 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TEC_MISO_Pin;
 800224e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002252:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002254:	2302      	movs	r3, #2
 8002256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002264:	2306      	movs	r3, #6
 8002266:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_MISO_GPIO_Port, &GPIO_InitStruct);
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	481f      	ldr	r0, [pc, #124]	@ (80022ec <MX_SPI3_Init+0xf4>)
 800226e:	f00b fab0 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = TEC_MOSI_Pin;
 8002272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002276:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002278:	2302      	movs	r3, #2
 800227a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002288:	2306      	movs	r3, #6
 800228a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TEC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	4816      	ldr	r0, [pc, #88]	@ (80022ec <MX_SPI3_Init+0xf4>)
 8002292:	f00b fa9e 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800229a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800229e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80022a0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80022a4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80022b4:	2300      	movs	r3, #0
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80022c0:	2307      	movs	r3, #7
 80022c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80022c4:	f107 0318 	add.w	r3, r7, #24
 80022c8:	4619      	mov	r1, r3
 80022ca:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <MX_SPI3_Init+0xf8>)
 80022cc:	f00b ff70 	bl	800e1b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80022d0:	2100      	movs	r1, #0
 80022d2:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <MX_SPI3_Init+0xf8>)
 80022d4:	f7ff f9aa 	bl	800162c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_SPI3_Init+0xf8>)
 80022da:	f7ff f9ba 	bl	8001652 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 80022de:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <MX_SPI3_Init+0xf8>)
 80022e0:	f7ff f994 	bl	800160c <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	3740      	adds	r7, #64	@ 0x40
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40003c00 	.word	0x40003c00

080022f4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b090      	sub	sp, #64	@ 0x40
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	2228      	movs	r2, #40	@ 0x28
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f00e f8c9 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	463b      	mov	r3, r7
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]
 8002316:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8002318:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800231c:	f7ff f904 	bl	8001528 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002320:	2010      	movs	r0, #16
 8002322:	f7ff f8d1 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE12   ------> SPI4_SCK
  PE13   ------> SPI4_MISO
  PE14   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LASER_SCK_Pin;
 8002326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800232c:	2302      	movs	r3, #2
 800232e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800233c:	2305      	movs	r3, #5
 800233e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_SCK_GPIO_Port, &GPIO_InitStruct);
 8002340:	463b      	mov	r3, r7
 8002342:	4619      	mov	r1, r3
 8002344:	4828      	ldr	r0, [pc, #160]	@ (80023e8 <MX_SPI4_Init+0xf4>)
 8002346:	f00b fa44 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LASER_MISO_Pin;
 800234a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800234e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002350:	2302      	movs	r3, #2
 8002352:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002360:	2305      	movs	r3, #5
 8002362:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_MISO_GPIO_Port, &GPIO_InitStruct);
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	481f      	ldr	r0, [pc, #124]	@ (80023e8 <MX_SPI4_Init+0xf4>)
 800236a:	f00b fa32 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LASER_MOSI_Pin;
 800236e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002372:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002374:	2302      	movs	r3, #2
 8002376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002384:	2305      	movs	r3, #5
 8002386:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LASER_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	4816      	ldr	r0, [pc, #88]	@ (80023e8 <MX_SPI4_Init+0xf4>)
 800238e:	f00b fa20 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002396:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800239a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800239c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023a0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 80023b0:	2328      	movs	r3, #40	@ 0x28
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80023bc:	2307      	movs	r3, #7
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4809      	ldr	r0, [pc, #36]	@ (80023ec <MX_SPI4_Init+0xf8>)
 80023c8:	f00b fef2 	bl	800e1b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 80023cc:	2100      	movs	r1, #0
 80023ce:	4807      	ldr	r0, [pc, #28]	@ (80023ec <MX_SPI4_Init+0xf8>)
 80023d0:	f7ff f92c 	bl	800162c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI4);
 80023d4:	4805      	ldr	r0, [pc, #20]	@ (80023ec <MX_SPI4_Init+0xf8>)
 80023d6:	f7ff f94c 	bl	8001672 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 80023da:	4804      	ldr	r0, [pc, #16]	@ (80023ec <MX_SPI4_Init+0xf8>)
 80023dc:	f7ff f916 	bl	800160c <LL_SPI_Enable>
  /* USER CODE END SPI4_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3740      	adds	r7, #64	@ 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40013400 	.word	0x40013400

080023f0 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b090      	sub	sp, #64	@ 0x40
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80023f6:	f107 0318 	add.w	r3, r7, #24
 80023fa:	2228      	movs	r2, #40	@ 0x28
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f00e f84b 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI6);
 8002414:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002418:	f7ff f886 	bl	8001528 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800241c:	2002      	movs	r0, #2
 800241e:	f7ff f853 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PB3   ------> SPI6_SCK
  PB4   ------> SPI6_MISO
  PB5   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = FRAM_SCK_Pin;
 8002422:	2308      	movs	r3, #8
 8002424:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002426:	2302      	movs	r3, #2
 8002428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002436:	2308      	movs	r3, #8
 8002438:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_SCK_GPIO_Port, &GPIO_InitStruct);
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4828      	ldr	r0, [pc, #160]	@ (80024e0 <MX_SPI6_Init+0xf0>)
 8002440:	f00b f9c7 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FRAM_MISO_Pin;
 8002444:	2310      	movs	r3, #16
 8002446:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002448:	2302      	movs	r3, #2
 800244a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002458:	2308      	movs	r3, #8
 800245a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_MISO_GPIO_Port, &GPIO_InitStruct);
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <MX_SPI6_Init+0xf0>)
 8002462:	f00b f9b6 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FRAM_MOSI_Pin;
 8002466:	2320      	movs	r3, #32
 8002468:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800246a:	2302      	movs	r3, #2
 800246c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800247a:	2308      	movs	r3, #8
 800247c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FRAM_MOSI_GPIO_Port, &GPIO_InitStruct);
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	4817      	ldr	r0, [pc, #92]	@ (80024e0 <MX_SPI6_Init+0xf0>)
 8002484:	f00b f9a5 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800248c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002490:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002492:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002496:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80024a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80024b2:	2307      	movs	r3, #7
 80024b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 80024b6:	f107 0318 	add.w	r3, r7, #24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4809      	ldr	r0, [pc, #36]	@ (80024e4 <MX_SPI6_Init+0xf4>)
 80024be:	f00b fe77 	bl	800e1b0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 80024c2:	2100      	movs	r1, #0
 80024c4:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <MX_SPI6_Init+0xf4>)
 80024c6:	f7ff f8b1 	bl	800162c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 80024ca:	4806      	ldr	r0, [pc, #24]	@ (80024e4 <MX_SPI6_Init+0xf4>)
 80024cc:	f7ff f8c1 	bl	8001652 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <MX_SPI6_Init+0xf4>)
 80024d2:	f7ff f89b 	bl	800160c <LL_SPI_Enable>
  /* USER CODE END SPI6_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	3740      	adds	r7, #64	@ 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40015400 	.word	0x40015400

080024e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b094      	sub	sp, #80	@ 0x50
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2220      	movs	r2, #32
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f00d ffc7 	bl	801049a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800251c:	2004      	movs	r0, #4
 800251e:	f7fe ffeb 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002526:	2300      	movs	r3, #0
 8002528:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 65535;
 800252a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002538:	4619      	mov	r1, r3
 800253a:	4854      	ldr	r0, [pc, #336]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800253c:	f00b ff26 	bl	800e38c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002540:	4852      	ldr	r0, [pc, #328]	@ (800268c <MX_TIM4_Init+0x1a4>)
 8002542:	f7ff f8a6 	bl	8001692 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002546:	2101      	movs	r1, #1
 8002548:	4850      	ldr	r0, [pc, #320]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800254a:	f7ff f905 	bl	8001758 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800254e:	2360      	movs	r3, #96	@ 0x60
 8002550:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800255e:	2300      	movs	r3, #0
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	461a      	mov	r2, r3
 8002568:	2101      	movs	r1, #1
 800256a:	4848      	ldr	r0, [pc, #288]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800256c:	f00b ffa8 	bl	800e4c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8002570:	2101      	movs	r1, #1
 8002572:	4846      	ldr	r0, [pc, #280]	@ (800268c <MX_TIM4_Init+0x1a4>)
 8002574:	f7ff f89e 	bl	80016b4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002578:	2110      	movs	r1, #16
 800257a:	4844      	ldr	r0, [pc, #272]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800257c:	f7ff f8ec 	bl	8001758 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	461a      	mov	r2, r3
 8002586:	2110      	movs	r1, #16
 8002588:	4840      	ldr	r0, [pc, #256]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800258a:	f00b ff99 	bl	800e4c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800258e:	2110      	movs	r1, #16
 8002590:	483e      	ldr	r0, [pc, #248]	@ (800268c <MX_TIM4_Init+0x1a4>)
 8002592:	f7ff f88f 	bl	80016b4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800259a:	483c      	ldr	r0, [pc, #240]	@ (800268c <MX_TIM4_Init+0x1a4>)
 800259c:	f7ff f8dc 	bl	8001758 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025aa:	4838      	ldr	r0, [pc, #224]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025ac:	f00b ff88 	bl	800e4c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 80025b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b4:	4835      	ldr	r0, [pc, #212]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025b6:	f7ff f87d 	bl	80016b4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH4);
 80025ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025be:	4833      	ldr	r0, [pc, #204]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025c0:	f7ff f8ca 	bl	8001758 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	461a      	mov	r2, r3
 80025ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025ce:	482f      	ldr	r0, [pc, #188]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025d0:	f00b ff76 	bl	800e4c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH4);
 80025d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025d8:	482c      	ldr	r0, [pc, #176]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025da:	f7ff f86b 	bl	80016b4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80025de:	2100      	movs	r1, #0
 80025e0:	482a      	ldr	r0, [pc, #168]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025e2:	f7ff f909 	bl	80017f8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80025e6:	4829      	ldr	r0, [pc, #164]	@ (800268c <MX_TIM4_Init+0x1a4>)
 80025e8:	f7ff f919 	bl	800181e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80025ec:	2008      	movs	r0, #8
 80025ee:	f7fe ff6b 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  PD12   ------> TIM4_CH1
  PD13   ------> TIM4_CH2
  PD14   ------> TIM4_CH3
  PD15   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80025f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025f8:	2302      	movs	r3, #2
 80025fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	481f      	ldr	r0, [pc, #124]	@ (8002690 <MX_TIM4_Init+0x1a8>)
 8002612:	f00b f8de 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002616:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800261c:	2302      	movs	r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800262c:	2302      	movs	r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4816      	ldr	r0, [pc, #88]	@ (8002690 <MX_TIM4_Init+0x1a8>)
 8002636:	f00b f8cc 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800263a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800263e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002640:	2302      	movs	r3, #2
 8002642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	4619      	mov	r1, r3
 8002658:	480d      	ldr	r0, [pc, #52]	@ (8002690 <MX_TIM4_Init+0x1a8>)
 800265a:	f00b f8ba 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800265e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002664:	2302      	movs	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4804      	ldr	r0, [pc, #16]	@ (8002690 <MX_TIM4_Init+0x1a8>)
 800267e:	f00b f8a8 	bl	800d7d2 <LL_GPIO_Init>

}
 8002682:	bf00      	nop
 8002684:	3750      	adds	r7, #80	@ 0x50
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40000800 	.word	0x40000800
 8002690:	40020c00 	.word	0x40020c00

08002694 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	@ 0x38
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART7_CLKSOURCE_PCLK1);
 80026be:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 80026c2:	f7fe fe71 	bl	80013a8 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 80026c6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80026ca:	f7fe ff15 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80026ce:	2010      	movs	r0, #16
 80026d0:	f7fe fefa 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = EXP_UART_RX_Pin;
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026d8:	2302      	movs	r3, #2
 80026da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80026e8:	2308      	movs	r3, #8
 80026ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4819      	ldr	r0, [pc, #100]	@ (8002758 <MX_UART7_Init+0xc4>)
 80026f2:	f00b f86e 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = EXP_UART_TX_Pin;
 80026f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026fc:	2302      	movs	r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800270c:	2308      	movs	r3, #8
 800270e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(EXP_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4810      	ldr	r0, [pc, #64]	@ (8002758 <MX_UART7_Init+0xc4>)
 8002716:	f00b f85c 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800271a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800271e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002728:	2300      	movs	r3, #0
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800272c:	230c      	movs	r3, #12
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002734:	2300      	movs	r3, #0
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART7, &USART_InitStruct);
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	4619      	mov	r1, r3
 800273e:	4807      	ldr	r0, [pc, #28]	@ (800275c <MX_UART7_Init+0xc8>)
 8002740:	f00c f9de 	bl	800eb00 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART7);
 8002744:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_UART7_Init+0xc8>)
 8002746:	f7ff f8d5 	bl	80018f4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART7);
 800274a:	4804      	ldr	r0, [pc, #16]	@ (800275c <MX_UART7_Init+0xc8>)
 800274c:	f7ff f877 	bl	800183e <LL_USART_Enable>
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	3738      	adds	r7, #56	@ 0x38
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	40007800 	.word	0x40007800

08002760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08e      	sub	sp, #56	@ 0x38
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800278a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800278e:	f7fe fdf1 	bl	8001374 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002792:	2010      	movs	r0, #16
 8002794:	f7fe fec8 	bl	8001528 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002798:	2001      	movs	r0, #1
 800279a:	f7fe fe95 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  PA12   ------> USART1_DE
  */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 800279e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027a4:	2302      	movs	r3, #2
 80027a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80027b4:	2307      	movs	r3, #7
 80027b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	482a      	ldr	r0, [pc, #168]	@ (8002868 <MX_USART1_UART_Init+0x108>)
 80027be:	f00b f808 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RS485_RX_Pin;
 80027c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027c8:	2302      	movs	r3, #2
 80027ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80027d8:	2307      	movs	r3, #7
 80027da:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4821      	ldr	r0, [pc, #132]	@ (8002868 <MX_USART1_UART_Init+0x108>)
 80027e2:	f00a fff6 	bl	800d7d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RS485_DE_Pin;
 80027e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027ec:	2302      	movs	r3, #2
 80027ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80027fc:	2307      	movs	r3, #7
 80027fe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4818      	ldr	r0, [pc, #96]	@ (8002868 <MX_USART1_UART_Init+0x108>)
 8002806:	f00a ffe4 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800280a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800280e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800281c:	230c      	movs	r3, #12
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002820:	2300      	movs	r3, #0
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	480f      	ldr	r0, [pc, #60]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 8002830:	f00c f966 	bl	800eb00 <LL_USART_Init>
  LL_USART_EnableDEMode(USART1);
 8002834:	480d      	ldr	r0, [pc, #52]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 8002836:	f7ff f83a 	bl	80018ae <LL_USART_EnableDEMode>
  LL_USART_SetDESignalPolarity(USART1, LL_USART_DE_POLARITY_HIGH);
 800283a:	2100      	movs	r1, #0
 800283c:	480b      	ldr	r0, [pc, #44]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 800283e:	f7ff f846 	bl	80018ce <LL_USART_SetDESignalPolarity>
  LL_USART_SetDEAssertionTime(USART1, 0);
 8002842:	2100      	movs	r1, #0
 8002844:	4809      	ldr	r0, [pc, #36]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 8002846:	f7ff f81e 	bl	8001886 <LL_USART_SetDEAssertionTime>
  LL_USART_SetDEDeassertionTime(USART1, 0);
 800284a:	2100      	movs	r1, #0
 800284c:	4807      	ldr	r0, [pc, #28]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 800284e:	f7ff f806 	bl	800185e <LL_USART_SetDEDeassertionTime>
  LL_USART_ConfigAsyncMode(USART1);
 8002852:	4806      	ldr	r0, [pc, #24]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 8002854:	f7ff f84e 	bl	80018f4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002858:	4804      	ldr	r0, [pc, #16]	@ (800286c <MX_USART1_UART_Init+0x10c>)
 800285a:	f7fe fff0 	bl	800183e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	3738      	adds	r7, #56	@ 0x38
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40020000 	.word	0x40020000
 800286c:	40011000 	.word	0x40011000

08002870 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 8002876:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <MX_USART6_UART_Init+0x5c>)
 8002878:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a6:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <MX_USART6_UART_Init+0x58>)
 80028b4:	f009 fd86 	bl	800c3c4 <HAL_UART_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80028be:	f000 fad5 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20004408 	.word	0x20004408
 80028cc:	40011400 	.word	0x40011400

080028d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80028d4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80028d8:	f7fe fdf6 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028dc:	f7fe fa02 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fa52 	bl	8000d90 <NVIC_EncodePriority>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4619      	mov	r1, r3
 80028f0:	2038      	movs	r0, #56	@ 0x38
 80028f2:	f7fe fa23 	bl	8000d3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028f6:	2038      	movs	r0, #56	@ 0x38
 80028f8:	f7fe fa02 	bl	8000d00 <__NVIC_EnableIRQ>

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002906:	463b      	mov	r3, r7
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
 8002914:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002916:	2010      	movs	r0, #16
 8002918:	f7fe fdd6 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800291c:	2004      	movs	r0, #4
 800291e:	f7fe fdd3 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002922:	2080      	movs	r0, #128	@ 0x80
 8002924:	f7fe fdd0 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002928:	2001      	movs	r0, #1
 800292a:	f7fe fdcd 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800292e:	2002      	movs	r0, #2
 8002930:	f7fe fdca 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002934:	2008      	movs	r0, #8
 8002936:	f7fe fdc7 	bl	80014c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TEC_4_SWEN_GPIO_Port, TEC_4_SWEN_Pin);
 800293a:	2104      	movs	r1, #4
 800293c:	48bf      	ldr	r0, [pc, #764]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 800293e:	f7fe fffd 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_3_SWEN_GPIO_Port, TEC_3_SWEN_Pin);
 8002942:	2108      	movs	r1, #8
 8002944:	48bd      	ldr	r0, [pc, #756]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002946:	f7fe fff9 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_2_SWEN_GPIO_Port, TEC_2_SWEN_Pin);
 800294a:	2110      	movs	r1, #16
 800294c:	48bb      	ldr	r0, [pc, #748]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 800294e:	f7fe fff5 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
 8002952:	2120      	movs	r1, #32
 8002954:	48b9      	ldr	r0, [pc, #740]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002956:	f7fe fff1 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
 800295a:	2140      	movs	r1, #64	@ 0x40
 800295c:	48b7      	ldr	r0, [pc, #732]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 800295e:	f7fe ffed 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_2_EN_GPIO_Port, TEC_2_EN_Pin);
 8002962:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002966:	48b6      	ldr	r0, [pc, #728]	@ (8002c40 <MX_GPIO_Init+0x340>)
 8002968:	f7fe ffe8 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_3_EN_GPIO_Port, TEC_3_EN_Pin);
 800296c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002970:	48b3      	ldr	r0, [pc, #716]	@ (8002c40 <MX_GPIO_Init+0x340>)
 8002972:	f7fe ffe3 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEC_4_EN_GPIO_Port, TEC_4_EN_Pin);
 8002976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800297a:	48b1      	ldr	r0, [pc, #708]	@ (8002c40 <MX_GPIO_Init+0x340>)
 800297c:	f7fe ffde 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LASER_DAC_CS_GPIO_Port, LASER_DAC_CS_Pin);
 8002980:	2104      	movs	r1, #4
 8002982:	48b0      	ldr	r0, [pc, #704]	@ (8002c44 <MX_GPIO_Init+0x344>)
 8002984:	f7fe ffda 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LASER_INT_SW_CS_GPIO_Port, LASER_INT_SW_CS_Pin);
 8002988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800298c:	48ab      	ldr	r0, [pc, #684]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 800298e:	f7fe ffd5 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8002992:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002996:	48a9      	ldr	r0, [pc, #676]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002998:	f7fe ffd0 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LASER_EXT_SW_CS_GPIO_Port, LASER_EXT_SW_CS_Pin);
 800299c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a0:	48a6      	ldr	r0, [pc, #664]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 80029a2:	f7fe ffcb 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LASER_DAC_LATCH_GPIO_Port, LASER_DAC_LATCH_Pin);
 80029a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029aa:	48a6      	ldr	r0, [pc, #664]	@ (8002c44 <MX_GPIO_Init+0x344>)
 80029ac:	f7fe ffc6 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PHOTO_SW_CS_GPIO_Port, PHOTO_SW_CS_Pin);
 80029b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029b4:	48a4      	ldr	r0, [pc, #656]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029b6:	f7fe ffc1 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PHOTO_ADC_CS_GPIO_Port, PHOTO_ADC_CS_Pin);
 80029ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029be:	48a2      	ldr	r0, [pc, #648]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029c0:	f7fe ffbc 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(PHOTO_ADC_CONV_GPIO_Port, PHOTO_ADC_CONV_Pin);
 80029c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029c8:	489f      	ldr	r0, [pc, #636]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029ca:	f7fe ffb7 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 80029ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029d2:	489e      	ldr	r0, [pc, #632]	@ (8002c4c <MX_GPIO_Init+0x34c>)
 80029d4:	f7fe ffb2 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 80029d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029dc:	489b      	ldr	r0, [pc, #620]	@ (8002c4c <MX_GPIO_Init+0x34c>)
 80029de:	f7fe ffad 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ADG_MOSI_GPIO_Port, ADG_MOSI_Pin);
 80029e2:	2101      	movs	r1, #1
 80029e4:	4898      	ldr	r0, [pc, #608]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029e6:	f7fe ffa9 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ADG_SCK_GPIO_Port, ADG_SCK_Pin);
 80029ea:	2102      	movs	r1, #2
 80029ec:	4896      	ldr	r0, [pc, #600]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029ee:	f7fe ffa5 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ADG_CS_GPIO_Port, ADG_CS_Pin);
 80029f2:	2104      	movs	r1, #4
 80029f4:	4894      	ldr	r0, [pc, #592]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029f6:	f7fe ffa1 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 80029fa:	2110      	movs	r1, #16
 80029fc:	4892      	ldr	r0, [pc, #584]	@ (8002c48 <MX_GPIO_Init+0x348>)
 80029fe:	f7fe ff9d 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SENSOR1_EN_GPIO_Port, SENSOR1_EN_Pin);
 8002a02:	2120      	movs	r1, #32
 8002a04:	4890      	ldr	r0, [pc, #576]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002a06:	f7fe ff99 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SENSOR2_EN_GPIO_Port, SENSOR2_EN_Pin);
 8002a0a:	2140      	movs	r1, #64	@ 0x40
 8002a0c:	488e      	ldr	r0, [pc, #568]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002a0e:	f7fe ff95 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FRAM_CS_GPIO_Port, FRAM_CS_Pin);
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	488c      	ldr	r0, [pc, #560]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002a16:	f7fe ff91 	bl	800193c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_4_CS_GPIO_Port, TEC_4_CS_Pin);
 8002a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a1e:	4889      	ldr	r0, [pc, #548]	@ (8002c44 <MX_GPIO_Init+0x344>)
 8002a20:	f7fe ff7e 	bl	8001920 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_3_CS_GPIO_Port, TEC_3_CS_Pin);
 8002a24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a28:	4886      	ldr	r0, [pc, #536]	@ (8002c44 <MX_GPIO_Init+0x344>)
 8002a2a:	f7fe ff79 	bl	8001920 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_2_CS_GPIO_Port, TEC_2_CS_Pin);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4882      	ldr	r0, [pc, #520]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002a32:	f7fe ff75 	bl	8001920 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TEC_1_CS_GPIO_Port, TEC_1_CS_Pin);
 8002a36:	2102      	movs	r1, #2
 8002a38:	4880      	ldr	r0, [pc, #512]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002a3a:	f7fe ff71 	bl	8001920 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TEC_4_SWEN_Pin;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a42:	2301      	movs	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_SWEN_GPIO_Port, &GPIO_InitStruct);
 8002a52:	463b      	mov	r3, r7
 8002a54:	4619      	mov	r1, r3
 8002a56:	4879      	ldr	r0, [pc, #484]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002a58:	f00a febb 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_SWEN_Pin;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a60:	2301      	movs	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_SWEN_GPIO_Port, &GPIO_InitStruct);
 8002a70:	463b      	mov	r3, r7
 8002a72:	4619      	mov	r1, r3
 8002a74:	4871      	ldr	r0, [pc, #452]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002a76:	f00a feac 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_SWEN_Pin;
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_SWEN_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	486a      	ldr	r0, [pc, #424]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002a94:	f00a fe9d 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_SWEN_Pin;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_SWEN_GPIO_Port, &GPIO_InitStruct);
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4862      	ldr	r0, [pc, #392]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002ab2:	f00a fe8e 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_EN_Pin;
 8002ab6:	2340      	movs	r3, #64	@ 0x40
 8002ab8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002aba:	2301      	movs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_EN_GPIO_Port, &GPIO_InitStruct);
 8002aca:	463b      	mov	r3, r7
 8002acc:	4619      	mov	r1, r3
 8002ace:	485b      	ldr	r0, [pc, #364]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002ad0:	f00a fe7f 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_EN_Pin;
 8002ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ad8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ada:	2301      	movs	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_EN_GPIO_Port, &GPIO_InitStruct);
 8002aea:	463b      	mov	r3, r7
 8002aec:	4619      	mov	r1, r3
 8002aee:	4854      	ldr	r0, [pc, #336]	@ (8002c40 <MX_GPIO_Init+0x340>)
 8002af0:	f00a fe6f 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_EN_Pin;
 8002af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002af8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002afa:	2301      	movs	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_EN_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	484c      	ldr	r0, [pc, #304]	@ (8002c40 <MX_GPIO_Init+0x340>)
 8002b10:	f00a fe5f 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_EN_Pin;
 8002b14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_EN_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4844      	ldr	r0, [pc, #272]	@ (8002c40 <MX_GPIO_Init+0x340>)
 8002b30:	f00a fe4f 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_DAC_CS_Pin;
 8002b34:	2304      	movs	r3, #4
 8002b36:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002b48:	463b      	mov	r3, r7
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	483d      	ldr	r0, [pc, #244]	@ (8002c44 <MX_GPIO_Init+0x344>)
 8002b4e:	f00a fe40 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_INT_SW_CS_Pin;
 8002b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_INT_SW_CS_GPIO_Port, &GPIO_InitStruct);
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4833      	ldr	r0, [pc, #204]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002b6e:	f00a fe30 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8002b72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 8002b88:	463b      	mov	r3, r7
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	482b      	ldr	r0, [pc, #172]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002b8e:	f00a fe20 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_EXT_SW_CS_Pin;
 8002b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_EXT_SW_CS_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	463b      	mov	r3, r7
 8002baa:	4619      	mov	r1, r3
 8002bac:	4823      	ldr	r0, [pc, #140]	@ (8002c3c <MX_GPIO_Init+0x33c>)
 8002bae:	f00a fe10 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_DAC_LATCH_Pin;
 8002bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LASER_DAC_LATCH_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4619      	mov	r1, r3
 8002bcc:	481d      	ldr	r0, [pc, #116]	@ (8002c44 <MX_GPIO_Init+0x344>)
 8002bce:	f00a fe00 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_SW_CS_Pin;
 8002bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_SW_CS_GPIO_Port, &GPIO_InitStruct);
 8002be8:	463b      	mov	r3, r7
 8002bea:	4619      	mov	r1, r3
 8002bec:	4816      	ldr	r0, [pc, #88]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002bee:	f00a fdf0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_CS_Pin;
 8002bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bf6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480e      	ldr	r0, [pc, #56]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002c0e:	f00a fde0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_CONV_Pin;
 8002c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_CONV_GPIO_Port, &GPIO_InitStruct);
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4806      	ldr	r0, [pc, #24]	@ (8002c48 <MX_GPIO_Init+0x348>)
 8002c2e:	f00a fdd0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PHOTO_ADC_EOC_Pin;
 8002c32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	e00a      	b.n	8002c50 <MX_GPIO_Init+0x350>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(PHOTO_ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 8002c58:	463b      	mov	r3, r7
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	487e      	ldr	r0, [pc, #504]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002c5e:	f00a fdb8 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ_0_Pin;
 8002c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ_0_GPIO_Port, &GPIO_InitStruct);
 8002c70:	463b      	mov	r3, r7
 8002c72:	4619      	mov	r1, r3
 8002c74:	4879      	ldr	r0, [pc, #484]	@ (8002e5c <MX_GPIO_Init+0x55c>)
 8002c76:	f00a fdac 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IRQ_1_Pin;
 8002c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IRQ_1_GPIO_Port, &GPIO_InitStruct);
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4873      	ldr	r0, [pc, #460]	@ (8002e5c <MX_GPIO_Init+0x55c>)
 8002c8e:	f00a fda0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_12_AUX_Pin;
 8002c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_12_AUX_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	486e      	ldr	r0, [pc, #440]	@ (8002e60 <MX_GPIO_Init+0x560>)
 8002ca6:	f00a fd94 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002caa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4866      	ldr	r0, [pc, #408]	@ (8002e60 <MX_GPIO_Init+0x560>)
 8002cc6:	f00a fd84 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8002cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	485e      	ldr	r0, [pc, #376]	@ (8002e60 <MX_GPIO_Init+0x560>)
 8002ce6:	f00a fd74 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_MOSI_Pin;
 8002cea:	2301      	movs	r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	463b      	mov	r3, r7
 8002d00:	4619      	mov	r1, r3
 8002d02:	4855      	ldr	r0, [pc, #340]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d04:	f00a fd65 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_SCK_Pin;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	4619      	mov	r1, r3
 8002d20:	484d      	ldr	r0, [pc, #308]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d22:	f00a fd56 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADG_CS_Pin;
 8002d26:	2304      	movs	r3, #4
 8002d28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADG_CS_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4846      	ldr	r0, [pc, #280]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d40:	f00a fd47 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_5_AUX_Pin;
 8002d44:	2308      	movs	r3, #8
 8002d46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_5_AUX_GPIO_Port, &GPIO_InitStruct);
 8002d50:	463b      	mov	r3, r7
 8002d52:	4619      	mov	r1, r3
 8002d54:	4840      	ldr	r0, [pc, #256]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d56:	f00a fd3c 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EF_5_EN_Pin;
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EF_5_EN_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	463b      	mov	r3, r7
 8002d70:	4619      	mov	r1, r3
 8002d72:	4839      	ldr	r0, [pc, #228]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d74:	f00a fd2d 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SENSOR1_EN_Pin;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SENSOR1_EN_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4831      	ldr	r0, [pc, #196]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002d92:	f00a fd1e 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SENSOR2_EN_Pin;
 8002d96:	2340      	movs	r3, #64	@ 0x40
 8002d98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SENSOR2_EN_GPIO_Port, &GPIO_InitStruct);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	482a      	ldr	r0, [pc, #168]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002db0:	f00a fd0f 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002db8:	2301      	movs	r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4822      	ldr	r0, [pc, #136]	@ (8002e58 <MX_GPIO_Init+0x558>)
 8002dce:	f00a fd00 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_4_CS_Pin;
 8002dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_4_CS_GPIO_Port, &GPIO_InitStruct);
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	481d      	ldr	r0, [pc, #116]	@ (8002e64 <MX_GPIO_Init+0x564>)
 8002dee:	f00a fcf0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_3_CS_Pin;
 8002df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002df6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_3_CS_GPIO_Port, &GPIO_InitStruct);
 8002e08:	463b      	mov	r3, r7
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4815      	ldr	r0, [pc, #84]	@ (8002e64 <MX_GPIO_Init+0x564>)
 8002e0e:	f00a fce0 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_2_CS_Pin;
 8002e12:	2301      	movs	r3, #1
 8002e14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e16:	2301      	movs	r3, #1
 8002e18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_2_CS_GPIO_Port, &GPIO_InitStruct);
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480f      	ldr	r0, [pc, #60]	@ (8002e68 <MX_GPIO_Init+0x568>)
 8002e2c:	f00a fcd1 	bl	800d7d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEC_1_CS_Pin;
 8002e30:	2302      	movs	r3, #2
 8002e32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e34:	2301      	movs	r3, #1
 8002e36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TEC_1_CS_GPIO_Port, &GPIO_InitStruct);
 8002e44:	463b      	mov	r3, r7
 8002e46:	4619      	mov	r1, r3
 8002e48:	4807      	ldr	r0, [pc, #28]	@ (8002e68 <MX_GPIO_Init+0x568>)
 8002e4a:	f00a fcc2 	bl	800d7d2 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40021000 	.word	0x40021000

08002e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <Error_Handler+0x8>

08002e78 <LL_RCC_SetUSARTClockSource>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <LL_RCC_SetUSARTClockSource+0x30>)
 8002e82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4905      	ldr	r1, [pc, #20]	@ (8002ea8 <LL_RCC_SetUSARTClockSource+0x30>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_MspInit+0x44>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <HAL_UART_MspInit+0x94>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d133      	bne.n	8002f7e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */

    LL_RCC_SetUSARTClockSource(LL_RCC_USART6_CLKSOURCE_PCLK2);
 8002f16:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 8002f1a:	f7ff ffad 	bl	8002e78 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	4a1a      	ldr	r2, [pc, #104]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f24:	f043 0320 	orr.w	r3, r3, #32
 8002f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a14      	ldr	r2, [pc, #80]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_UART_MspInit+0x98>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f4e:	23c0      	movs	r3, #192	@ 0xc0
 8002f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f5e:	2308      	movs	r3, #8
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f62:	f107 0314 	add.w	r3, r7, #20
 8002f66:	4619      	mov	r1, r3
 8002f68:	4809      	ldr	r0, [pc, #36]	@ (8002f90 <HAL_UART_MspInit+0x9c>)
 8002f6a:	f008 ff85 	bl	800be78 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2047      	movs	r0, #71	@ 0x47
 8002f74:	f008 feb7 	bl	800bce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f78:	2047      	movs	r0, #71	@ 0x47
 8002f7a:	f008 fed0 	bl	800bd1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	@ 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40011400 	.word	0x40011400
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40020800 	.word	0x40020800

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <NMI_Handler+0x4>

08002f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <MemManage_Handler+0x4>

08002fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SCH_RunSystemTickTimer();
 8002fea:	f005 fdd9 	bl	8008ba0 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fee:	f008 fd7f 	bl	800baf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UART_Driver_ISR(USART6);
 8003008:	4803      	ldr	r0, [pc, #12]	@ (8003018 <USART6_IRQHandler+0x14>)
 800300a:	f000 fe2a 	bl	8003c62 <UART_Driver_ISR>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800300e:	4803      	ldr	r0, [pc, #12]	@ (800301c <USART6_IRQHandler+0x18>)
 8003010:	f009 fa26 	bl	800c460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40011400 	.word	0x40011400
 800301c:	20004408 	.word	0x20004408

08003020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return 1;
 8003024:	2301      	movs	r3, #1
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_kill>:

int _kill(int pid, int sig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800303a:	f00d fac1 	bl	80105c0 <__errno>
 800303e:	4603      	mov	r3, r0
 8003040:	2216      	movs	r2, #22
 8003042:	601a      	str	r2, [r3, #0]
  return -1;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_exit>:

void _exit (int status)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ffe7 	bl	8003030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <_exit+0x12>

08003066 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e00a      	b.n	800308e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003078:	f3af 8000 	nop.w
 800307c:	4601      	mov	r1, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	b2ca      	uxtb	r2, r1
 8003086:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	dbf0      	blt.n	8003078 <_read+0x12>
  }

  return len;
 8003096:	687b      	ldr	r3, [r7, #4]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e009      	b.n	80030c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	60ba      	str	r2, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3301      	adds	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dbf1      	blt.n	80030b2 <_write+0x12>
  }
  return len;
 80030ce:	687b      	ldr	r3, [r7, #4]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_close>:

int _close(int file)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003100:	605a      	str	r2, [r3, #4]
  return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_isatty>:

int _isatty(int file)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	@ (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f00d fa26 	bl	80105c0 <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20080000 	.word	0x20080000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	20004490 	.word	0x20004490
 80031a8:	2001e058 	.word	0x2001e058

080031ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <SystemInit+0x20>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <SystemInit+0x20>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d4:	f7ff ffea 	bl	80031ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d8:	480c      	ldr	r0, [pc, #48]	@ (800320c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031da:	490d      	ldr	r1, [pc, #52]	@ (8003210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031f0:	4c0a      	ldr	r4, [pc, #40]	@ (800321c <LoopFillZerobss+0x22>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80031fe:	f00d f9e5 	bl	80105cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003202:	f7fe fbab 	bl	800195c <main>
  bx  lr    
 8003206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003210:	200043ec 	.word	0x200043ec
  ldr r2, =_sidata
 8003214:	080149b8 	.word	0x080149b8
  ldr r2, =_sbss
 8003218:	200043ec 	.word	0x200043ec
  ldr r4, =_ebss
 800321c:	2001e054 	.word	0x2001e054

08003220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC_IRQHandler>

08003222 <LL_I2C_IsActiveFlag_TXIS>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d101      	bne.n	800323a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_I2C_IsActiveFlag_RXNE>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d101      	bne.n	8003260 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_I2C_IsActiveFlag_STOP>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b20      	cmp	r3, #32
 8003280:	d101      	bne.n	8003286 <LL_I2C_IsActiveFlag_STOP+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_I2C_IsActiveFlag_TC>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d101      	bne.n	80032ac <LL_I2C_IsActiveFlag_TC+0x18>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <LL_I2C_IsActiveFlag_TC+0x1a>
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_I2C_IsActiveFlag_BUSY>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ce:	d101      	bne.n	80032d4 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_I2C_ClearFlag_STOP>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	61da      	str	r2, [r3, #28]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800331e:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8003328:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	4313      	orrs	r3, r2
 8003332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003336:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	0d5b      	lsrs	r3, r3, #21
 8003340:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <LL_I2C_HandleTransfer+0x5c>)
 8003346:	430b      	orrs	r3, r1
 8003348:	43db      	mvns	r3, r3
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	03ff7bff 	.word	0x03ff7bff

08003364 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	b2db      	uxtb	r3, r3
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <I2C_Write>:

#include "i2c.h"


I2C_Status_t I2C_Write(I2C_TypeDef *I2Cx, uint8_t addr, uint8_t reg, uint8_t data)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	70fb      	strb	r3, [r7, #3]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70bb      	strb	r3, [r7, #2]
 80033b2:	4613      	mov	r3, r2
 80033b4:	707b      	strb	r3, [r7, #1]
    uint32_t timeout = I2C_TIMEOUT;
 80033b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ba:	60fb      	str	r3, [r7, #12]

    // Đảm bảo I2C không bận
    while ((LL_I2C_IsActiveFlag_BUSY(I2Cx)) && timeout--);
 80033bc:	bf00      	nop
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff7b 	bl	80032ba <LL_I2C_IsActiveFlag_BUSY>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <I2C_Write+0x38>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e5a      	subs	r2, r3, #1
 80033ce:	60fa      	str	r2, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f4      	bne.n	80033be <I2C_Write+0x22>
    if (timeout == 0) return I2C_Error;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <I2C_Write+0x42>
 80033da:	2301      	movs	r3, #1
 80033dc:	e055      	b.n	800348a <I2C_Write+0xee>

    // Cấu hình CR2: địa chỉ, số byte (2: reg + data), mode write, start
    LL_I2C_HandleTransfer(I2Cx, addr << 1, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	0059      	lsls	r1, r3, #1
 80033e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003494 <I2C_Write+0xf8>)
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2302      	movs	r3, #2
 80033ee:	2200      	movs	r2, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff87 	bl	8003304 <LL_I2C_HandleTransfer>

    // Gửi byte 1: reg
    timeout = I2C_TIMEOUT;
 80033f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033fa:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_TXIS(I2Cx) && timeout--);
 80033fc:	bf00      	nop
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff0f 	bl	8003222 <LL_I2C_IsActiveFlag_TXIS>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <I2C_Write+0x78>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	60fa      	str	r2, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f4      	bne.n	80033fe <I2C_Write+0x62>
    if (timeout == 0) return I2C_Error;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <I2C_Write+0x82>
 800341a:	2301      	movs	r3, #1
 800341c:	e035      	b.n	800348a <I2C_Write+0xee>
    LL_I2C_TransmitData8(I2Cx, reg);
 800341e:	78bb      	ldrb	r3, [r7, #2]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffab 	bl	800337e <LL_I2C_TransmitData8>

    // Gửi byte 2: data
    timeout = I2C_TIMEOUT;
 8003428:	f241 3388 	movw	r3, #5000	@ 0x1388
 800342c:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_TXIS(I2Cx) && timeout--);
 800342e:	bf00      	nop
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fef6 	bl	8003222 <LL_I2C_IsActiveFlag_TXIS>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <I2C_Write+0xaa>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	60fa      	str	r2, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f4      	bne.n	8003430 <I2C_Write+0x94>
    if (timeout == 0) return I2C_Error;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <I2C_Write+0xb4>
 800344c:	2301      	movs	r3, #1
 800344e:	e01c      	b.n	800348a <I2C_Write+0xee>
    LL_I2C_TransmitData8(I2Cx, data);
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff92 	bl	800337e <LL_I2C_TransmitData8>

    // Chờ stop
    timeout = I2C_TIMEOUT;
 800345a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800345e:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_STOP(I2Cx) && timeout--);
 8003460:	bf00      	nop
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ff03 	bl	800326e <LL_I2C_IsActiveFlag_STOP>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <I2C_Write+0xdc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	60fa      	str	r2, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f4      	bne.n	8003462 <I2C_Write+0xc6>
    if (timeout == 0) return I2C_Error;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <I2C_Write+0xe6>
 800347e:	2301      	movs	r3, #1
 8003480:	e003      	b.n	800348a <I2C_Write+0xee>

    // Xóa cờ stop
    LL_I2C_ClearFlag_STOP(I2Cx);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff2d 	bl	80032e2 <LL_I2C_ClearFlag_STOP>

    return I2C_Success;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_ReadMulti>:
    LL_I2C_ClearFlag_STOP(I2Cx);
    return I2C_Success;
}

I2C_Status_t I2C_ReadMulti(I2C_TypeDef *I2Cx, uint8_t addr, uint8_t reg, uint8_t* pData, uint16_t size)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b089      	sub	sp, #36	@ 0x24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	72fb      	strb	r3, [r7, #11]
 80034a6:	4613      	mov	r3, r2
 80034a8:	72bb      	strb	r3, [r7, #10]
    uint32_t timeout = I2C_TIMEOUT;
 80034aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034ae:	617b      	str	r3, [r7, #20]

    // Bước 1: Gửi địa chỉ thanh ghi (phase ghi)
    while (LL_I2C_IsActiveFlag_BUSY(I2Cx) && timeout--);
 80034b0:	bf00      	nop
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ff01 	bl	80032ba <LL_I2C_IsActiveFlag_BUSY>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <I2C_ReadMulti+0x30>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1e5a      	subs	r2, r3, #1
 80034c2:	617a      	str	r2, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f4      	bne.n	80034b2 <I2C_ReadMulti+0x1a>
    if (timeout == 0) return I2C_Error;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <I2C_ReadMulti+0x3a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e081      	b.n	80035d6 <I2C_ReadMulti+0x13e>

    LL_I2C_HandleTransfer(I2Cx, addr << 1, LL_I2C_ADDRSLAVE_7BIT, 1,
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	0059      	lsls	r1, r3, #1
 80034d6:	4b42      	ldr	r3, [pc, #264]	@ (80035e0 <I2C_ReadMulti+0x148>)
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2301      	movs	r3, #1
 80034e0:	2200      	movs	r2, #0
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff0e 	bl	8003304 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);

    timeout = I2C_TIMEOUT;
 80034e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034ec:	617b      	str	r3, [r7, #20]
    while (!LL_I2C_IsActiveFlag_TXIS(I2Cx) && timeout--);
 80034ee:	bf00      	nop
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff fe96 	bl	8003222 <LL_I2C_IsActiveFlag_TXIS>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <I2C_ReadMulti+0x6e>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	617a      	str	r2, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f4      	bne.n	80034f0 <I2C_ReadMulti+0x58>
    if (timeout == 0) return I2C_Error;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <I2C_ReadMulti+0x78>
 800350c:	2301      	movs	r3, #1
 800350e:	e062      	b.n	80035d6 <I2C_ReadMulti+0x13e>

    LL_I2C_TransmitData8(I2Cx, reg);
 8003510:	7abb      	ldrb	r3, [r7, #10]
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff ff32 	bl	800337e <LL_I2C_TransmitData8>

    timeout = I2C_TIMEOUT;
 800351a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800351e:	617b      	str	r3, [r7, #20]
    while (!LL_I2C_IsActiveFlag_TC(I2Cx) && timeout--);  // Chờ truyền xong thanh ghi
 8003520:	bf00      	nop
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff feb6 	bl	8003294 <LL_I2C_IsActiveFlag_TC>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <I2C_ReadMulti+0xa0>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	617a      	str	r2, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f4      	bne.n	8003522 <I2C_ReadMulti+0x8a>
    if (timeout == 0) return I2C_Error;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <I2C_ReadMulti+0xaa>
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <I2C_ReadMulti+0x13e>

    // Bước 2: Đọc nhiều byte
    LL_I2C_HandleTransfer(I2Cx, addr << 1, LL_I2C_ADDRSLAVE_7BIT, size,
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	0059      	lsls	r1, r3, #1
 8003546:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003548:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <I2C_ReadMulti+0x14c>)
 800354a:	9201      	str	r2, [sp, #4]
 800354c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003550:	9200      	str	r2, [sp, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fed5 	bl	8003304 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

    for (uint16_t i = 0; i < size; i++) {
 800355a:	2300      	movs	r3, #0
 800355c:	827b      	strh	r3, [r7, #18]
 800355e:	e01e      	b.n	800359e <I2C_ReadMulti+0x106>
        timeout = I2C_TIMEOUT;
 8003560:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003564:	617b      	str	r3, [r7, #20]
        while (!LL_I2C_IsActiveFlag_RXNE(I2Cx) && timeout--);
 8003566:	bf00      	nop
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fe6d 	bl	8003248 <LL_I2C_IsActiveFlag_RXNE>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <I2C_ReadMulti+0xe6>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	617a      	str	r2, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f4      	bne.n	8003568 <I2C_ReadMulti+0xd0>
        if (timeout == 0) return I2C_Error;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <I2C_ReadMulti+0xf0>
 8003584:	2301      	movs	r3, #1
 8003586:	e026      	b.n	80035d6 <I2C_ReadMulti+0x13e>

        pData[i] = LL_I2C_ReceiveData8(I2Cx);
 8003588:	8a7b      	ldrh	r3, [r7, #18]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	18d4      	adds	r4, r2, r3
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fee8 	bl	8003364 <LL_I2C_ReceiveData8>
 8003594:	4603      	mov	r3, r0
 8003596:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < size; i++) {
 8003598:	8a7b      	ldrh	r3, [r7, #18]
 800359a:	3301      	adds	r3, #1
 800359c:	827b      	strh	r3, [r7, #18]
 800359e:	8a7a      	ldrh	r2, [r7, #18]
 80035a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3dc      	bcc.n	8003560 <I2C_ReadMulti+0xc8>
    }

    // Bước 3: Chờ Stop
    timeout = I2C_TIMEOUT;
 80035a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035aa:	617b      	str	r3, [r7, #20]
    while (!LL_I2C_IsActiveFlag_STOP(I2Cx) && timeout--);
 80035ac:	bf00      	nop
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff fe5d 	bl	800326e <LL_I2C_IsActiveFlag_STOP>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <I2C_ReadMulti+0x12c>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	617a      	str	r2, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f4      	bne.n	80035ae <I2C_ReadMulti+0x116>
    if (timeout == 0) return I2C_Error;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <I2C_ReadMulti+0x136>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e003      	b.n	80035d6 <I2C_ReadMulti+0x13e>

    LL_I2C_ClearFlag_STOP(I2Cx);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fe87 	bl	80032e2 <LL_I2C_ClearFlag_STOP>
    return I2C_Success;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	80002000 	.word	0x80002000
 80035e4:	80002400 	.word	0x80002400

080035e8 <__NVIC_SetPriority>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	@ (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	@ (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800364c:	d301      	bcc.n	8003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <SysTick_Config+0x40>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365a:	210f      	movs	r1, #15
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f7ff ffc2 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <SysTick_Config+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	4b04      	ldr	r3, [pc, #16]	@ (800367c <SysTick_Config+0x40>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <systick_timer_start>:

#include "systick.h"
#include "stm32f7xx.h"

void systick_timer_start(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <systick_timer_start+0x1c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <systick_timer_start+0x1c>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000e010 	.word	0xe000e010

080036a0 <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <systick_timer_init+0x1c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a05      	ldr	r2, [pc, #20]	@ (80036c0 <systick_timer_init+0x20>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ffc3 	bl	800363c <SysTick_Config>
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
    rb->id = id;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3304      	adds	r3, #4
 80036dc:	221f      	movs	r2, #31
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f00c ff10 	bl	8010506 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	332a      	adds	r3, #42	@ 0x2a
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	2300      	movs	r3, #0
 8003702:	82fb      	strh	r3, [r7, #22]
 8003704:	8afa      	ldrh	r2, [r7, #22]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f3bf 8f5b 	dmb	ish
 800370c:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	332c      	adds	r3, #44	@ 0x2c
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	2300      	movs	r3, #0
 8003716:	82bb      	strh	r3, [r7, #20]
 8003718:	8aba      	ldrh	r2, [r7, #20]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f3bf 8f5b 	dmb	ish
 8003720:	801a      	strh	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800372a:	b480      	push	{r7}
 800372c:	b08b      	sub	sp, #44	@ 0x2c
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	332a      	adds	r3, #42	@ 0x2a
 800373a:	623b      	str	r3, [r7, #32]
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	81fb      	strh	r3, [r7, #14]
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	3301      	adds	r3, #1
 8003748:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003750:	429a      	cmp	r2, r3
 8003752:	d101      	bne.n	8003758 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	332c      	adds	r3, #44	@ 0x2c
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f3bf 8f5b 	dmb	ish
 8003766:	b29b      	uxth	r3, r3
 8003768:	81bb      	strh	r3, [r7, #12]
 800376a:	89bb      	ldrh	r3, [r7, #12]
 800376c:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 800376e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003770:	8b7b      	ldrh	r3, [r7, #26]
 8003772:	429a      	cmp	r2, r3
 8003774:	d018      	beq.n	80037a8 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	322a      	adds	r2, #42	@ 0x2a
 800377e:	617a      	str	r2, [r7, #20]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	b292      	uxth	r2, r2
 8003786:	817a      	strh	r2, [r7, #10]
 8003788:	897a      	ldrh	r2, [r7, #10]
 800378a:	4413      	add	r3, r2
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	332a      	adds	r3, #42	@ 0x2a
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	893a      	ldrh	r2, [r7, #8]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f3bf 8f5b 	dmb	ish
 80037a2:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 80037a8:	2300      	movs	r3, #0
    }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	372c      	adds	r7, #44	@ 0x2c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b08b      	sub	sp, #44	@ 0x2c
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	332c      	adds	r3, #44	@ 0x2c
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	827b      	strh	r3, [r7, #18]
 80037ce:	8a7b      	ldrh	r3, [r7, #18]
 80037d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	332a      	adds	r3, #42	@ 0x2a
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	f3bf 8f5b 	dmb	ish
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	823b      	strh	r3, [r7, #16]
 80037e4:	8a3b      	ldrh	r3, [r7, #16]
 80037e6:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 80037e8:	8b7a      	ldrh	r2, [r7, #26]
 80037ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d01c      	beq.n	800382a <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80037f6:	4413      	add	r3, r2
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
        ++tail;
 80037fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003800:	3301      	adds	r3, #1
 8003802:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800380a:	429a      	cmp	r2, r3
 800380c:	d101      	bne.n	8003812 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	332c      	adds	r3, #44	@ 0x2c
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800381a:	81fb      	strh	r3, [r7, #14]
 800381c:	89fa      	ldrh	r2, [r7, #14]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f3bf 8f5b 	dmb	ish
 8003824:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800382a:	2300      	movs	r3, #0
    }
}
 800382c:	4618      	mov	r0, r3
 800382e:	372c      	adds	r7, #44	@ 0x2c
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	@ 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	332a      	adds	r3, #42	@ 0x2a
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	f3bf 8f5b 	dmb	ish
 800384e:	b29b      	uxth	r3, r3
 8003850:	823b      	strh	r3, [r7, #16]
 8003852:	8a3b      	ldrh	r3, [r7, #16]
 8003854:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	332c      	adds	r3, #44	@ 0x2c
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	81fb      	strh	r3, [r7, #14]
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 8003868:	8b7a      	ldrh	r2, [r7, #26]
 800386a:	8a7b      	ldrh	r3, [r7, #18]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	@ 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d101      	bne.n	800389a <LL_USART_IsActiveFlag_FE+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_USART_IsActiveFlag_FE+0x1a>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d101      	bne.n	80038c0 <LL_USART_IsActiveFlag_NE+0x18>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <LL_USART_IsActiveFlag_NE+0x1a>
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d101      	bne.n	80038e6 <LL_USART_IsActiveFlag_ORE+0x18>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_USART_IsActiveFlag_ORE+0x1a>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b20      	cmp	r3, #32
 8003906:	d101      	bne.n	800390c <LL_USART_IsActiveFlag_RXNE+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_USART_IsActiveFlag_RXNE+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b80      	cmp	r3, #128	@ 0x80
 800392c:	d101      	bne.n	8003932 <LL_USART_IsActiveFlag_TXE+0x18>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_USART_IsActiveFlag_TXE+0x1a>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2208      	movs	r2, #8
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800398e:	b480      	push	{r7}
 8003990:	b089      	sub	sp, #36	@ 0x24
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0320 	orr.w	r3, r3, #32
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	61ba      	str	r2, [r7, #24]
 80039b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	613b      	str	r3, [r7, #16]
   return(result);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e9      	bne.n	8003996 <LL_USART_EnableIT_RXNE+0x8>
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	3724      	adds	r7, #36	@ 0x24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	@ 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	61ba      	str	r2, [r7, #24]
 80039f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	613b      	str	r3, [r7, #16]
   return(result);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e9      	bne.n	80039d8 <LL_USART_EnableIT_TXE+0x8>
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b089      	sub	sp, #36	@ 0x24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	61ba      	str	r2, [r7, #24]
 8003a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6979      	ldr	r1, [r7, #20]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e9      	bne.n	8003a1a <LL_USART_DisableIT_TXE+0x8>
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3724      	adds	r7, #36	@ 0x24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d101      	bne.n	8003a6c <LL_USART_IsEnabledIT_RXNE+0x18>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <LL_USART_IsEnabledIT_RXNE+0x1a>
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b80      	cmp	r3, #128	@ 0x80
 8003a8c:	d101      	bne.n	8003a92 <LL_USART_IsEnabledIT_TXE+0x18>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_USART_IsEnabledIT_TXE+0x1a>
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <UART_Driver_Get>:
/*************************************************
 *                  HELPER                       *
 *************************************************/

static UART_Driver_t *UART_Driver_Get(USART_TypeDef *uart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e013      	b.n	8003b0e <UART_Driver_Get+0x36>
    {
        if (uart_drivers[i].uart == uart)
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8003b24 <UART_Driver_Get+0x4c>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2164      	movs	r1, #100	@ 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d106      	bne.n	8003b08 <UART_Driver_Get+0x30>
        {
            return &uart_drivers[i];
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2264      	movs	r2, #100	@ 0x64
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a08      	ldr	r2, [pc, #32]	@ (8003b24 <UART_Driver_Get+0x4c>)
 8003b04:	4413      	add	r3, r2
 8003b06:	e006      	b.n	8003b16 <UART_Driver_Get+0x3e>
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dde8      	ble.n	8003ae6 <UART_Driver_Get+0xe>
        }
    }
    return NULL;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000004 	.word	0x20000004

08003b28 <UART_Driver_Init>:
/*************************************************
 *                    Init                       *
 *************************************************/

Std_ReturnType UART_Driver_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af02      	add	r7, sp, #8
    RingBuffer_Create(&uart_drivers[0].rx_buffer, 1, "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
 8003b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <UART_Driver_Init+0x38>)
 8003b36:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <UART_Driver_Init+0x3c>)
 8003b38:	2101      	movs	r1, #1
 8003b3a:	480b      	ldr	r0, [pc, #44]	@ (8003b68 <UART_Driver_Init+0x40>)
 8003b3c:	f7ff fdc2 	bl	80036c4 <RingBuffer_Create>
    RingBuffer_Create(&uart_drivers[0].tx_buffer, 2, "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);
 8003b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <UART_Driver_Init+0x44>)
 8003b48:	4a09      	ldr	r2, [pc, #36]	@ (8003b70 <UART_Driver_Init+0x48>)
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4809      	ldr	r0, [pc, #36]	@ (8003b74 <UART_Driver_Init+0x4c>)
 8003b4e:	f7ff fdb9 	bl	80036c4 <RingBuffer_Create>

//    LL_USART_EnableIT_ERROR(USART6);
    LL_USART_EnableIT_RXNE(USART6);
 8003b52:	4809      	ldr	r0, [pc, #36]	@ (8003b78 <UART_Driver_Init+0x50>)
 8003b54:	f7ff ff1b 	bl	800398e <LL_USART_EnableIT_RXNE>

    return E_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20004494 	.word	0x20004494
 8003b64:	08012e98 	.word	0x08012e98
 8003b68:	20000008 	.word	0x20000008
 8003b6c:	20004894 	.word	0x20004894
 8003b70:	08012ea4 	.word	0x08012ea4
 8003b74:	20000038 	.word	0x20000038
 8003b78:	40011400 	.word	0x40011400

08003b7c <UART_Driver_Read>:
/*************************************************
 *                     API                       *
 *************************************************/

int UART_Driver_Read(USART_TypeDef *uart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffa7 	bl	8003ad8 <UART_Driver_Get>
 8003b8a:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <UART_Driver_Read+0x1c>
        return -1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e00e      	b.n	8003bb6 <UART_Driver_Read+0x3a>

    RingBufElement data;
    if (RingBuffer_Get(&driver->rx_buffer, &data))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	f107 020b 	add.w	r2, r7, #11
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fe07 	bl	80037b6 <RingBuffer_Get>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <UART_Driver_Read+0x36>
    {
        return data;
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	e001      	b.n	8003bb6 <UART_Driver_Read+0x3a>
    }
    return -1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70fb      	strb	r3, [r7, #3]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff84 	bl	8003ad8 <UART_Driver_Get>
 8003bd0:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d011      	beq.n	8003bfc <UART_Driver_Write+0x3e>
        return;

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8003bd8:	bf00      	nop
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3334      	adds	r3, #52	@ 0x34
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fda1 	bl	800372a <RingBuffer_Put>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f2      	bne.n	8003bda <UART_Driver_Write+0x1c>
    {
        // vTaskDelay(pdMS_TO_TICKS(1));
    }
    LL_USART_EnableIT_TXE(uart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff feeb 	bl	80039d0 <LL_USART_EnableIT_TXE>
 8003bfa:	e000      	b.n	8003bfe <UART_Driver_Write+0x40>
        return;
 8003bfc:	bf00      	nop
}
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_Driver_SendString>:

void UART_Driver_SendString(USART_TypeDef *uart, const char *str)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
    while (*str)
 8003c0e:	e008      	b.n	8003c22 <UART_Driver_SendString+0x1e>
    {
        UART_Driver_Write(uart, (uint8_t)(*str));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffd1 	bl	8003bbe <UART_Driver_Write>
        str++;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	603b      	str	r3, [r7, #0]
    while (*str)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f2      	bne.n	8003c10 <UART_Driver_SendString+0xc>
    }
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UART_Driver_IsDataAvailable>:

_Bool UART_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff4b 	bl	8003ad8 <UART_Driver_Get>
 8003c42:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <UART_Driver_IsDataAvailable+0x1a>
        return false;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e005      	b.n	8003c5a <UART_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fdf0 	bl	8003838 <RingBuffer_IsDataAvailable>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Driver_ISR>:
    UART_Driver_FlushRx(uart);
    UART_Driver_FlushTx(uart);
}

void UART_Driver_ISR(USART_TypeDef *uart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff34 	bl	8003ad8 <UART_Driver_Get>
 8003c70:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d053      	beq.n	8003d20 <UART_Driver_ISR+0xbe>
        return;

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fe3b 	bl	80038f4 <LL_USART_IsActiveFlag_RXNE>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02c      	beq.n	8003cde <UART_Driver_ISR+0x7c>
        (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fee5 	bl	8003a54 <LL_USART_IsEnabledIT_RXNE>
 8003c8a:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d026      	beq.n	8003cde <UART_Driver_ISR+0x7c>
    {
        uint8_t data = LL_USART_ReceiveData8(uart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff05 	bl	8003aa0 <LL_USART_ReceiveData8>
 8003c96:	4603      	mov	r3, r0
 8003c98:	72fb      	strb	r3, [r7, #11]

        if (LL_USART_IsActiveFlag_ORE(uart))
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fe17 	bl	80038ce <LL_USART_IsActiveFlag_ORE>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <UART_Driver_ISR+0x4a>
        {
            LL_USART_ClearFlag_ORE(uart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fe64 	bl	8003974 <LL_USART_ClearFlag_ORE>
        }
        if (LL_USART_IsActiveFlag_FE(uart))
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fde8 	bl	8003882 <LL_USART_IsActiveFlag_FE>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <UART_Driver_ISR+0x5c>
        {
            LL_USART_ClearFlag_FE(uart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fe41 	bl	8003940 <LL_USART_ClearFlag_FE>
        }
        if (LL_USART_IsActiveFlag_NE(uart))
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fdf2 	bl	80038a8 <LL_USART_IsActiveFlag_NE>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <UART_Driver_ISR+0x6e>
        {
            LL_USART_ClearFlag_NE(uart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fe45 	bl	800395a <LL_USART_ClearFlag_NE>
        }
        RingBuffer_Put(&driver->rx_buffer, data);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	7afa      	ldrb	r2, [r7, #11]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fd26 	bl	800372a <RingBuffer_Put>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fe1b 	bl	800391a <LL_USART_IsActiveFlag_TXE>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01b      	beq.n	8003d22 <UART_Driver_ISR+0xc0>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fec5 	bl	8003a7a <LL_USART_IsEnabledIT_TXE>
 8003cf0:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d015      	beq.n	8003d22 <UART_Driver_ISR+0xc0>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3334      	adds	r3, #52	@ 0x34
 8003cfa:	f107 020a 	add.w	r2, r7, #10
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fd58 	bl	80037b6 <RingBuffer_Get>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <UART_Driver_ISR+0xb6>
        {
            LL_USART_TransmitData8(uart, tx_data);
 8003d0c:	7abb      	ldrb	r3, [r7, #10]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fed2 	bl	8003aba <LL_USART_TransmitData8>
 8003d16:	e004      	b.n	8003d22 <UART_Driver_ISR+0xc0>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fe7a 	bl	8003a12 <LL_USART_DisableIT_TXE>
 8003d1e:	e000      	b.n	8003d22 <UART_Driver_ISR+0xc0>
        return;
 8003d20:	bf00      	nop
        }
    }
}
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <__NVIC_SystemReset>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003d2c:	f3bf 8f4f 	dsb	sy
}
 8003d30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <__NVIC_SystemReset+0x24>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d3a:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <__NVIC_SystemReset+0x24>)
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <__NVIC_SystemReset+0x28>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d42:	f3bf 8f4f 	dsb	sy
}
 8003d46:	bf00      	nop
    __NOP();
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <__NVIC_SystemReset+0x20>
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	05fa0004 	.word	0x05fa0004

08003d54 <LL_GPIO_SetOutputPin>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	619a      	str	r2, [r3, #24]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_GPIO_ResetOutputPin>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	041a      	lsls	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	619a      	str	r2, [r3, #24]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_TIM_EnableCounter>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_TIM_DisableCounter>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_TIM_SetCounter>:
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_TIM_SetAutoReload>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60da      	str	r2, [r3, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <Map>:
 *                Command Define                 *
 *************************************************/
#define ROUND(x) ((x) >= 0 ? (int)(x + 0.5) : (int)(x - 0.5))

static int32_t Map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	1a8a      	subs	r2, r1, r2
 8003e60:	fb03 f202 	mul.w	r2, r3, r2
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1acb      	subs	r3, r1, r3
 8003e6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	4413      	add	r3, r2
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <crc16_CCITT_update>:

static void crc16_CCITT_update(uint16_t *crc, uint16_t data)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
    uint8_t bytes[2] = {data >> 8, data & 0xFF};
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	733b      	strb	r3, [r7, #12]
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	737b      	strb	r3, [r7, #13]
    for (uint8_t i = 0; i < 2; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e031      	b.n	8003f04 <crc16_CCITT_update+0x86>
    {
        *crc ^= bytes[i] << 8;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	443b      	add	r3, r7
 8003eac:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	4053      	eors	r3, r2
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73bb      	strb	r3, [r7, #14]
 8003ec4:	e018      	b.n	8003ef8 <crc16_CCITT_update+0x7a>
            *crc = (*crc & 0x8000) ? (*crc << 1) ^ 0x1021 : *crc << 1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b21b      	sxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da0a      	bge.n	8003ee6 <crc16_CCITT_update+0x68>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003ede:	4053      	eors	r3, r2
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	e003      	b.n	8003eee <crc16_CCITT_update+0x70>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++)
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	73bb      	strb	r3, [r7, #14]
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d9e3      	bls.n	8003ec6 <crc16_CCITT_update+0x48>
    for (uint8_t i = 0; i < 2; i++)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	3301      	adds	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d9ca      	bls.n	8003ea0 <crc16_CCITT_update+0x22>
    }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <htoa>:

static void htoa(uint16_t hex_value, char *output)
{
 8003f18:	b4b0      	push	{r4, r5, r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	80fb      	strh	r3, [r7, #6]
    const char hex_chars[] = "0123456789ABCDEF";
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <htoa+0x88>)
 8003f26:	f107 040c 	add.w	r4, r7, #12
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	7023      	strb	r3, [r4, #0]
    output[0] = hex_chars[(hex_value >> 12) & 0x0F];
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	0b1b      	lsrs	r3, r3, #12
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3320      	adds	r3, #32
 8003f40:	443b      	add	r3, r7
 8003f42:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
    output[1] = hex_chars[(hex_value >> 8) & 0x0F];
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	3220      	adds	r2, #32
 8003f5a:	443a      	add	r2, r7
 8003f5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003f60:	701a      	strb	r2, [r3, #0]
    output[2] = hex_chars[(hex_value >> 4) & 0x0F];
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	3302      	adds	r3, #2
 8003f70:	3220      	adds	r2, #32
 8003f72:	443a      	add	r2, r7
 8003f74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003f78:	701a      	strb	r2, [r3, #0]
    output[3] = hex_chars[hex_value & 0x0F];
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	3303      	adds	r3, #3
 8003f84:	3220      	adds	r2, #32
 8003f86:	443a      	add	r2, r7
 8003f88:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003f8c:	701a      	strb	r2, [r3, #0]
    output[4] = ' ';
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2220      	movs	r2, #32
 8003f94:	701a      	strb	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bcb0      	pop	{r4, r5, r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	08012eb0 	.word	0x08012eb0

08003fa4 <CLI_Command_Init>:
};

/*************************************************
 *             Command List Function             *
 *************************************************/
void CLI_Command_Init(USART_TypeDef *handle_uart) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	SystemCLI_Init();
 8003fac:	f002 f8ca 	bl	8006144 <SystemCLI_Init>
	UART_Driver_SendString(handle_uart, "\r\nEXP_V110:~ HELLO! $ \r\n");
 8003fb0:	4903      	ldr	r1, [pc, #12]	@ (8003fc0 <CLI_Command_Init+0x1c>)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe26 	bl	8003c04 <UART_Driver_SendString>
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	080137f4 	.word	0x080137f4

08003fc4 <CLI_Command_CreateTask>:

void CLI_Command_CreateTask(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CLI_CommandTaskContext.taskHandle, &s_CLI_CommandTaskContext.taskProperty);
 8003fc8:	4902      	ldr	r1, [pc, #8]	@ (8003fd4 <CLI_Command_CreateTask+0x10>)
 8003fca:	4803      	ldr	r0, [pc, #12]	@ (8003fd8 <CLI_Command_CreateTask+0x14>)
 8003fcc:	f004 fda8 	bl	8008b20 <SCH_TASK_CreateTask>
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	200000fc 	.word	0x200000fc
 8003fd8:	200000f8 	.word	0x200000f8

08003fdc <CLI_Command_Task_Update>:

static void CLI_Command_Task_Update(void) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
	char rxData;
	if (UART_Driver_IsDataAvailable(EXP_UART_CONSOLE_HANDLE)) {
 8003fe2:	480e      	ldr	r0, [pc, #56]	@ (800401c <CLI_Command_Task_Update+0x40>)
 8003fe4:	f7ff fe26 	bl	8003c34 <UART_Driver_IsDataAvailable>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <CLI_Command_Task_Update+0x38>
		rxData = UART_Driver_Read(EXP_UART_CONSOLE_HANDLE);
 8003fee:	480b      	ldr	r0, [pc, #44]	@ (800401c <CLI_Command_Task_Update+0x40>)
 8003ff0:	f7ff fdc4 	bl	8003b7c <UART_Driver_Read>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	71fb      	strb	r3, [r7, #7]
		embeddedCliReceiveChar(get_EXPConsole_CliPointer(), (char)rxData);
 8003ff8:	f002 f8f0 	bl	80061dc <get_EXPConsole_CliPointer>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f002 f9e0 	bl	80063c8 <embeddedCliReceiveChar>
		embeddedCliProcess(get_EXPConsole_CliPointer());
 8004008:	f002 f8e8 	bl	80061dc <get_EXPConsole_CliPointer>
 800400c:	4603      	mov	r3, r0
 800400e:	4618      	mov	r0, r3
 8004010:	f002 f9fd 	bl	800640e <embeddedCliProcess>
	}
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40011400 	.word	0x40011400

08004020 <CMD_Clear_CLI>:
static void CMD_Clear_CLI(EmbeddedCli *cli, char *args, void *context) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <CMD_Clear_CLI+0x30>)
 8004032:	210a      	movs	r1, #10
 8004034:	4618      	mov	r0, r3
 8004036:	f00c f97b 	bl	8010330 <sniprintf>
    embeddedCliPrint(cli, buffer);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f002 fa75 	bl	8006530 <embeddedCliPrint>
}
 8004046:	bf00      	nop
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08013810 	.word	0x08013810

08004054 <CMD_Reset>:

static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8004060:	f7ff fe62 	bl	8003d28 <__NVIC_SystemReset>

08004064 <CMD_NTC_Get_Temp>:
    embeddedCliPrint(cli, "");
}

static void CMD_NTC_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b0a2      	sub	sp, #136	@ 0x88
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
    // TODO: Implement NTC temperature get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004070:	2101      	movs	r1, #1
 8004072:	68b8      	ldr	r0, [r7, #8]
 8004074:	f002 fb1e 	bl	80066b4 <embeddedCliGetToken>
 8004078:	67b8      	str	r0, [r7, #120]	@ 0x78
	if (*arg1 == 'a' || *arg1 == '\0') {
 800407a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b61      	cmp	r3, #97	@ 0x61
 8004080:	d003      	beq.n	800408a <CMD_NTC_Get_Temp+0x26>
 8004082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d16c      	bne.n	8004164 <CMD_NTC_Get_Temp+0x100>
		int16_t temp = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		char buffer[80] = "ntc:";
 8004090:	4b5e      	ldr	r3, [pc, #376]	@ (800420c <CMD_NTC_Get_Temp+0x1a8>)
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	224c      	movs	r2, #76	@ 0x4c
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f00c f9fc 	bl	801049a <memset>
		char tempo_buf[10];
		NTC_get_temperature(NTC_Temperature);
 80040a2:	485b      	ldr	r0, [pc, #364]	@ (8004210 <CMD_NTC_Get_Temp+0x1ac>)
 80040a4:	f007 f82a 	bl	800b0fc <NTC_get_temperature>
		for (uint8_t channel = 0; channel < 8; channel++) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80040ae:	e029      	b.n	8004104 <CMD_NTC_Get_Temp+0xa0>
			temp = NTC_Temperature[channel];
 80040b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80040b4:	4a56      	ldr	r2, [pc, #344]	@ (8004210 <CMD_NTC_Get_Temp+0x1ac>)
 80040b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ba:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
			if (temp == 0x7FFF) {
 80040be:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 80040c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d107      	bne.n	80040da <CMD_NTC_Get_Temp+0x76>
				snprintf(tempo_buf, sizeof(tempo_buf), "f ");
 80040ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ce:	4a51      	ldr	r2, [pc, #324]	@ (8004214 <CMD_NTC_Get_Temp+0x1b0>)
 80040d0:	210a      	movs	r1, #10
 80040d2:	4618      	mov	r0, r3
 80040d4:	f00c f92c 	bl	8010330 <sniprintf>
 80040d8:	e007      	b.n	80040ea <CMD_NTC_Get_Temp+0x86>
			} else {
				snprintf(tempo_buf, sizeof(tempo_buf), "%i ", temp);
 80040da:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 80040de:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80040e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004218 <CMD_NTC_Get_Temp+0x1b4>)
 80040e4:	210a      	movs	r1, #10
 80040e6:	f00c f923 	bl	8010330 <sniprintf>
			}
			strcat(buffer, tempo_buf);
 80040ea:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80040ee:	f107 0310 	add.w	r3, r7, #16
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f00c f9d8 	bl	80104aa <strcat>
		for (uint8_t channel = 0; channel < 8; channel++) {
 80040fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80040fe:	3301      	adds	r3, #1
 8004100:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004104:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004108:	2b07      	cmp	r3, #7
 800410a:	d9d1      	bls.n	80040b0 <CMD_NTC_Get_Temp+0x4c>
		}

		size_t len = strlen(buffer);
 800410c:	f107 0310 	add.w	r3, r7, #16
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc f8f5 	bl	8000300 <strlen>
 8004116:	66f8      	str	r0, [r7, #108]	@ 0x6c
		if (len >= 1 && buffer[len - 1] == ' ') {
 8004118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <CMD_NTC_Get_Temp+0xd8>
 800411e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004120:	3b01      	subs	r3, #1
 8004122:	3380      	adds	r3, #128	@ 0x80
 8004124:	443b      	add	r3, r7
 8004126:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d106      	bne.n	800413c <CMD_NTC_Get_Temp+0xd8>
		    buffer[len - 1] = '\0';
 800412e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004130:	3b01      	subs	r3, #1
 8004132:	3380      	adds	r3, #128	@ 0x80
 8004134:	443b      	add	r3, r7
 8004136:	2200      	movs	r2, #0
 8004138:	f803 2c70 	strb.w	r2, [r3, #-112]
		}

		strcat(buffer, "(C)");
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc f8dd 	bl	8000300 <strlen>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	4413      	add	r3, r2
 8004150:	4a32      	ldr	r2, [pc, #200]	@ (800421c <CMD_NTC_Get_Temp+0x1b8>)
 8004152:	6810      	ldr	r0, [r2, #0]
 8004154:	6018      	str	r0, [r3, #0]
		embeddedCliPrint(cli, buffer);
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f002 f9e7 	bl	8006530 <embeddedCliPrint>
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004162:	e04a      	b.n	80041fa <CMD_NTC_Get_Temp+0x196>
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3' || *arg1 == '4' || *arg1 == '5' || *arg1 == '6' || *arg1 == '7') {
 8004164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b30      	cmp	r3, #48	@ 0x30
 800416a:	d01b      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 800416c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b31      	cmp	r3, #49	@ 0x31
 8004172:	d017      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 8004174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b32      	cmp	r3, #50	@ 0x32
 800417a:	d013      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 800417c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b33      	cmp	r3, #51	@ 0x33
 8004182:	d00f      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 8004184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b34      	cmp	r3, #52	@ 0x34
 800418a:	d00b      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 800418c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b35      	cmp	r3, #53	@ 0x35
 8004192:	d007      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 8004194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b36      	cmp	r3, #54	@ 0x36
 800419a:	d003      	beq.n	80041a4 <CMD_NTC_Get_Temp+0x140>
 800419c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b37      	cmp	r3, #55	@ 0x37
 80041a2:	d12a      	bne.n	80041fa <CMD_NTC_Get_Temp+0x196>
		int channel = atoi(arg1);
 80041a4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80041a6:	f00a fd84 	bl	800ecb2 <atoi>
 80041aa:	6778      	str	r0, [r7, #116]	@ 0x74
		char buffer[80];
		NTC_get_temperature(NTC_Temperature);
 80041ac:	4818      	ldr	r0, [pc, #96]	@ (8004210 <CMD_NTC_Get_Temp+0x1ac>)
 80041ae:	f006 ffa5 	bl	800b0fc <NTC_get_temperature>
		int16_t temp = NTC_Temperature[channel];
 80041b2:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <CMD_NTC_Get_Temp+0x1ac>)
 80041b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ba:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
		if (temp == 0x7FFF) {
 80041be:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80041c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d107      	bne.n	80041da <CMD_NTC_Get_Temp+0x176>
			snprintf(buffer, sizeof(buffer), "ntc[%d]:f", channel);
 80041ca:	f107 0010 	add.w	r0, r7, #16
 80041ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d0:	4a13      	ldr	r2, [pc, #76]	@ (8004220 <CMD_NTC_Get_Temp+0x1bc>)
 80041d2:	2150      	movs	r1, #80	@ 0x50
 80041d4:	f00c f8ac 	bl	8010330 <sniprintf>
 80041d8:	e009      	b.n	80041ee <CMD_NTC_Get_Temp+0x18a>
		} else {
			snprintf(buffer, sizeof(buffer), "ntc[%d]:%i(C)", channel, temp);
 80041da:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80041de:	f107 0010 	add.w	r0, r7, #16
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004224 <CMD_NTC_Get_Temp+0x1c0>)
 80041e8:	2150      	movs	r1, #80	@ 0x50
 80041ea:	f00c f8a1 	bl	8010330 <sniprintf>
		}
		embeddedCliPrint(cli, buffer);
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	4619      	mov	r1, r3
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f002 f99b 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 80041fa:	490b      	ldr	r1, [pc, #44]	@ (8004228 <CMD_NTC_Get_Temp+0x1c4>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f002 f997 	bl	8006530 <embeddedCliPrint>
}
 8004202:	bf00      	nop
 8004204:	3780      	adds	r7, #128	@ 0x80
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	3a63746e 	.word	0x3a63746e
 8004210:	2001def0 	.word	0x2001def0
 8004214:	08013818 	.word	0x08013818
 8004218:	0801381c 	.word	0x0801381c
 800421c:	08013820 	.word	0x08013820
 8004220:	08013824 	.word	0x08013824
 8004224:	08013830 	.word	0x08013830
 8004228:	08013840 	.word	0x08013840

0800422c <CMD_PWR_5V_Set>:

static void CMD_PWR_5V_Set(EmbeddedCli *cli, char *args, void *context) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004238:	2101      	movs	r1, #1
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f002 fa3a 	bl	80066b4 <embeddedCliGetToken>
 8004240:	6178      	str	r0, [r7, #20]
	s_Temperature_CurrentState.Pwr_status = (uint8_t)atoi(arg1);
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f00a fd35 	bl	800ecb2 <atoi>
 8004248:	4603      	mov	r3, r0
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <CMD_PWR_5V_Set+0x60>)
 800424e:	701a      	strb	r2, [r3, #0]
	if (s_Temperature_CurrentState.Pwr_status) {
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <CMD_PWR_5V_Set+0x60>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <CMD_PWR_5V_Set+0x3e>
		LL_GPIO_SetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 8004258:	2110      	movs	r1, #16
 800425a:	480d      	ldr	r0, [pc, #52]	@ (8004290 <CMD_PWR_5V_Set+0x64>)
 800425c:	f7ff fd7a 	bl	8003d54 <LL_GPIO_SetOutputPin>
		embeddedCliPrint(cli, "Pwr 5V: on");
 8004260:	490c      	ldr	r1, [pc, #48]	@ (8004294 <CMD_PWR_5V_Set+0x68>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f002 f964 	bl	8006530 <embeddedCliPrint>
 8004268:	e007      	b.n	800427a <CMD_PWR_5V_Set+0x4e>
	}
	else {
		LL_GPIO_ResetOutputPin(EF_5_EN_GPIO_Port, EF_5_EN_Pin);
 800426a:	2110      	movs	r1, #16
 800426c:	4808      	ldr	r0, [pc, #32]	@ (8004290 <CMD_PWR_5V_Set+0x64>)
 800426e:	f7ff fd7f 	bl	8003d70 <LL_GPIO_ResetOutputPin>
		embeddedCliPrint(cli, "Pwr 5V: off");
 8004272:	4909      	ldr	r1, [pc, #36]	@ (8004298 <CMD_PWR_5V_Set+0x6c>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f002 f95b 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 800427a:	4908      	ldr	r1, [pc, #32]	@ (800429c <CMD_PWR_5V_Set+0x70>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f002 f957 	bl	8006530 <embeddedCliPrint>
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200041c0 	.word	0x200041c0
 8004290:	40020c00 	.word	0x40020c00
 8004294:	08013844 	.word	0x08013844
 8004298:	08013850 	.word	0x08013850
 800429c:	08013840 	.word	0x08013840

080042a0 <CMD_PWR_5V_Get>:

static void CMD_PWR_5V_Get(EmbeddedCli *cli, char *args, void *context) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	if (s_Temperature_CurrentState.Pwr_status) {
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <CMD_PWR_5V_Get+0x38>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <CMD_PWR_5V_Get+0x1e>
		embeddedCliPrint(cli, "Pwr 5V: on");
 80042b4:	4909      	ldr	r1, [pc, #36]	@ (80042dc <CMD_PWR_5V_Get+0x3c>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f002 f93a 	bl	8006530 <embeddedCliPrint>
 80042bc:	e003      	b.n	80042c6 <CMD_PWR_5V_Get+0x26>
	}
	else {
		embeddedCliPrint(cli, "Pwr 5V: off");
 80042be:	4908      	ldr	r1, [pc, #32]	@ (80042e0 <CMD_PWR_5V_Get+0x40>)
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f002 f935 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 80042c6:	4907      	ldr	r1, [pc, #28]	@ (80042e4 <CMD_PWR_5V_Get+0x44>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f002 f931 	bl	8006530 <embeddedCliPrint>
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200041c0 	.word	0x200041c0
 80042dc:	08013844 	.word	0x08013844
 80042e0:	08013850 	.word	0x08013850
 80042e4:	08013840 	.word	0x08013840

080042e8 <CMD_TEC_Init>:

static void CMD_TEC_Init(EmbeddedCli *cli, char *args, void *context) {
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b09d      	sub	sp, #116	@ 0x74
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC initialization logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80042f4:	2101      	movs	r1, #1
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f002 f9dc 	bl	80066b4 <embeddedCliGetToken>
 80042fc:	66b8      	str	r0, [r7, #104]	@ 0x68
	char buffer[60];
	int8_t tec_init_channel = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	struct lt8722_dev *p_tec_dev;
	struct lt8722_dev *p_tec_dev_table[] = {&tec_0, &tec_1, &tec_2, &tec_3};
 8004304:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <CMD_TEC_Init+0x148>)
 8004306:	f107 0410 	add.w	r4, r7, #16
 800430a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800430c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b61      	cmp	r3, #97	@ 0x61
 8004316:	d003      	beq.n	8004320 <CMD_TEC_Init+0x38>
 8004318:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13d      	bne.n	800439c <CMD_TEC_Init+0xb4>
		/* Init TEC 0 -> 3 */
		for (uint8_t channel = 0; channel < 4; channel++) {
 8004320:	2300      	movs	r3, #0
 8004322:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004326:	e034      	b.n	8004392 <CMD_TEC_Init+0xaa>
			p_tec_dev = p_tec_dev_table[channel];
 8004328:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	3370      	adds	r3, #112	@ 0x70
 8004330:	443b      	add	r3, r7
 8004332:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8004336:	65fb      	str	r3, [r7, #92]	@ 0x5c
			tec_init_channel = lt8722_init(p_tec_dev);
 8004338:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800433a:	f006 faf1 	bl	800a920 <lt8722_init>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			LL_mDelay(10);
 8004344:	200a      	movs	r0, #10
 8004346:	f00a fc7b 	bl	800ec40 <LL_mDelay>
			// if init is success
			if (!tec_init_channel) {
 800434a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <CMD_TEC_Init+0x84>
				lt8722_set_swen_req(p_tec_dev, LT8722_SWEN_REQ_DISABLED);
 8004352:	2100      	movs	r1, #0
 8004354:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004356:	f006 fa97 	bl	800a888 <lt8722_set_swen_req>
				snprintf(buffer, sizeof(buffer), "Tec %d init success", channel);
 800435a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800435e:	f107 0020 	add.w	r0, r7, #32
 8004362:	4a34      	ldr	r2, [pc, #208]	@ (8004434 <CMD_TEC_Init+0x14c>)
 8004364:	213c      	movs	r1, #60	@ 0x3c
 8004366:	f00b ffe3 	bl	8010330 <sniprintf>
 800436a:	e007      	b.n	800437c <CMD_TEC_Init+0x94>
			}
			else
				snprintf(buffer, sizeof(buffer), "Tec %d init fail", channel);
 800436c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004370:	f107 0020 	add.w	r0, r7, #32
 8004374:	4a30      	ldr	r2, [pc, #192]	@ (8004438 <CMD_TEC_Init+0x150>)
 8004376:	213c      	movs	r1, #60	@ 0x3c
 8004378:	f00b ffda 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 800437c:	f107 0320 	add.w	r3, r7, #32
 8004380:	4619      	mov	r1, r3
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f002 f8d4 	bl	8006530 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8004388:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800438c:	3301      	adds	r3, #1
 800438e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004392:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004396:	2b03      	cmp	r3, #3
 8004398:	d9c6      	bls.n	8004328 <CMD_TEC_Init+0x40>
 800439a:	e040      	b.n	800441e <CMD_TEC_Init+0x136>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 800439c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b30      	cmp	r3, #48	@ 0x30
 80043a2:	d00b      	beq.n	80043bc <CMD_TEC_Init+0xd4>
 80043a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b31      	cmp	r3, #49	@ 0x31
 80043aa:	d007      	beq.n	80043bc <CMD_TEC_Init+0xd4>
 80043ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b32      	cmp	r3, #50	@ 0x32
 80043b2:	d003      	beq.n	80043bc <CMD_TEC_Init+0xd4>
 80043b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b33      	cmp	r3, #51	@ 0x33
 80043ba:	d130      	bne.n	800441e <CMD_TEC_Init+0x136>
		int channel = atoi(arg1);
 80043bc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80043be:	f00a fc78 	bl	800ecb2 <atoi>
 80043c2:	6638      	str	r0, [r7, #96]	@ 0x60
		p_tec_dev = p_tec_dev_table[channel];
 80043c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	3370      	adds	r3, #112	@ 0x70
 80043ca:	443b      	add	r3, r7
 80043cc:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80043d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		tec_init_channel = lt8722_init(p_tec_dev);
 80043d2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80043d4:	f006 faa4 	bl	800a920 <lt8722_init>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		LL_mDelay(10);
 80043de:	200a      	movs	r0, #10
 80043e0:	f00a fc2e 	bl	800ec40 <LL_mDelay>
		// if init is success
		if (!tec_init_channel) {
 80043e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <CMD_TEC_Init+0x11c>
			lt8722_set_swen_req(p_tec_dev, LT8722_SWEN_REQ_DISABLED);
 80043ec:	2100      	movs	r1, #0
 80043ee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80043f0:	f006 fa4a 	bl	800a888 <lt8722_set_swen_req>
			snprintf(buffer, sizeof(buffer), "Tec %d init success", channel);
 80043f4:	f107 0020 	add.w	r0, r7, #32
 80043f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <CMD_TEC_Init+0x14c>)
 80043fc:	213c      	movs	r1, #60	@ 0x3c
 80043fe:	f00b ff97 	bl	8010330 <sniprintf>
 8004402:	e006      	b.n	8004412 <CMD_TEC_Init+0x12a>
		}
		else
			snprintf(buffer, sizeof(buffer), "Tec %d init fail", channel);
 8004404:	f107 0020 	add.w	r0, r7, #32
 8004408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800440a:	4a0b      	ldr	r2, [pc, #44]	@ (8004438 <CMD_TEC_Init+0x150>)
 800440c:	213c      	movs	r1, #60	@ 0x3c
 800440e:	f00b ff8f 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004412:	f107 0320 	add.w	r3, r7, #32
 8004416:	4619      	mov	r1, r3
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f002 f889 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 800441e:	4907      	ldr	r1, [pc, #28]	@ (800443c <CMD_TEC_Init+0x154>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f002 f885 	bl	8006530 <embeddedCliPrint>
}
 8004426:	bf00      	nop
 8004428:	3774      	adds	r7, #116	@ 0x74
 800442a:	46bd      	mov	sp, r7
 800442c:	bd90      	pop	{r4, r7, pc}
 800442e:	bf00      	nop
 8004430:	08013884 	.word	0x08013884
 8004434:	0801385c 	.word	0x0801385c
 8004438:	08013870 	.word	0x08013870
 800443c:	08013840 	.word	0x08013840

08004440 <CMD_TEC_Set_Volt>:

static void CMD_TEC_Set_Volt(EmbeddedCli *cli, char *args, void *context) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b0a8      	sub	sp, #160	@ 0xa0
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 800444c:	2101      	movs	r1, #1
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f002 f930 	bl	80066b4 <embeddedCliGetToken>
 8004454:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	const char *arg2 = embeddedCliGetToken(args, 2);
 8004458:	2102      	movs	r1, #2
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f002 f92a 	bl	80066b4 <embeddedCliGetToken>
 8004460:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	const char *arg3 = embeddedCliGetToken(args, 3);
 8004464:	2103      	movs	r1, #3
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f002 f924 	bl	80066b4 <embeddedCliGetToken>
 800446c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	const char *arg4 = embeddedCliGetToken(args, 4);
 8004470:	2104      	movs	r1, #4
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f002 f91e 	bl	80066b4 <embeddedCliGetToken>
 8004478:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int volt[4];
	volt[0] = atoi(arg1);
 800447c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004480:	f00a fc17 	bl	800ecb2 <atoi>
 8004484:	4603      	mov	r3, r0
 8004486:	677b      	str	r3, [r7, #116]	@ 0x74
	volt[1] = atoi(arg2);
 8004488:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800448c:	f00a fc11 	bl	800ecb2 <atoi>
 8004490:	4603      	mov	r3, r0
 8004492:	67bb      	str	r3, [r7, #120]	@ 0x78
	volt[2] = atoi(arg3);
 8004494:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8004498:	f00a fc0b 	bl	800ecb2 <atoi>
 800449c:	4603      	mov	r3, r0
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	volt[3] = atoi(arg4);
 80044a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80044a4:	f00a fc05 	bl	800ecb2 <atoi>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	char buffer[100];
	for (uint8_t i = 0; i < 4; i++) {
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80044b4:	e049      	b.n	800454a <CMD_TEC_Set_Volt+0x10a>
		temperature_set_tec_vol(i, volt[i]);
 80044b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3398      	adds	r3, #152	@ 0x98
 80044be:	443b      	add	r3, r7
 80044c0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f006 fff3 	bl	800b4b8 <temperature_set_tec_vol>
		if (volt[i] > 3000)
 80044d2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	3398      	adds	r3, #152	@ 0x98
 80044da:	443b      	add	r3, r7
 80044dc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80044e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80044e4:	4293      	cmp	r3, r2
 80044e6:	dd14      	ble.n	8004512 <CMD_TEC_Set_Volt+0xd2>
			snprintf(buffer, sizeof(buffer), "Tec[%d]: set %i mV OverVolt --> Tec[%d]: set 3000 mV", i, volt[i], i);
 80044e8:	f897 1097 	ldrb.w	r1, [r7, #151]	@ 0x97
 80044ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	3398      	adds	r3, #152	@ 0x98
 80044f4:	443b      	add	r3, r7
 80044f6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80044fa:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80044fe:	f107 0010 	add.w	r0, r7, #16
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	460b      	mov	r3, r1
 8004508:	4a16      	ldr	r2, [pc, #88]	@ (8004564 <CMD_TEC_Set_Volt+0x124>)
 800450a:	2164      	movs	r1, #100	@ 0x64
 800450c:	f00b ff10 	bl	8010330 <sniprintf>
 8004510:	e010      	b.n	8004534 <CMD_TEC_Set_Volt+0xf4>
		else
			snprintf(buffer, sizeof(buffer), "Tec[%d]: set %i mV", i, volt[i]);
 8004512:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8004516:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	3398      	adds	r3, #152	@ 0x98
 800451e:	443b      	add	r3, r7
 8004520:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004524:	f107 0010 	add.w	r0, r7, #16
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	4a0e      	ldr	r2, [pc, #56]	@ (8004568 <CMD_TEC_Set_Volt+0x128>)
 800452e:	2164      	movs	r1, #100	@ 0x64
 8004530:	f00b fefe 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004534:	f107 0310 	add.w	r3, r7, #16
 8004538:	4619      	mov	r1, r3
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f001 fff8 	bl	8006530 <embeddedCliPrint>
	for (uint8_t i = 0; i < 4; i++) {
 8004540:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004544:	3301      	adds	r3, #1
 8004546:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800454a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800454e:	2b03      	cmp	r3, #3
 8004550:	d9b1      	bls.n	80044b6 <CMD_TEC_Set_Volt+0x76>
	}
	embeddedCliPrint(cli, "");
 8004552:	4906      	ldr	r1, [pc, #24]	@ (800456c <CMD_TEC_Set_Volt+0x12c>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f001 ffeb 	bl	8006530 <embeddedCliPrint>
}
 800455a:	bf00      	nop
 800455c:	3798      	adds	r7, #152	@ 0x98
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08013894 	.word	0x08013894
 8004568:	080138cc 	.word	0x080138cc
 800456c:	08013840 	.word	0x08013840

08004570 <CMD_TEC_Get_Volt>:

static void CMD_TEC_Get_Volt(EmbeddedCli *cli, char *args, void *context) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b0ae      	sub	sp, #184	@ 0xb8
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC voltage get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 800457c:	2101      	movs	r1, #1
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f002 f898 	bl	80066b4 <embeddedCliGetToken>
 8004584:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	char buffer[60];
	uint16_t vol_set = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	uint16_t vol_adc = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b61      	cmp	r3, #97	@ 0x61
 800459c:	d004      	beq.n	80045a8 <CMD_TEC_Get_Volt+0x38>
 800459e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d132      	bne.n	800460e <CMD_TEC_Get_Volt+0x9e>
		char buffer[80];
		for (uint8_t i = 0; i < 4; i++) {
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80045ae:	e029      	b.n	8004604 <CMD_TEC_Get_Volt+0x94>
			vol_set = temperature_get_tec_vol_set(i);
 80045b0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 ffe3 	bl	800b580 <temperature_get_tec_vol_set>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			vol_adc = temperature_get_tec_vol_adc(i);
 80045c0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80045c4:	4618      	mov	r0, r3
 80045c6:	f006 fff7 	bl	800b5b8 <temperature_get_tec_vol_adc>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			snprintf(buffer, sizeof(buffer), "Tec[%d]: set %imV, ADC %imV", i, vol_set, vol_adc);
 80045d0:	f897 10af 	ldrb.w	r1, [r7, #175]	@ 0xaf
 80045d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80045d8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80045dc:	f107 0014 	add.w	r0, r7, #20
 80045e0:	9201      	str	r2, [sp, #4]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	460b      	mov	r3, r1
 80045e6:	4a2e      	ldr	r2, [pc, #184]	@ (80046a0 <CMD_TEC_Get_Volt+0x130>)
 80045e8:	2150      	movs	r1, #80	@ 0x50
 80045ea:	f00b fea1 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4619      	mov	r1, r3
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f001 ff9b 	bl	8006530 <embeddedCliPrint>
		for (uint8_t i = 0; i < 4; i++) {
 80045fa:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80045fe:	3301      	adds	r3, #1
 8004600:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8004604:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004608:	2b03      	cmp	r3, #3
 800460a:	d9d1      	bls.n	80045b0 <CMD_TEC_Get_Volt+0x40>
	if (*arg1 == 'a' || *arg1 == '\0') {
 800460c:	e03f      	b.n	800468e <CMD_TEC_Get_Volt+0x11e>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 800460e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b30      	cmp	r3, #48	@ 0x30
 8004616:	d00e      	beq.n	8004636 <CMD_TEC_Get_Volt+0xc6>
 8004618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b31      	cmp	r3, #49	@ 0x31
 8004620:	d009      	beq.n	8004636 <CMD_TEC_Get_Volt+0xc6>
 8004622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b32      	cmp	r3, #50	@ 0x32
 800462a:	d004      	beq.n	8004636 <CMD_TEC_Get_Volt+0xc6>
 800462c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b33      	cmp	r3, #51	@ 0x33
 8004634:	d12b      	bne.n	800468e <CMD_TEC_Get_Volt+0x11e>
		int channel = atoi(arg1);
 8004636:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800463a:	f00a fb3a 	bl	800ecb2 <atoi>
 800463e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
		vol_set = temperature_get_tec_vol_set(channel);
 8004642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4618      	mov	r0, r3
 800464a:	f006 ff99 	bl	800b580 <temperature_get_tec_vol_set>
 800464e:	4603      	mov	r3, r0
 8004650:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		vol_adc = temperature_get_tec_vol_adc(channel);
 8004654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4618      	mov	r0, r3
 800465c:	f006 ffac 	bl	800b5b8 <temperature_get_tec_vol_adc>
 8004660:	4603      	mov	r3, r0
 8004662:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		snprintf(buffer, sizeof(buffer), "Tec[%d]: set %imV, ADC %imV", channel, vol_set, vol_adc);
 8004666:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800466a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800466e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8004672:	9201      	str	r2, [sp, #4]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <CMD_TEC_Get_Volt+0x130>)
 800467c:	213c      	movs	r1, #60	@ 0x3c
 800467e:	f00b fe57 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004682:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004686:	4619      	mov	r1, r3
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f001 ff51 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 800468e:	4905      	ldr	r1, [pc, #20]	@ (80046a4 <CMD_TEC_Get_Volt+0x134>)
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f001 ff4d 	bl	8006530 <embeddedCliPrint>
}
 8004696:	bf00      	nop
 8004698:	37b0      	adds	r7, #176	@ 0xb0
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	080138e0 	.word	0x080138e0
 80046a4:	08013840 	.word	0x08013840

080046a8 <CMD_TEC_Set_Dir>:

static void CMD_TEC_Set_Dir(EmbeddedCli *cli, char *args, void *context) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	@ 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC direction set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80046b4:	2101      	movs	r1, #1
 80046b6:	68b8      	ldr	r0, [r7, #8]
 80046b8:	f001 fffc 	bl	80066b4 <embeddedCliGetToken>
 80046bc:	6278      	str	r0, [r7, #36]	@ 0x24
	const char *arg2 = embeddedCliGetToken(args, 2);
 80046be:	2102      	movs	r1, #2
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f001 fff7 	bl	80066b4 <embeddedCliGetToken>
 80046c6:	6238      	str	r0, [r7, #32]
	const char *arg3 = embeddedCliGetToken(args, 3);
 80046c8:	2103      	movs	r1, #3
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f001 fff2 	bl	80066b4 <embeddedCliGetToken>
 80046d0:	61f8      	str	r0, [r7, #28]
	const char *arg4 = embeddedCliGetToken(args, 4);
 80046d2:	2104      	movs	r1, #4
 80046d4:	68b8      	ldr	r0, [r7, #8]
 80046d6:	f001 ffed 	bl	80066b4 <embeddedCliGetToken>
 80046da:	61b8      	str	r0, [r7, #24]
	tec_dir_t dir_0 = atoi(arg1) ? TEC_HEAT : TEC_COOL;
 80046dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046de:	f00a fae8 	bl	800ecb2 <atoi>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	75fb      	strb	r3, [r7, #23]
	tec_dir_t dir_1 = atoi(arg2) ? TEC_HEAT : TEC_COOL;
 80046f0:	6a38      	ldr	r0, [r7, #32]
 80046f2:	f00a fade 	bl	800ecb2 <atoi>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	75bb      	strb	r3, [r7, #22]
	tec_dir_t dir_2 = atoi(arg3) ? TEC_HEAT : TEC_COOL;
 8004704:	69f8      	ldr	r0, [r7, #28]
 8004706:	f00a fad4 	bl	800ecb2 <atoi>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	757b      	strb	r3, [r7, #21]
	tec_dir_t dir_3 = atoi(arg4) ? TEC_HEAT : TEC_COOL;
 8004718:	69b8      	ldr	r0, [r7, #24]
 800471a:	f00a faca 	bl	800ecb2 <atoi>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	753b      	strb	r3, [r7, #20]
	temperature_set_tec_dir(dir_0, dir_1, dir_2, dir_3);
 800472c:	7d3b      	ldrb	r3, [r7, #20]
 800472e:	7d7a      	ldrb	r2, [r7, #21]
 8004730:	7db9      	ldrb	r1, [r7, #22]
 8004732:	7df8      	ldrb	r0, [r7, #23]
 8004734:	f006 ffa2 	bl	800b67c <temperature_set_tec_dir>
	if (dir_0 == TEC_COOL) embeddedCliPrint(cli, "TEC 0 set cool mode");
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <CMD_TEC_Set_Dir+0xa0>
 800473e:	491a      	ldr	r1, [pc, #104]	@ (80047a8 <CMD_TEC_Set_Dir+0x100>)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f001 fef5 	bl	8006530 <embeddedCliPrint>
 8004746:	e003      	b.n	8004750 <CMD_TEC_Set_Dir+0xa8>
	else embeddedCliPrint(cli, "TEC 0 set heat mode");
 8004748:	4918      	ldr	r1, [pc, #96]	@ (80047ac <CMD_TEC_Set_Dir+0x104>)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f001 fef0 	bl	8006530 <embeddedCliPrint>
	if (dir_1 == TEC_COOL) embeddedCliPrint(cli, "TEC 1 set cool mode");
 8004750:	7dbb      	ldrb	r3, [r7, #22]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <CMD_TEC_Set_Dir+0xb8>
 8004756:	4916      	ldr	r1, [pc, #88]	@ (80047b0 <CMD_TEC_Set_Dir+0x108>)
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f001 fee9 	bl	8006530 <embeddedCliPrint>
 800475e:	e003      	b.n	8004768 <CMD_TEC_Set_Dir+0xc0>
	else embeddedCliPrint(cli, "TEC 1 set heat mode");
 8004760:	4914      	ldr	r1, [pc, #80]	@ (80047b4 <CMD_TEC_Set_Dir+0x10c>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f001 fee4 	bl	8006530 <embeddedCliPrint>
	if (dir_2 == TEC_COOL) embeddedCliPrint(cli, "TEC 2 set cool mode");
 8004768:	7d7b      	ldrb	r3, [r7, #21]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <CMD_TEC_Set_Dir+0xd0>
 800476e:	4912      	ldr	r1, [pc, #72]	@ (80047b8 <CMD_TEC_Set_Dir+0x110>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f001 fedd 	bl	8006530 <embeddedCliPrint>
 8004776:	e003      	b.n	8004780 <CMD_TEC_Set_Dir+0xd8>
	else embeddedCliPrint(cli, "TEC 2 set heat mode");
 8004778:	4910      	ldr	r1, [pc, #64]	@ (80047bc <CMD_TEC_Set_Dir+0x114>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f001 fed8 	bl	8006530 <embeddedCliPrint>
	if (dir_3 == TEC_COOL) embeddedCliPrint(cli, "TEC 3 set cool mode");
 8004780:	7d3b      	ldrb	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <CMD_TEC_Set_Dir+0xe8>
 8004786:	490e      	ldr	r1, [pc, #56]	@ (80047c0 <CMD_TEC_Set_Dir+0x118>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f001 fed1 	bl	8006530 <embeddedCliPrint>
 800478e:	e003      	b.n	8004798 <CMD_TEC_Set_Dir+0xf0>
	else embeddedCliPrint(cli, "TEC 3 set heat mode");
 8004790:	490c      	ldr	r1, [pc, #48]	@ (80047c4 <CMD_TEC_Set_Dir+0x11c>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f001 fecc 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004798:	490b      	ldr	r1, [pc, #44]	@ (80047c8 <CMD_TEC_Set_Dir+0x120>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f001 fec8 	bl	8006530 <embeddedCliPrint>
}
 80047a0:	bf00      	nop
 80047a2:	3728      	adds	r7, #40	@ 0x28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	080138fc 	.word	0x080138fc
 80047ac:	08013910 	.word	0x08013910
 80047b0:	08013924 	.word	0x08013924
 80047b4:	08013938 	.word	0x08013938
 80047b8:	0801394c 	.word	0x0801394c
 80047bc:	08013960 	.word	0x08013960
 80047c0:	08013974 	.word	0x08013974
 80047c4:	08013988 	.word	0x08013988
 80047c8:	08013840 	.word	0x08013840

080047cc <CMD_TEC_Get_Dir>:

static void CMD_TEC_Get_Dir(EmbeddedCli *cli, char *args, void *context) {
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b093      	sub	sp, #76	@ 0x4c
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC direction get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80047d8:	2101      	movs	r1, #1
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f001 ff6a 	bl	80066b4 <embeddedCliGetToken>
 80047e0:	6478      	str	r0, [r7, #68]	@ 0x44
	tec_dir_t dir[4] = {TEC_COOL, TEC_COOL, TEC_COOL, TEC_COOL};
 80047e2:	2300      	movs	r3, #0
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	temperature_get_tec_dir(&dir[0], &dir[1], &dir[2], &dir[3]);
 80047e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80047ea:	1cdc      	adds	r4, r3, #3
 80047ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80047fc:	4623      	mov	r3, r4
 80047fe:	f006 ff6f 	bl	800b6e0 <temperature_get_tec_dir>
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b61      	cmp	r3, #97	@ 0x61
 8004808:	d003      	beq.n	8004812 <CMD_TEC_Get_Dir+0x46>
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d134      	bne.n	800487c <CMD_TEC_Get_Dir+0xb0>
		if (dir[0] == TEC_COOL) embeddedCliPrint(cli, "TEC 0 is cool mode");
 8004812:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <CMD_TEC_Get_Dir+0x58>
 800481a:	4934      	ldr	r1, [pc, #208]	@ (80048ec <CMD_TEC_Get_Dir+0x120>)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f001 fe87 	bl	8006530 <embeddedCliPrint>
 8004822:	e003      	b.n	800482c <CMD_TEC_Get_Dir+0x60>
		else embeddedCliPrint(cli, "TEC 0 is heat mode");
 8004824:	4932      	ldr	r1, [pc, #200]	@ (80048f0 <CMD_TEC_Get_Dir+0x124>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f001 fe82 	bl	8006530 <embeddedCliPrint>
		if (dir[1] == TEC_COOL) embeddedCliPrint(cli, "TEC 1 is cool mode");
 800482c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <CMD_TEC_Get_Dir+0x72>
 8004834:	492f      	ldr	r1, [pc, #188]	@ (80048f4 <CMD_TEC_Get_Dir+0x128>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 fe7a 	bl	8006530 <embeddedCliPrint>
 800483c:	e003      	b.n	8004846 <CMD_TEC_Get_Dir+0x7a>
		else embeddedCliPrint(cli, "TEC 1 is heat mode");
 800483e:	492e      	ldr	r1, [pc, #184]	@ (80048f8 <CMD_TEC_Get_Dir+0x12c>)
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f001 fe75 	bl	8006530 <embeddedCliPrint>
		if (dir[2] == TEC_COOL) embeddedCliPrint(cli, "TEC 2 is cool mode");
 8004846:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <CMD_TEC_Get_Dir+0x8c>
 800484e:	492b      	ldr	r1, [pc, #172]	@ (80048fc <CMD_TEC_Get_Dir+0x130>)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f001 fe6d 	bl	8006530 <embeddedCliPrint>
 8004856:	e003      	b.n	8004860 <CMD_TEC_Get_Dir+0x94>
		else embeddedCliPrint(cli, "TEC 2 is heat mode");
 8004858:	4929      	ldr	r1, [pc, #164]	@ (8004900 <CMD_TEC_Get_Dir+0x134>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f001 fe68 	bl	8006530 <embeddedCliPrint>
		if (dir[3] == TEC_COOL) embeddedCliPrint(cli, "TEC 3 is cool mode");
 8004860:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <CMD_TEC_Get_Dir+0xa6>
 8004868:	4926      	ldr	r1, [pc, #152]	@ (8004904 <CMD_TEC_Get_Dir+0x138>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f001 fe60 	bl	8006530 <embeddedCliPrint>
 8004870:	e034      	b.n	80048dc <CMD_TEC_Get_Dir+0x110>
		else embeddedCliPrint(cli, "TEC 3 is heat mode");
 8004872:	4925      	ldr	r1, [pc, #148]	@ (8004908 <CMD_TEC_Get_Dir+0x13c>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f001 fe5b 	bl	8006530 <embeddedCliPrint>
		if (dir[3] == TEC_COOL) embeddedCliPrint(cli, "TEC 3 is cool mode");
 800487a:	e02f      	b.n	80048dc <CMD_TEC_Get_Dir+0x110>
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 800487c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b30      	cmp	r3, #48	@ 0x30
 8004882:	d00b      	beq.n	800489c <CMD_TEC_Get_Dir+0xd0>
 8004884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b31      	cmp	r3, #49	@ 0x31
 800488a:	d007      	beq.n	800489c <CMD_TEC_Get_Dir+0xd0>
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b32      	cmp	r3, #50	@ 0x32
 8004892:	d003      	beq.n	800489c <CMD_TEC_Get_Dir+0xd0>
 8004894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b33      	cmp	r3, #51	@ 0x33
 800489a:	d11f      	bne.n	80048dc <CMD_TEC_Get_Dir+0x110>
		char buffer[40];
		int channel = atoi(arg1);
 800489c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800489e:	f00a fa08 	bl	800ecb2 <atoi>
 80048a2:	6438      	str	r0, [r7, #64]	@ 0x40
		if (dir[channel] == TEC_COOL)
 80048a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80048a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048aa:	4413      	add	r3, r2
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <CMD_TEC_Get_Dir+0xf6>
			snprintf(buffer, sizeof(buffer), "TEC %d is cool mode", channel);
 80048b2:	f107 0014 	add.w	r0, r7, #20
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	4a14      	ldr	r2, [pc, #80]	@ (800490c <CMD_TEC_Get_Dir+0x140>)
 80048ba:	2128      	movs	r1, #40	@ 0x28
 80048bc:	f00b fd38 	bl	8010330 <sniprintf>
 80048c0:	e006      	b.n	80048d0 <CMD_TEC_Get_Dir+0x104>
		else
			snprintf(buffer, sizeof(buffer), "TEC %d is heat mode", channel);
 80048c2:	f107 0014 	add.w	r0, r7, #20
 80048c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c8:	4a11      	ldr	r2, [pc, #68]	@ (8004910 <CMD_TEC_Get_Dir+0x144>)
 80048ca:	2128      	movs	r1, #40	@ 0x28
 80048cc:	f00b fd30 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	4619      	mov	r1, r3
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f001 fe2a 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 80048dc:	490d      	ldr	r1, [pc, #52]	@ (8004914 <CMD_TEC_Get_Dir+0x148>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f001 fe26 	bl	8006530 <embeddedCliPrint>
}
 80048e4:	bf00      	nop
 80048e6:	374c      	adds	r7, #76	@ 0x4c
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd90      	pop	{r4, r7, pc}
 80048ec:	0801399c 	.word	0x0801399c
 80048f0:	080139b0 	.word	0x080139b0
 80048f4:	080139c4 	.word	0x080139c4
 80048f8:	080139d8 	.word	0x080139d8
 80048fc:	080139ec 	.word	0x080139ec
 8004900:	08013a00 	.word	0x08013a00
 8004904:	08013a14 	.word	0x08013a14
 8004908:	08013a28 	.word	0x08013a28
 800490c:	08013a3c 	.word	0x08013a3c
 8004910:	08013a50 	.word	0x08013a50
 8004914:	08013840 	.word	0x08013840

08004918 <CMD_HTR_Set_Duty>:

static void CMD_HTR_Set_Duty(EmbeddedCli *cli, char *args, void *context) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b0a4      	sub	sp, #144	@ 0x90
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004924:	2101      	movs	r1, #1
 8004926:	68b8      	ldr	r0, [r7, #8]
 8004928:	f001 fec4 	bl	80066b4 <embeddedCliGetToken>
 800492c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	const char *arg2 = embeddedCliGetToken(args, 2);
 8004930:	2102      	movs	r1, #2
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	f001 febe 	bl	80066b4 <embeddedCliGetToken>
 8004938:	67f8      	str	r0, [r7, #124]	@ 0x7c
	const char *arg3 = embeddedCliGetToken(args, 3);
 800493a:	2103      	movs	r1, #3
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f001 feb9 	bl	80066b4 <embeddedCliGetToken>
 8004942:	67b8      	str	r0, [r7, #120]	@ 0x78
	const char *arg4 = embeddedCliGetToken(args, 4);
 8004944:	2104      	movs	r1, #4
 8004946:	68b8      	ldr	r0, [r7, #8]
 8004948:	f001 feb4 	bl	80066b4 <embeddedCliGetToken>
 800494c:	6778      	str	r0, [r7, #116]	@ 0x74
	int duty[4];
	duty[0] = atoi(arg1);
 800494e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004952:	f00a f9ae 	bl	800ecb2 <atoi>
 8004956:	4603      	mov	r3, r0
 8004958:	667b      	str	r3, [r7, #100]	@ 0x64
	duty[1] = atoi(arg2);
 800495a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800495c:	f00a f9a9 	bl	800ecb2 <atoi>
 8004960:	4603      	mov	r3, r0
 8004962:	66bb      	str	r3, [r7, #104]	@ 0x68
	duty[2] = atoi(arg3);
 8004964:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004966:	f00a f9a4 	bl	800ecb2 <atoi>
 800496a:	4603      	mov	r3, r0
 800496c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	duty[3] = atoi(arg4);
 800496e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004970:	f00a f99f 	bl	800ecb2 <atoi>
 8004974:	4603      	mov	r3, r0
 8004976:	673b      	str	r3, [r7, #112]	@ 0x70
	char buffer[80];
	for (uint8_t i = 0; i < 4; i++) {
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800497e:	e03a      	b.n	80049f6 <CMD_HTR_Set_Duty+0xde>
		if (duty[i] > 100) duty[i] = 100;
 8004980:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	3388      	adds	r3, #136	@ 0x88
 8004988:	443b      	add	r3, r7
 800498a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800498e:	2b64      	cmp	r3, #100	@ 0x64
 8004990:	dd07      	ble.n	80049a2 <CMD_HTR_Set_Duty+0x8a>
 8004992:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	3388      	adds	r3, #136	@ 0x88
 800499a:	443b      	add	r3, r7
 800499c:	2264      	movs	r2, #100	@ 0x64
 800499e:	f843 2c24 	str.w	r2, [r3, #-36]
		temperature_set_heater_duty(i, duty[i]);
 80049a2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	3388      	adds	r3, #136	@ 0x88
 80049aa:	443b      	add	r3, r7
 80049ac:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f006 fe19 	bl	800b5f0 <temperature_set_heater_duty>
		snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%", i, duty[i]);
 80049be:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80049c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	3388      	adds	r3, #136	@ 0x88
 80049ca:	443b      	add	r3, r7
 80049cc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80049d0:	f107 0014 	add.w	r0, r7, #20
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <CMD_HTR_Set_Duty+0xf8>)
 80049da:	2150      	movs	r1, #80	@ 0x50
 80049dc:	f00b fca8 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4619      	mov	r1, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f001 fda2 	bl	8006530 <embeddedCliPrint>
	for (uint8_t i = 0; i < 4; i++) {
 80049ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049f0:	3301      	adds	r3, #1
 80049f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d9c0      	bls.n	8004980 <CMD_HTR_Set_Duty+0x68>
	}
	embeddedCliPrint(cli, "");
 80049fe:	4905      	ldr	r1, [pc, #20]	@ (8004a14 <CMD_HTR_Set_Duty+0xfc>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f001 fd95 	bl	8006530 <embeddedCliPrint>
}
 8004a06:	bf00      	nop
 8004a08:	3788      	adds	r7, #136	@ 0x88
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	08013a64 	.word	0x08013a64
 8004a14:	08013840 	.word	0x08013840

08004a18 <CMD_HTR_Get_Duty>:

static void CMD_HTR_Get_Duty(EmbeddedCli *cli, char *args, void *context) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b09a      	sub	sp, #104	@ 0x68
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater duty cycle get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004a24:	2101      	movs	r1, #1
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f001 fe44 	bl	80066b4 <embeddedCliGetToken>
 8004a2c:	65b8      	str	r0, [r7, #88]	@ 0x58
	char buffer[60];
	uint8_t duty;
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b61      	cmp	r3, #97	@ 0x61
 8004a34:	d003      	beq.n	8004a3e <CMD_HTR_Get_Duty+0x26>
 8004a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d127      	bne.n	8004a8e <CMD_HTR_Get_Duty+0x76>
		for (uint8_t i = 0; i < 4; i++) {
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a44:	e01e      	b.n	8004a84 <CMD_HTR_Get_Duty+0x6c>
			duty = temperature_get_heater_duty(i);
 8004a46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f006 fdf8 	bl	800b640 <temperature_get_heater_duty>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%", i, duty);
 8004a56:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8004a5a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004a5e:	f107 0014 	add.w	r0, r7, #20
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <CMD_HTR_Get_Duty+0xe0>)
 8004a68:	213c      	movs	r1, #60	@ 0x3c
 8004a6a:	f00b fc61 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 8004a6e:	f107 0314 	add.w	r3, r7, #20
 8004a72:	4619      	mov	r1, r3
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f001 fd5b 	bl	8006530 <embeddedCliPrint>
		for (uint8_t i = 0; i < 4; i++) {
 8004a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004a84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d9dc      	bls.n	8004a46 <CMD_HTR_Get_Duty+0x2e>
 8004a8c:	e02b      	b.n	8004ae6 <CMD_HTR_Get_Duty+0xce>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8004a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b30      	cmp	r3, #48	@ 0x30
 8004a94:	d00b      	beq.n	8004aae <CMD_HTR_Get_Duty+0x96>
 8004a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b31      	cmp	r3, #49	@ 0x31
 8004a9c:	d007      	beq.n	8004aae <CMD_HTR_Get_Duty+0x96>
 8004a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b32      	cmp	r3, #50	@ 0x32
 8004aa4:	d003      	beq.n	8004aae <CMD_HTR_Get_Duty+0x96>
 8004aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b33      	cmp	r3, #51	@ 0x33
 8004aac:	d11b      	bne.n	8004ae6 <CMD_HTR_Get_Duty+0xce>
		int channel = atoi(arg1);
 8004aae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ab0:	f00a f8ff 	bl	800ecb2 <atoi>
 8004ab4:	6578      	str	r0, [r7, #84]	@ 0x54
		duty = temperature_get_heater_duty(channel);
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	f006 fdc0 	bl	800b640 <temperature_get_heater_duty>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		snprintf(buffer, sizeof(buffer), "Heater duty[%d]: %i%%", channel, duty);
 8004ac6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004aca:	f107 0014 	add.w	r0, r7, #20
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad2:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <CMD_HTR_Get_Duty+0xe0>)
 8004ad4:	213c      	movs	r1, #60	@ 0x3c
 8004ad6:	f00b fc2b 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	4619      	mov	r1, r3
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f001 fd25 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8004ae6:	4905      	ldr	r1, [pc, #20]	@ (8004afc <CMD_HTR_Get_Duty+0xe4>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f001 fd21 	bl	8006530 <embeddedCliPrint>
}
 8004aee:	bf00      	nop
 8004af0:	3760      	adds	r7, #96	@ 0x60
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	08013a64 	.word	0x08013a64
 8004afc:	08013840 	.word	0x08013840

08004b00 <CMD_Ref_Set_Temp>:

static void CMD_Ref_Set_Temp(EmbeddedCli *cli, char *args, void *context) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b092      	sub	sp, #72	@ 0x48
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f001 fdd0 	bl	80066b4 <embeddedCliGetToken>
 8004b14:	63f8      	str	r0, [r7, #60]	@ 0x3c
	int setpoint = atoi(arg1);
 8004b16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004b18:	f00a f8cb 	bl	800ecb2 <atoi>
 8004b1c:	63b8      	str	r0, [r7, #56]	@ 0x38
	char buffer[40];
	temperature_set_setpoint(setpoint);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	4618      	mov	r0, r3
 8004b24:	f006 fcac 	bl	800b480 <temperature_set_setpoint>
	snprintf(buffer, sizeof(buffer), "Reference Temperature: %.2f *C", (float)setpoint/10);
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b32:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	ed8d 7b00 	vstr	d7, [sp]
 8004b46:	4a09      	ldr	r2, [pc, #36]	@ (8004b6c <CMD_Ref_Set_Temp+0x6c>)
 8004b48:	2128      	movs	r1, #40	@ 0x28
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00b fbf0 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f001 fcea 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004b5c:	4904      	ldr	r1, [pc, #16]	@ (8004b70 <CMD_Ref_Set_Temp+0x70>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f001 fce6 	bl	8006530 <embeddedCliPrint>
}
 8004b64:	bf00      	nop
 8004b66:	3740      	adds	r7, #64	@ 0x40
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08013a7c 	.word	0x08013a7c
 8004b70:	08013840 	.word	0x08013840

08004b74 <CMD_Ref_Get_Temp>:

static void CMD_Ref_Get_Temp(EmbeddedCli *cli, char *args, void *context) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b096      	sub	sp, #88	@ 0x58
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference temperature get logic
	char buffer[60];
	int16_t setpoint = temperature_get_setpoint();
 8004b80:	f006 fc8e 	bl	800b4a0 <temperature_get_setpoint>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	snprintf(buffer, sizeof(buffer), "Reference Temperature: %.2f *C", (float)setpoint/10);
 8004b8a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b96:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8004b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ba2:	f107 0310 	add.w	r3, r7, #16
 8004ba6:	ed8d 7b00 	vstr	d7, [sp]
 8004baa:	4a09      	ldr	r2, [pc, #36]	@ (8004bd0 <CMD_Ref_Get_Temp+0x5c>)
 8004bac:	213c      	movs	r1, #60	@ 0x3c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00b fbbe 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 8004bb4:	f107 0310 	add.w	r3, r7, #16
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f001 fcb8 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004bc0:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <CMD_Ref_Get_Temp+0x60>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f001 fcb4 	bl	8006530 <embeddedCliPrint>
}
 8004bc8:	bf00      	nop
 8004bca:	3750      	adds	r7, #80	@ 0x50
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	08013a7c 	.word	0x08013a7c
 8004bd4:	08013840 	.word	0x08013840

08004bd8 <CMD_Ref_Set_NTC>:

static void CMD_Ref_Set_NTC(EmbeddedCli *cli, char *args, void *context) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b096      	sub	sp, #88	@ 0x58
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004be4:	2101      	movs	r1, #1
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f001 fd64 	bl	80066b4 <embeddedCliGetToken>
 8004bec:	6578      	str	r0, [r7, #84]	@ 0x54
	int NTC_Ref = atoi(arg1);
 8004bee:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004bf0:	f00a f85f 	bl	800ecb2 <atoi>
 8004bf4:	6538      	str	r0, [r7, #80]	@ 0x50
	temperature_set_ntc_ref(NTC_Ref);
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f006 fe8a 	bl	800b914 <temperature_set_ntc_ref>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "NTC Ref is %d", NTC_Ref);
 8004c00:	f107 0014 	add.w	r0, r7, #20
 8004c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c06:	4a09      	ldr	r2, [pc, #36]	@ (8004c2c <CMD_Ref_Set_NTC+0x54>)
 8004c08:	213c      	movs	r1, #60	@ 0x3c
 8004c0a:	f00b fb91 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 8004c0e:	f107 0314 	add.w	r3, r7, #20
 8004c12:	4619      	mov	r1, r3
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f001 fc8b 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004c1a:	4905      	ldr	r1, [pc, #20]	@ (8004c30 <CMD_Ref_Set_NTC+0x58>)
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f001 fc87 	bl	8006530 <embeddedCliPrint>
}
 8004c22:	bf00      	nop
 8004c24:	3758      	adds	r7, #88	@ 0x58
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08013a9c 	.word	0x08013a9c
 8004c30:	08013840 	.word	0x08013840

08004c34 <CMD_Ref_Get_NTC>:

static void CMD_Ref_Get_NTC(EmbeddedCli *cli, char *args, void *context) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b094      	sub	sp, #80	@ 0x50
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
    // TODO: Implement reference NTC get logic
	uint8_t NTC_Ref = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	temperature_get_ntc_ref(&NTC_Ref);
 8004c46:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f006 fe74 	bl	800b938 <temperature_get_ntc_ref>
	char buffer[60];
	snprintf(buffer, sizeof(buffer), "NTC Ref is %d", NTC_Ref);
 8004c50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c54:	f107 0010 	add.w	r0, r7, #16
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <CMD_Ref_Get_NTC+0x48>)
 8004c5a:	213c      	movs	r1, #60	@ 0x3c
 8004c5c:	f00b fb68 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 8004c60:	f107 0310 	add.w	r3, r7, #16
 8004c64:	4619      	mov	r1, r3
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f001 fc62 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004c6c:	4904      	ldr	r1, [pc, #16]	@ (8004c80 <CMD_Ref_Get_NTC+0x4c>)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 fc5e 	bl	8006530 <embeddedCliPrint>
}
 8004c74:	bf00      	nop
 8004c76:	3750      	adds	r7, #80	@ 0x50
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08013a9c 	.word	0x08013a9c
 8004c80:	08013840 	.word	0x08013840

08004c84 <CMD_TEC_Set_Auto>:

static void CMD_TEC_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b098      	sub	sp, #96	@ 0x60
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC auto mode set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004c90:	2101      	movs	r1, #1
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f001 fd0e 	bl	80066b4 <embeddedCliGetToken>
 8004c98:	65f8      	str	r0, [r7, #92]	@ 0x5c
	const char *arg2 = embeddedCliGetToken(args, 2);
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	68b8      	ldr	r0, [r7, #8]
 8004c9e:	f001 fd09 	bl	80066b4 <embeddedCliGetToken>
 8004ca2:	65b8      	str	r0, [r7, #88]	@ 0x58
	const char *arg3 = embeddedCliGetToken(args, 3);
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f001 fd04 	bl	80066b4 <embeddedCliGetToken>
 8004cac:	6578      	str	r0, [r7, #84]	@ 0x54
	const char *arg4 = embeddedCliGetToken(args, 4);
 8004cae:	2104      	movs	r1, #4
 8004cb0:	68b8      	ldr	r0, [r7, #8]
 8004cb2:	f001 fcff 	bl	80066b4 <embeddedCliGetToken>
 8004cb6:	6538      	str	r0, [r7, #80]	@ 0x50
	uint8_t tec_0_en = atoi(arg1);
 8004cb8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004cba:	f009 fffa 	bl	800ecb2 <atoi>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t tec_1_en = atoi(arg2);
 8004cc4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004cc6:	f009 fff4 	bl	800ecb2 <atoi>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint8_t tec_2_en = atoi(arg3);
 8004cd0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004cd2:	f009 ffee 	bl	800ecb2 <atoi>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t tec_3_en = atoi(arg4);
 8004cdc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004cde:	f009 ffe8 	bl	800ecb2 <atoi>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	temperature_set_tec_auto(tec_0_en, tec_1_en, tec_2_en, tec_3_en);
 8004ce8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004cec:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004cf0:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8004cf4:	f897 004f 	ldrb.w	r0, [r7, #79]	@ 0x4f
 8004cf8:	f006 fd24 	bl	800b744 <temperature_set_tec_auto>
	char buffer[60];
	if (tec_0_en) {
 8004cfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <CMD_TEC_Set_Auto+0x9a>
		snprintf(buffer, sizeof(buffer), "TEC 0 is ena");
 8004d04:	f107 0310 	add.w	r3, r7, #16
 8004d08:	4a22      	ldr	r2, [pc, #136]	@ (8004d94 <CMD_TEC_Set_Auto+0x110>)
 8004d0a:	213c      	movs	r1, #60	@ 0x3c
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00b fb0f 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	4619      	mov	r1, r3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f001 fc09 	bl	8006530 <embeddedCliPrint>
	}
	if (tec_1_en) {
 8004d1e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <CMD_TEC_Set_Auto+0xbc>
		snprintf(buffer, sizeof(buffer), "TEC 1 is ena");
 8004d26:	f107 0310 	add.w	r3, r7, #16
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <CMD_TEC_Set_Auto+0x114>)
 8004d2c:	213c      	movs	r1, #60	@ 0x3c
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f00b fafe 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4619      	mov	r1, r3
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f001 fbf8 	bl	8006530 <embeddedCliPrint>
	}
	if (tec_2_en) {
 8004d40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <CMD_TEC_Set_Auto+0xde>
		snprintf(buffer, sizeof(buffer), "TEC 2 is ena");
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <CMD_TEC_Set_Auto+0x118>)
 8004d4e:	213c      	movs	r1, #60	@ 0x3c
 8004d50:	4618      	mov	r0, r3
 8004d52:	f00b faed 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f001 fbe7 	bl	8006530 <embeddedCliPrint>
	}
	if (tec_3_en) {
 8004d62:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <CMD_TEC_Set_Auto+0x100>
		snprintf(buffer, sizeof(buffer), "TEC 3 is ena");
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004da0 <CMD_TEC_Set_Auto+0x11c>)
 8004d70:	213c      	movs	r1, #60	@ 0x3c
 8004d72:	4618      	mov	r0, r3
 8004d74:	f00b fadc 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f001 fbd6 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8004d84:	4907      	ldr	r1, [pc, #28]	@ (8004da4 <CMD_TEC_Set_Auto+0x120>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 fbd2 	bl	8006530 <embeddedCliPrint>
}
 8004d8c:	bf00      	nop
 8004d8e:	3760      	adds	r7, #96	@ 0x60
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08013aac 	.word	0x08013aac
 8004d98:	08013abc 	.word	0x08013abc
 8004d9c:	08013acc 	.word	0x08013acc
 8004da0:	08013adc 	.word	0x08013adc
 8004da4:	08013840 	.word	0x08013840

08004da8 <CMD_TEC_Get_Auto>:

static void CMD_TEC_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b099      	sub	sp, #100	@ 0x64
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
    // TODO: Implement TEC auto mode get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004db4:	2101      	movs	r1, #1
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f001 fc7c 	bl	80066b4 <embeddedCliGetToken>
 8004dbc:	65b8      	str	r0, [r7, #88]	@ 0x58
	uint8_t tec_en[4];
	temperature_get_tec_auto(&tec_en[0], &tec_en[1], &tec_en[2], &tec_en[3]);
 8004dbe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004dc2:	1cdc      	adds	r4, r3, #3
 8004dc4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	f006 fcf7 	bl	800b7c8 <temperature_get_tec_auto>
	char buffer[60];
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b61      	cmp	r3, #97	@ 0x61
 8004de0:	d003      	beq.n	8004dea <CMD_TEC_Get_Auto+0x42>
 8004de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d12c      	bne.n	8004e44 <CMD_TEC_Get_Auto+0x9c>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004df0:	e023      	b.n	8004e3a <CMD_TEC_Get_Auto+0x92>
			if (tec_en[channel])
 8004df2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004df6:	3360      	adds	r3, #96	@ 0x60
 8004df8:	443b      	add	r3, r7
 8004dfa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <CMD_TEC_Get_Auto+0x6c>
				snprintf(buffer, sizeof(buffer), "TEC %d is ena", channel);
 8004e02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e06:	f107 0014 	add.w	r0, r7, #20
 8004e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb4 <CMD_TEC_Get_Auto+0x10c>)
 8004e0c:	213c      	movs	r1, #60	@ 0x3c
 8004e0e:	f00b fa8f 	bl	8010330 <sniprintf>
 8004e12:	e007      	b.n	8004e24 <CMD_TEC_Get_Auto+0x7c>
			else
				snprintf(buffer, sizeof(buffer), "TEC %d is dis", channel);
 8004e14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e18:	f107 0014 	add.w	r0, r7, #20
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <CMD_TEC_Get_Auto+0x110>)
 8004e1e:	213c      	movs	r1, #60	@ 0x3c
 8004e20:	f00b fa86 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 fb80 	bl	8006530 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8004e30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e34:	3301      	adds	r3, #1
 8004e36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d9d7      	bls.n	8004df2 <CMD_TEC_Get_Auto+0x4a>
 8004e42:	e02f      	b.n	8004ea4 <CMD_TEC_Get_Auto+0xfc>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 8004e44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b30      	cmp	r3, #48	@ 0x30
 8004e4a:	d00b      	beq.n	8004e64 <CMD_TEC_Get_Auto+0xbc>
 8004e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b31      	cmp	r3, #49	@ 0x31
 8004e52:	d007      	beq.n	8004e64 <CMD_TEC_Get_Auto+0xbc>
 8004e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b32      	cmp	r3, #50	@ 0x32
 8004e5a:	d003      	beq.n	8004e64 <CMD_TEC_Get_Auto+0xbc>
 8004e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b33      	cmp	r3, #51	@ 0x33
 8004e62:	d11f      	bne.n	8004ea4 <CMD_TEC_Get_Auto+0xfc>
		int channel = atoi(arg1);
 8004e64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e66:	f009 ff24 	bl	800ecb2 <atoi>
 8004e6a:	6578      	str	r0, [r7, #84]	@ 0x54
		if (tec_en[channel])
 8004e6c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	4413      	add	r3, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <CMD_TEC_Get_Auto+0xe2>
			snprintf(buffer, sizeof(buffer), "TEC %d is ena", channel);
 8004e7a:	f107 0014 	add.w	r0, r7, #20
 8004e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e80:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <CMD_TEC_Get_Auto+0x10c>)
 8004e82:	213c      	movs	r1, #60	@ 0x3c
 8004e84:	f00b fa54 	bl	8010330 <sniprintf>
 8004e88:	e006      	b.n	8004e98 <CMD_TEC_Get_Auto+0xf0>
		else
			snprintf(buffer, sizeof(buffer), "TEC %d is dis", channel);
 8004e8a:	f107 0014 	add.w	r0, r7, #20
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e90:	4a09      	ldr	r2, [pc, #36]	@ (8004eb8 <CMD_TEC_Get_Auto+0x110>)
 8004e92:	213c      	movs	r1, #60	@ 0x3c
 8004e94:	f00b fa4c 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f001 fb46 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 8004ea4:	4905      	ldr	r1, [pc, #20]	@ (8004ebc <CMD_TEC_Get_Auto+0x114>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f001 fb42 	bl	8006530 <embeddedCliPrint>
}
 8004eac:	bf00      	nop
 8004eae:	3764      	adds	r7, #100	@ 0x64
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	08013aec 	.word	0x08013aec
 8004eb8:	08013afc 	.word	0x08013afc
 8004ebc:	08013840 	.word	0x08013840

08004ec0 <CMD_HTR_Set_Auto>:

static void CMD_HTR_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b09a      	sub	sp, #104	@ 0x68
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater auto mode set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004ecc:	2101      	movs	r1, #1
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f001 fbf0 	bl	80066b4 <embeddedCliGetToken>
 8004ed4:	6638      	str	r0, [r7, #96]	@ 0x60
	const char *arg2 = embeddedCliGetToken(args, 2);
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f001 fbeb 	bl	80066b4 <embeddedCliGetToken>
 8004ede:	65f8      	str	r0, [r7, #92]	@ 0x5c
	const char *arg3 = embeddedCliGetToken(args, 3);
 8004ee0:	2103      	movs	r1, #3
 8004ee2:	68b8      	ldr	r0, [r7, #8]
 8004ee4:	f001 fbe6 	bl	80066b4 <embeddedCliGetToken>
 8004ee8:	65b8      	str	r0, [r7, #88]	@ 0x58
	const char *arg4 = embeddedCliGetToken(args, 4);
 8004eea:	2104      	movs	r1, #4
 8004eec:	68b8      	ldr	r0, [r7, #8]
 8004eee:	f001 fbe1 	bl	80066b4 <embeddedCliGetToken>
 8004ef2:	6578      	str	r0, [r7, #84]	@ 0x54
	uint8_t htr_en[4] = {atoi(arg1), atoi(arg2), atoi(arg3), atoi(arg4)};
 8004ef4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004ef6:	f009 fedc 	bl	800ecb2 <atoi>
 8004efa:	4603      	mov	r3, r0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8004f02:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004f04:	f009 fed5 	bl	800ecb2 <atoi>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8004f10:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004f12:	f009 fece 	bl	800ecb2 <atoi>
 8004f16:	4603      	mov	r3, r0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8004f1e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004f20:	f009 fec7 	bl	800ecb2 <atoi>
 8004f24:	4603      	mov	r3, r0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	temperature_set_heater_auto(htr_en[0], htr_en[1], htr_en[2], htr_en[3]);
 8004f2c:	f897 0050 	ldrb.w	r0, [r7, #80]	@ 0x50
 8004f30:	f897 1051 	ldrb.w	r1, [r7, #81]	@ 0x51
 8004f34:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8004f38:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004f3c:	f006 fc76 	bl	800b82c <temperature_set_heater_auto>
	char buffer[60];
	for (uint8_t channel = 0; channel < 4; channel++) {
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004f46:	e01a      	b.n	8004f7e <CMD_HTR_Set_Auto+0xbe>
		if (htr_en[channel]) {
 8004f48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f4c:	3368      	adds	r3, #104	@ 0x68
 8004f4e:	443b      	add	r3, r7
 8004f50:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <CMD_HTR_Set_Auto+0xb4>
			snprintf(buffer, sizeof(buffer), "Heater %d is ena", channel);
 8004f58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f5c:	f107 0014 	add.w	r0, r7, #20
 8004f60:	4a0d      	ldr	r2, [pc, #52]	@ (8004f98 <CMD_HTR_Set_Auto+0xd8>)
 8004f62:	213c      	movs	r1, #60	@ 0x3c
 8004f64:	f00b f9e4 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 fade 	bl	8006530 <embeddedCliPrint>
	for (uint8_t channel = 0; channel < 4; channel++) {
 8004f74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d9e0      	bls.n	8004f48 <CMD_HTR_Set_Auto+0x88>
		}
	}
	embeddedCliPrint(cli, "");
 8004f86:	4905      	ldr	r1, [pc, #20]	@ (8004f9c <CMD_HTR_Set_Auto+0xdc>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f001 fad1 	bl	8006530 <embeddedCliPrint>
}
 8004f8e:	bf00      	nop
 8004f90:	3768      	adds	r7, #104	@ 0x68
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	08013b0c 	.word	0x08013b0c
 8004f9c:	08013840 	.word	0x08013840

08004fa0 <CMD_HTR_Get_Auto>:

static void CMD_HTR_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b099      	sub	sp, #100	@ 0x64
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
    // TODO: Implement Heater auto mode get logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 8004fac:	2101      	movs	r1, #1
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f001 fb80 	bl	80066b4 <embeddedCliGetToken>
 8004fb4:	65b8      	str	r0, [r7, #88]	@ 0x58
	uint8_t htr_en[4];
	temperature_get_heater_auto(&htr_en[0], &htr_en[1], &htr_en[2], &htr_en[3]);
 8004fb6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004fba:	1cdc      	adds	r4, r3, #3
 8004fbc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004fc6:	1c59      	adds	r1, r3, #1
 8004fc8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f006 fc71 	bl	800b8b4 <temperature_get_heater_auto>
	char buffer[60];
	if (*arg1 == 'a' || *arg1 == '\0') {
 8004fd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b61      	cmp	r3, #97	@ 0x61
 8004fd8:	d003      	beq.n	8004fe2 <CMD_HTR_Get_Auto+0x42>
 8004fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d12c      	bne.n	800503c <CMD_HTR_Get_Auto+0x9c>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004fe8:	e023      	b.n	8005032 <CMD_HTR_Get_Auto+0x92>
			if (htr_en[channel])
 8004fea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004fee:	3360      	adds	r3, #96	@ 0x60
 8004ff0:	443b      	add	r3, r7
 8004ff2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <CMD_HTR_Get_Auto+0x6c>
				snprintf(buffer, sizeof(buffer), "Heater %d is ena", channel);
 8004ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ffe:	f107 0014 	add.w	r0, r7, #20
 8005002:	4a2a      	ldr	r2, [pc, #168]	@ (80050ac <CMD_HTR_Get_Auto+0x10c>)
 8005004:	213c      	movs	r1, #60	@ 0x3c
 8005006:	f00b f993 	bl	8010330 <sniprintf>
 800500a:	e007      	b.n	800501c <CMD_HTR_Get_Auto+0x7c>
			else
				snprintf(buffer, sizeof(buffer), "Heater %d is dis", channel);
 800500c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005010:	f107 0014 	add.w	r0, r7, #20
 8005014:	4a26      	ldr	r2, [pc, #152]	@ (80050b0 <CMD_HTR_Get_Auto+0x110>)
 8005016:	213c      	movs	r1, #60	@ 0x3c
 8005018:	f00b f98a 	bl	8010330 <sniprintf>
			embeddedCliPrint(cli, buffer);
 800501c:	f107 0314 	add.w	r3, r7, #20
 8005020:	4619      	mov	r1, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f001 fa84 	bl	8006530 <embeddedCliPrint>
		for (uint8_t channel = 0; channel < 4; channel++) {
 8005028:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800502c:	3301      	adds	r3, #1
 800502e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005032:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005036:	2b03      	cmp	r3, #3
 8005038:	d9d7      	bls.n	8004fea <CMD_HTR_Get_Auto+0x4a>
 800503a:	e02f      	b.n	800509c <CMD_HTR_Get_Auto+0xfc>
		}
	}
	else if (*arg1 == '0' || *arg1 == '1' || *arg1 == '2' || *arg1 == '3') {
 800503c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d00b      	beq.n	800505c <CMD_HTR_Get_Auto+0xbc>
 8005044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b31      	cmp	r3, #49	@ 0x31
 800504a:	d007      	beq.n	800505c <CMD_HTR_Get_Auto+0xbc>
 800504c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b32      	cmp	r3, #50	@ 0x32
 8005052:	d003      	beq.n	800505c <CMD_HTR_Get_Auto+0xbc>
 8005054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b33      	cmp	r3, #51	@ 0x33
 800505a:	d11f      	bne.n	800509c <CMD_HTR_Get_Auto+0xfc>
		int channel = atoi(arg1);
 800505c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800505e:	f009 fe28 	bl	800ecb2 <atoi>
 8005062:	6578      	str	r0, [r7, #84]	@ 0x54
		if (htr_en[channel])
 8005064:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <CMD_HTR_Get_Auto+0xe2>
			snprintf(buffer, sizeof(buffer), "Heater %d is ena", channel);
 8005072:	f107 0014 	add.w	r0, r7, #20
 8005076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005078:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <CMD_HTR_Get_Auto+0x10c>)
 800507a:	213c      	movs	r1, #60	@ 0x3c
 800507c:	f00b f958 	bl	8010330 <sniprintf>
 8005080:	e006      	b.n	8005090 <CMD_HTR_Get_Auto+0xf0>
		else
			snprintf(buffer, sizeof(buffer), "Heater %d is dis", channel);
 8005082:	f107 0014 	add.w	r0, r7, #20
 8005086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005088:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <CMD_HTR_Get_Auto+0x110>)
 800508a:	213c      	movs	r1, #60	@ 0x3c
 800508c:	f00b f950 	bl	8010330 <sniprintf>
		embeddedCliPrint(cli, buffer);
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f001 fa4a 	bl	8006530 <embeddedCliPrint>
	}
	embeddedCliPrint(cli, "");
 800509c:	4905      	ldr	r1, [pc, #20]	@ (80050b4 <CMD_HTR_Get_Auto+0x114>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 fa46 	bl	8006530 <embeddedCliPrint>
}
 80050a4:	bf00      	nop
 80050a6:	3764      	adds	r7, #100	@ 0x64
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	08013b0c 	.word	0x08013b0c
 80050b0:	08013b20 	.word	0x08013b20
 80050b4:	08013840 	.word	0x08013840

080050b8 <CMD_Temp_Set_Auto>:

static void CMD_Temp_Set_Auto(EmbeddedCli *cli, char *args, void *context) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
    // TODO: Implement auto temperature set logic
	const char *arg1 = embeddedCliGetToken(args, 1);
 80050c4:	2101      	movs	r1, #1
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f001 faf4 	bl	80066b4 <embeddedCliGetToken>
 80050cc:	6178      	str	r0, [r7, #20]
	uint8_t Temp_auto = atoi(arg1)? 1: 0;
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f009 fdef 	bl	800ecb2 <atoi>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	74fb      	strb	r3, [r7, #19]
	temperature_set_auto_ctrl(Temp_auto);
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f006 fc39 	bl	800b95c <temperature_set_auto_ctrl>
	if (Temp_auto)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <CMD_Temp_Set_Auto+0x42>
		embeddedCliPrint(cli, "Temp is auto ctrl");
 80050f0:	4908      	ldr	r1, [pc, #32]	@ (8005114 <CMD_Temp_Set_Auto+0x5c>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f001 fa1c 	bl	8006530 <embeddedCliPrint>
 80050f8:	e003      	b.n	8005102 <CMD_Temp_Set_Auto+0x4a>
	else
		embeddedCliPrint(cli, "Temp isn't auto ctrl");
 80050fa:	4907      	ldr	r1, [pc, #28]	@ (8005118 <CMD_Temp_Set_Auto+0x60>)
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f001 fa17 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8005102:	4906      	ldr	r1, [pc, #24]	@ (800511c <CMD_Temp_Set_Auto+0x64>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f001 fa13 	bl	8006530 <embeddedCliPrint>
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	08013b34 	.word	0x08013b34
 8005118:	08013b48 	.word	0x08013b48
 800511c:	08013840 	.word	0x08013840

08005120 <CMD_Temp_Get_Auto>:

static void CMD_Temp_Get_Auto(EmbeddedCli *cli, char *args, void *context) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
    // TODO: Implement auto temperature get logic
	uint8_t Temp_auto = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
	temperature_get_auto_ctrl(&Temp_auto);
 8005130:	f107 0317 	add.w	r3, r7, #23
 8005134:	4618      	mov	r0, r3
 8005136:	f006 fc23 	bl	800b980 <temperature_get_auto_ctrl>
	if (Temp_auto)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d004      	beq.n	800514a <CMD_Temp_Get_Auto+0x2a>
		embeddedCliPrint(cli, "Temp is auto ctrl");
 8005140:	4908      	ldr	r1, [pc, #32]	@ (8005164 <CMD_Temp_Get_Auto+0x44>)
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 f9f4 	bl	8006530 <embeddedCliPrint>
 8005148:	e003      	b.n	8005152 <CMD_Temp_Get_Auto+0x32>
	else
		embeddedCliPrint(cli, "Temp isn't auto ctrl");
 800514a:	4907      	ldr	r1, [pc, #28]	@ (8005168 <CMD_Temp_Get_Auto+0x48>)
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f001 f9ef 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8005152:	4906      	ldr	r1, [pc, #24]	@ (800516c <CMD_Temp_Get_Auto+0x4c>)
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f001 f9eb 	bl	8006530 <embeddedCliPrint>
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	08013b34 	.word	0x08013b34
 8005168:	08013b48 	.word	0x08013b48
 800516c:	08013840 	.word	0x08013840

08005170 <CMD_Sens_List>:


static void CMD_Sens_List(EmbeddedCli *cli, char *args, void *context) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b0a0      	sub	sp, #128	@ 0x80
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	// TODO:
	char buffer[100];
	NTC_get_temperature(NTC_Temperature);
 800517c:	4873      	ldr	r0, [pc, #460]	@ (800534c <CMD_Sens_List+0x1dc>)
 800517e:	f005 ffbd 	bl	800b0fc <NTC_get_temperature>
	int16_t temp;
	for (uint8_t channel = 0; channel < 8; channel++) {
 8005182:	2300      	movs	r3, #0
 8005184:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005188:	e015      	b.n	80051b6 <CMD_Sens_List+0x46>
		temp = NTC_Temperature[channel];
 800518a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800518e:	4a6f      	ldr	r2, [pc, #444]	@ (800534c <CMD_Sens_List+0x1dc>)
 8005190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005194:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		if (temp != 0x7FFF) {
 8005198:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 800519c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <CMD_Sens_List+0x3c>
			Sensor_list.ntc = 1;
 80051a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <CMD_Sens_List+0x1e0>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
			break;
 80051aa:	e008      	b.n	80051be <CMD_Sens_List+0x4e>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80051ac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80051b0:	3301      	adds	r3, #1
 80051b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80051ba:	2b07      	cmp	r3, #7
 80051bc:	d9e5      	bls.n	800518a <CMD_Sens_List+0x1a>
		}
	}
	Sensor_I2C_Init();
 80051be:	f005 f853 	bl	800a268 <Sensor_I2C_Init>
	strcpy(buffer, "sensor:");
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4a63      	ldr	r2, [pc, #396]	@ (8005354 <CMD_Sens_List+0x1e4>)
 80051c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051cc:	e883 0003 	stmia.w	r3, {r0, r1}
	if (Sensor_list.ntc) {
 80051d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005350 <CMD_Sens_List+0x1e0>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <CMD_Sens_List+0x86>
		strcat(buffer, "ntc,");
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb f88f 	bl	8000300 <strlen>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	f107 0314 	add.w	r3, r7, #20
 80051ea:	4413      	add	r3, r2
 80051ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005358 <CMD_Sens_List+0x1e8>)
 80051ee:	6810      	ldr	r0, [r2, #0]
 80051f0:	6018      	str	r0, [r3, #0]
 80051f2:	7912      	ldrb	r2, [r2, #4]
 80051f4:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.lsm) {
 80051f6:	4b56      	ldr	r3, [pc, #344]	@ (8005350 <CMD_Sens_List+0x1e0>)
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <CMD_Sens_List+0xac>
		strcat(buffer, "lsm,");
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb f87c 	bl	8000300 <strlen>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4413      	add	r3, r2
 8005212:	4a52      	ldr	r2, [pc, #328]	@ (800535c <CMD_Sens_List+0x1ec>)
 8005214:	6810      	ldr	r0, [r2, #0]
 8005216:	6018      	str	r0, [r3, #0]
 8005218:	7912      	ldrb	r2, [r2, #4]
 800521a:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.bmp) {
 800521c:	4b4c      	ldr	r3, [pc, #304]	@ (8005350 <CMD_Sens_List+0x1e0>)
 800521e:	789b      	ldrb	r3, [r3, #2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00e      	beq.n	8005242 <CMD_Sens_List+0xd2>
		strcat(buffer, "bmp,");
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb f869 	bl	8000300 <strlen>
 800522e:	4603      	mov	r3, r0
 8005230:	461a      	mov	r2, r3
 8005232:	f107 0314 	add.w	r3, r7, #20
 8005236:	4413      	add	r3, r2
 8005238:	4a49      	ldr	r2, [pc, #292]	@ (8005360 <CMD_Sens_List+0x1f0>)
 800523a:	6810      	ldr	r0, [r2, #0]
 800523c:	6018      	str	r0, [r3, #0]
 800523e:	7912      	ldrb	r2, [r2, #4]
 8005240:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.bme) {
 8005242:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <CMD_Sens_List+0x1e0>)
 8005244:	78db      	ldrb	r3, [r3, #3]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <CMD_Sens_List+0xf8>
		strcat(buffer, "bme,");
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb f856 	bl	8000300 <strlen>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4413      	add	r3, r2
 800525e:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <CMD_Sens_List+0x1f4>)
 8005260:	6810      	ldr	r0, [r2, #0]
 8005262:	6018      	str	r0, [r3, #0]
 8005264:	7912      	ldrb	r2, [r2, #4]
 8005266:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.h3l) {
 8005268:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <CMD_Sens_List+0x1e0>)
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00e      	beq.n	800528e <CMD_Sens_List+0x11e>
		strcat(buffer, "h3l,");
 8005270:	f107 0314 	add.w	r3, r7, #20
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f843 	bl	8000300 <strlen>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4413      	add	r3, r2
 8005284:	4a38      	ldr	r2, [pc, #224]	@ (8005368 <CMD_Sens_List+0x1f8>)
 8005286:	6810      	ldr	r0, [r2, #0]
 8005288:	6018      	str	r0, [r3, #0]
 800528a:	7912      	ldrb	r2, [r2, #4]
 800528c:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.h250) {
 800528e:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <CMD_Sens_List+0x1e0>)
 8005290:	795b      	ldrb	r3, [r3, #5]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <CMD_Sens_List+0x144>
		strcat(buffer, "h250,");
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb f830 	bl	8000300 <strlen>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4413      	add	r3, r2
 80052aa:	4a30      	ldr	r2, [pc, #192]	@ (800536c <CMD_Sens_List+0x1fc>)
 80052ac:	6810      	ldr	r0, [r2, #0]
 80052ae:	6018      	str	r0, [r3, #0]
 80052b0:	8892      	ldrh	r2, [r2, #4]
 80052b2:	809a      	strh	r2, [r3, #4]
	}
	if (Sensor_list.k33) {
 80052b4:	4b26      	ldr	r3, [pc, #152]	@ (8005350 <CMD_Sens_List+0x1e0>)
 80052b6:	799b      	ldrb	r3, [r3, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <CMD_Sens_List+0x16a>
		strcat(buffer, "k33,");
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb f81d 	bl	8000300 <strlen>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	f107 0314 	add.w	r3, r7, #20
 80052ce:	4413      	add	r3, r2
 80052d0:	4a27      	ldr	r2, [pc, #156]	@ (8005370 <CMD_Sens_List+0x200>)
 80052d2:	6810      	ldr	r0, [r2, #0]
 80052d4:	6018      	str	r0, [r3, #0]
 80052d6:	7912      	ldrb	r2, [r2, #4]
 80052d8:	711a      	strb	r2, [r3, #4]
	}
	if (Sensor_list.sfc) {
 80052da:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <CMD_Sens_List+0x1e0>)
 80052dc:	79db      	ldrb	r3, [r3, #7]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <CMD_Sens_List+0x190>
		strcat(buffer, "sfc,");
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb f80a 	bl	8000300 <strlen>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4413      	add	r3, r2
 80052f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005374 <CMD_Sens_List+0x204>)
 80052f8:	6810      	ldr	r0, [r2, #0]
 80052fa:	6018      	str	r0, [r3, #0]
 80052fc:	7912      	ldrb	r2, [r2, #4]
 80052fe:	711a      	strb	r2, [r3, #4]
	}

	size_t len = strlen(buffer);
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4618      	mov	r0, r3
 8005306:	f7fa fffb 	bl	8000300 <strlen>
 800530a:	67b8      	str	r0, [r7, #120]	@ 0x78
	if (len >= 1 && buffer[len - 1] == ',') {
 800530c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <CMD_Sens_List+0x1c0>
 8005312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005314:	3b01      	subs	r3, #1
 8005316:	3380      	adds	r3, #128	@ 0x80
 8005318:	443b      	add	r3, r7
 800531a:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 800531e:	2b2c      	cmp	r3, #44	@ 0x2c
 8005320:	d106      	bne.n	8005330 <CMD_Sens_List+0x1c0>
	    buffer[len - 1] = '\0';
 8005322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005324:	3b01      	subs	r3, #1
 8005326:	3380      	adds	r3, #128	@ 0x80
 8005328:	443b      	add	r3, r7
 800532a:	2200      	movs	r2, #0
 800532c:	f803 2c6c 	strb.w	r2, [r3, #-108]
	}

	embeddedCliPrint(cli, buffer);
 8005330:	f107 0314 	add.w	r3, r7, #20
 8005334:	4619      	mov	r1, r3
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 f8fa 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 800533c:	490e      	ldr	r1, [pc, #56]	@ (8005378 <CMD_Sens_List+0x208>)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f001 f8f6 	bl	8006530 <embeddedCliPrint>
}
 8005344:	bf00      	nop
 8005346:	3780      	adds	r7, #128	@ 0x80
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	2001def0 	.word	0x2001def0
 8005350:	2001ded8 	.word	0x2001ded8
 8005354:	08013b60 	.word	0x08013b60
 8005358:	08013b68 	.word	0x08013b68
 800535c:	08013b70 	.word	0x08013b70
 8005360:	08013b78 	.word	0x08013b78
 8005364:	08013b80 	.word	0x08013b80
 8005368:	08013b88 	.word	0x08013b88
 800536c:	08013b90 	.word	0x08013b90
 8005370:	08013b98 	.word	0x08013b98
 8005374:	08013ba0 	.word	0x08013ba0
 8005378:	08013840 	.word	0x08013840

0800537c <CMD_LSMSens_Get>:

static void CMD_LSMSens_Get(EmbeddedCli *cli, char *args, void *context) {
 800537c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537e:	b0a1      	sub	sp, #132	@ 0x84
 8005380:	af06      	add	r7, sp, #24
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
    // TODO: Implement LSM sensor get logic
	LSM6DSOX_Read_Data(&LSM6DSOX_Data);
 8005388:	4839      	ldr	r0, [pc, #228]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 800538a:	f004 fea1 	bl	800a0d0 <LSM6DSOX_Read_Data>
    char buffer[80];

    const char *arg1 = embeddedCliGetToken(args, 1);
 800538e:	2101      	movs	r1, #1
 8005390:	68b8      	ldr	r0, [r7, #8]
 8005392:	f001 f98f 	bl	80066b4 <embeddedCliGetToken>
 8005396:	6678      	str	r0, [r7, #100]	@ 0x64
	if (*arg1 == 'a' || *arg1 == '\0')
 8005398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b61      	cmp	r3, #97	@ 0x61
 800539e:	d003      	beq.n	80053a8 <CMD_LSMSens_Get+0x2c>
 80053a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d123      	bne.n	80053f0 <CMD_LSMSens_Get+0x74>
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 80053a8:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053aa:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053ae:	461e      	mov	r6, r3
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 80053b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053b6:	461a      	mov	r2, r3
								LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z,
 80053b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053be:	4619      	mov	r1, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053c6:	461c      	mov	r4, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 80053c8:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053ce:	461d      	mov	r5, r3
								LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g),gyro:%d %d %d(dps)",
 80053d6:	f107 0014 	add.w	r0, r7, #20
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	9503      	str	r5, [sp, #12]
 80053de:	9402      	str	r4, [sp, #8]
 80053e0:	9101      	str	r1, [sp, #4]
 80053e2:	9200      	str	r2, [sp, #0]
 80053e4:	4633      	mov	r3, r6
 80053e6:	4a23      	ldr	r2, [pc, #140]	@ (8005474 <CMD_LSMSens_Get+0xf8>)
 80053e8:	2150      	movs	r1, #80	@ 0x50
 80053ea:	f00a ffa1 	bl	8010330 <sniprintf>
 80053ee:	e030      	b.n	8005452 <CMD_LSMSens_Get+0xd6>
	else if (*arg1 == '0')
 80053f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b30      	cmp	r3, #48	@ 0x30
 80053f6:	d114      	bne.n	8005422 <CMD_LSMSens_Get+0xa6>
		snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g)", LSM6DSOX_Data.Accel.x, LSM6DSOX_Data.Accel.y, LSM6DSOX_Data.Accel.z);
 80053f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 80053fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053fe:	4619      	mov	r1, r3
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 8005402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005406:	461a      	mov	r2, r3
 8005408:	4b19      	ldr	r3, [pc, #100]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 800540a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800540e:	f107 0014 	add.w	r0, r7, #20
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	9200      	str	r2, [sp, #0]
 8005416:	460b      	mov	r3, r1
 8005418:	4a17      	ldr	r2, [pc, #92]	@ (8005478 <CMD_LSMSens_Get+0xfc>)
 800541a:	2150      	movs	r1, #80	@ 0x50
 800541c:	f00a ff88 	bl	8010330 <sniprintf>
 8005420:	e017      	b.n	8005452 <CMD_LSMSens_Get+0xd6>
	else if (*arg1 == '1')
 8005422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b31      	cmp	r3, #49	@ 0x31
 8005428:	d113      	bne.n	8005452 <CMD_LSMSens_Get+0xd6>
		snprintf(buffer, sizeof(buffer), "gyro:%d %d %d(dps)", LSM6DSOX_Data.Gyro.x, LSM6DSOX_Data.Gyro.y, LSM6DSOX_Data.Gyro.z);
 800542a:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 800542c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005430:	4619      	mov	r1, r3
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 8005434:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005438:	461a      	mov	r2, r3
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <CMD_LSMSens_Get+0xf4>)
 800543c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005440:	f107 0014 	add.w	r0, r7, #20
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	9200      	str	r2, [sp, #0]
 8005448:	460b      	mov	r3, r1
 800544a:	4a0c      	ldr	r2, [pc, #48]	@ (800547c <CMD_LSMSens_Get+0x100>)
 800544c:	2150      	movs	r1, #80	@ 0x50
 800544e:	f00a ff6f 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	4619      	mov	r1, r3
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 f869 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 800545e:	4908      	ldr	r1, [pc, #32]	@ (8005480 <CMD_LSMSens_Get+0x104>)
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f001 f865 	bl	8006530 <embeddedCliPrint>
}
 8005466:	bf00      	nop
 8005468:	376c      	adds	r7, #108	@ 0x6c
 800546a:	46bd      	mov	sp, r7
 800546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800546e:	bf00      	nop
 8005470:	2001dea8 	.word	0x2001dea8
 8005474:	08013ba8 	.word	0x08013ba8
 8005478:	08013bd0 	.word	0x08013bd0
 800547c:	08013be4 	.word	0x08013be4
 8005480:	08013840 	.word	0x08013840

08005484 <CMD_H3LSens_Get>:

static void CMD_H3LSens_Get(EmbeddedCli *cli, char *args, void *context) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b094      	sub	sp, #80	@ 0x50
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
    // TODO: Implement H3L sensor get logic
	H3LIS331DL_Get_Accel(&H3LIS331DL_Data);
 8005490:	4819      	ldr	r0, [pc, #100]	@ (80054f8 <CMD_H3LSens_Get+0x74>)
 8005492:	f004 fa8f 	bl	80099b4 <H3LIS331DL_Get_Accel>
	char buffer[50];
	snprintf(buffer, sizeof(buffer), "accel:%d %d %d(g)", (int16_t)H3LIS331DL_Data.x, (int16_t)H3LIS331DL_Data.y, (int16_t)H3LIS331DL_Data.z);
 8005496:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <CMD_H3LSens_Get+0x74>)
 8005498:	edd3 7a00 	vldr	s15, [r3]
 800549c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a0:	ee17 3a90 	vmov	r3, s15
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <CMD_H3LSens_Get+0x74>)
 80054aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80054ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b2:	ee17 3a90 	vmov	r3, s15
 80054b6:	b21b      	sxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <CMD_H3LSens_Get+0x74>)
 80054bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80054c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c4:	ee17 3a90 	vmov	r3, s15
 80054c8:	b21b      	sxth	r3, r3
 80054ca:	f107 0014 	add.w	r0, r7, #20
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	9200      	str	r2, [sp, #0]
 80054d2:	460b      	mov	r3, r1
 80054d4:	4a09      	ldr	r2, [pc, #36]	@ (80054fc <CMD_H3LSens_Get+0x78>)
 80054d6:	2132      	movs	r1, #50	@ 0x32
 80054d8:	f00a ff2a 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f001 f824 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80054e8:	4905      	ldr	r1, [pc, #20]	@ (8005500 <CMD_H3LSens_Get+0x7c>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f001 f820 	bl	8006530 <embeddedCliPrint>
}
 80054f0:	bf00      	nop
 80054f2:	3748      	adds	r7, #72	@ 0x48
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2001dec0 	.word	0x2001dec0
 80054fc:	08013bd0 	.word	0x08013bd0
 8005500:	08013840 	.word	0x08013840

08005504 <CMD_BMESens_Get>:

static void CMD_BMESens_Get(EmbeddedCli *cli, char *args, void *context) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b0a0      	sub	sp, #128	@ 0x80
 8005508:	af06      	add	r7, sp, #24
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
    // TODO: Implement BME sensor get logic
	BME280_Read_Data(&BME280_Data);
 8005510:	4839      	ldr	r0, [pc, #228]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 8005512:	f004 f947 	bl	80097a4 <BME280_Read_Data>
	char buffer[80];

	const char *arg1 = embeddedCliGetToken(args, 1);
 8005516:	2101      	movs	r1, #1
 8005518:	68b8      	ldr	r0, [r7, #8]
 800551a:	f001 f8cb 	bl	80066b4 <embeddedCliGetToken>
 800551e:	6678      	str	r0, [r7, #100]	@ 0x64
	if (*arg1 == 'a' || *arg1 == '\0')
 8005520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b61      	cmp	r3, #97	@ 0x61
 8005526:	d003      	beq.n	8005530 <CMD_BMESens_Get+0x2c>
 8005528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11c      	bne.n	800556a <CMD_BMESens_Get+0x66>
		snprintf(buffer, sizeof(buffer), "temp:%.2f(C),humid:%.2f(%%),press:%.2f(hPa)", BME280_Data.temperature, BME280_Data.humidity, BME280_Data.pressure);
 8005530:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800553a:	4b2f      	ldr	r3, [pc, #188]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 800553c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005540:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005544:	4b2c      	ldr	r3, [pc, #176]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 8005546:	edd3 5a01 	vldr	s11, [r3, #4]
 800554a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	ed8d 5b04 	vstr	d5, [sp, #16]
 8005556:	ed8d 6b02 	vstr	d6, [sp, #8]
 800555a:	ed8d 7b00 	vstr	d7, [sp]
 800555e:	4a27      	ldr	r2, [pc, #156]	@ (80055fc <CMD_BMESens_Get+0xf8>)
 8005560:	2150      	movs	r1, #80	@ 0x50
 8005562:	4618      	mov	r0, r3
 8005564:	f00a fee4 	bl	8010330 <sniprintf>
 8005568:	e037      	b.n	80055da <CMD_BMESens_Get+0xd6>
	else if (*arg1 == '0')
 800556a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b30      	cmp	r3, #48	@ 0x30
 8005570:	d10e      	bne.n	8005590 <CMD_BMESens_Get+0x8c>
		snprintf(buffer, sizeof(buffer), "temp:%.2f(C)", BME280_Data.temperature);
 8005572:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	ed8d 7b00 	vstr	d7, [sp]
 8005584:	4a1e      	ldr	r2, [pc, #120]	@ (8005600 <CMD_BMESens_Get+0xfc>)
 8005586:	2150      	movs	r1, #80	@ 0x50
 8005588:	4618      	mov	r0, r3
 800558a:	f00a fed1 	bl	8010330 <sniprintf>
 800558e:	e024      	b.n	80055da <CMD_BMESens_Get+0xd6>
	else if (*arg1 == '1')
 8005590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b31      	cmp	r3, #49	@ 0x31
 8005596:	d10e      	bne.n	80055b6 <CMD_BMESens_Get+0xb2>
		snprintf(buffer, sizeof(buffer), "humid:%.2f(%%)", BME280_Data.humidity);
 8005598:	4b17      	ldr	r3, [pc, #92]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 800559a:	edd3 7a02 	vldr	s15, [r3, #8]
 800559e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055a2:	f107 0314 	add.w	r3, r7, #20
 80055a6:	ed8d 7b00 	vstr	d7, [sp]
 80055aa:	4a16      	ldr	r2, [pc, #88]	@ (8005604 <CMD_BMESens_Get+0x100>)
 80055ac:	2150      	movs	r1, #80	@ 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f00a febe 	bl	8010330 <sniprintf>
 80055b4:	e011      	b.n	80055da <CMD_BMESens_Get+0xd6>
	else if (*arg1 == '2')
 80055b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b32      	cmp	r3, #50	@ 0x32
 80055bc:	d10d      	bne.n	80055da <CMD_BMESens_Get+0xd6>
		snprintf(buffer, sizeof(buffer), "press:%.2f(hPa)", BME280_Data.pressure);
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <CMD_BMESens_Get+0xf4>)
 80055c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80055c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	ed8d 7b00 	vstr	d7, [sp]
 80055d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005608 <CMD_BMESens_Get+0x104>)
 80055d2:	2150      	movs	r1, #80	@ 0x50
 80055d4:	4618      	mov	r0, r3
 80055d6:	f00a feab 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 80055da:	f107 0314 	add.w	r3, r7, #20
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 ffa5 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80055e6:	4909      	ldr	r1, [pc, #36]	@ (800560c <CMD_BMESens_Get+0x108>)
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 ffa1 	bl	8006530 <embeddedCliPrint>
}
 80055ee:	bf00      	nop
 80055f0:	3768      	adds	r7, #104	@ 0x68
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2001deb4 	.word	0x2001deb4
 80055fc:	08013bf8 	.word	0x08013bf8
 8005600:	08013c24 	.word	0x08013c24
 8005604:	08013c34 	.word	0x08013c34
 8005608:	08013c44 	.word	0x08013c44
 800560c:	08013840 	.word	0x08013840

08005610 <CMD_H250Sens_Get>:

static void CMD_H250Sens_Get(EmbeddedCli *cli, char *args, void *context) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	@ 0x38
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	// TODO: Implement H250 sensor get logic
	H250_I2C_Read_Data(&H250_I2C_Data);
 800561c:	4812      	ldr	r0, [pc, #72]	@ (8005668 <CMD_H250Sens_Get+0x58>)
 800561e:	f004 f90f 	bl	8009840 <H250_I2C_Read_Data>
	char buffer[30];
	snprintf(buffer, sizeof(buffer), "co2:%.2f(%%)", (float)H250_I2C_Data/100.0f);
 8005622:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <CMD_H250Sens_Get+0x58>)
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800562e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800566c <CMD_H250Sens_Get+0x5c>
 8005632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	ed8d 7b00 	vstr	d7, [sp]
 8005642:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <CMD_H250Sens_Get+0x60>)
 8005644:	211e      	movs	r1, #30
 8005646:	4618      	mov	r0, r3
 8005648:	f00a fe72 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 ff6c 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8005658:	4906      	ldr	r1, [pc, #24]	@ (8005674 <CMD_H250Sens_Get+0x64>)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 ff68 	bl	8006530 <embeddedCliPrint>
}
 8005660:	bf00      	nop
 8005662:	3730      	adds	r7, #48	@ 0x30
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	2001decc 	.word	0x2001decc
 800566c:	42c80000 	.word	0x42c80000
 8005670:	08013c54 	.word	0x08013c54
 8005674:	08013840 	.word	0x08013840

08005678 <CMD_K33Sens_Get>:

static void CMD_K33Sens_Get(EmbeddedCli *cli, char *args, void *context) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b0a0      	sub	sp, #128	@ 0x80
 800567c:	af06      	add	r7, sp, #24
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
    // TODO: Implement K33 sensor get logic
	K33_Read_Data(&K33_Data);
 8005684:	4851      	ldr	r0, [pc, #324]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 8005686:	f004 fbff 	bl	8009e88 <K33_Read_Data>
	char buffer[80];

	const char *arg1 = embeddedCliGetToken(args, 1);
 800568a:	2101      	movs	r1, #1
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f001 f811 	bl	80066b4 <embeddedCliGetToken>
 8005692:	6678      	str	r0, [r7, #100]	@ 0x64
	if (*arg1 == 'a' || *arg1 == '\0')
 8005694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b61      	cmp	r3, #97	@ 0x61
 800569a:	d003      	beq.n	80056a4 <CMD_K33Sens_Get+0x2c>
 800569c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d134      	bne.n	800570e <CMD_K33Sens_Get+0x96>
		snprintf(buffer, sizeof(buffer), "co2:%.2f(%%),temp:%.2f(C),humid:%.2f(%%)", (float)(K33_Data.CO2/1000.0f), (float)(K33_Data.Temp/100.0f), (float)(K33_Data.RH/100.0f));
 80056a4:	4b49      	ldr	r3, [pc, #292]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 80056a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056b2:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80057d0 <CMD_K33Sens_Get+0x158>
 80056b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056be:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 80056c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056c4:	ee06 3a90 	vmov	s13, r3
 80056c8:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80056cc:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80057d4 <CMD_K33Sens_Get+0x15c>
 80056d0:	eec6 6a25 	vdiv.f32	s13, s12, s11
 80056d4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80056d8:	4b3c      	ldr	r3, [pc, #240]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 80056da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80056de:	ee05 3a90 	vmov	s11, r3
 80056e2:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80056e6:	eddf 4a3b 	vldr	s9, [pc, #236]	@ 80057d4 <CMD_K33Sens_Get+0x15c>
 80056ea:	eec5 5a24 	vdiv.f32	s11, s10, s9
 80056ee:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	ed8d 5b04 	vstr	d5, [sp, #16]
 80056fa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80056fe:	ed8d 7b00 	vstr	d7, [sp]
 8005702:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <CMD_K33Sens_Get+0x160>)
 8005704:	2150      	movs	r1, #80	@ 0x50
 8005706:	4618      	mov	r0, r3
 8005708:	f00a fe12 	bl	8010330 <sniprintf>
 800570c:	e04f      	b.n	80057ae <CMD_K33Sens_Get+0x136>
	else if (*arg1 == '0')
 800570e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b30      	cmp	r3, #48	@ 0x30
 8005714:	d116      	bne.n	8005744 <CMD_K33Sens_Get+0xcc>
		snprintf(buffer, sizeof(buffer), "co2:%.2f(%%)", (float)(K33_Data.CO2/1000.0f));
 8005716:	4b2d      	ldr	r3, [pc, #180]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 8005718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005724:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80057d0 <CMD_K33Sens_Get+0x158>
 8005728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800572c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	ed8d 7b00 	vstr	d7, [sp]
 8005738:	4a28      	ldr	r2, [pc, #160]	@ (80057dc <CMD_K33Sens_Get+0x164>)
 800573a:	2150      	movs	r1, #80	@ 0x50
 800573c:	4618      	mov	r0, r3
 800573e:	f00a fdf7 	bl	8010330 <sniprintf>
 8005742:	e034      	b.n	80057ae <CMD_K33Sens_Get+0x136>
	else if (*arg1 == '1')
 8005744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b31      	cmp	r3, #49	@ 0x31
 800574a:	d116      	bne.n	800577a <CMD_K33Sens_Get+0x102>
		snprintf(buffer, sizeof(buffer), "temp:%.2f(C)", (float)(K33_Data.Temp/100.0f));
 800574c:	4b1f      	ldr	r3, [pc, #124]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 800574e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800575a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80057d4 <CMD_K33Sens_Get+0x15c>
 800575e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005766:	f107 0314 	add.w	r3, r7, #20
 800576a:	ed8d 7b00 	vstr	d7, [sp]
 800576e:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <CMD_K33Sens_Get+0x168>)
 8005770:	2150      	movs	r1, #80	@ 0x50
 8005772:	4618      	mov	r0, r3
 8005774:	f00a fddc 	bl	8010330 <sniprintf>
 8005778:	e019      	b.n	80057ae <CMD_K33Sens_Get+0x136>
	else if (*arg1 == '2')
 800577a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b32      	cmp	r3, #50	@ 0x32
 8005780:	d115      	bne.n	80057ae <CMD_K33Sens_Get+0x136>
		snprintf(buffer, sizeof(buffer), "humid:%.2f(%%)", (float)(K33_Data.RH/100.0f));
 8005782:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <CMD_K33Sens_Get+0x154>)
 8005784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005790:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80057d4 <CMD_K33Sens_Get+0x15c>
 8005794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005798:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	ed8d 7b00 	vstr	d7, [sp]
 80057a4:	4a0f      	ldr	r2, [pc, #60]	@ (80057e4 <CMD_K33Sens_Get+0x16c>)
 80057a6:	2150      	movs	r1, #80	@ 0x50
 80057a8:	4618      	mov	r0, r3
 80057aa:	f00a fdc1 	bl	8010330 <sniprintf>
	embeddedCliPrint(cli, buffer);
 80057ae:	f107 0314 	add.w	r3, r7, #20
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 febb 	bl	8006530 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 80057ba:	490b      	ldr	r1, [pc, #44]	@ (80057e8 <CMD_K33Sens_Get+0x170>)
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 feb7 	bl	8006530 <embeddedCliPrint>
}
 80057c2:	bf00      	nop
 80057c4:	3768      	adds	r7, #104	@ 0x68
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	2001ded0 	.word	0x2001ded0
 80057d0:	447a0000 	.word	0x447a0000
 80057d4:	42c80000 	.word	0x42c80000
 80057d8:	08013c64 	.word	0x08013c64
 80057dc:	08013c54 	.word	0x08013c54
 80057e0:	08013c24 	.word	0x08013c24
 80057e4:	08013c34 	.word	0x08013c34
 80057e8:	08013840 	.word	0x08013840

080057ec <CMD_Set_Laser>:

static void CMD_Set_Laser(EmbeddedCli *cli, char *args, void *context) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	@ 0x38
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
    int argc = embeddedCliGetTokenCount(args);
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	f000 ff91 	bl	8006720 <embeddedCliGetTokenCount>
 80057fe:	4603      	mov	r3, r0
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (argc < 3) {
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	2b02      	cmp	r3, #2
 8005806:	dc04      	bgt.n	8005812 <CMD_Set_Laser+0x26>
        embeddedCliPrint(cli, "Too few args. Format: set_laser [int/ext] [laser_index] [dac_val]\n");
 8005808:	4973      	ldr	r1, [pc, #460]	@ (80059d8 <CMD_Set_Laser+0x1ec>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fe90 	bl	8006530 <embeddedCliPrint>
        return;
 8005810:	e0de      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
    }

    const char *mode = embeddedCliGetToken(args, 1);
 8005812:	2101      	movs	r1, #1
 8005814:	68b8      	ldr	r0, [r7, #8]
 8005816:	f000 ff4d 	bl	80066b4 <embeddedCliGetToken>
 800581a:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint8_t laser_ind = (uint8_t)atoi(embeddedCliGetToken(args, 2));
 800581c:	2102      	movs	r1, #2
 800581e:	68b8      	ldr	r0, [r7, #8]
 8005820:	f000 ff48 	bl	80066b4 <embeddedCliGetToken>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	f009 fa43 	bl	800ecb2 <atoi>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (strcmp(mode, "int") == 0) {
 8005832:	496a      	ldr	r1, [pc, #424]	@ (80059dc <CMD_Set_Laser+0x1f0>)
 8005834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005836:	f7fa fd03 	bl	8000240 <strcmp>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d15b      	bne.n	80058f8 <CMD_Set_Laser+0x10c>
        if (laser_ind == 0) {
 8005840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <CMD_Set_Laser+0x7c>
            if (argc != 3) {
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	2b03      	cmp	r3, #3
 800584c:	d004      	beq.n	8005858 <CMD_Set_Laser+0x6c>
                embeddedCliPrint(cli, "Usage: set_laser int 0\n");
 800584e:	4964      	ldr	r1, [pc, #400]	@ (80059e0 <CMD_Set_Laser+0x1f4>)
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fe6d 	bl	8006530 <embeddedCliPrint>
                return;
 8005856:	e0bb      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
            }
            MCP4902_Shutdown(&DAC_device, MCP4902_CHA);
 8005858:	2100      	movs	r1, #0
 800585a:	4862      	ldr	r0, [pc, #392]	@ (80059e4 <CMD_Set_Laser+0x1f8>)
 800585c:	f002 feec 	bl	8008638 <MCP4902_Shutdown>
            ADG1414_Chain_SwitchAllOff(&laser_int);
 8005860:	4861      	ldr	r0, [pc, #388]	@ (80059e8 <CMD_Set_Laser+0x1fc>)
 8005862:	f002 fa87 	bl	8007d74 <ADG1414_Chain_SwitchAllOff>
 8005866:	e0af      	b.n	80059c8 <CMD_Set_Laser+0x1dc>
        } else if (laser_ind <= 36) {
 8005868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800586c:	2b24      	cmp	r3, #36	@ 0x24
 800586e:	d83e      	bhi.n	80058ee <CMD_Set_Laser+0x102>
//            if (argc != 4) {
//                embeddedCliPrint(cli, "Usage: set_laser int [1-36] [dac_val_percent]\n");
//                return;
//            }

            float percent = (float)atof(embeddedCliGetToken(args, 3));
 8005870:	2103      	movs	r1, #3
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	f000 ff1e 	bl	80066b4 <embeddedCliGetToken>
 8005878:	4603      	mov	r3, r0
 800587a:	4618      	mov	r0, r3
 800587c:	f009 fa16 	bl	800ecac <atof>
 8005880:	eeb0 7b40 	vmov.f64	d7, d0
 8005884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005888:	edc7 7a06 	vstr	s15, [r7, #24]
            if (percent < 0 || percent > 100) {
 800588c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	d408      	bmi.n	80058ac <CMD_Set_Laser+0xc0>
 800589a:	edd7 7a06 	vldr	s15, [r7, #24]
 800589e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80059ec <CMD_Set_Laser+0x200>
 80058a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	dd04      	ble.n	80058b6 <CMD_Set_Laser+0xca>
                embeddedCliPrint(cli, "Percent must be 0-100\n");
 80058ac:	4950      	ldr	r1, [pc, #320]	@ (80059f0 <CMD_Set_Laser+0x204>)
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fe3e 	bl	8006530 <embeddedCliPrint>
                return;
 80058b4:	e08c      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
            }

            uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 80058b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80058ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058be:	23ff      	movs	r3, #255	@ 0xff
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2300      	movs	r3, #0
 80058c4:	2264      	movs	r2, #100	@ 0x64
 80058c6:	2100      	movs	r1, #0
 80058c8:	ee17 0a90 	vmov	r0, s15
 80058cc:	f7fe fabb 	bl	8003e46 <Map>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
            MCP4902_Set_DAC(&DAC_device, MCP4902_CHA, dac_val);
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	461a      	mov	r2, r3
 80058d8:	2100      	movs	r1, #0
 80058da:	4842      	ldr	r0, [pc, #264]	@ (80059e4 <CMD_Set_Laser+0x1f8>)
 80058dc:	f002 ff02 	bl	80086e4 <MCP4902_Set_DAC>
            ADG1414_Chain_SwitchOn(&laser_int, laser_ind);
 80058e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058e4:	4619      	mov	r1, r3
 80058e6:	4840      	ldr	r0, [pc, #256]	@ (80059e8 <CMD_Set_Laser+0x1fc>)
 80058e8:	f002 f9d4 	bl	8007c94 <ADG1414_Chain_SwitchOn>
 80058ec:	e06c      	b.n	80059c8 <CMD_Set_Laser+0x1dc>
        } else {
            embeddedCliPrint(cli, "Laser index out of range for int (1-36)\n");
 80058ee:	4941      	ldr	r1, [pc, #260]	@ (80059f4 <CMD_Set_Laser+0x208>)
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fe1d 	bl	8006530 <embeddedCliPrint>
            return;
 80058f6:	e06b      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
        }
    } else if (strcmp(mode, "ext") == 0) {
 80058f8:	493f      	ldr	r1, [pc, #252]	@ (80059f8 <CMD_Set_Laser+0x20c>)
 80058fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058fc:	f7fa fca0 	bl	8000240 <strcmp>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d15b      	bne.n	80059be <CMD_Set_Laser+0x1d2>
        if (laser_ind == 0) {
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <CMD_Set_Laser+0x142>
            if (argc != 3) {
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	2b03      	cmp	r3, #3
 8005912:	d004      	beq.n	800591e <CMD_Set_Laser+0x132>
                embeddedCliPrint(cli, "Usage: set_laser ext 0\n");
 8005914:	4939      	ldr	r1, [pc, #228]	@ (80059fc <CMD_Set_Laser+0x210>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fe0a 	bl	8006530 <embeddedCliPrint>
                return;
 800591c:	e058      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
            }
            MCP4902_Shutdown(&DAC_device, MCP4902_CHB);
 800591e:	2101      	movs	r1, #1
 8005920:	4830      	ldr	r0, [pc, #192]	@ (80059e4 <CMD_Set_Laser+0x1f8>)
 8005922:	f002 fe89 	bl	8008638 <MCP4902_Shutdown>
            ADG1414_Chain_SwitchAllOff(&laser_ext);
 8005926:	4836      	ldr	r0, [pc, #216]	@ (8005a00 <CMD_Set_Laser+0x214>)
 8005928:	f002 fa24 	bl	8007d74 <ADG1414_Chain_SwitchAllOff>
 800592c:	e04c      	b.n	80059c8 <CMD_Set_Laser+0x1dc>
        } else if (laser_ind <= 8) {
 800592e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005932:	2b08      	cmp	r3, #8
 8005934:	d83e      	bhi.n	80059b4 <CMD_Set_Laser+0x1c8>
//            if (argc != 4) {
//                embeddedCliPrint(cli, "Usage: set_laser ext [1-8] [dac_val_percent]\n");
//                return;
//            }

            float percent = (float)atof(embeddedCliGetToken(args, 3));
 8005936:	2103      	movs	r1, #3
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f000 febb 	bl	80066b4 <embeddedCliGetToken>
 800593e:	4603      	mov	r3, r0
 8005940:	4618      	mov	r0, r3
 8005942:	f009 f9b3 	bl	800ecac <atof>
 8005946:	eeb0 7b40 	vmov.f64	d7, d0
 800594a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800594e:	edc7 7a08 	vstr	s15, [r7, #32]
            if (percent < 0 || percent > 100) {
 8005952:	edd7 7a08 	vldr	s15, [r7, #32]
 8005956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595e:	d408      	bmi.n	8005972 <CMD_Set_Laser+0x186>
 8005960:	edd7 7a08 	vldr	s15, [r7, #32]
 8005964:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80059ec <CMD_Set_Laser+0x200>
 8005968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	dd04      	ble.n	800597c <CMD_Set_Laser+0x190>
                embeddedCliPrint(cli, "Percent must be 0-100\n");
 8005972:	491f      	ldr	r1, [pc, #124]	@ (80059f0 <CMD_Set_Laser+0x204>)
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fddb 	bl	8006530 <embeddedCliPrint>
                return;
 800597a:	e029      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
            }

            uint8_t dac_val = Map(percent, 0, 100, 0, 255);
 800597c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005984:	23ff      	movs	r3, #255	@ 0xff
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	2300      	movs	r3, #0
 800598a:	2264      	movs	r2, #100	@ 0x64
 800598c:	2100      	movs	r1, #0
 800598e:	ee17 0a90 	vmov	r0, s15
 8005992:	f7fe fa58 	bl	8003e46 <Map>
 8005996:	4603      	mov	r3, r0
 8005998:	77fb      	strb	r3, [r7, #31]
            MCP4902_Set_DAC(&DAC_device, MCP4902_CHB, dac_val);
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	461a      	mov	r2, r3
 800599e:	2101      	movs	r1, #1
 80059a0:	4810      	ldr	r0, [pc, #64]	@ (80059e4 <CMD_Set_Laser+0x1f8>)
 80059a2:	f002 fe9f 	bl	80086e4 <MCP4902_Set_DAC>
            ADG1414_Chain_SwitchOn(&laser_ext, laser_ind);
 80059a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059aa:	4619      	mov	r1, r3
 80059ac:	4814      	ldr	r0, [pc, #80]	@ (8005a00 <CMD_Set_Laser+0x214>)
 80059ae:	f002 f971 	bl	8007c94 <ADG1414_Chain_SwitchOn>
 80059b2:	e009      	b.n	80059c8 <CMD_Set_Laser+0x1dc>
        } else {
            embeddedCliPrint(cli, "Laser index out of range for ext (1-8)\n");
 80059b4:	4913      	ldr	r1, [pc, #76]	@ (8005a04 <CMD_Set_Laser+0x218>)
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fdba 	bl	8006530 <embeddedCliPrint>
            return;
 80059bc:	e008      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
        }
    } else {
        embeddedCliPrint(cli, "Invalid mode. Use 'int' or 'ext'\n");
 80059be:	4912      	ldr	r1, [pc, #72]	@ (8005a08 <CMD_Set_Laser+0x21c>)
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fdb5 	bl	8006530 <embeddedCliPrint>
        return;
 80059c6:	e003      	b.n	80059d0 <CMD_Set_Laser+0x1e4>
    }

    embeddedCliPrint(cli, "Laser set successfully\n");
 80059c8:	4910      	ldr	r1, [pc, #64]	@ (8005a0c <CMD_Set_Laser+0x220>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fdb0 	bl	8006530 <embeddedCliPrint>
}
 80059d0:	3730      	adds	r7, #48	@ 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	08013c90 	.word	0x08013c90
 80059dc:	08013cd4 	.word	0x08013cd4
 80059e0:	08013cd8 	.word	0x08013cd8
 80059e4:	20004c94 	.word	0x20004c94
 80059e8:	20004cac 	.word	0x20004cac
 80059ec:	42c80000 	.word	0x42c80000
 80059f0:	08013cf0 	.word	0x08013cf0
 80059f4:	08013d08 	.word	0x08013d08
 80059f8:	08013d34 	.word	0x08013d34
 80059fc:	08013d38 	.word	0x08013d38
 8005a00:	20004ccc 	.word	0x20004ccc
 8005a04:	08013d50 	.word	0x08013d50
 8005a08:	08013d78 	.word	0x08013d78
 8005a0c:	08013d9c 	.word	0x08013d9c

08005a10 <CMD_Get_Current>:

static void CMD_Get_Current(EmbeddedCli *cli, char *args, void *context) {
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
    return;
 8005a1c:	bf00      	nop
}
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <CMD_PD_Get>:

static void CMD_PD_Get(EmbeddedCli *cli, char *args, void *context) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b098      	sub	sp, #96	@ 0x60
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
//    if (argc != 2) {
//        embeddedCliPrint(cli, "Usage: pd_get [pd_index]\n");
//        return;
//    }

    uint8_t pd_ind = (uint8_t)atoi(embeddedCliGetToken(args, 1));
 8005a34:	2101      	movs	r1, #1
 8005a36:	68b8      	ldr	r0, [r7, #8]
 8005a38:	f000 fe3c 	bl	80066b4 <embeddedCliGetToken>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f009 f937 	bl	800ecb2 <atoi>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (pd_ind < 1 || pd_ind > 36) {
 8005a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <CMD_PD_Get+0x32>
 8005a52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a56:	2b24      	cmp	r3, #36	@ 0x24
 8005a58:	d904      	bls.n	8005a64 <CMD_PD_Get+0x3c>
        embeddedCliPrint(cli, "Invalid pd_index. Must be in 1–36\n");
 8005a5a:	4913      	ldr	r1, [pc, #76]	@ (8005aa8 <CMD_PD_Get+0x80>)
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fd67 	bl	8006530 <embeddedCliPrint>
 8005a62:	e01e      	b.n	8005aa2 <CMD_PD_Get+0x7a>
        return;
    }

//    SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
//    SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
    ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8005a64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4810      	ldr	r0, [pc, #64]	@ (8005aac <CMD_PD_Get+0x84>)
 8005a6c:	f002 f912 	bl	8007c94 <ADG1414_Chain_SwitchOn>
    LL_mDelay(10);
 8005a70:	200a      	movs	r0, #10
 8005a72:	f009 f8e5 	bl	800ec40 <LL_mDelay>

    ADS8327_Read_Data_Polling(&photo_adc, 1000);
 8005a76:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005a7a:	480d      	ldr	r0, [pc, #52]	@ (8005ab0 <CMD_PD_Get+0x88>)
 8005a7c:	f002 fbd8 	bl	8008230 <ADS8327_Read_Data_Polling>

    char msg[64];
    snprintf(msg, sizeof(msg), "\r\nPD_index[%d]: %d\n", pd_ind, (uint16_t)photo_adc.ADC_val);
 8005a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a84:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab0 <CMD_PD_Get+0x88>)
 8005a86:	8c12      	ldrh	r2, [r2, #32]
 8005a88:	f107 0014 	add.w	r0, r7, #20
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <CMD_PD_Get+0x8c>)
 8005a90:	2140      	movs	r1, #64	@ 0x40
 8005a92:	f00a fc4d 	bl	8010330 <sniprintf>
    embeddedCliPrint(cli, msg);
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fd47 	bl	8006530 <embeddedCliPrint>
}
 8005aa2:	3758      	adds	r7, #88	@ 0x58
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	08013db4 	.word	0x08013db4
 8005aac:	20004cec 	.word	0x20004cec
 8005ab0:	20004d0c 	.word	0x20004d0c
 8005ab4:	08013ddc 	.word	0x08013ddc

08005ab8 <CMD_Sample_Set_PD>:

static void CMD_Sample_Set_PD(EmbeddedCli *cli, char *args, void *context) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b096      	sub	sp, #88	@ 0x58
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
//    if (argc > 2) {
//        embeddedCliPrint(cli, "Too many arguments. Format: sample_set_pd [pd_index]\n");
//        return;
//    }

    const char *arg1 = embeddedCliGetToken(args, 1);
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f000 fdf4 	bl	80066b4 <embeddedCliGetToken>
 8005acc:	6578      	str	r0, [r7, #84]	@ 0x54
    uint8_t pd_ind = (uint8_t)atoi(arg1);
 8005ace:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005ad0:	f009 f8ef 	bl	800ecb2 <atoi>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

    if (pd_ind < 1 || pd_ind > 36) {
 8005ada:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <CMD_Sample_Set_PD+0x32>
 8005ae2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005ae6:	2b24      	cmp	r3, #36	@ 0x24
 8005ae8:	d904      	bls.n	8005af4 <CMD_Sample_Set_PD+0x3c>
        embeddedCliPrint(cli, "Invalid PD index. Must be between 1 and 36.\n");
 8005aea:	4910      	ldr	r1, [pc, #64]	@ (8005b2c <CMD_Sample_Set_PD+0x74>)
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fd1f 	bl	8006530 <embeddedCliPrint>
 8005af2:	e017      	b.n	8005b24 <CMD_Sample_Set_PD+0x6c>
        return;
    }

//    SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_8BIT);
//    SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV16);
    ADG1414_Chain_SwitchOn(&photo_sw, pd_ind);
 8005af4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005af8:	4619      	mov	r1, r3
 8005afa:	480d      	ldr	r0, [pc, #52]	@ (8005b30 <CMD_Sample_Set_PD+0x78>)
 8005afc:	f002 f8ca 	bl	8007c94 <ADG1414_Chain_SwitchOn>
    photo_index = pd_ind;
 8005b00:	4a0c      	ldr	r2, [pc, #48]	@ (8005b34 <CMD_Sample_Set_PD+0x7c>)
 8005b02:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005b06:	7013      	strb	r3, [r2, #0]

    char buf[64];
    snprintf(buf, sizeof(buf), "PD index %d selected successfully.\n", pd_ind);
 8005b08:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005b0c:	f107 0010 	add.w	r0, r7, #16
 8005b10:	4a09      	ldr	r2, [pc, #36]	@ (8005b38 <CMD_Sample_Set_PD+0x80>)
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	f00a fc0c 	bl	8010330 <sniprintf>
    embeddedCliPrint(cli, buf);
 8005b18:	f107 0310 	add.w	r3, r7, #16
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fd06 	bl	8006530 <embeddedCliPrint>
}
 8005b24:	3758      	adds	r7, #88	@ 0x58
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	08013df0 	.word	0x08013df0
 8005b30:	20004cec 	.word	0x20004cec
 8005b34:	20004d34 	.word	0x20004d34
 8005b38:	08013e20 	.word	0x08013e20

08005b3c <CMD_Sample_Set_Rate>:

static void CMD_Sample_Set_Rate(EmbeddedCli *cli, char *args, void *context) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
    int argc = embeddedCliGetTokenCount(args);
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f000 fde9 	bl	8006720 <embeddedCliGetTokenCount>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	61fb      	str	r3, [r7, #28]
    if (argc < 3) {
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	dc04      	bgt.n	8005b62 <CMD_Sample_Set_Rate+0x26>
        embeddedCliPrint(cli, "Too few arguments. Format: sp_set_rate [sampling_rate] [num_samples]\n");
 8005b58:	493d      	ldr	r1, [pc, #244]	@ (8005c50 <CMD_Sample_Set_Rate+0x114>)
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fce8 	bl	8006530 <embeddedCliPrint>
        return;
 8005b60:	e073      	b.n	8005c4a <CMD_Sample_Set_Rate+0x10e>
    }

    uint32_t sp_rate = (uint32_t)atoi(embeddedCliGetToken(args, 1));
 8005b62:	2101      	movs	r1, #1
 8005b64:	68b8      	ldr	r0, [r7, #8]
 8005b66:	f000 fda5 	bl	80066b4 <embeddedCliGetToken>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f009 f8a0 	bl	800ecb2 <atoi>
 8005b72:	4603      	mov	r3, r0
 8005b74:	61bb      	str	r3, [r7, #24]
    uint32_t num_sample = (uint32_t)atoi(embeddedCliGetToken(args, 2));
 8005b76:	2102      	movs	r1, #2
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f000 fd9b 	bl	80066b4 <embeddedCliGetToken>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f009 f896 	bl	800ecb2 <atoi>
 8005b86:	4603      	mov	r3, r0
 8005b88:	617b      	str	r3, [r7, #20]

    if (sp_rate < 1 || sp_rate > 330000 || num_sample < 1 || num_sample > 50000) {
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <CMD_Sample_Set_Rate+0x6c>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	4a30      	ldr	r2, [pc, #192]	@ (8005c54 <CMD_Sample_Set_Rate+0x118>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d807      	bhi.n	8005ba8 <CMD_Sample_Set_Rate+0x6c>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <CMD_Sample_Set_Rate+0x6c>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d904      	bls.n	8005bb2 <CMD_Sample_Set_Rate+0x76>
        embeddedCliPrint(cli, "Invalid sampling rate or number of samples.\n");
 8005ba8:	492b      	ldr	r1, [pc, #172]	@ (8005c58 <CMD_Sample_Set_Rate+0x11c>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fcc0 	bl	8006530 <embeddedCliPrint>
        return;
 8005bb0:	e04b      	b.n	8005c4a <CMD_Sample_Set_Rate+0x10e>
    }

    uint32_t AutoReload = ROUND(1000000.0f / sp_rate) - 1;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	ee07 3a90 	vmov	s15, r3
 8005bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bbc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005c5c <CMD_Sample_Set_Rate+0x120>
 8005bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	db14      	blt.n	8005bf8 <CMD_Sample_Set_Rate+0xbc>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bd8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8005c5c <CMD_Sample_Set_Rate+0x120>
 8005bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005be4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8005be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005bf0:	ee17 3a90 	vmov	r3, s15
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	e013      	b.n	8005c20 <CMD_Sample_Set_Rate+0xe4>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c02:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8005c5c <CMD_Sample_Set_Rate+0x120>
 8005c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c0e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8005c12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005c1a:	ee17 3a90 	vmov	r3, s15
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
    LL_TIM_DisableIT_UPDATE(TIM1);
 8005c22:	480f      	ldr	r0, [pc, #60]	@ (8005c60 <CMD_Sample_Set_Rate+0x124>)
 8005c24:	f7fe f8ff 	bl	8003e26 <LL_TIM_DisableIT_UPDATE>
    LL_TIM_DisableCounter(TIM1);
 8005c28:	480d      	ldr	r0, [pc, #52]	@ (8005c60 <CMD_Sample_Set_Rate+0x124>)
 8005c2a:	f7fe f8c0 	bl	8003dae <LL_TIM_DisableCounter>
    LL_TIM_SetAutoReload(TIM1, AutoReload);
 8005c2e:	6939      	ldr	r1, [r7, #16]
 8005c30:	480b      	ldr	r0, [pc, #44]	@ (8005c60 <CMD_Sample_Set_Rate+0x124>)
 8005c32:	f7fe f8da 	bl	8003dea <LL_TIM_SetAutoReload>

    adc_rec_total = num_sample;
 8005c36:	4a0b      	ldr	r2, [pc, #44]	@ (8005c64 <CMD_Sample_Set_Rate+0x128>)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6013      	str	r3, [r2, #0]
    samp_rate = sp_rate;
 8005c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c68 <CMD_Sample_Set_Rate+0x12c>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6013      	str	r3, [r2, #0]

    embeddedCliPrint(cli, "Sampling rate and sample count set successfully.\n");
 8005c42:	490a      	ldr	r1, [pc, #40]	@ (8005c6c <CMD_Sample_Set_Rate+0x130>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fc73 	bl	8006530 <embeddedCliPrint>
}
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08013e44 	.word	0x08013e44
 8005c54:	00050910 	.word	0x00050910
 8005c58:	08013e8c 	.word	0x08013e8c
 8005c5c:	49742400 	.word	0x49742400
 8005c60:	40010000 	.word	0x40010000
 8005c64:	2001dc18 	.word	0x2001dc18
 8005c68:	20004d38 	.word	0x20004d38
 8005c6c:	08013ebc 	.word	0x08013ebc

08005c70 <CMD_Sample_Trig>:

static void CMD_Sample_Trig(EmbeddedCli *cli, char *args, void *context) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
    if (!adc_rec_total || !samp_rate) {
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <CMD_Sample_Trig+0x78>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <CMD_Sample_Trig+0x1c>
 8005c84:	4b19      	ldr	r3, [pc, #100]	@ (8005cec <CMD_Sample_Trig+0x7c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <CMD_Sample_Trig+0x26>
        embeddedCliPrint(cli, "Sampling rate or sample count is not set.\n");
 8005c8c:	4918      	ldr	r1, [pc, #96]	@ (8005cf0 <CMD_Sample_Trig+0x80>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fc4e 	bl	8006530 <embeddedCliPrint>
        return;
 8005c94:	e024      	b.n	8005ce0 <CMD_Sample_Trig+0x70>
    }

    memset(adc_rec_buf, 0x00, adc_rec_total * 2);
 8005c96:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <CMD_Sample_Trig+0x78>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4814      	ldr	r0, [pc, #80]	@ (8005cf4 <CMD_Sample_Trig+0x84>)
 8005ca2:	f00a fbfa 	bl	801049a <memset>
    adc_ptr = adc_rec_buf;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <CMD_Sample_Trig+0x88>)
 8005ca8:	4a12      	ldr	r2, [pc, #72]	@ (8005cf4 <CMD_Sample_Trig+0x84>)
 8005caa:	601a      	str	r2, [r3, #0]
    adc_rec_ind = 0;
 8005cac:	4b13      	ldr	r3, [pc, #76]	@ (8005cfc <CMD_Sample_Trig+0x8c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]

    SPI_SetDataLength(SPI2, LL_SPI_DATAWIDTH_16BIT);
 8005cb2:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8005cb6:	4812      	ldr	r0, [pc, #72]	@ (8005d00 <CMD_Sample_Trig+0x90>)
 8005cb8:	f002 fb47 	bl	800834a <SPI_SetDataLength>
    SPI_SetPrescaler(SPI2, LL_SPI_BAUDRATEPRESCALER_DIV2);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4810      	ldr	r0, [pc, #64]	@ (8005d00 <CMD_Sample_Trig+0x90>)
 8005cc0:	f002 fb17 	bl	80082f2 <SPI_SetPrescaler>

    LL_TIM_SetCounter(TIM1, 0);
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	480f      	ldr	r0, [pc, #60]	@ (8005d04 <CMD_Sample_Trig+0x94>)
 8005cc8:	f7fe f881 	bl	8003dce <LL_TIM_SetCounter>
    LL_TIM_EnableIT_UPDATE(TIM1);
 8005ccc:	480d      	ldr	r0, [pc, #52]	@ (8005d04 <CMD_Sample_Trig+0x94>)
 8005cce:	f7fe f89a 	bl	8003e06 <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM1);
 8005cd2:	480c      	ldr	r0, [pc, #48]	@ (8005d04 <CMD_Sample_Trig+0x94>)
 8005cd4:	f7fe f85b 	bl	8003d8e <LL_TIM_EnableCounter>

    embeddedCliPrint(cli, "Sampling started.\n");
 8005cd8:	490b      	ldr	r1, [pc, #44]	@ (8005d08 <CMD_Sample_Trig+0x98>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fc28 	bl	8006530 <embeddedCliPrint>
}
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2001dc18 	.word	0x2001dc18
 8005cec:	20004d38 	.word	0x20004d38
 8005cf0:	08013ef0 	.word	0x08013ef0
 8005cf4:	20005560 	.word	0x20005560
 8005cf8:	20000128 	.word	0x20000128
 8005cfc:	2001dc14 	.word	0x2001dc14
 8005d00:	40003800 	.word	0x40003800
 8005d04:	40010000 	.word	0x40010000
 8005d08:	08013f1c 	.word	0x08013f1c

08005d0c <CMD_Sample_Status_Get>:

static void CMD_Sample_Status_Get(EmbeddedCli *cli, char *args, void *context) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b0a6      	sub	sp, #152	@ 0x98
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
    char buf[128];
    snprintf(buf, sizeof(buf), "Photo: %d   Sampling_Rate: %ld SPS   Num_Samples: %ld S\n",
 8005d18:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <CMD_Sample_Status_Get+0x60>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <CMD_Sample_Status_Get+0x64>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a14      	ldr	r2, [pc, #80]	@ (8005d74 <CMD_Sample_Status_Get+0x68>)
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	f107 0010 	add.w	r0, r7, #16
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4a11      	ldr	r2, [pc, #68]	@ (8005d78 <CMD_Sample_Status_Get+0x6c>)
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	f00a fafc 	bl	8010330 <sniprintf>
             photo_index, samp_rate, adc_rec_total);
    embeddedCliPrint(cli, buf);
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fbf6 	bl	8006530 <embeddedCliPrint>

    if (adc_rec_ind == adc_rec_total) {
 8005d44:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <CMD_Sample_Status_Get+0x70>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <CMD_Sample_Status_Get+0x68>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d104      	bne.n	8005d5a <CMD_Sample_Status_Get+0x4e>
        embeddedCliPrint(cli, "-> ADC Data ready to get!\n");
 8005d50:	490b      	ldr	r1, [pc, #44]	@ (8005d80 <CMD_Sample_Status_Get+0x74>)
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fbec 	bl	8006530 <embeddedCliPrint>
    } else {
        embeddedCliPrint(cli, "-> ADC Data is not ready!\n");
    }
}
 8005d58:	e003      	b.n	8005d62 <CMD_Sample_Status_Get+0x56>
        embeddedCliPrint(cli, "-> ADC Data is not ready!\n");
 8005d5a:	490a      	ldr	r1, [pc, #40]	@ (8005d84 <CMD_Sample_Status_Get+0x78>)
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fbe7 	bl	8006530 <embeddedCliPrint>
}
 8005d62:	bf00      	nop
 8005d64:	3790      	adds	r7, #144	@ 0x90
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20004d34 	.word	0x20004d34
 8005d70:	20004d38 	.word	0x20004d38
 8005d74:	2001dc18 	.word	0x2001dc18
 8005d78:	08013f30 	.word	0x08013f30
 8005d7c:	2001dc14 	.word	0x2001dc14
 8005d80:	08013f6c 	.word	0x08013f6c
 8005d84:	08013f88 	.word	0x08013f88

08005d88 <CMD_Sample_Get>:

static void CMD_Sample_Get(EmbeddedCli *cli, char *args, void *context) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
    if (!adc_rec_ind) {
 8005d94:	4b38      	ldr	r3, [pc, #224]	@ (8005e78 <CMD_Sample_Get+0xf0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <CMD_Sample_Get+0x1e>
        embeddedCliPrint(cli, "Please send cmd 'sp_trig' first!\n");
 8005d9c:	4937      	ldr	r1, [pc, #220]	@ (8005e7c <CMD_Sample_Get+0xf4>)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fbc6 	bl	8006530 <embeddedCliPrint>
        return;
 8005da4:	e064      	b.n	8005e70 <CMD_Sample_Get+0xe8>
    }

    uint32_t num_sample = (uint32_t)atoi(embeddedCliGetToken(args, 1));
 8005da6:	2101      	movs	r1, #1
 8005da8:	68b8      	ldr	r0, [r7, #8]
 8005daa:	f000 fc83 	bl	80066b4 <embeddedCliGetToken>
 8005dae:	4603      	mov	r3, r0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f008 ff7e 	bl	800ecb2 <atoi>
 8005db6:	4603      	mov	r3, r0
 8005db8:	623b      	str	r3, [r7, #32]
    if (num_sample < 1 || num_sample > 50000) {
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <CMD_Sample_Get+0x42>
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d904      	bls.n	8005dd4 <CMD_Sample_Get+0x4c>
        embeddedCliPrint(cli, "Invalid number of samples.\n");
 8005dca:	492d      	ldr	r1, [pc, #180]	@ (8005e80 <CMD_Sample_Get+0xf8>)
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fbaf 	bl	8006530 <embeddedCliPrint>
        return;
 8005dd2:	e04d      	b.n	8005e70 <CMD_Sample_Get+0xe8>
    }

    uint16_t crc_val = 0xffff;
 8005dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dd8:	837b      	strh	r3, [r7, #26]
    uint8_t bytes_temp[3];
    uint32_t header = (0x000FFFFF & num_sample) | 0xFFF00000;
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	4b29      	ldr	r3, [pc, #164]	@ (8005e84 <CMD_Sample_Get+0xfc>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61fb      	str	r3, [r7, #28]
    bytes_temp[0] = (uint8_t)(header >> 16);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	753b      	strb	r3, [r7, #20]
    bytes_temp[1] = (uint8_t)(header >> 8);
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	757b      	strb	r3, [r7, #21]
    bytes_temp[2] = (uint8_t)header;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	75bb      	strb	r3, [r7, #22]
    UART_Driver_SendString(USART6, (const char *)bytes_temp);
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4822      	ldr	r0, [pc, #136]	@ (8005e88 <CMD_Sample_Get+0x100>)
 8005e00:	f7fd ff00 	bl	8003c04 <UART_Driver_SendString>

    for (uint32_t i = 0; i < num_sample; i++) {
 8005e04:	2300      	movs	r3, #0
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e08:	e020      	b.n	8005e4c <CMD_Sample_Get+0xc4>
        crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 8005e0a:	4a20      	ldr	r2, [pc, #128]	@ (8005e8c <CMD_Sample_Get+0x104>)
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005e12:	f107 031a 	add.w	r3, r7, #26
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe f830 	bl	8003e7e <crc16_CCITT_update>
        bytes_temp[0] = adc_rec_buf[i] >> 8;
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e8c <CMD_Sample_Get+0x104>)
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	753b      	strb	r3, [r7, #20]
        bytes_temp[1] = adc_rec_buf[i] & 0xFF;
 8005e2e:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <CMD_Sample_Get+0x104>)
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	757b      	strb	r3, [r7, #21]
        UART_Driver_SendString(USART6, (const char *)bytes_temp);
 8005e3a:	f107 0314 	add.w	r3, r7, #20
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4811      	ldr	r0, [pc, #68]	@ (8005e88 <CMD_Sample_Get+0x100>)
 8005e42:	f7fd fedf 	bl	8003c04 <UART_Driver_SendString>
    for (uint32_t i = 0; i < num_sample; i++) {
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	3301      	adds	r3, #1
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3da      	bcc.n	8005e0a <CMD_Sample_Get+0x82>
    }

    bytes_temp[0] = crc_val >> 8;
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	753b      	strb	r3, [r7, #20]
    bytes_temp[1] = crc_val & 0xFF;
 8005e5e:	8b7b      	ldrh	r3, [r7, #26]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	757b      	strb	r3, [r7, #21]
    UART_Driver_SendString(USART6, (const char *)bytes_temp);
 8005e64:	f107 0314 	add.w	r3, r7, #20
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4807      	ldr	r0, [pc, #28]	@ (8005e88 <CMD_Sample_Get+0x100>)
 8005e6c:	f7fd feca 	bl	8003c04 <UART_Driver_SendString>
}
 8005e70:	3728      	adds	r7, #40	@ 0x28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	2001dc14 	.word	0x2001dc14
 8005e7c:	08013fa4 	.word	0x08013fa4
 8005e80:	08013fc8 	.word	0x08013fc8
 8005e84:	fff00000 	.word	0xfff00000
 8005e88:	40011400 	.word	0x40011400
 8005e8c:	20005560 	.word	0x20005560

08005e90 <CMD_Sample_Get_Char>:

static void CMD_Sample_Get_Char(EmbeddedCli *cli, char *args, void *context) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
    if (!adc_rec_ind) {
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f54 <CMD_Sample_Get_Char+0xc4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <CMD_Sample_Get_Char+0x1e>
        embeddedCliPrint(cli, "Please send cmd 'sp_trig' first!\n");
 8005ea4:	492c      	ldr	r1, [pc, #176]	@ (8005f58 <CMD_Sample_Get_Char+0xc8>)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fb42 	bl	8006530 <embeddedCliPrint>
        return;
 8005eac:	e04e      	b.n	8005f4c <CMD_Sample_Get_Char+0xbc>
    }

    uint32_t num_sample = (uint32_t)atoi(embeddedCliGetToken(args, 1));
 8005eae:	2101      	movs	r1, #1
 8005eb0:	68b8      	ldr	r0, [r7, #8]
 8005eb2:	f000 fbff 	bl	80066b4 <embeddedCliGetToken>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f008 fefa 	bl	800ecb2 <atoi>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	61bb      	str	r3, [r7, #24]
    if (num_sample < 1 || num_sample > 50000) {
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <CMD_Sample_Get_Char+0x42>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d904      	bls.n	8005edc <CMD_Sample_Get_Char+0x4c>
        embeddedCliPrint(cli, "Invalid number of samples.\n");
 8005ed2:	4922      	ldr	r1, [pc, #136]	@ (8005f5c <CMD_Sample_Get_Char+0xcc>)
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fb2b 	bl	8006530 <embeddedCliPrint>
        return;
 8005eda:	e037      	b.n	8005f4c <CMD_Sample_Get_Char+0xbc>
    }

    uint16_t crc_val = 0xffff;
 8005edc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ee0:	82fb      	strh	r3, [r7, #22]
    char ascii_buf[5];
    embeddedCliPrint(cli, "\n");
 8005ee2:	491f      	ldr	r1, [pc, #124]	@ (8005f60 <CMD_Sample_Get_Char+0xd0>)
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fb23 	bl	8006530 <embeddedCliPrint>

    for (uint32_t i = 0; i < num_sample; i++) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	e01c      	b.n	8005f2a <CMD_Sample_Get_Char+0x9a>
        crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f64 <CMD_Sample_Get_Char+0xd4>)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005ef8:	f107 0316 	add.w	r3, r7, #22
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fd ffbd 	bl	8003e7e <crc16_CCITT_update>
        htoa(adc_rec_buf[i], ascii_buf);
 8005f04:	4a17      	ldr	r2, [pc, #92]	@ (8005f64 <CMD_Sample_Get_Char+0xd4>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0c:	f107 0210 	add.w	r2, r7, #16
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe f800 	bl	8003f18 <htoa>
        UART_Driver_SendString(USART6, ascii_buf);
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4812      	ldr	r0, [pc, #72]	@ (8005f68 <CMD_Sample_Get_Char+0xd8>)
 8005f20:	f7fd fe70 	bl	8003c04 <UART_Driver_SendString>
    for (uint32_t i = 0; i < num_sample; i++) {
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3de      	bcc.n	8005ef0 <CMD_Sample_Get_Char+0x60>
    }

    htoa(crc_val, ascii_buf);
 8005f32:	8afb      	ldrh	r3, [r7, #22]
 8005f34:	f107 0210 	add.w	r2, r7, #16
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd ffec 	bl	8003f18 <htoa>
    UART_Driver_SendString(USART6, ascii_buf);
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	4619      	mov	r1, r3
 8005f46:	4808      	ldr	r0, [pc, #32]	@ (8005f68 <CMD_Sample_Get_Char+0xd8>)
 8005f48:	f7fd fe5c 	bl	8003c04 <UART_Driver_SendString>
}
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2001dc14 	.word	0x2001dc14
 8005f58:	08013fa4 	.word	0x08013fa4
 8005f5c:	08013fc8 	.word	0x08013fc8
 8005f60:	08013fe4 	.word	0x08013fe4
 8005f64:	20005560 	.word	0x20005560
 8005f68:	40011400 	.word	0x40011400

08005f6c <CMD_Sample_Get_Buf>:

static void CMD_Sample_Get_Buf(EmbeddedCli *cli, char *args, void *context) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
    if (!adc_rec_ind) {
 8005f78:	4b2d      	ldr	r3, [pc, #180]	@ (8006030 <CMD_Sample_Get_Buf+0xc4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <CMD_Sample_Get_Buf+0x1e>
        embeddedCliPrint(cli, "Please send cmd 'sp_trig' first!\n");
 8005f80:	492c      	ldr	r1, [pc, #176]	@ (8006034 <CMD_Sample_Get_Buf+0xc8>)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fad4 	bl	8006530 <embeddedCliPrint>
 8005f88:	e04f      	b.n	800602a <CMD_Sample_Get_Buf+0xbe>
        return;
    }

    uint16_t crc_val = 0xffff;
 8005f8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f8e:	82fb      	strh	r3, [r7, #22]
    uint8_t bytes_temp[3];
    uint32_t header = (0x000FFFFF & adc_rec_total) | 0xFFF00000;
 8005f90:	4b29      	ldr	r3, [pc, #164]	@ (8006038 <CMD_Sample_Get_Buf+0xcc>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4b29      	ldr	r3, [pc, #164]	@ (800603c <CMD_Sample_Get_Buf+0xd0>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]

    bytes_temp[0] = (uint8_t)(header >> 16);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	743b      	strb	r3, [r7, #16]
    bytes_temp[1] = (uint8_t)(header >> 8);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	747b      	strb	r3, [r7, #17]
    bytes_temp[2] = (uint8_t)header;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	74bb      	strb	r3, [r7, #18]
    UART_Driver_SendString(USART6, (const char *)bytes_temp);
 8005fb0:	f107 0310 	add.w	r3, r7, #16
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4822      	ldr	r0, [pc, #136]	@ (8006040 <CMD_Sample_Get_Buf+0xd4>)
 8005fb8:	f7fd fe24 	bl	8003c04 <UART_Driver_SendString>

    for (uint32_t i = 0; i < adc_rec_total; i++) {
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	e020      	b.n	8006004 <CMD_Sample_Get_Buf+0x98>
        crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 8005fc2:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <CMD_Sample_Get_Buf+0xd8>)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005fca:	f107 0316 	add.w	r3, r7, #22
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fd ff54 	bl	8003e7e <crc16_CCITT_update>
        bytes_temp[0] = adc_rec_buf[i] >> 8;
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <CMD_Sample_Get_Buf+0xd8>)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	743b      	strb	r3, [r7, #16]
        bytes_temp[1] = adc_rec_buf[i] & 0xFF;
 8005fe6:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <CMD_Sample_Get_Buf+0xd8>)
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	747b      	strb	r3, [r7, #17]
        UART_Driver_SendString(USART6, (const char *)bytes_temp);
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4811      	ldr	r0, [pc, #68]	@ (8006040 <CMD_Sample_Get_Buf+0xd4>)
 8005ffa:	f7fd fe03 	bl	8003c04 <UART_Driver_SendString>
    for (uint32_t i = 0; i < adc_rec_total; i++) {
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	4b0c      	ldr	r3, [pc, #48]	@ (8006038 <CMD_Sample_Get_Buf+0xcc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	429a      	cmp	r2, r3
 800600c:	d3d9      	bcc.n	8005fc2 <CMD_Sample_Get_Buf+0x56>
    }

    bytes_temp[0] = crc_val >> 8;
 800600e:	8afb      	ldrh	r3, [r7, #22]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	b29b      	uxth	r3, r3
 8006014:	b2db      	uxtb	r3, r3
 8006016:	743b      	strb	r3, [r7, #16]
    bytes_temp[1] = crc_val & 0xFF;
 8006018:	8afb      	ldrh	r3, [r7, #22]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	747b      	strb	r3, [r7, #17]
    UART_Driver_SendString(USART6, (const char *)bytes_temp);
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	4619      	mov	r1, r3
 8006024:	4806      	ldr	r0, [pc, #24]	@ (8006040 <CMD_Sample_Get_Buf+0xd4>)
 8006026:	f7fd fded 	bl	8003c04 <UART_Driver_SendString>
}
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2001dc14 	.word	0x2001dc14
 8006034:	08013fa4 	.word	0x08013fa4
 8006038:	2001dc18 	.word	0x2001dc18
 800603c:	fff00000 	.word	0xfff00000
 8006040:	40011400 	.word	0x40011400
 8006044:	20005560 	.word	0x20005560

08006048 <CMD_Sample_Get_Buf_Char>:

static void CMD_Sample_Get_Buf_Char(EmbeddedCli *cli, char *args, void *context) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
    if (!adc_rec_ind) {
 8006054:	4b22      	ldr	r3, [pc, #136]	@ (80060e0 <CMD_Sample_Get_Buf_Char+0x98>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <CMD_Sample_Get_Buf_Char+0x1e>
        embeddedCliPrint(cli, "Please send cmd 'sp_trig' first!\n");
 800605c:	4921      	ldr	r1, [pc, #132]	@ (80060e4 <CMD_Sample_Get_Buf_Char+0x9c>)
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fa66 	bl	8006530 <embeddedCliPrint>
 8006064:	e038      	b.n	80060d8 <CMD_Sample_Get_Buf_Char+0x90>
        return;
    }

    uint16_t crc_val = 0xffff;
 8006066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800606a:	837b      	strh	r3, [r7, #26]
    char ascii_buf[5];
    embeddedCliPrint(cli, "\n");
 800606c:	491e      	ldr	r1, [pc, #120]	@ (80060e8 <CMD_Sample_Get_Buf_Char+0xa0>)
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fa5e 	bl	8006530 <embeddedCliPrint>

    for (uint32_t i = 0; i < adc_rec_total; i++) {
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e01c      	b.n	80060b4 <CMD_Sample_Get_Buf_Char+0x6c>
        crc16_CCITT_update(&crc_val, adc_rec_buf[i]);
 800607a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <CMD_Sample_Get_Buf_Char+0xa4>)
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006082:	f107 031a 	add.w	r3, r7, #26
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f7fd fef8 	bl	8003e7e <crc16_CCITT_update>
        htoa(adc_rec_buf[i], ascii_buf);
 800608e:	4a17      	ldr	r2, [pc, #92]	@ (80060ec <CMD_Sample_Get_Buf_Char+0xa4>)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006096:	f107 0214 	add.w	r2, r7, #20
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd ff3b 	bl	8003f18 <htoa>
        UART_Driver_SendString(USART6, ascii_buf);
 80060a2:	f107 0314 	add.w	r3, r7, #20
 80060a6:	4619      	mov	r1, r3
 80060a8:	4811      	ldr	r0, [pc, #68]	@ (80060f0 <CMD_Sample_Get_Buf_Char+0xa8>)
 80060aa:	f7fd fdab 	bl	8003c04 <UART_Driver_SendString>
    for (uint32_t i = 0; i < adc_rec_total; i++) {
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	4b0f      	ldr	r3, [pc, #60]	@ (80060f4 <CMD_Sample_Get_Buf_Char+0xac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d3dd      	bcc.n	800607a <CMD_Sample_Get_Buf_Char+0x32>
    }

    htoa(crc_val, ascii_buf);
 80060be:	8b7b      	ldrh	r3, [r7, #26]
 80060c0:	f107 0214 	add.w	r2, r7, #20
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd ff26 	bl	8003f18 <htoa>
    UART_Driver_SendString(USART6, ascii_buf);
 80060cc:	f107 0314 	add.w	r3, r7, #20
 80060d0:	4619      	mov	r1, r3
 80060d2:	4807      	ldr	r0, [pc, #28]	@ (80060f0 <CMD_Sample_Get_Buf_Char+0xa8>)
 80060d4:	f7fd fd96 	bl	8003c04 <UART_Driver_SendString>
}
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	2001dc14 	.word	0x2001dc14
 80060e4:	08013fa4 	.word	0x08013fa4
 80060e8:	08013fe4 	.word	0x08013fe4
 80060ec:	20005560 	.word	0x20005560
 80060f0:	40011400 	.word	0x40011400
 80060f4:	2001dc18 	.word	0x2001dc18

080060f8 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <getCliStaticBindings+0x10>)
}
 80060fe:	4618      	mov	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	080141b8 	.word	0x080141b8

0800610c <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8006110:	2328      	movs	r3, #40	@ 0x28
}
 8006112:	4618      	mov	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <writeCharTocli_EXPConsole>:
//static void writeCharTocli_EXPForward(EmbeddedCli *embeddedCli, char c) {
//    uint8_t c_to_send = c;
//    UART_WriteRing(EXP_UART_FORWARD_HANDLE, c_to_send);
//}

static void writeCharTocli_EXPConsole(EmbeddedCli *embeddedCli, char c) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(EXP_UART_CONSOLE_HANDLE, c_to_send);
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	4619      	mov	r1, r3
 8006130:	4803      	ldr	r0, [pc, #12]	@ (8006140 <writeCharTocli_EXPConsole+0x24>)
 8006132:	f7fd fd44 	bl	8003bbe <UART_Driver_Write>
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40011400 	.word	0x40011400

08006144 <SystemCLI_Init>:

Std_ReturnType SystemCLI_Init() {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
//        return E_ERROR;
//    }
//    cli_EXPForward->writeChar = writeCharTocli_EXPForward;

    // Initialize UART EXP CONSOLE CLI
    EmbeddedCliConfig *EXPConsole_config = embeddedCliDefaultConfig();
 800614a:	f000 f853 	bl	80061f4 <embeddedCliDefaultConfig>
 800614e:	6078      	str	r0, [r7, #4]
    EXPConsole_config->cliBuffer = EXPConsole_cliStaticBuffer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <SystemCLI_Init+0x84>)
 8006154:	60da      	str	r2, [r3, #12]
    EXPConsole_config->cliBufferSize = EXPCONSOLE_CLI_BUFFER_SIZE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800615c:	821a      	strh	r2, [r3, #16]
    EXPConsole_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2210      	movs	r2, #16
 8006162:	809a      	strh	r2, [r3, #4]
    EXPConsole_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	@ 0x40
 8006168:	80da      	strh	r2, [r3, #6]
    EXPConsole_config->historyBufferSize = CLI_HISTORY_SIZE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	811a      	strh	r2, [r3, #8]
    EXPConsole_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	815a      	strh	r2, [r3, #10]
    EXPConsole_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	749a      	strb	r2, [r3, #18]
    EXPConsole_config->invitation = CLI_INITATION_EXP_CONSOLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a13      	ldr	r2, [pc, #76]	@ (80061cc <SystemCLI_Init+0x88>)
 8006180:	601a      	str	r2, [r3, #0]
    EXPConsole_config->staticBindings = getCliStaticBindings();
 8006182:	f7ff ffb9 	bl	80060f8 <getCliStaticBindings>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	615a      	str	r2, [r3, #20]
    EXPConsole_config->staticBindingCount = getCliStaticBindingCount();
 800618c:	f7ff ffbe 	bl	800610c <getCliStaticBindingCount>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	831a      	strh	r2, [r3, #24]

    cli_EXPConsole = embeddedCliNew(EXPConsole_config);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f886 	bl	80062aa <embeddedCliNew>
 800619e:	4603      	mov	r3, r0
 80061a0:	4a0b      	ldr	r2, [pc, #44]	@ (80061d0 <SystemCLI_Init+0x8c>)
 80061a2:	6013      	str	r3, [r2, #0]
    if (cli_EXPConsole == NULL) {
 80061a4:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <SystemCLI_Init+0x8c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <SystemCLI_Init+0x6c>
        return E_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e007      	b.n	80061c0 <SystemCLI_Init+0x7c>
    }
    cli_EXPConsole->writeChar = writeCharTocli_EXPConsole;
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <SystemCLI_Init+0x8c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a07      	ldr	r2, [pc, #28]	@ (80061d4 <SystemCLI_Init+0x90>)
 80061b6:	601a      	str	r2, [r3, #0]

//	// Init the CLI with blank screen
//	onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 80061b8:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <SystemCLI_Init+0x94>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]

    return E_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20004d3c 	.word	0x20004d3c
 80061cc:	08013fe8 	.word	0x08013fe8
 80061d0:	2000553c 	.word	0x2000553c
 80061d4:	0800611d 	.word	0x0800611d
 80061d8:	20005540 	.word	0x20005540

080061dc <get_EXPConsole_CliPointer>:
 *************************************************/
//EmbeddedCli *get_EXPForward_CliPointer() {
//    return cli_EXPForward;
//}

EmbeddedCli *get_EXPConsole_CliPointer() {
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
    return cli_EXPConsole;
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <get_EXPConsole_CliPointer+0x14>)
 80061e2:	681b      	ldr	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	2000553c 	.word	0x2000553c

080061f4 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 80061f8:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 80061fa:	2240      	movs	r2, #64	@ 0x40
 80061fc:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80061fe:	4b10      	ldr	r3, [pc, #64]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006200:	2240      	movs	r2, #64	@ 0x40
 8006202:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8006204:	4b0e      	ldr	r3, [pc, #56]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006206:	2280      	movs	r2, #128	@ 0x80
 8006208:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 800620c:	2200      	movs	r2, #0
 800620e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006212:	2200      	movs	r2, #0
 8006214:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8006216:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006218:	2208      	movs	r2, #8
 800621a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 800621c:	4b08      	ldr	r3, [pc, #32]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 800621e:	2201      	movs	r2, #1
 8006220:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8006222:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006224:	4a07      	ldr	r2, [pc, #28]	@ (8006244 <embeddedCliDefaultConfig+0x50>)
 8006226:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 800622a:	2200      	movs	r2, #0
 800622c:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 800622e:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
 8006230:	2200      	movs	r2, #0
 8006232:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8006234:	4b02      	ldr	r3, [pc, #8]	@ (8006240 <embeddedCliDefaultConfig+0x4c>)
}
 8006236:	4618      	mov	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	20005544 	.word	0x20005544
 8006244:	08014014 	.word	0x08014014

08006248 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <embeddedCliRequiredSize+0x16>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	895b      	ldrh	r3, [r3, #10]
 800625c:	e000      	b.n	8006260 <embeddedCliRequiredSize+0x18>
 800625e:	2300      	movs	r3, #0
 8006260:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	889b      	ldrh	r3, [r3, #4]
 8006266:	3303      	adds	r3, #3
 8006268:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	3303      	adds	r3, #3
 8006270:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8006272:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	891b      	ldrh	r3, [r3, #8]
 8006278:	3303      	adds	r3, #3
 800627a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800627c:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 800627e:	89fa      	ldrh	r2, [r7, #14]
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	3303      	adds	r3, #3
 800628a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 800628c:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	3303      	adds	r3, #3
 8006292:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8006294:	4413      	add	r3, r2
 8006296:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8006298:	b29b      	uxth	r3, r3
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	b29b      	uxth	r3, r3
    ));
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ffc6 	bl	8006248 <embeddedCliRequiredSize>
 80062bc:	4603      	mov	r3, r0
 80062be:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 80062c0:	2300      	movs	r3, #0
 80062c2:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <embeddedCliNew+0x2e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8a1b      	ldrh	r3, [r3, #16]
 80062d0:	461a      	mov	r2, r3
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <embeddedCliNew+0x32>
        return NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	e071      	b.n	80063c0 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	2100      	movs	r1, #0
 80062e6:	6938      	ldr	r0, [r7, #16]
 80062e8:	f00a f8d7 	bl	801049a <memset>

    cli = (EmbeddedCli *) buf;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	3310      	adds	r3, #16
 80062f4:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3338      	adds	r3, #56	@ 0x38
 8006300:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	889b      	ldrh	r3, [r3, #4]
 8006312:	3303      	adds	r3, #3
 8006314:	f023 0303 	bic.w	r3, r3, #3
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	88db      	ldrh	r3, [r3, #6]
 8006328:	3303      	adds	r3, #3
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8b1a      	ldrh	r2, [r3, #24]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8b1a      	ldrh	r2, [r3, #24]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	891a      	ldrh	r2, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	811a      	strh	r2, [r3, #8]

    if (allocated)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006366:	f043 0304 	orr.w	r3, r3, #4
 800636a:	b2da      	uxtb	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	7c9b      	ldrb	r3, [r3, #18]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	889a      	ldrh	r2, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	88da      	ldrh	r2, [r3, #6]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 80063be:	69fb      	ldr	r3, [r7, #28]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3310      	adds	r3, #16
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 ff8a 	bl	80072fc <fifoBufPush>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f083 0301 	eor.w	r3, r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8083 	beq.w	8006526 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d155      	bne.n	80064e0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	b2da      	uxtb	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fe7e 	bl	800714e <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8006452:	e045      	b.n	80064e0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3310      	adds	r3, #16
 8006458:	4618      	mov	r0, r3
 800645a:	f000 ff27 	bl	80072ac <fifoBufPop>
 800645e:	4603      	mov	r3, r0
 8006460:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9f5 	bl	8006864 <onEscapedInput>
 800647a:	e02a      	b.n	80064d2 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006482:	2b1b      	cmp	r3, #27
 8006484:	d10c      	bne.n	80064a0 <embeddedCliProcess+0x92>
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	2b5b      	cmp	r3, #91	@ 0x5b
 800648a:	d109      	bne.n	80064a0 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006492:	f043 0308 	orr.w	r3, r3, #8
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 800649e:	e018      	b.n	80064d2 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 feaa 	bl	80071fc <isControlChar>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa86 	bl	80069c4 <onControlInput>
 80064b8:	e00b      	b.n	80064d2 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 febd 	bl	800723c <isDisplayableChar>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fa27 	bl	8006920 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fd12 	bl	8006efc <printLiveAutocompletion>

        impl->lastChar = c;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	7afa      	ldrb	r2, [r7, #11]
 80064dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3310      	adds	r3, #16
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fec0 	bl	800726a <fifoBufAvailable>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1b1      	bne.n	8006454 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	8c12      	ldrh	r2, [r2, #32]
 800650c:	4413      	add	r3, r2
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8006524:	e000      	b.n	8006528 <embeddedCliProcess+0x11a>
        return;
 8006526:	bf00      	nop
    }
}
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d03e      	beq.n	80065c0 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800654c:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fdc1 	bl	80070e4 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	897a      	ldrh	r2, [r7, #10]
 8006566:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fdef 	bl	800714e <writeToOutput>
    writeToOutput(cli, lineBreak);
 8006570:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <embeddedCliPrint+0x98>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fde9 	bl	800714e <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11b      	bne.n	80065c2 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fddc 	bl	800714e <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fdd6 	bl	800714e <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8c1a      	ldrh	r2, [r3, #32]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80065ae:	2200      	movs	r2, #0
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fdec 	bl	8007190 <moveCursor>

        printLiveAutocompletion(cli);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc9f 	bl	8006efc <printLiveAutocompletion>
 80065be:	e000      	b.n	80065c2 <embeddedCliPrint+0x92>
        return;
 80065c0:	bf00      	nop
    }
}
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	2000010c 	.word	0x2000010c

080065cc <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d066      	beq.n	80066a8 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80065da:	4b35      	ldr	r3, [pc, #212]	@ (80066b0 <embeddedCliTokenizeArgs+0xe4>)
 80065dc:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80065de:	2300      	movs	r3, #0
 80065e0:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80065e2:	2300      	movs	r3, #0
 80065e4:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80065ee:	e047      	b.n	8006680 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3301      	adds	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80065f6:	7fbb      	ldrb	r3, [r7, #30]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80065fc:	2300      	movs	r3, #0
 80065fe:	77bb      	strb	r3, [r7, #30]
 8006600:	e029      	b.n	8006656 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	2b5c      	cmp	r3, #92	@ 0x5c
 8006606:	d102      	bne.n	800660e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8006608:	2301      	movs	r3, #1
 800660a:	77bb      	strb	r3, [r7, #30]
            continue;
 800660c:	e038      	b.n	8006680 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	2b22      	cmp	r3, #34	@ 0x22
 8006612:	d110      	bne.n	8006636 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8006614:	7ffb      	ldrb	r3, [r7, #31]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f083 0301 	eor.w	r3, r3, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	7ffb      	ldrb	r3, [r7, #31]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8006630:	2300      	movs	r3, #0
 8006632:	74fb      	strb	r3, [r7, #19]
 8006634:	e00f      	b.n	8006656 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8006636:	7ffb      	ldrb	r3, [r7, #31]
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <embeddedCliTokenizeArgs+0x8a>
 8006642:	7cfb      	ldrb	r3, [r7, #19]
 8006644:	4619      	mov	r1, r3
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f009 ff3e 	bl	80104c8 <strchr>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8006652:	2300      	movs	r3, #0
 8006654:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8006656:	7cfb      	ldrb	r3, [r7, #19]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <embeddedCliTokenizeArgs+0xa4>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd0e      	ble.n	8006680 <embeddedCliTokenizeArgs+0xb4>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3b01      	subs	r3, #1
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	7cfa      	ldrb	r2, [r7, #19]
 8006678:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	3301      	adds	r3, #1
 800667e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	74fb      	strb	r3, [r7, #19]
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1af      	bne.n	80065f0 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	3301      	adds	r3, #1
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e000      	b.n	80066aa <embeddedCliTokenizeArgs+0xde>
        return;
 80066a8:	bf00      	nop
}
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	08014018 	.word	0x08014018

080066b4 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80066c0:	887b      	ldrh	r3, [r7, #2]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ff20 	bl	800750a <getTokenPosition>
 80066ca:	4603      	mov	r3, r0
 80066cc:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80066ce:	89fb      	ldrh	r3, [r7, #14]
 80066d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	e000      	b.n	80066e2 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 ff05 	bl	800750a <getTokenPosition>
 8006700:	4603      	mov	r3, r0
 8006702:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8006704:	89fb      	ldrh	r3, [r7, #14]
 8006706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800670e:	89fb      	ldrh	r3, [r7, #14]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4413      	add	r3, r2
 8006714:	e000      	b.n	8006718 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <embeddedCliGetTokenCount+0x16>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8006736:	2300      	movs	r3, #0
 8006738:	e019      	b.n	800676e <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800673e:	2301      	movs	r3, #1
 8006740:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4413      	add	r3, r2
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 800675c:	897b      	ldrh	r3, [r7, #10]
 800675e:	3301      	adds	r3, #1
 8006760:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8006768:	e7eb      	b.n	8006742 <embeddedCliGetTokenCount+0x22>
                break;
 800676a:	bf00      	nop
    }

    return tokenCount;
 800676c:	897b      	ldrh	r3, [r7, #10]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	899b      	ldrh	r3, [r3, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d05f      	beq.n	8006856 <navigateHistory+0xda>
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	895a      	ldrh	r2, [r3, #10]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	899b      	ldrh	r3, [r3, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d056      	beq.n	8006856 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f083 0301 	eor.w	r3, r3, #1
 80067ae:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	895b      	ldrh	r3, [r3, #10]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d04c      	beq.n	8006856 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fc91 	bl	80070e4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fcc0 	bl	800714e <writeToOutput>

    if (navigateUp)
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <navigateHistory+0x66>
        ++impl->history.current;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	895b      	ldrh	r3, [r3, #10]
 80067d8:	3301      	adds	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	815a      	strh	r2, [r3, #10]
 80067e0:	e005      	b.n	80067ee <navigateHistory+0x72>
    else
        --impl->history.current;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1d1a      	adds	r2, r3, #4
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	895b      	ldrh	r3, [r3, #10]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f000 fe0d 	bl	8007418 <historyGet>
 80067fe:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <navigateHistory+0x8e>
        item = "";
 8006806:	4b16      	ldr	r3, [pc, #88]	@ (8006860 <navigateHistory+0xe4>)
 8006808:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 800680a:	6978      	ldr	r0, [r7, #20]
 800680c:	f7f9 fd78 	bl	8000300 <strlen>
 8006810:	4603      	mov	r3, r0
 8006812:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	89fa      	ldrh	r2, [r7, #14]
 800681a:	6979      	ldr	r1, [r7, #20]
 800681c:	4618      	mov	r0, r3
 800681e:	f009 fefc 	bl	801061a <memcpy>
    impl->cmdBuffer[len] = '\0';
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	4413      	add	r3, r2
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	89fa      	ldrh	r2, [r7, #14]
 8006832:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fc87 	bl	800714e <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	8c1a      	ldrh	r2, [r3, #32]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fb54 	bl	8006efc <printLiveAutocompletion>
 8006854:	e000      	b.n	8006858 <navigateHistory+0xdc>
        return;
 8006856:	bf00      	nop
}
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	0801401c 	.word	0x0801401c

08006864 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b3f      	cmp	r3, #63	@ 0x3f
 800687a:	d948      	bls.n	800690e <onEscapedInput+0xaa>
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b7e      	cmp	r3, #126	@ 0x7e
 8006880:	d845      	bhi.n	800690e <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006888:	f023 0308 	bic.w	r3, r3, #8
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b41      	cmp	r3, #65	@ 0x41
 8006898:	d002      	beq.n	80068a0 <onEscapedInput+0x3c>
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	2b42      	cmp	r3, #66	@ 0x42
 800689e:	d109      	bne.n	80068b4 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b41      	cmp	r3, #65	@ 0x41
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ff64 	bl	800677c <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b43      	cmp	r3, #67	@ 0x43
 80068b8:	d10f      	bne.n	80068da <onEscapedInput+0x76>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <onEscapedInput+0x76>
            impl->cursorPos--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 80068ce:	4b12      	ldr	r3, [pc, #72]	@ (8006918 <onEscapedInput+0xb4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fc3a 	bl	800714e <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	2b44      	cmp	r3, #68	@ 0x44
 80068de:	d116      	bne.n	800690e <onEscapedInput+0xaa>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80068e4:	461c      	mov	r4, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7f9 fd08 	bl	8000300 <strlen>
 80068f0:	4603      	mov	r3, r0
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d20b      	bcs.n	800690e <onEscapedInput+0xaa>
            impl->cursorPos++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80068fa:	3301      	adds	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <onEscapedInput+0xb8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc20 	bl	800714e <writeToOutput>
        }
    }
}
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	20000110 	.word	0x20000110
 800691c:	20000114 	.word	0x20000114

08006920 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8c1b      	ldrh	r3, [r3, #32]
 8006936:	3302      	adds	r3, #2
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800693c:	4293      	cmp	r3, r2
 800693e:	da3b      	bge.n	80069b8 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	4618      	mov	r0, r3
 8006946:	f7f9 fcdb 	bl	8000300 <strlen>
 800694a:	4602      	mov	r2, r0
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	3301      	adds	r3, #1
 800695c:	18d0      	adds	r0, r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	18d1      	adds	r1, r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800696a:	3301      	adds	r3, #1
 800696c:	461a      	mov	r2, r3
 800696e:	f009 fd7a 	bl	8010466 <memmove>

    ++impl->cmdSize;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8c1b      	ldrh	r3, [r3, #32]
 8006976:	3301      	adds	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006982:	3301      	adds	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 800699e:	4b08      	ldr	r3, [pc, #32]	@ (80069c0 <onCharInput+0xa0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbd2 	bl	800714e <writeToOutput>

    cli->writeChar(cli, c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	e000      	b.n	80069ba <onCharInput+0x9a>
        return;
 80069b8:	bf00      	nop
}
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000120 	.word	0x20000120

080069c4 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80069dc:	2b0d      	cmp	r3, #13
 80069de:	d102      	bne.n	80069e6 <onControlInput+0x22>
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	d078      	beq.n	8006ad8 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 80069ec:	2b0a      	cmp	r3, #10
 80069ee:	d102      	bne.n	80069f6 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b0d      	cmp	r3, #13
 80069f4:	d070      	beq.n	8006ad8 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	2b0d      	cmp	r3, #13
 80069fa:	d002      	beq.n	8006a02 <onControlInput+0x3e>
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	2b0a      	cmp	r3, #10
 8006a00:	d129      	bne.n	8006a56 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fadc 	bl	8006fc0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8006a08:	4b35      	ldr	r3, [pc, #212]	@ (8006ae0 <onControlInput+0x11c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fb9d 	bl	800714e <writeToOutput>

        if (impl->cmdSize > 0)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8c1b      	ldrh	r3, [r3, #32]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <onControlInput+0x5e>
            parseCommand(cli);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f865 	bl	8006aec <parseCommand>
        impl->cmdSize = 0;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	8c12      	ldrh	r2, [r2, #32]
 8006a30:	4413      	add	r3, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb7d 	bl	800714e <writeToOutput>
 8006a54:	e041      	b.n	8006ada <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d002      	beq.n	8006a62 <onControlInput+0x9e>
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a60:	d133      	bne.n	8006aca <onControlInput+0x106>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8c1b      	ldrh	r3, [r3, #32]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dd2b      	ble.n	8006aca <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8006a72:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae4 <onControlInput+0x120>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb68 	bl	800714e <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <onControlInput+0x124>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb62 	bl	800714e <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7f9 fc36 	bl	8000300 <strlen>
 8006a94:	4602      	mov	r2, r0
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	18d0      	adds	r0, r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	18d1      	adds	r1, r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f009 fcd5 	bl	8010466 <memmove>
        --impl->cmdSize;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8c1b      	ldrh	r3, [r3, #32]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8006ac8:	e007      	b.n	8006ada <onControlInput+0x116>
    } else if (c == '\t') {
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d104      	bne.n	8006ada <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa75 	bl	8006fc0 <onAutocompleteRequest>
 8006ad6:	e000      	b.n	8006ada <onControlInput+0x116>
        return;
 8006ad8:	bf00      	nop
    }

}
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	2000010c 	.word	0x2000010c
 8006ae4:	20000114 	.word	0x20000114
 8006ae8:	20000124 	.word	0x20000124

08006aec <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b08f      	sub	sp, #60	@ 0x3c
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8006b00:	2300      	movs	r3, #0
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b04:	e00d      	b.n	8006b22 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	4413      	add	r3, r2
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d003      	beq.n	8006b1c <parseCommand+0x30>
            isEmpty = false;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8006b1a:	e008      	b.n	8006b2e <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	3301      	adds	r3, #1
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	8c1b      	ldrh	r3, [r3, #32]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	dbeb      	blt.n	8006b06 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8006b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 80fa 	bne.w	8006d2c <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f000 fc04 	bl	8007350 <historyPut>

    char *cmdName = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8006b56:	2300      	movs	r3, #0
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	e030      	b.n	8006bbe <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	4413      	add	r3, r2
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d10f      	bne.n	8006b8e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <parseCommand+0xcc>
                nameFinished = true;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b8c:	e014      	b.n	8006bb8 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9e:	e00b      	b.n	8006bb8 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d108      	bne.n	8006bb8 <parseCommand+0xcc>
 8006ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	8c1b      	ldrh	r3, [r3, #32]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	dbc8      	blt.n	8006b5c <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	8c1b      	ldrh	r3, [r3, #32]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80a7 	beq.w	8006d30 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	e072      	b.n	8006cce <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	440b      	add	r3, r1
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bfe:	f7f9 fb1f 	bl	8000240 <strcmp>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d15f      	bne.n	8006cc8 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	440b      	add	r3, r1
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d05e      	beq.n	8006cdc <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	440b      	add	r3, r1
 8006c2e:	7b1b      	ldrb	r3, [r3, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8006c34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c36:	f7ff fcc9 	bl	80065cc <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006c40:	f043 0310 	orr.w	r3, r3, #16
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01a      	beq.n	8006c88 <parseCommand+0x19c>
 8006c52:	4939      	ldr	r1, [pc, #228]	@ (8006d38 <parseCommand+0x24c>)
 8006c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c56:	f7f9 faf3 	bl	8000240 <strcmp>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <parseCommand+0x182>
 8006c60:	4936      	ldr	r1, [pc, #216]	@ (8006d3c <parseCommand+0x250>)
 8006c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c64:	f7f9 faec 	bl	8000240 <strcmp>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10c      	bne.n	8006c88 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	4613      	mov	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	440b      	add	r3, r1
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f85d 	bl	8006d40 <printBindingHelp>
 8006c86:	e015      	b.n	8006cb4 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	440b      	add	r3, r1
 8006c98:	695c      	ldr	r4, [r3, #20]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	440b      	add	r3, r1
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006cba:	f023 0310 	bic.w	r3, r3, #16
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8006cc6:	e034      	b.n	8006d32 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	db86      	blt.n	8006be8 <parseCommand+0xfc>
 8006cda:	e000      	b.n	8006cde <parseCommand+0x1f2>
                break;
 8006cdc:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01d      	beq.n	8006d22 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006cf4:	f043 0310 	orr.w	r3, r3, #16
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f107 020c 	add.w	r2, r7, #12
 8006d08:	4611      	mov	r1, r2
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006d14:	f023 0310 	bic.w	r3, r3, #16
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8006d20:	e007      	b.n	8006d32 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8006d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fe5f 	bl	80079e8 <onUnknownCommand>
 8006d2a:	e002      	b.n	8006d32 <parseCommand+0x246>
        return;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <parseCommand+0x246>
        return;
 8006d30:	bf00      	nop
    }
}
 8006d32:	373c      	adds	r7, #60	@ 0x3c
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd90      	pop	{r4, r7, pc}
 8006d38:	08014020 	.word	0x08014020
 8006d3c:	08014024 	.word	0x08014024

08006d40 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d010      	beq.n	8006d74 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2109      	movs	r1, #9
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9f3 	bl	800714e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8006d68:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <printBindingHelp+0x3c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9ed 	bl	800714e <writeToOutput>
    }
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2000010c 	.word	0x2000010c

08006d80 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	@ 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	2300      	movs	r3, #0
 8006d92:	82bb      	strh	r3, [r7, #20]
 8006d94:	2300      	movs	r3, #0
 8006d96:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7f9 fab1 	bl	8000300 <strlen>
 8006d9e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <getAutocompletedCommand+0x34>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <getAutocompletedCommand+0x46>
        return cmd;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006dc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8006dc4:	e095      	b.n	8006ef2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dca:	e083      	b.n	8006ed4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006dd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	440b      	add	r3, r1
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8006de0:	69f8      	ldr	r0, [r7, #28]
 8006de2:	f7f9 fa8d 	bl	8000300 <strlen>
 8006de6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dee:	4413      	add	r3, r2
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	440b      	add	r3, r1
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d35e      	bcc.n	8006ec8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e14:	e010      	b.n	8006e38 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	4413      	add	r3, r2
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	69f9      	ldr	r1, [r7, #28]
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	440b      	add	r3, r1
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d003      	beq.n	8006e32 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8006e30:	e006      	b.n	8006e40 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	3301      	adds	r3, #1
 8006e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d3ea      	bcc.n	8006e16 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8006e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e44:	f083 0301 	eor.w	r3, r3, #1
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d13e      	bne.n	8006ecc <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	4413      	add	r3, r2
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	440b      	add	r3, r1
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8006e68:	8afb      	ldrh	r3, [r7, #22]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <getAutocompletedCommand+0xf8>
 8006e6e:	8abb      	ldrh	r3, [r7, #20]
 8006e70:	461a      	mov	r2, r3
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d202      	bcs.n	8006e7e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8006e7e:	8afb      	ldrh	r3, [r7, #22]
 8006e80:	3301      	adds	r3, #1
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8006e86:	8afb      	ldrh	r3, [r7, #22]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d102      	bne.n	8006e92 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	613b      	str	r3, [r7, #16]
            continue;
 8006e90:	e01d      	b.n	8006ece <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	8c1b      	ldrh	r3, [r3, #32]
 8006e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e98:	e010      	b.n	8006ebc <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	4413      	add	r3, r2
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	69f9      	ldr	r1, [r7, #28]
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	440b      	add	r3, r1
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d003      	beq.n	8006eb6 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	82bb      	strh	r3, [r7, #20]
                break;
 8006eb4:	e00b      	b.n	8006ece <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8006eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb8:	3301      	adds	r3, #1
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ebc:	8abb      	ldrh	r3, [r7, #20]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d3e9      	bcc.n	8006e9a <getAutocompletedCommand+0x11a>
 8006ec6:	e002      	b.n	8006ece <getAutocompletedCommand+0x14e>
            continue;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <getAutocompletedCommand+0x14e>
            continue;
 8006ecc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8006ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	4293      	cmp	r3, r2
 8006ede:	f6ff af75 	blt.w	8006dcc <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f107 0310 	add.w	r3, r7, #16
 8006eea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006eee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	3738      	adds	r7, #56	@ 0x38
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d04a      	beq.n	8006fae <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	69da      	ldr	r2, [r3, #28]
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ff2c 	bl	8006d80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8006f28:	8a7b      	ldrh	r3, [r7, #18]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	8c1b      	ldrh	r3, [r3, #32]
 8006f32:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8006f34:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <printLiveAutocompletion+0xbc>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f907 	bl	800714e <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006f44:	2201      	movs	r2, #1
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f921 	bl	8007190 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	8c1b      	ldrh	r3, [r3, #32]
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e00b      	b.n	8006f6e <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	440a      	add	r2, r1
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	4611      	mov	r1, r2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	8a3b      	ldrh	r3, [r7, #16]
 8006f70:	461a      	mov	r2, r3
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d3ee      	bcc.n	8006f56 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8006f78:	8a3b      	ldrh	r3, [r7, #16]
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e007      	b.n	8006f8e <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2120      	movs	r1, #32
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006f92:	461a      	mov	r2, r3
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d3f1      	bcc.n	8006f7e <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8006f9a:	8a3a      	ldrh	r2, [r7, #16]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <printLiveAutocompletion+0xc0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8d1 	bl	800714e <writeToOutput>
 8006fac:	e000      	b.n	8006fb0 <printLiveAutocompletion+0xb4>
        return;
 8006fae:	bf00      	nop
}
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000118 	.word	0x20000118
 8006fbc:	2000011c 	.word	0x2000011c

08006fc0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fed1 	bl	8006d80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8006fde:	8a7b      	ldrh	r3, [r7, #18]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d078      	beq.n	80070d6 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8006fe4:	8a7b      	ldrh	r3, [r7, #18]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d004      	beq.n	8006ff4 <onAutocompleteRequest+0x34>
 8006fea:	8a3a      	ldrh	r2, [r7, #16]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	8c1b      	ldrh	r3, [r3, #32]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d931      	bls.n	8007058 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	68f9      	ldr	r1, [r7, #12]
 8006ffa:	8a3a      	ldrh	r2, [r7, #16]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f009 fb0c 	bl	801061a <memcpy>
        if (cmd.candidateCount == 1) {
 8007002:	8a7b      	ldrh	r3, [r7, #18]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d109      	bne.n	800701c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	8a3a      	ldrh	r2, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	2220      	movs	r2, #32
 8007012:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8007014:	8a3b      	ldrh	r3, [r7, #16]
 8007016:	3301      	adds	r3, #1
 8007018:	b29b      	uxth	r3, r3
 800701a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	8a3a      	ldrh	r2, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	8c12      	ldrh	r2, [r2, #32]
 8007030:	4611      	mov	r1, r2
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8007036:	1a8a      	subs	r2, r1, r2
 8007038:	4413      	add	r3, r2
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f886 	bl	800714e <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8007042:	8a3a      	ldrh	r2, [r7, #16]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	8c1a      	ldrh	r2, [r3, #32]
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2200      	movs	r2, #0
 8007054:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8007056:	e03f      	b.n	80070d8 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f843 	bl	80070e4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	e021      	b.n	80070a8 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d014      	beq.n	80070a0 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	4613      	mov	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	440b      	add	r3, r1
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f85e 	bl	800714e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8007092:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <onAutocompleteRequest+0x120>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f858 	bl	800714e <writeToOutput>
 800709e:	e000      	b.n	80070a2 <onAutocompleteRequest+0xe2>
            continue;
 80070a0:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3301      	adds	r3, #1
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070ac:	461a      	mov	r2, r3
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	dbd7      	blt.n	8007064 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f847 	bl	800714e <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f841 	bl	800714e <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	8c1a      	ldrh	r2, [r3, #32]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80070d4:	e000      	b.n	80070d8 <onAutocompleteRequest+0x118>
        return;
 80070d6:	bf00      	nop
}
 80070d8:	3720      	adds	r7, #32
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	2000010c 	.word	0x2000010c

080070e4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80070f6:	461c      	mov	r4, r3
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7f9 f8ff 	bl	8000300 <strlen>
 8007102:	4603      	mov	r3, r0
 8007104:	4423      	add	r3, r4
 8007106:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	210d      	movs	r1, #13
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	e007      	b.n	8007128 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2120      	movs	r1, #32
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	3301      	adds	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d3f3      	bcc.n	8007118 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	210d      	movs	r1, #13
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
    impl->inputLineLength = 0;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2200      	movs	r2, #0
 800713e:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2200      	movs	r2, #0
 8007144:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd90      	pop	{r4, r7, pc}

0800714e <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f7f9 f8d1 	bl	8000300 <strlen>
 800715e:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e00b      	b.n	800717e <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	440a      	add	r2, r1
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	4611      	mov	r1, r2
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3ef      	bcc.n	8007166 <writeToOutput+0x18>
    }
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
 800719c:	4613      	mov	r3, r2
 800719e:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d020      	beq.n	80071e8 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	605a      	str	r2, [r3, #4]
 80071b0:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 80071b2:	787b      	ldrb	r3, [r7, #1]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <moveCursor+0x32>
 80071b8:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <moveCursor+0x60>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3302      	adds	r3, #2
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	e003      	b.n	80071ca <moveCursor+0x3a>
 80071c2:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <moveCursor+0x64>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3302      	adds	r3, #2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 80071cc:	887a      	ldrh	r2, [r7, #2]
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	f107 000c 	add.w	r0, r7, #12
 80071d4:	4908      	ldr	r1, [pc, #32]	@ (80071f8 <moveCursor+0x68>)
 80071d6:	f009 f8e1 	bl	801039c <siprintf>
    writeToOutput(cli, escBuffer);
 80071da:	f107 030c 	add.w	r3, r7, #12
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ffb4 	bl	800714e <writeToOutput>
 80071e6:	e000      	b.n	80071ea <moveCursor+0x5a>
        return;
 80071e8:	bf00      	nop
}
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000110 	.word	0x20000110
 80071f4:	20000114 	.word	0x20000114
 80071f8:	0801402c 	.word	0x0801402c

080071fc <isControlChar>:

static bool isControlChar(char c) {
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b0d      	cmp	r3, #13
 800720a:	d00b      	beq.n	8007224 <isControlChar+0x28>
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b0a      	cmp	r3, #10
 8007210:	d008      	beq.n	8007224 <isControlChar+0x28>
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d005      	beq.n	8007224 <isControlChar+0x28>
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	2b09      	cmp	r3, #9
 800721c:	d002      	beq.n	8007224 <isControlChar+0x28>
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b7f      	cmp	r3, #127	@ 0x7f
 8007222:	d101      	bne.n	8007228 <isControlChar+0x2c>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <isControlChar+0x2e>
 8007228:	2300      	movs	r3, #0
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	2b1f      	cmp	r3, #31
 800724a:	d904      	bls.n	8007256 <isDisplayableChar+0x1a>
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	2b7e      	cmp	r3, #126	@ 0x7e
 8007250:	d801      	bhi.n	8007256 <isDisplayableChar+0x1a>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <isDisplayableChar+0x1c>
 8007256:	2300      	movs	r3, #0
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	b2db      	uxtb	r3, r3
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	88da      	ldrh	r2, [r3, #6]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	889b      	ldrh	r3, [r3, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d306      	bcc.n	800728c <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	88da      	ldrh	r2, [r3, #6]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	889b      	ldrh	r3, [r3, #4]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	e009      	b.n	80072a0 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	891a      	ldrh	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	889b      	ldrh	r3, [r3, #4]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	b29a      	uxth	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	88db      	ldrh	r3, [r3, #6]
 800729c:	4413      	add	r3, r2
 800729e:	b29b      	uxth	r3, r3
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	889a      	ldrh	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	88db      	ldrh	r3, [r3, #6]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d014      	beq.n	80072ee <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	8892      	ldrh	r2, [r2, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	889b      	ldrh	r3, [r3, #4]
 80072d6:	3301      	adds	r3, #1
 80072d8:	b29b      	uxth	r3, r3
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	8912      	ldrh	r2, [r2, #8]
 80072de:	fbb3 f1f2 	udiv	r1, r3, r2
 80072e2:	fb01 f202 	mul.w	r2, r1, r2
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	3301      	adds	r3, #1
 800730e:	b29b      	uxth	r3, r3
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	8912      	ldrh	r2, [r2, #8]
 8007314:	fbb3 f1f2 	udiv	r1, r3, r2
 8007318:	fb01 f202 	mul.w	r2, r1, r2
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	889b      	ldrh	r3, [r3, #4]
 8007324:	89fa      	ldrh	r2, [r7, #14]
 8007326:	429a      	cmp	r2, r3
 8007328:	d00b      	beq.n	8007342 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	88d2      	ldrh	r2, [r2, #6]
 8007332:	4413      	add	r3, r2
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	89fa      	ldrh	r2, [r7, #14]
 800733c:	80da      	strh	r2, [r3, #6]
        return true;
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <fifoBufPush+0x48>
    }
    return false;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800735a:	6838      	ldr	r0, [r7, #0]
 800735c:	f7f8 ffd0 	bl	8000300 <strlen>
 8007360:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	889b      	ldrh	r3, [r3, #4]
 8007366:	461a      	mov	r2, r3
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	3301      	adds	r3, #1
 800736c:	429a      	cmp	r2, r3
 800736e:	d201      	bcs.n	8007374 <historyPut+0x24>
        return false;
 8007370:	2300      	movs	r3, #0
 8007372:	e04d      	b.n	8007410 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f86a 	bl	8007450 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 800737c:	e024      	b.n	80073c8 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	891b      	ldrh	r3, [r3, #8]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f847 	bl	8007418 <historyGet>
 800738a:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f7f8 ffb7 	bl	8000300 <strlen>
 8007392:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	461a      	mov	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4413      	add	r3, r2
 80073a2:	3301      	adds	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	889b      	ldrh	r3, [r3, #4]
 80073aa:	461a      	mov	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	3301      	adds	r3, #1
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d20a      	bcs.n	80073d2 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	891b      	ldrh	r3, [r3, #8]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	891b      	ldrh	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1d6      	bne.n	800737e <historyPut+0x2e>
 80073d0:	e000      	b.n	80073d4 <historyPut+0x84>
            break;
 80073d2:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	891b      	ldrh	r3, [r3, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	3301      	adds	r3, #1
 80073e4:	18d0      	adds	r0, r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	4619      	mov	r1, r3
 80073ee:	f009 f83a 	bl	8010466 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	3301      	adds	r3, #1
 80073fa:	461a      	mov	r2, r3
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	f009 f90c 	bl	801061a <memcpy>
    ++history->itemsCount;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	891b      	ldrh	r3, [r3, #8]
 8007406:	3301      	adds	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	811a      	strh	r2, [r3, #8]

    return true;
 800740e:	2301      	movs	r3, #1
}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8007424:	887b      	ldrh	r3, [r7, #2]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <historyGet+0x1c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	891b      	ldrh	r3, [r3, #8]
 800742e:	887a      	ldrh	r2, [r7, #2]
 8007430:	429a      	cmp	r2, r3
 8007432:	d901      	bls.n	8007438 <historyGet+0x20>
        return NULL;
 8007434:	2300      	movs	r3, #0
 8007436:	e007      	b.n	8007448 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	887a      	ldrh	r2, [r7, #2]
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff f937 	bl	80066b4 <embeddedCliGetToken>
 8007446:	4603      	mov	r3, r0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d04c      	beq.n	80074fa <historyRemove+0xaa>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d048      	beq.n	80074fa <historyRemove+0xaa>
        return;
    char *item = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800746c:	2301      	movs	r3, #1
 800746e:	827b      	strh	r3, [r7, #18]
 8007470:	e013      	b.n	800749a <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	8a7a      	ldrh	r2, [r7, #18]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f935 	bl	80066ea <embeddedCliGetTokenVariable>
 8007480:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f7f8 fedb 	bl	8000240 <strcmp>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8007494:	8a7b      	ldrh	r3, [r7, #18]
 8007496:	3301      	adds	r3, #1
 8007498:	827b      	strh	r3, [r7, #18]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	891b      	ldrh	r3, [r3, #8]
 800749e:	8a7a      	ldrh	r2, [r7, #18]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d9e6      	bls.n	8007472 <historyRemove+0x22>
 80074a4:	e000      	b.n	80074a8 <historyRemove+0x58>
            break;
 80074a6:	bf00      	nop
    }
    if (item == NULL)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d027      	beq.n	80074fe <historyRemove+0xae>
        return;

    --history->itemsCount;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	891b      	ldrh	r3, [r3, #8]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80074ba:	8a7a      	ldrh	r2, [r7, #18]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	891b      	ldrh	r3, [r3, #8]
 80074c0:	3301      	adds	r3, #1
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d01d      	beq.n	8007502 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80074c6:	6978      	ldr	r0, [r7, #20]
 80074c8:	f7f8 ff1a 	bl	8000300 <strlen>
 80074cc:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	889b      	ldrh	r3, [r3, #4]
 80074d2:	4619      	mov	r1, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	441a      	add	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	1acb      	subs	r3, r1, r3
 80074e4:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f008 ffb7 	bl	8010466 <memmove>
 80074f8:	e004      	b.n	8007504 <historyRemove+0xb4>
        return;
 80074fa:	bf00      	nop
 80074fc:	e002      	b.n	8007504 <historyRemove+0xb4>
        return;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <historyRemove+0xb4>
        return;
 8007502:	bf00      	nop
}
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <getTokenPosition+0x18>
 800751c:	887b      	ldrh	r3, [r7, #2]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8007522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007526:	e028      	b.n	800757a <getTokenPosition+0x70>
    uint16_t i = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 800752c:	2301      	movs	r3, #1
 800752e:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8007530:	89ba      	ldrh	r2, [r7, #12]
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	429a      	cmp	r2, r3
 8007536:	d013      	beq.n	8007560 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8007538:	89fb      	ldrh	r3, [r7, #14]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <getTokenPosition+0x4e>
            ++tokenCount;
 8007544:	89bb      	ldrh	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 800754a:	89fb      	ldrh	r3, [r7, #14]
 800754c:	3301      	adds	r3, #1
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	3301      	adds	r3, #1
 800755c:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 800755e:	e7e7      	b.n	8007530 <getTokenPosition+0x26>
            break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <getTokenPosition+0x5c>
                break;
 8007564:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8007566:	89fb      	ldrh	r3, [r7, #14]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <getTokenPosition+0x6c>
        return i;
 8007572:	89fb      	ldrh	r3, [r7, #14]
 8007574:	e001      	b.n	800757a <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8007576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	e010      	b.n	80075ba <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7f8 fe4b 	bl	8000240 <strcmp>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <findCategoryIndex+0x2e>
            return i;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	e008      	b.n	80075c6 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	3301      	adds	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	dbea      	blt.n	8007598 <findCategoryIndex+0x12>
        }
    }
    return -1;
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 80075dc:	68b8      	ldr	r0, [r7, #8]
 80075de:	f7f8 fe8f 	bl	8000300 <strlen>
 80075e2:	4603      	mov	r3, r0
 80075e4:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff fdb0 	bl	800714e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e006      	b.n	8007602 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 80075f4:	4908      	ldr	r1, [pc, #32]	@ (8007618 <printAlignedColumn+0x48>)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fda9 	bl	800714e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	429a      	cmp	r2, r3
 800760c:	dbf2      	blt.n	80075f4 <printAlignedColumn+0x24>
    }
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	08014018 	.word	0x08014018

0800761c <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 800761c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007620:	b095      	sub	sp, #84	@ 0x54
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8007630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007632:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8007638:	498c      	ldr	r1, [pc, #560]	@ (800786c <CMD_Help+0x250>)
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fd87 	bl	800714e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8007640:	4b8b      	ldr	r3, [pc, #556]	@ (8007870 <CMD_Help+0x254>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4619      	mov	r1, r3
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fd81 	bl	800714e <writeToOutput>
        return;
 800764c:	e1ba      	b.n	80079c4 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800764e:	68b8      	ldr	r0, [r7, #8]
 8007650:	f7ff f866 	bl	8006720 <embeddedCliGetTokenCount>
 8007654:	4603      	mov	r3, r0
 8007656:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8007658:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 80f6 	bne.w	800784c <CMD_Help+0x230>
 8007660:	466b      	mov	r3, sp
 8007662:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8007664:	2320      	movs	r3, #32
 8007666:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	3b01      	subs	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	2200      	movs	r2, #0
 8007672:	4698      	mov	r8, r3
 8007674:	4691      	mov	r9, r2
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8007682:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8007686:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	2200      	movs	r2, #0
 800768e:	461c      	mov	r4, r3
 8007690:	4615      	mov	r5, r2
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	016b      	lsls	r3, r5, #5
 800769c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80076a0:	0162      	lsls	r2, r4, #5
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	3307      	adds	r3, #7
 80076a8:	08db      	lsrs	r3, r3, #3
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	ebad 0d03 	sub.w	sp, sp, r3
 80076b0:	466b      	mov	r3, sp
 80076b2:	3303      	adds	r3, #3
 80076b4:	089b      	lsrs	r3, r3, #2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 80076be:	2300      	movs	r3, #0
 80076c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c2:	e02d      	b.n	8007720 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80076c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	440b      	add	r3, r1
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <CMD_Help+0xd2>
 80076da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80076de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e0:	4613      	mov	r3, r2
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	4413      	add	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	440b      	add	r3, r1
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	e000      	b.n	80076f0 <CMD_Help+0xd4>
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <CMD_Help+0x258>)
 80076f0:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 80076f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	69b8      	ldr	r0, [r7, #24]
 80076f8:	f7ff ff45 	bl	8007586 <findCategoryIndex>
 80076fc:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da0a      	bge.n	800771a <CMD_Help+0xfe>
 8007704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	429a      	cmp	r2, r3
 800770a:	da06      	bge.n	800771a <CMD_Help+0xfe>
                categories[catCount++] = cat;
 800770c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007712:	6a3a      	ldr	r2, [r7, #32]
 8007714:	69b9      	ldr	r1, [r7, #24]
 8007716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 800771a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771c:	3301      	adds	r3, #1
 800771e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007722:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007724:	461a      	mov	r2, r3
 8007726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007728:	4293      	cmp	r3, r2
 800772a:	dbcb      	blt.n	80076c4 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 800772c:	2300      	movs	r3, #0
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007730:	e085      	b.n	800783e <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8007732:	4951      	ldr	r1, [pc, #324]	@ (8007878 <CMD_Help+0x25c>)
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff fd0a 	bl	800714e <writeToOutput>
            writeToOutput(cli, categories[c]);
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	4619      	mov	r1, r3
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff fd02 	bl	800714e <writeToOutput>
            writeToOutput(cli, "]");
 800774a:	494c      	ldr	r1, [pc, #304]	@ (800787c <CMD_Help+0x260>)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff fcfe 	bl	800714e <writeToOutput>
            writeToOutput(cli, lineBreak);
 8007752:	4b47      	ldr	r3, [pc, #284]	@ (8007870 <CMD_Help+0x254>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fcf8 	bl	800714e <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 800775e:	2300      	movs	r3, #0
 8007760:	643b      	str	r3, [r7, #64]	@ 0x40
 8007762:	e05d      	b.n	8007820 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8007764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007766:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007768:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800776a:	4613      	mov	r3, r2
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	4413      	add	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	440b      	add	r3, r1
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <CMD_Help+0x172>
 800777a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800777e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007780:	4613      	mov	r3, r2
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4413      	add	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	440b      	add	r3, r1
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	e000      	b.n	8007790 <CMD_Help+0x174>
 800778e:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <CMD_Help+0x258>)
 8007790:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779a:	4619      	mov	r1, r3
 800779c:	69f8      	ldr	r0, [r7, #28]
 800779e:	f7f8 fd4f 	bl	8000240 <strcmp>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d138      	bne.n	800781a <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 80077a8:	4935      	ldr	r1, [pc, #212]	@ (8007880 <CMD_Help+0x264>)
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff fccf 	bl	800714e <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 80077b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80077b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077b6:	4613      	mov	r3, r2
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	440b      	add	r3, r1
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2210      	movs	r2, #16
 80077c4:	4619      	mov	r1, r3
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff ff02 	bl	80075d0 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 80077cc:	492d      	ldr	r1, [pc, #180]	@ (8007884 <CMD_Help+0x268>)
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff fcbd 	bl	800714e <writeToOutput>
                	if (impl->bindings[i].help) {
 80077d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80077d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077da:	4613      	mov	r3, r2
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	4413      	add	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	440b      	add	r3, r1
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80077ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f0:	4613      	mov	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	440b      	add	r3, r1
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	4619      	mov	r1, r3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fca5 	bl	800714e <writeToOutput>
 8007804:	e003      	b.n	800780e <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 8007806:	4920      	ldr	r1, [pc, #128]	@ (8007888 <CMD_Help+0x26c>)
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff fca0 	bl	800714e <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 800780e:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <CMD_Help+0x254>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff fc9a 	bl	800714e <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 800781a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800781c:	3301      	adds	r3, #1
 800781e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007824:	461a      	mov	r2, r3
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	4293      	cmp	r3, r2
 800782a:	db9b      	blt.n	8007764 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 800782c:	4b10      	ldr	r3, [pc, #64]	@ (8007870 <CMD_Help+0x254>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fc8b 	bl	800714e <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8007838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783a:	3301      	adds	r3, #1
 800783c:	647b      	str	r3, [r7, #68]	@ 0x44
 800783e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007842:	429a      	cmp	r2, r3
 8007844:	f6ff af75 	blt.w	8007732 <CMD_Help+0x116>
 8007848:	46b5      	mov	sp, r6
 800784a:	e0bb      	b.n	80079c4 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 800784c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800784e:	2b01      	cmp	r3, #1
 8007850:	f040 80ae 	bne.w	80079b0 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8007854:	2101      	movs	r1, #1
 8007856:	68b8      	ldr	r0, [r7, #8]
 8007858:	f7fe ff2c 	bl	80066b4 <embeddedCliGetToken>
 800785c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8007864:	2300      	movs	r3, #0
 8007866:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007868:	e08f      	b.n	800798a <CMD_Help+0x36e>
 800786a:	bf00      	nop
 800786c:	08014034 	.word	0x08014034
 8007870:	2000010c 	.word	0x2000010c
 8007874:	0801404c 	.word	0x0801404c
 8007878:	0801405c 	.word	0x0801405c
 800787c:	08014060 	.word	0x08014060
 8007880:	08014064 	.word	0x08014064
 8007884:	0801406c 	.word	0x0801406c
 8007888:	08014070 	.word	0x08014070
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 800788c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007892:	4613      	mov	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	440b      	add	r3, r1
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7f8 fccd 	bl	8000240 <strcmp>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d16b      	bne.n	8007984 <CMD_Help+0x368>
                found = true;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 80078b2:	4946      	ldr	r1, [pc, #280]	@ (80079cc <CMD_Help+0x3b0>)
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff fc4a 	bl	800714e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 80078ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80078be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078c0:	4613      	mov	r3, r2
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	4413      	add	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	440b      	add	r3, r1
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4619      	mov	r1, r3
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7ff fc3d 	bl	800714e <writeToOutput>
                writeToOutput(cli, lineBreak);
 80078d4:	4b3e      	ldr	r3, [pc, #248]	@ (80079d0 <CMD_Help+0x3b4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4619      	mov	r1, r3
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fc37 	bl	800714e <writeToOutput>

                writeToOutput(cli, "Category: ");
 80078e0:	493c      	ldr	r1, [pc, #240]	@ (80079d4 <CMD_Help+0x3b8>)
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fc33 	bl	800714e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 80078e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80078ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	440b      	add	r3, r1
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <CMD_Help+0x2f6>
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007902:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007904:	4613      	mov	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	4413      	add	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	440b      	add	r3, r1
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	e000      	b.n	8007914 <CMD_Help+0x2f8>
 8007912:	4b31      	ldr	r3, [pc, #196]	@ (80079d8 <CMD_Help+0x3bc>)
 8007914:	4619      	mov	r1, r3
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fc19 	bl	800714e <writeToOutput>
                writeToOutput(cli, lineBreak);
 800791c:	4b2c      	ldr	r3, [pc, #176]	@ (80079d0 <CMD_Help+0x3b4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4619      	mov	r1, r3
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fc13 	bl	800714e <writeToOutput>

                if (impl->bindings[i].help) {
 8007928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800792c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800792e:	4613      	mov	r3, r2
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4413      	add	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	440b      	add	r3, r1
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d017      	beq.n	800796e <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 800793e:	4927      	ldr	r1, [pc, #156]	@ (80079dc <CMD_Help+0x3c0>)
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fc04 	bl	800714e <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8007946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007948:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800794a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800794c:	4613      	mov	r3, r2
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	4413      	add	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	440b      	add	r3, r1
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4619      	mov	r1, r3
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fbf7 	bl	800714e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8007960:	4b1b      	ldr	r3, [pc, #108]	@ (80079d0 <CMD_Help+0x3b4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4619      	mov	r1, r3
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fbf1 	bl	800714e <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 800796c:	e014      	b.n	8007998 <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 800796e:	491c      	ldr	r1, [pc, #112]	@ (80079e0 <CMD_Help+0x3c4>)
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fbec 	bl	800714e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8007976:	4b16      	ldr	r3, [pc, #88]	@ (80079d0 <CMD_Help+0x3b4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fbe6 	bl	800714e <writeToOutput>
                break;
 8007982:	e009      	b.n	8007998 <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	3301      	adds	r3, #1
 8007988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800798a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800798e:	461a      	mov	r2, r3
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	4293      	cmp	r3, r2
 8007994:	f6ff af7a 	blt.w	800788c <CMD_Help+0x270>
            }
        }
        if (!found) {
 8007998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800799c:	f083 0301 	eor.w	r3, r3, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 80079a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f81d 	bl	80079e8 <onUnknownCommand>
 80079ae:	e009      	b.n	80079c4 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80079b0:	490c      	ldr	r1, [pc, #48]	@ (80079e4 <CMD_Help+0x3c8>)
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff fbcb 	bl	800714e <writeToOutput>
        writeToOutput(cli, lineBreak);
 80079b8:	4b05      	ldr	r3, [pc, #20]	@ (80079d0 <CMD_Help+0x3b4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fbc5 	bl	800714e <writeToOutput>
    }
}
 80079c4:	3754      	adds	r7, #84	@ 0x54
 80079c6:	46bd      	mov	sp, r7
 80079c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079cc:	0801407c 	.word	0x0801407c
 80079d0:	2000010c 	.word	0x2000010c
 80079d4:	08014088 	.word	0x08014088
 80079d8:	0801404c 	.word	0x0801404c
 80079dc:	08014094 	.word	0x08014094
 80079e0:	08014070 	.word	0x08014070
 80079e4:	0801409c 	.word	0x0801409c

080079e8 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 80079f2:	490b      	ldr	r1, [pc, #44]	@ (8007a20 <onUnknownCommand+0x38>)
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fbaa 	bl	800714e <writeToOutput>
    writeToOutput(cli, name);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fba6 	bl	800714e <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8007a02:	4908      	ldr	r1, [pc, #32]	@ (8007a24 <onUnknownCommand+0x3c>)
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fba2 	bl	800714e <writeToOutput>
    writeToOutput(cli, lineBreak);
 8007a0a:	4b07      	ldr	r3, [pc, #28]	@ (8007a28 <onUnknownCommand+0x40>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fb9c 	bl	800714e <writeToOutput>
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	080140cc 	.word	0x080140cc
 8007a24:	080140e0 	.word	0x080140e0
 8007a28:	2000010c 	.word	0x2000010c

08007a2c <LL_SPI_Enable>:
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <LL_SPI_IsEnabled>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5c:	2b40      	cmp	r3, #64	@ 0x40
 8007a5e:	d101      	bne.n	8007a64 <LL_SPI_IsEnabled+0x18>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <LL_SPI_IsEnabled+0x1a>
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d101      	bne.n	8007a8a <LL_SPI_IsActiveFlag_TXE+0x18>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa8:	2b80      	cmp	r3, #128	@ 0x80
 8007aaa:	d101      	bne.n	8007ab0 <LL_SPI_IsActiveFlag_BSY+0x18>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b2db      	uxtb	r3, r3
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <LL_GPIO_SetOutputPin>:
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	619a      	str	r2, [r3, #24]
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <LL_GPIO_ResetOutputPin>:
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	041a      	lsls	r2, r3, #16
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	619a      	str	r2, [r3, #24]
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <ADG1414_Chain_Write>:

#include "adg1414.h"


static void ADG1414_Chain_Write(ADG1414_Device_t *dev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8007b40:	bf00      	nop
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ff93 	bl	8007a72 <LL_SPI_IsActiveFlag_TXE>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f7      	beq.n	8007b42 <ADG1414_Chain_Write+0xa>
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7ff ffdc 	bl	8007b1a <LL_GPIO_ResetOutputPin>

    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7b1b      	ldrb	r3, [r3, #12]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e023      	b.n	8007bb4 <ADG1414_Chain_Write+0x7c>
    {
        LL_SPI_TransmitData8(dev->spi, dev->switch_state[i]);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	330d      	adds	r3, #13
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f7ff ffad 	bl	8007ada <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8007b80:	bf00      	nop
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff ff73 	bl	8007a72 <LL_SPI_IsActiveFlag_TXE>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f7      	beq.n	8007b82 <ADG1414_Chain_Write+0x4a>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8007b92:	bf00      	nop
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff7d 	bl	8007a98 <LL_SPI_IsActiveFlag_BSY>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f7      	bne.n	8007b94 <ADG1414_Chain_Write+0x5c>
        (void)LL_SPI_ReceiveData8(dev->spi);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff ff88 	bl	8007abe <LL_SPI_ReceiveData8>
    for (int i = dev->num_of_sw - 1; i >= 0; i--)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dad8      	bge.n	8007b6c <ADG1414_Chain_Write+0x34>
    }

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f7ff ff9a 	bl	8007afe <LL_GPIO_SetOutputPin>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <ADG1414_Chain_Init>:

/* Hàm khởi tạo module ADG1414 */
void ADG1414_Chain_Init(ADG1414_Device_t *dev, SPI_TypeDef *spi, GPIO_TypeDef *cs_port, uint32_t cs_pin, uint8_t num_of_sw)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b08c      	sub	sp, #48	@ 0x30
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	601a      	str	r2, [r3, #0]
	dev->num_of_sw = num_of_sw;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007bec:	731a      	strb	r2, [r3, #12]
	dev->cs_port = cs_port;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	609a      	str	r2, [r3, #8]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bfa:	f107 0314 	add.w	r3, r7, #20
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	609a      	str	r2, [r3, #8]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	611a      	str	r2, [r3, #16]
 8007c0a:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = dev->cs_pin;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c12:	2301      	movs	r3, #1
 8007c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8007c16:	2302      	movs	r3, #2
 8007c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f107 0214 	add.w	r2, r7, #20
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f005 fdd0 	bl	800d7d2 <LL_GPIO_Init>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7ff ff5e 	bl	8007afe <LL_GPIO_SetOutputPin>

    for (int i = 0; i < dev->num_of_sw; i++)
 8007c42:	2300      	movs	r3, #0
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c46:	e008      	b.n	8007c5a <ADG1414_Chain_Init+0x88>
    {
        dev->switch_state[i] = 0x00;
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4c:	4413      	add	r3, r2
 8007c4e:	330d      	adds	r3, #13
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	3301      	adds	r3, #1
 8007c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	7b1b      	ldrb	r3, [r3, #12]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	4293      	cmp	r3, r2
 8007c64:	dbf0      	blt.n	8007c48 <ADG1414_Chain_Init+0x76>
    }

    while (!LL_SPI_IsEnabled(dev->spi))
 8007c66:	e005      	b.n	8007c74 <ADG1414_Chain_Init+0xa2>
	{
		LL_SPI_Enable(dev->spi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fedd 	bl	8007a2c <LL_SPI_Enable>
		__NOP();
 8007c72:	bf00      	nop
    while (!LL_SPI_IsEnabled(dev->spi))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fee7 	bl	8007a4c <LL_SPI_IsEnabled>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f1      	beq.n	8007c68 <ADG1414_Chain_Init+0x96>
	}

    ADG1414_Chain_Write(dev);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7ff ff57 	bl	8007b38 <ADG1414_Chain_Write>
}
 8007c8a:	bf00      	nop
 8007c8c:	3730      	adds	r7, #48	@ 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <ADG1414_Chain_SwitchOn>:

/* Hàm bật một switch */
void ADG1414_Chain_SwitchOn(ADG1414_Device_t *dev, uint8_t channel_num)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2b24      	cmp	r3, #36	@ 0x24
 8007ca4:	d903      	bls.n	8007cae <ADG1414_Chain_SwitchOn+0x1a>
    	(dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > INTERNAL_CHAIN_CHANNEL_NUM)&&
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d05a      	beq.n	8007d64 <ADG1414_Chain_SwitchOn+0xd0>
    	return;  // Kiểm tra giới hạn

    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d903      	bls.n	8007cbc <ADG1414_Chain_SwitchOn+0x28>
		(dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7b1b      	ldrb	r3, [r3, #12]
    if ((channel_num > EXTERNAL_CHAIN_CHANNEL_NUM)&&
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d055      	beq.n	8007d68 <ADG1414_Chain_SwitchOn+0xd4>
		return;  // Kiểm tra giới hạn

    if (dev->num_of_sw == INTERNAL_CHAIN_SWITCH_NUM)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7b1b      	ldrb	r3, [r3, #12]
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d138      	bne.n	8007d36 <ADG1414_Chain_SwitchOn+0xa2>
	{
    	for (int i = 0; i < dev->num_of_sw; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e008      	b.n	8007cdc <ADG1414_Chain_SwitchOn+0x48>
		{
			dev->switch_state[i] = 0x00;
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	330d      	adds	r3, #13
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < dev->num_of_sw; i++)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7b1b      	ldrb	r3, [r3, #12]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	dbf0      	blt.n	8007cca <ADG1414_Chain_SwitchOn+0x36>
		}
    	if (channel_num)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d036      	beq.n	8007d5c <ADG1414_Chain_SwitchOn+0xc8>
    	{
    		uint8_t chip_idx = (channel_num-1) / 6;
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d70 <ADG1414_Chain_SwitchOn+0xdc>)
 8007cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8007cf8:	17db      	asrs	r3, r3, #31
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	72fb      	strb	r3, [r7, #11]
			uint8_t bit_idx = (channel_num-1) % 6;
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	1e5a      	subs	r2, r3, #1
 8007d02:	4b1b      	ldr	r3, [pc, #108]	@ (8007d70 <ADG1414_Chain_SwitchOn+0xdc>)
 8007d04:	fb83 3102 	smull	r3, r1, r3, r2
 8007d08:	17d3      	asrs	r3, r2, #31
 8007d0a:	1ac9      	subs	r1, r1, r3
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	440b      	add	r3, r1
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	1ad1      	subs	r1, r2, r3
 8007d16:	460b      	mov	r3, r1
 8007d18:	72bb      	strb	r3, [r7, #10]
			dev->switch_state[(uint8_t)chip_idx] = (1 << bit_idx)&0x3F;
 8007d1a:	7abb      	ldrb	r3, [r7, #10]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007d2a:	b2d1      	uxtb	r1, r2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	460a      	mov	r2, r1
 8007d32:	735a      	strb	r2, [r3, #13]
 8007d34:	e012      	b.n	8007d5c <ADG1414_Chain_SwitchOn+0xc8>
    	}
	}

    else if (dev->num_of_sw == EXTERNAL_CHAIN_SWITCH_NUM)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7b1b      	ldrb	r3, [r3, #12]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10e      	bne.n	8007d5c <ADG1414_Chain_SwitchOn+0xc8>
	{
    	if(channel_num)
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <ADG1414_Chain_SwitchOn+0xc2>
    	{
    		dev->switch_state[0] = (1 << (channel_num - 1));
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	2201      	movs	r2, #1
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	735a      	strb	r2, [r3, #13]
 8007d54:	e002      	b.n	8007d5c <ADG1414_Chain_SwitchOn+0xc8>
    	}

    	else
    	{
    		dev->switch_state[0] = 0;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	735a      	strb	r2, [r3, #13]
		}
	}

    ADG1414_Chain_Write(dev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff feeb 	bl	8007b38 <ADG1414_Chain_Write>
 8007d62:	e002      	b.n	8007d6a <ADG1414_Chain_SwitchOn+0xd6>
    	return;  // Kiểm tra giới hạn
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <ADG1414_Chain_SwitchOn+0xd6>
		return;  // Kiểm tra giới hạn
 8007d68:	bf00      	nop
}
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	2aaaaaab 	.word	0x2aaaaaab

08007d74 <ADG1414_Chain_SwitchAllOff>:
//	ADG1414_Chain_Write(dev);
//}

/* Hàm tắt tất cả các switch */
void ADG1414_Chain_SwitchAllOff(ADG1414_Device_t *dev)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < dev->num_of_sw; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e008      	b.n	8007d94 <ADG1414_Chain_SwitchAllOff+0x20>
    {
        dev->switch_state[i] = 0x00;
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	330d      	adds	r3, #13
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dev->num_of_sw; i++)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7b1b      	ldrb	r3, [r3, #12]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	dbf0      	blt.n	8007d82 <ADG1414_Chain_SwitchAllOff+0xe>
    }
    ADG1414_Chain_Write(dev);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fec9 	bl	8007b38 <ADG1414_Chain_Write>
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <LL_SPI_Enable>:
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <LL_SPI_Disable>:
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <LL_SPI_IsEnabled>:
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfe:	2b40      	cmp	r3, #64	@ 0x40
 8007e00:	d101      	bne.n	8007e06 <LL_SPI_IsEnabled+0x18>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <LL_SPI_IsEnabled+0x1a>
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <LL_SPI_SetBaudRatePrescaler>:
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <LL_SPI_SetDataWidth>:
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e000      	b.n	8007e7a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <LL_SPI_IsActiveFlag_TXE>:
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d101      	bne.n	8007e9e <LL_SPI_IsActiveFlag_TXE+0x18>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <LL_SPI_IsActiveFlag_BSY>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebc:	2b80      	cmp	r3, #128	@ 0x80
 8007ebe:	d101      	bne.n	8007ec4 <LL_SPI_IsActiveFlag_BSY+0x18>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <LL_SPI_ReceiveData8>:
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	330c      	adds	r3, #12
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b2db      	uxtb	r3, r3
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <LL_SPI_TransmitData8>:
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	330c      	adds	r3, #12
 8007efe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	701a      	strb	r2, [r3, #0]
}
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <LL_GPIO_IsInputPinSet>:
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4013      	ands	r3, r2
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	bf0c      	ite	eq
 8007f2a:	2301      	moveq	r3, #1
 8007f2c:	2300      	movne	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <LL_GPIO_SetOutputPin>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	619a      	str	r2, [r3, #24]
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <LL_GPIO_ResetOutputPin>:
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	041a      	lsls	r2, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	619a      	str	r2, [r3, #24]
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <ADS8327_Transmit16>:
uint32_t adc_rec_total = 0;

static uint16_t CFR_user_default = 0x0EFD;		//0000 1110 1111 1101

static void ADS8327_Transmit16(ADS8327_Device_t *dev, uint16_t data)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	807b      	strh	r3, [r7, #2]
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8007f82:	bf00      	nop
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff ff7c 	bl	8007e86 <LL_SPI_IsActiveFlag_TXE>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f7      	beq.n	8007f84 <ADS8327_Transmit16+0xe>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)(data>>8));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	887b      	ldrh	r3, [r7, #2]
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7ff ffa3 	bl	8007eee <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8007fa8:	bf00      	nop
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff ff69 	bl	8007e86 <LL_SPI_IsActiveFlag_TXE>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f7      	beq.n	8007faa <ADS8327_Transmit16+0x34>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi
 8007fba:	bf00      	nop
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff ff73 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f7      	bne.n	8007fbc <ADS8327_Transmit16+0x46>
	(void)LL_SPI_ReceiveData8(dev->spi);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ff7e 	bl	8007ed2 <LL_SPI_ReceiveData8>

	LL_SPI_TransmitData8(dev->spi, (uint8_t)data);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	887a      	ldrh	r2, [r7, #2]
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ff84 	bl	8007eee <LL_SPI_TransmitData8>
	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8007fe6:	bf00      	nop
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ff4a 	bl	8007e86 <LL_SPI_IsActiveFlag_TXE>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f7      	beq.n	8007fe8 <ADS8327_Transmit16+0x72>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8007ff8:	bf00      	nop
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff ff54 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f7      	bne.n	8007ffa <ADS8327_Transmit16+0x84>
	(void)LL_SPI_ReceiveData8(dev->spi);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ff5f 	bl	8007ed2 <LL_SPI_ReceiveData8>

}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <ADS8327_Receive16>:

static uint16_t ADS8327_Receive16(ADS8327_Device_t *dev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	uint16_t data1 = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	81fb      	strh	r3, [r7, #14]
	uint16_t data2 = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	81bb      	strh	r3, [r7, #12]

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800802c:	bf00      	nop
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff ff27 	bl	8007e86 <LL_SPI_IsActiveFlag_TXE>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f7      	beq.n	800802e <ADS8327_Receive16+0x12>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	21aa      	movs	r1, #170	@ 0xaa
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff ff52 	bl	8007eee <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 800804a:	bf00      	nop
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff ff2b 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f7      	bne.n	800804c <ADS8327_Receive16+0x30>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 800805c:	bf00      	nop
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff fefc 	bl	8007e60 <LL_SPI_IsActiveFlag_RXNE>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f7      	beq.n	800805e <ADS8327_Receive16+0x42>
	data1 = LL_SPI_ReceiveData8(dev->spi);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ff2d 	bl	8007ed2 <LL_SPI_ReceiveData8>
 8008078:	4603      	mov	r3, r0
 800807a:	81fb      	strh	r3, [r7, #14]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 800807c:	bf00      	nop
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff ff12 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f7      	bne.n	800807e <ADS8327_Receive16+0x62>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800808e:	bf00      	nop
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fef6 	bl	8007e86 <LL_SPI_IsActiveFlag_TXE>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f7      	beq.n	8008090 <ADS8327_Receive16+0x74>
	LL_SPI_TransmitData8(dev->spi, 0xAA);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	21aa      	movs	r1, #170	@ 0xaa
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff ff21 	bl	8007eee <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 80080ac:	bf00      	nop
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fefa 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f7      	bne.n	80080ae <ADS8327_Receive16+0x92>

	while (!LL_SPI_IsActiveFlag_RXNE(dev->spi));
 80080be:	bf00      	nop
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fecb 	bl	8007e60 <LL_SPI_IsActiveFlag_RXNE>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f7      	beq.n	80080c0 <ADS8327_Receive16+0xa4>
	data2 = LL_SPI_ReceiveData8(dev->spi);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff fefc 	bl	8007ed2 <LL_SPI_ReceiveData8>
 80080da:	4603      	mov	r3, r0
 80080dc:	81bb      	strh	r3, [r7, #12]
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 80080de:	bf00      	nop
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fee1 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f7      	bne.n	80080e0 <ADS8327_Receive16+0xc4>

	return (data1 << 8)|data2;
 80080f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	b21a      	sxth	r2, r3
 80080f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	b21b      	sxth	r3, r3
 8008100:	b29b      	uxth	r3, r3
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <ADS8327_Wake_Up>:

void ADS8327_Wake_Up(ADS8327_Device_t *dev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
	dev->CMD = ADS8327_CMD_WAKE_UP;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f44f 4230 	mov.w	r2, #45056	@ 0xb000
 8008118:	839a      	strh	r2, [r3, #28]
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7ff ff17 	bl	8007f58 <LL_GPIO_ResetOutputPin>

    ADS8327_Transmit16(dev, dev->CMD);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8b9b      	ldrh	r3, [r3, #28]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ff20 	bl	8007f76 <ADS8327_Transmit16>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7ff fefb 	bl	8007f3c <LL_GPIO_SetOutputPin>
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <ADS8327_Write_CFR>:

void ADS8327_Write_CFR(ADS8327_Device_t *dev, uint16_t CFR)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7ff fef6 	bl	8007f58 <LL_GPIO_ResetOutputPin>

	dev->CMD = ADS8327_CMD_WRITE_CONFIG;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8008172:	839a      	strh	r2, [r3, #28]
	dev->CFR_value = CFR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	887a      	ldrh	r2, [r7, #2]
 8008178:	83da      	strh	r2, [r3, #30]
	uint16_t temp = (dev->CMD & 0xF000) | (dev->CFR_value & 0x0FFF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8b9b      	ldrh	r3, [r3, #28]
 800817e:	b21a      	sxth	r2, r3
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <ADS8327_Write_CFR+0x6c>)
 8008182:	4013      	ands	r3, r2
 8008184:	b21a      	sxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8bdb      	ldrh	r3, [r3, #30]
 800818a:	b21b      	sxth	r3, r3
 800818c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008190:	b21b      	sxth	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b21b      	sxth	r3, r3
 8008196:	81fb      	strh	r3, [r7, #14]

	ADS8327_Transmit16(dev, temp);
 8008198:	89fb      	ldrh	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff feea 	bl	8007f76 <ADS8327_Transmit16>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7ff fec5 	bl	8007f3c <LL_GPIO_SetOutputPin>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	fffff000 	.word	0xfffff000

080081c0 <ADS8327_Default_CFR>:


void ADS8327_Default_CFR(ADS8327_Device_t *dev, CFR_default_t CFR_default)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
	if (CFR_default == USER_DEFAULT)
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <ADS8327_Default_CFR+0x20>
	{
		ADS8327_Write_CFR(dev, CFR_user_default);
 80081d2:	4b16      	ldr	r3, [pc, #88]	@ (800822c <ADS8327_Default_CFR+0x6c>)
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff ffb9 	bl	8008150 <ADS8327_Write_CFR>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
		ADS8327_Transmit16(dev, dev->CMD);
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
	}
}
 80081de:	e020      	b.n	8008222 <ADS8327_Default_CFR+0x62>
	else if (CFR_default == FACTORY_DEFAULT)
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d11d      	bne.n	8008222 <ADS8327_Default_CFR+0x62>
		LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7ff feb1 	bl	8007f58 <LL_GPIO_ResetOutputPin>
		dev->CMD = ADS8327_CMD_DEFAULT_MODE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 80081fc:	839a      	strh	r2, [r3, #28]
		dev->CFR_value = ADS8327_FACTORY_CFR_DEFAULT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f640 62fd 	movw	r2, #3837	@ 0xefd
 8008204:	83da      	strh	r2, [r3, #30]
		ADS8327_Transmit16(dev, dev->CMD);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8b9b      	ldrh	r3, [r3, #28]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff feb2 	bl	8007f76 <ADS8327_Transmit16>
		LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7ff fe8d 	bl	8007f3c <LL_GPIO_SetOutputPin>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	2000012c 	.word	0x2000012c

08008230 <ADS8327_Read_Data_Polling>:


uint16_t ADS8327_Read_Data_Polling(ADS8327_Device_t *dev, int timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(dev->convst_port, dev->convst_pin);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7ff fe87 	bl	8007f58 <LL_GPIO_ResetOutputPin>
	int time = timeout;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	60fb      	str	r3, [r7, #12]
	while(LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 800824e:	bf00      	nop
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695a      	ldr	r2, [r3, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7ff fe59 	bl	8007f12 <LL_GPIO_IsInputPinSet>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <ADS8327_Read_Data_Polling+0x40>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	60fa      	str	r2, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1ef      	bne.n	8008250 <ADS8327_Read_Data_Polling+0x20>
	time = timeout;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	60fb      	str	r3, [r7, #12]
	while(!LL_GPIO_IsInputPinSet(dev->EOC_port, dev->EOC_pin) && (time--));
 8008274:	bf00      	nop
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f7ff fe46 	bl	8007f12 <LL_GPIO_IsInputPinSet>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <ADS8327_Read_Data_Polling+0x66>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1e5a      	subs	r2, r3, #1
 8008290:	60fa      	str	r2, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1ef      	bne.n	8008276 <ADS8327_Read_Data_Polling+0x46>

	LL_GPIO_SetOutputPin(dev->convst_port, dev->convst_pin);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7ff fe4b 	bl	8007f3c <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	4619      	mov	r1, r3
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fe51 	bl	8007f58 <LL_GPIO_ResetOutputPin>

	dev->ADC_val = ADS8327_Receive16(dev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff feb0 	bl	800801c <ADS8327_Receive16>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	841a      	strh	r2, [r3, #32]

	while (LL_SPI_IsActiveFlag_BSY(dev->spi));
 80082c4:	bf00      	nop
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fdee 	bl	8007eac <LL_SPI_IsActiveFlag_BSY>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f7      	bne.n	80082c6 <ADS8327_Read_Data_Polling+0x96>
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f7ff fe2b 	bl	8007f3c <LL_GPIO_SetOutputPin>

	return dev->ADC_val;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8c1b      	ldrh	r3, [r3, #32]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <SPI_SetPrescaler>:
	LL_SPI_EnableIT_TXE(dev->spi);
	dev->tran_ind = 1;
}

void SPI_SetPrescaler(SPI_TypeDef *spi, uint32_t Prescaler)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị prescaler hợp lệ
    if ((Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV2) &&
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <SPI_SetPrescaler+0x3a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d011      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV4) &&
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b10      	cmp	r3, #16
 800830c:	d00e      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV8) &&
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b18      	cmp	r3, #24
 8008312:	d00b      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV16) &&
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b20      	cmp	r3, #32
 8008318:	d008      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV32) &&
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b28      	cmp	r3, #40	@ 0x28
 800831e:	d005      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV64) &&
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b30      	cmp	r3, #48	@ 0x30
 8008324:	d002      	beq.n	800832c <SPI_SetPrescaler+0x3a>
        (Prescaler != LL_SPI_BAUDRATEPRESCALER_DIV128) &&
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b38      	cmp	r3, #56	@ 0x38
 800832a:	d10a      	bne.n	8008342 <SPI_SetPrescaler+0x50>
    {
        // Xử lý lỗi nếu prescaler không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx
    LL_SPI_Disable(spi);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fd4e 	bl	8007dce <LL_SPI_Disable>
    // Cấu hình lại prescaler
    LL_SPI_SetBaudRatePrescaler(spi, Prescaler);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fd6d 	bl	8007e14 <LL_SPI_SetBaudRatePrescaler>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fd37 	bl	8007dae <LL_SPI_Enable>
 8008340:	e000      	b.n	8008344 <SPI_SetPrescaler+0x52>
        return;
 8008342:	bf00      	nop
}
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <SPI_SetDataLength>:

// Hàm thay đổi data length của SPIx
void SPI_SetDataLength(SPI_TypeDef *spi, uint32_t DataWidth)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
    // Kiểm tra giá trị DataWidth hợp lệ
    if ((DataWidth != LL_SPI_DATAWIDTH_8BIT)  &&
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800835a:	d003      	beq.n	8008364 <SPI_SetDataLength+0x1a>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008362:	d10a      	bne.n	800837a <SPI_SetDataLength+0x30>
    {
        // Xử lý lỗi nếu DataWidth không hợp lệ
        return;
    }
    // Vô hiệu hóa SPIx để thay đổi cấu hình
    LL_SPI_Disable(spi);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fd32 	bl	8007dce <LL_SPI_Disable>
    // Cập nhật Data Width
    LL_SPI_SetDataWidth(spi, DataWidth);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fd64 	bl	8007e3a <LL_SPI_SetDataWidth>
    // Kích hoạt lại SPIx
    LL_SPI_Enable(spi);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fd1b 	bl	8007dae <LL_SPI_Enable>
 8008378:	e000      	b.n	800837c <SPI_SetDataLength+0x32>
        return;
 800837a:	bf00      	nop
}
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <ADS8327_Device_Init>:
							uint32_t cs_pin,
							GPIO_TypeDef *convst_port,
							uint32_t convst_pin,
							GPIO_TypeDef *EOC_port,
							uint32_t EOC_pin)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	603b      	str	r3, [r7, #0]

	dev->spi = spi;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	609a      	str	r2, [r3, #8]
	dev->convst_port = convst_port;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	60da      	str	r2, [r3, #12]
	dev->convst_pin = convst_pin;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	611a      	str	r2, [r3, #16]
	dev->EOC_port = EOC_port;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a3a      	ldr	r2, [r7, #32]
 80083b2:	615a      	str	r2, [r3, #20]
	dev->EOC_pin = EOC_pin;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	619a      	str	r2, [r3, #24]
	dev->ADC_val = 0xFFFF;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083c0:	841a      	strh	r2, [r3, #32]
	dev->tran_ind = 0;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	while (!LL_SPI_IsEnabled(dev->spi))
 80083ca:	e005      	b.n	80083d8 <ADS8327_Device_Init+0x56>
	{
		LL_SPI_Enable(dev->spi);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fcec 	bl	8007dae <LL_SPI_Enable>
		__NOP();
 80083d6:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fd06 	bl	8007dee <LL_SPI_IsEnabled>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0f1      	beq.n	80083cc <ADS8327_Device_Init+0x4a>
	}

	ADS8327_Default_CFR(dev, USER_DEFAULT);
 80083e8:	2100      	movs	r1, #0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fee8 	bl	80081c0 <ADS8327_Default_CFR>
	ADS8327_Wake_Up(dev);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fe8a 	bl	800810a <ADS8327_Wake_Up>
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <LL_SPI_Enable>:
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <LL_SPI_IsEnabled>:
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d101      	bne.n	8008436 <LL_SPI_IsEnabled+0x18>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <LL_SPI_IsEnabled+0x1a>
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <LL_SPI_IsActiveFlag_TXE>:
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b02      	cmp	r3, #2
 8008456:	d101      	bne.n	800845c <LL_SPI_IsActiveFlag_TXE+0x18>
 8008458:	2301      	movs	r3, #1
 800845a:	e000      	b.n	800845e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <LL_SPI_IsActiveFlag_BSY>:
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800847a:	2b80      	cmp	r3, #128	@ 0x80
 800847c:	d101      	bne.n	8008482 <LL_SPI_IsActiveFlag_BSY+0x18>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LL_SPI_TransmitData8>:
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	330c      	adds	r3, #12
 80084a0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	701a      	strb	r2, [r3, #0]
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	330c      	adds	r3, #12
 80084c4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	887a      	ldrh	r2, [r7, #2]
 80084ca:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <LL_GPIO_SetOutputPin>:
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	619a      	str	r2, [r3, #24]
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <LL_GPIO_ResetOutputPin>:
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	041a      	lsls	r2, r3, #16
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	619a      	str	r2, [r3, #24]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <MCP4902_Write>:
	return (dac*_VREF_DAC)/2.55f;
}

/* Hàm gửi dữ liệu qua SPI */
static void MCP4902_Write(MCP4902_Device_t *dev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 800851c:	bf00      	nop
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff8e 	bl	8008444 <LL_SPI_IsActiveFlag_TXE>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f7      	beq.n	800851e <MCP4902_Write+0xa>


    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e076      	b.n	8008622 <MCP4902_Write+0x10e>
    {
    	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f7ff ffd8 	bl	80084f4 <LL_GPIO_ResetOutputPin>
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00c      	beq.n	8008564 <MCP4902_Write+0x50>
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	3314      	adds	r3, #20
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	b21b      	sxth	r3, r3
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	b21a      	sxth	r2, r3
 800855a:	4b36      	ldr	r3, [pc, #216]	@ (8008634 <MCP4902_Write+0x120>)
 800855c:	4313      	orrs	r3, r2
 800855e:	b21b      	sxth	r3, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	e00b      	b.n	800857c <MCP4902_Write+0x68>
				   ((1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4));
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	3314      	adds	r3, #20
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b21b      	sxth	r3, r3
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	b21b      	sxth	r3, r3
 8008574:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8008578:	b21b      	sxth	r3, r3
    	temp = i ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)|(1<<MCP4902_SHDN_BIT)|(dev->dac_channel[i]<<4)):
 800857a:	b29b      	uxth	r3, r3
 800857c:	817b      	strh	r3, [r7, #10]

        LL_SPI_TransmitData8(dev->spi, (uint8_t)(temp>>8));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	897b      	ldrh	r3, [r7, #10]
 8008584:	0a1b      	lsrs	r3, r3, #8
 8008586:	b29b      	uxth	r3, r3
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f7ff ff7f 	bl	8008490 <LL_SPI_TransmitData8>
        while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8008592:	bf00      	nop
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ff53 	bl	8008444 <LL_SPI_IsActiveFlag_TXE>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f7      	beq.n	8008594 <MCP4902_Write+0x80>
        while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80085a4:	bf00      	nop
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff ff5d 	bl	800846a <LL_SPI_IsActiveFlag_BSY>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f7      	bne.n	80085a6 <MCP4902_Write+0x92>

        LL_SPI_TransmitData8(dev->spi, (uint8_t)temp);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	897a      	ldrh	r2, [r7, #10]
 80085bc:	b2d2      	uxtb	r2, r2
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff ff65 	bl	8008490 <LL_SPI_TransmitData8>
		while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 80085c6:	bf00      	nop
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff ff39 	bl	8008444 <LL_SPI_IsActiveFlag_TXE>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0f7      	beq.n	80085c8 <MCP4902_Write+0xb4>
		while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 80085d8:	bf00      	nop
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff ff43 	bl	800846a <LL_SPI_IsActiveFlag_BSY>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f7      	bne.n	80085da <MCP4902_Write+0xc6>

        LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	4619      	mov	r1, r3
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7ff ff6f 	bl	80084d8 <LL_GPIO_SetOutputPin>

		LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7ff ff75 	bl	80084f4 <LL_GPIO_ResetOutputPin>
		__NOP();
 800860a:	bf00      	nop
		LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f7ff ff5e 	bl	80084d8 <LL_GPIO_SetOutputPin>
    for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b01      	cmp	r3, #1
 8008626:	dd85      	ble.n	8008534 <MCP4902_Write+0x20>
    }


}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	ffffb000 	.word	0xffffb000

08008638 <MCP4902_Shutdown>:

void MCP4902_Shutdown(MCP4902_Device_t *dev, uint8_t channel)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
	uint16_t temp;

    while (!LL_SPI_IsActiveFlag_TXE(dev->spi));
 8008644:	bf00      	nop
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fefa 	bl	8008444 <LL_SPI_IsActiveFlag_TXE>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f7      	beq.n	8008646 <MCP4902_Shutdown+0xe>
    LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7ff ff47 	bl	80084f4 <LL_GPIO_ResetOutputPin>

	temp = channel ? ((1<<MCP4902_AB_BIT)|(1<<MCP4902_GA_BIT)) : (1<<MCP4902_GA_BIT);
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <MCP4902_Shutdown+0x3a>
 800866c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8008670:	e001      	b.n	8008676 <MCP4902_Shutdown+0x3e>
 8008672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008676:	81fb      	strh	r3, [r7, #14]
	LL_SPI_TransmitData16(dev->spi, temp);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	89fa      	ldrh	r2, [r7, #14]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ff17 	bl	80084b4 <LL_SPI_TransmitData16>

	while (!LL_SPI_IsActiveFlag_TXE(dev->spi));  // Đợi TXE
 8008686:	bf00      	nop
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fed9 	bl	8008444 <LL_SPI_IsActiveFlag_TXE>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f7      	beq.n	8008688 <MCP4902_Shutdown+0x50>
	while (LL_SPI_IsActiveFlag_BSY(dev->spi));   // Đợi BSY
 8008698:	bf00      	nop
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fee3 	bl	800846a <LL_SPI_IsActiveFlag_BSY>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f7      	bne.n	800869a <MCP4902_Shutdown+0x62>

    LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7ff ff0f 	bl	80084d8 <LL_GPIO_SetOutputPin>

    LL_GPIO_ResetOutputPin(dev->latch_port, dev->latch_pin);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7ff ff15 	bl	80084f4 <LL_GPIO_ResetOutputPin>
	__NOP();
 80086ca:	bf00      	nop
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7ff fefe 	bl	80084d8 <LL_GPIO_SetOutputPin>
}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <MCP4902_Set_DAC>:

void MCP4902_Set_DAC(MCP4902_Device_t *dev, uint8_t channel, uint8_t DAC_val)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
 80086f0:	4613      	mov	r3, r2
 80086f2:	70bb      	strb	r3, [r7, #2]
	dev->dac_channel[channel] = DAC_val;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4413      	add	r3, r2
 80086fa:	78ba      	ldrb	r2, [r7, #2]
 80086fc:	751a      	strb	r2, [r3, #20]
	MCP4902_Write(dev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff ff08 	bl	8008514 <MCP4902_Write>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <MCP4902_Device_Init>:
							SPI_TypeDef *spi,
							GPIO_TypeDef *cs_port,
							uint32_t cs_pin,
							GPIO_TypeDef *latch_port,
							uint32_t latch_pin)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08c      	sub	sp, #48	@ 0x30
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
	dev->spi = spi;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	609a      	str	r2, [r3, #8]
	dev->latch_port = latch_port;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008730:	60da      	str	r2, [r3, #12]
	dev->latch_pin = latch_pin;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008736:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	609a      	str	r2, [r3, #8]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	611a      	str	r2, [r3, #16]
 8008748:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = dev->cs_pin;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008750:	2301      	movs	r3, #1
 8008752:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8008754:	2302      	movs	r3, #2
 8008756:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008758:	2300      	movs	r3, #0
 800875a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
	LL_GPIO_Init(dev->cs_port, &GPIO_InitStruct);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f107 0214 	add.w	r2, r7, #20
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f005 f831 	bl	800d7d2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = dev->latch_pin;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(dev->latch_port, &GPIO_InitStruct);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f107 0214 	add.w	r2, r7, #20
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f005 f826 	bl	800d7d2 <LL_GPIO_Init>

	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7ff fea1 	bl	80084d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(dev->latch_port, dev->latch_pin);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7ff fe99 	bl	80084d8 <LL_GPIO_SetOutputPin>

	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087aa:	e008      	b.n	80087be <MCP4902_Device_Init+0xb2>
	{
		dev->dac_channel[i] = 0;
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b0:	4413      	add	r3, r2
 80087b2:	3314      	adds	r3, #20
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MCP4902_NUM_CHANNEL; i++)
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	3301      	adds	r3, #1
 80087bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	ddf3      	ble.n	80087ac <MCP4902_Device_Init+0xa0>
	}

	while (!LL_SPI_IsEnabled(dev->spi))
 80087c4:	e005      	b.n	80087d2 <MCP4902_Device_Init+0xc6>
	{
		LL_SPI_Enable(dev->spi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fe17 	bl	80083fe <LL_SPI_Enable>
		__NOP();
 80087d0:	bf00      	nop
	while (!LL_SPI_IsEnabled(dev->spi))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fe21 	bl	800841e <LL_SPI_IsEnabled>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f1      	beq.n	80087c6 <MCP4902_Device_Init+0xba>
	}

	MCP4902_Write(dev);
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff fe96 	bl	8008514 <MCP4902_Write>
}
 80087e8:	bf00      	nop
 80087ea:	3730      	adds	r7, #48	@ 0x30
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <LL_GPIO_SetOutputPin>:
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	619a      	str	r2, [r3, #24]
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <LL_GPIO_ResetOutputPin>:
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	041a      	lsls	r2, r3, #16
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	619a      	str	r2, [r3, #24]
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <LED_Status_Init>:
		480									// taskTick
	},
};

void LED_Status_Init(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
    s_led_display_status.led_green = 0;
 8008830:	4a0a      	ldr	r2, [pc, #40]	@ (800885c <LED_Status_Init+0x30>)
 8008832:	7813      	ldrb	r3, [r2, #0]
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	7013      	strb	r3, [r2, #0]
    s_led_display_status.led_blue = 0;
 800883a:	4a08      	ldr	r2, [pc, #32]	@ (800885c <LED_Status_Init+0x30>)
 800883c:	7813      	ldrb	r3, [r2, #0]
 800883e:	f023 0302 	bic.w	r3, r3, #2
 8008842:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = EXP_POWERUP;
 8008844:	4a05      	ldr	r2, [pc, #20]	@ (800885c <LED_Status_Init+0x30>)
 8008846:	7813      	ldrb	r3, [r2, #0]
 8008848:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 800884c:	7013      	strb	r3, [r2, #0]
	status_led_led_green_on();
 800884e:	f000 f8d5 	bl	80089fc <status_led_led_green_on>
	status_led_led_blue_on();
 8008852:	f000 f8eb 	bl	8008a2c <status_led_led_blue_on>



}
 8008856:	bf00      	nop
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	2001dc1c 	.word	0x2001dc1c

08008860 <status_led_update>:

void	status_led_update(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
//	bmp390_temp_press_update();
//	UART_Printf(&EXP_UART, "%d %d \n", bmp390_get_press(), bmp390_get_temperature());



	switch (s_led_display_status.state) {
 8008864:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <status_led_update+0x38>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d00c      	beq.n	800888c <status_led_update+0x2c>
 8008872:	2b02      	cmp	r3, #2
 8008874:	dc0d      	bgt.n	8008892 <status_led_update+0x32>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <status_led_update+0x20>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d003      	beq.n	8008886 <status_led_update+0x26>
		break;
	case EXP_ERROR:
		status_led_error();
		break;
	default:
		break;
 800887e:	e008      	b.n	8008892 <status_led_update+0x32>
		status_led_powerup();
 8008880:	f000 f80c 	bl	800889c <status_led_powerup>
		break;
 8008884:	e006      	b.n	8008894 <status_led_update+0x34>
		status_led_normal();
 8008886:	f000 f851 	bl	800892c <status_led_normal>
		break;
 800888a:	e003      	b.n	8008894 <status_led_update+0x34>
		status_led_error();
 800888c:	f000 f870 	bl	8008970 <status_led_error>
		break;
 8008890:	e000      	b.n	8008894 <status_led_update+0x34>
		break;
 8008892:	bf00      	nop
	}
}
 8008894:	bf00      	nop
 8008896:	bd80      	pop	{r7, pc}
 8008898:	2001dc1c 	.word	0x2001dc1c

0800889c <status_led_powerup>:

static void status_led_powerup(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 80088a0:	4b21      	ldr	r3, [pc, #132]	@ (8008928 <status_led_powerup+0x8c>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <status_led_powerup+0x54>
 80088ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008928 <status_led_powerup+0x8c>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d019      	beq.n	80088f0 <status_led_powerup+0x54>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80088bc:	2000      	movs	r0, #0
 80088be:	f000 f919 	bl	8008af4 <SCH_TIM_HasCompleted>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d02d      	beq.n	8008924 <status_led_powerup+0x88>
			s_led_display_status.led_green = 0;
 80088c8:	4a17      	ldr	r2, [pc, #92]	@ (8008928 <status_led_powerup+0x8c>)
 80088ca:	7813      	ldrb	r3, [r2, #0]
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 80088d2:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <status_led_powerup+0x8c>)
 80088d4:	7813      	ldrb	r3, [r2, #0]
 80088d6:	f023 0302 	bic.w	r3, r3, #2
 80088da:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 80088dc:	f000 f89a 	bl	8008a14 <status_led_led_green_off>
			status_led_led_blue_off();
 80088e0:	f000 f8b0 	bl	8008a44 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 80088e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80088e8:	2000      	movs	r0, #0
 80088ea:	f000 f8ed 	bl	8008ac8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80088ee:	e019      	b.n	8008924 <status_led_powerup+0x88>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80088f0:	2000      	movs	r0, #0
 80088f2:	f000 f8ff 	bl	8008af4 <SCH_TIM_HasCompleted>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d013      	beq.n	8008924 <status_led_powerup+0x88>
			s_led_display_status.led_green = 1;
 80088fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008928 <status_led_powerup+0x8c>)
 80088fe:	7813      	ldrb	r3, [r2, #0]
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 8008906:	4a08      	ldr	r2, [pc, #32]	@ (8008928 <status_led_powerup+0x8c>)
 8008908:	7813      	ldrb	r3, [r2, #0]
 800890a:	f043 0302 	orr.w	r3, r3, #2
 800890e:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 8008910:	f000 f874 	bl	80089fc <status_led_led_green_on>
			status_led_led_blue_on();
 8008914:	f000 f88a 	bl	8008a2c <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD);
 8008918:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800891c:	2000      	movs	r0, #0
 800891e:	f000 f8d3 	bl	8008ac8 <SCH_TIM_Start>
		}
	}
}
 8008922:	e7ff      	b.n	8008924 <status_led_powerup+0x88>
 8008924:	bf00      	nop
 8008926:	bd80      	pop	{r7, pc}
 8008928:	2001dc1c 	.word	0x2001dc1c

0800892c <status_led_normal>:

static void status_led_normal(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
	// viết tạm
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8008930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008934:	480d      	ldr	r0, [pc, #52]	@ (800896c <status_led_normal+0x40>)
 8008936:	f7ff ff69 	bl	800880c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800893a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800893e:	480b      	ldr	r0, [pc, #44]	@ (800896c <status_led_normal+0x40>)
 8008940:	f7ff ff56 	bl	80087f0 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8008944:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008948:	f006 f97a 	bl	800ec40 <LL_mDelay>
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 800894c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008950:	4806      	ldr	r0, [pc, #24]	@ (800896c <status_led_normal+0x40>)
 8008952:	f7ff ff5b 	bl	800880c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8008956:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800895a:	4804      	ldr	r0, [pc, #16]	@ (800896c <status_led_normal+0x40>)
 800895c:	f7ff ff48 	bl	80087f0 <LL_GPIO_SetOutputPin>
	LL_mDelay(500);
 8008960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008964:	f006 f96c 	bl	800ec40 <LL_mDelay>
}
 8008968:	bf00      	nop
 800896a:	bd80      	pop	{r7, pc}
 800896c:	40020000 	.word	0x40020000

08008970 <status_led_error>:

static void status_led_error(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
	if (s_led_display_status.led_green && s_led_display_status.led_blue) {
 8008974:	4b20      	ldr	r3, [pc, #128]	@ (80089f8 <status_led_error+0x88>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01f      	beq.n	80089c2 <status_led_error+0x52>
 8008982:	4b1d      	ldr	r3, [pc, #116]	@ (80089f8 <status_led_error+0x88>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d018      	beq.n	80089c2 <status_led_error+0x52>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 8008990:	2000      	movs	r0, #0
 8008992:	f000 f8af 	bl	8008af4 <SCH_TIM_HasCompleted>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02b      	beq.n	80089f4 <status_led_error+0x84>
			s_led_display_status.led_green = 0;
 800899c:	4a16      	ldr	r2, [pc, #88]	@ (80089f8 <status_led_error+0x88>)
 800899e:	7813      	ldrb	r3, [r2, #0]
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 0;
 80089a6:	4a14      	ldr	r2, [pc, #80]	@ (80089f8 <status_led_error+0x88>)
 80089a8:	7813      	ldrb	r3, [r2, #0]
 80089aa:	f023 0302 	bic.w	r3, r3, #2
 80089ae:	7013      	strb	r3, [r2, #0]
			status_led_led_green_off();
 80089b0:	f000 f830 	bl	8008a14 <status_led_led_green_off>
			status_led_led_blue_off();
 80089b4:	f000 f846 	bl	8008a44 <status_led_led_blue_off>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 80089b8:	2132      	movs	r1, #50	@ 0x32
 80089ba:	2000      	movs	r0, #0
 80089bc:	f000 f884 	bl	8008ac8 <SCH_TIM_Start>
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80089c0:	e018      	b.n	80089f4 <status_led_error+0x84>
		}
	} else {
		if (SCH_TIM_HasCompleted(SCH_TIM_LED)) {
 80089c2:	2000      	movs	r0, #0
 80089c4:	f000 f896 	bl	8008af4 <SCH_TIM_HasCompleted>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <status_led_error+0x84>
			s_led_display_status.led_green = 1;
 80089ce:	4a0a      	ldr	r2, [pc, #40]	@ (80089f8 <status_led_error+0x88>)
 80089d0:	7813      	ldrb	r3, [r2, #0]
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	7013      	strb	r3, [r2, #0]
			s_led_display_status.led_blue = 1;
 80089d8:	4a07      	ldr	r2, [pc, #28]	@ (80089f8 <status_led_error+0x88>)
 80089da:	7813      	ldrb	r3, [r2, #0]
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	7013      	strb	r3, [r2, #0]
			status_led_led_green_on();
 80089e2:	f000 f80b 	bl	80089fc <status_led_led_green_on>
			status_led_led_blue_on();
 80089e6:	f000 f821 	bl	8008a2c <status_led_led_blue_on>
			SCH_TIM_Start(SCH_TIM_LED, ERROR_PERIOD);
 80089ea:	2132      	movs	r1, #50	@ 0x32
 80089ec:	2000      	movs	r0, #0
 80089ee:	f000 f86b 	bl	8008ac8 <SCH_TIM_Start>
		}
	}
}
 80089f2:	e7ff      	b.n	80089f4 <status_led_error+0x84>
 80089f4:	bf00      	nop
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	2001dc1c 	.word	0x2001dc1c

080089fc <status_led_led_green_on>:

static void status_led_led_green_on(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8008a00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a04:	4802      	ldr	r0, [pc, #8]	@ (8008a10 <status_led_led_green_on+0x14>)
 8008a06:	f7ff fef3 	bl	80087f0 <LL_GPIO_SetOutputPin>
}
 8008a0a:	bf00      	nop
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40020000 	.word	0x40020000

08008a14 <status_led_led_green_off>:
static void status_led_led_green_off(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8008a18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a1c:	4802      	ldr	r0, [pc, #8]	@ (8008a28 <status_led_led_green_off+0x14>)
 8008a1e:	f7ff fef5 	bl	800880c <LL_GPIO_ResetOutputPin>
}
 8008a22:	bf00      	nop
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40020000 	.word	0x40020000

08008a2c <status_led_led_blue_on>:
static void status_led_led_blue_on(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8008a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a34:	4802      	ldr	r0, [pc, #8]	@ (8008a40 <status_led_led_blue_on+0x14>)
 8008a36:	f7ff fedb 	bl	80087f0 <LL_GPIO_SetOutputPin>
}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40020000 	.word	0x40020000

08008a44 <status_led_led_blue_off>:
static void status_led_led_blue_off(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8008a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a4c:	4802      	ldr	r0, [pc, #8]	@ (8008a58 <status_led_led_blue_off+0x14>)
 8008a4e:	f7ff fedd 	bl	800880c <LL_GPIO_ResetOutputPin>
}
 8008a52:	bf00      	nop
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	40020000 	.word	0x40020000

08008a5c <LED_Status_CreateTask>:

void	LED_Status_CreateTask(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8008a60:	4902      	ldr	r1, [pc, #8]	@ (8008a6c <LED_Status_CreateTask+0x10>)
 8008a62:	4803      	ldr	r0, [pc, #12]	@ (8008a70 <LED_Status_CreateTask+0x14>)
 8008a64:	f000 f85c 	bl	8008b20 <SCH_TASK_CreateTask>
}
 8008a68:	bf00      	nop
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000134 	.word	0x20000134
 8008a70:	20000130 	.word	0x20000130

08008a74 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8008a78:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <SCH_Initialize+0x3c>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <SCH_Initialize+0x40>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8008a84:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <SCH_Initialize+0x44>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8008a8a:	22f0      	movs	r2, #240	@ 0xf0
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	480b      	ldr	r0, [pc, #44]	@ (8008abc <SCH_Initialize+0x48>)
 8008a90:	f007 fd03 	bl	801049a <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8008a94:	22f0      	movs	r2, #240	@ 0xf0
 8008a96:	2100      	movs	r1, #0
 8008a98:	4809      	ldr	r0, [pc, #36]	@ (8008ac0 <SCH_Initialize+0x4c>)
 8008a9a:	f007 fcfe 	bl	801049a <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8008a9e:	2238      	movs	r2, #56	@ 0x38
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4808      	ldr	r0, [pc, #32]	@ (8008ac4 <SCH_Initialize+0x50>)
 8008aa4:	f007 fcf9 	bl	801049a <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8008aa8:	f7fa fdfa 	bl	80036a0 <systick_timer_init>
}
 8008aac:	bf00      	nop
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	2001de08 	.word	0x2001de08
 8008ab4:	2001dd10 	.word	0x2001dd10
 8008ab8:	2001de04 	.word	0x2001de04
 8008abc:	2001dc20 	.word	0x2001dc20
 8008ac0:	2001dd14 	.word	0x2001dd14
 8008ac4:	2001de0c 	.word	0x2001de0c

08008ac8 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b0d      	cmp	r3, #13
 8008ad8:	d804      	bhi.n	8008ae4 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	4904      	ldr	r1, [pc, #16]	@ (8008af0 <SCH_TIM_Start+0x28>)
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	2001de0c 	.word	0x2001de0c

08008af4 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4a06      	ldr	r2, [pc, #24]	@ (8008b1c <SCH_TIM_HasCompleted+0x28>)
 8008b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bf0c      	ite	eq
 8008b0a:	2301      	moveq	r3, #1
 8008b0c:	2300      	movne	r3, #0
 8008b0e:	b2db      	uxtb	r3, r3
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2001de0c 	.word	0x2001de0c

08008b20 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d029      	beq.n	8008b88 <SCH_TASK_CreateTask+0x68>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d026      	beq.n	8008b88 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8008b3a:	4b17      	ldr	r3, [pc, #92]	@ (8008b98 <SCH_TASK_CreateTask+0x78>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b12      	cmp	r3, #18
 8008b40:	d822      	bhi.n	8008b88 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8008b42:	4b15      	ldr	r3, [pc, #84]	@ (8008b98 <SCH_TASK_CreateTask+0x78>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	4613      	mov	r3, r2
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <SCH_TASK_CreateTask+0x7c>)
 8008b52:	4413      	add	r3, r2
 8008b54:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8008b70:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <SCH_TASK_CreateTask+0x78>)
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8008b78:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <SCH_TASK_CreateTask+0x78>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	4b05      	ldr	r3, [pc, #20]	@ (8008b98 <SCH_TASK_CreateTask+0x78>)
 8008b82:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	2001dd10 	.word	0x2001dd10
 8008b9c:	2001dc20 	.word	0x2001dc20

08008ba0 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8008ba6:	4b42      	ldr	r3, [pc, #264]	@ (8008cb0 <SCH_RunSystemTickTimer+0x110>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	4a40      	ldr	r2, [pc, #256]	@ (8008cb0 <SCH_RunSystemTickTimer+0x110>)
 8008bae:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
 8008bb4:	e025      	b.n	8008c02 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8008bb6:	7bfa      	ldrb	r2, [r7, #15]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8008cb4 <SCH_RunSystemTickTimer+0x114>)
 8008bc2:	4413      	add	r3, r2
 8008bc4:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d115      	bne.n	8008bfc <SCH_RunSystemTickTimer+0x5c>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d111      	bne.n	8008bfc <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d305      	bcc.n	8008bfc <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	73fb      	strb	r3, [r7, #15]
 8008c02:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb8 <SCH_RunSystemTickTimer+0x118>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	7bfa      	ldrb	r2, [r7, #15]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d3d4      	bcc.n	8008bb6 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]
 8008c10:	e02b      	b.n	8008c6a <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8008c12:	7bba      	ldrb	r2, [r7, #14]
 8008c14:	4613      	mov	r3, r2
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4a27      	ldr	r2, [pc, #156]	@ (8008cbc <SCH_RunSystemTickTimer+0x11c>)
 8008c1e:	4413      	add	r3, r2
 8008c20:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d11c      	bne.n	8008c64 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d310      	bcc.n	8008c64 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2201      	movs	r2, #1
 8008c46:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	bf0c      	ite	eq
 8008c58:	2301      	moveq	r3, #1
 8008c5a:	2300      	movne	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	461a      	mov	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	3301      	adds	r3, #1
 8008c68:	73bb      	strb	r3, [r7, #14]
 8008c6a:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <SCH_RunSystemTickTimer+0x120>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	7bba      	ldrb	r2, [r7, #14]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d3ce      	bcc.n	8008c12 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]
 8008c78:	e010      	b.n	8008c9c <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	4a11      	ldr	r2, [pc, #68]	@ (8008cc4 <SCH_RunSystemTickTimer+0x124>)
 8008c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <SCH_RunSystemTickTimer+0xf6>
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc4 <SCH_RunSystemTickTimer+0x124>)
 8008c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c8e:	3a01      	subs	r2, #1
 8008c90:	490c      	ldr	r1, [pc, #48]	@ (8008cc4 <SCH_RunSystemTickTimer+0x124>)
 8008c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	73bb      	strb	r3, [r7, #14]
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b0d      	cmp	r3, #13
 8008ca0:	d9eb      	bls.n	8008c7a <SCH_RunSystemTickTimer+0xda>
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2001de08 	.word	0x2001de08
 8008cb4:	2001dc20 	.word	0x2001dc20
 8008cb8:	2001dd10 	.word	0x2001dd10
 8008cbc:	2001dd14 	.word	0x2001dd14
 8008cc0:	2001de04 	.word	0x2001de04
 8008cc4:	2001de0c 	.word	0x2001de0c

08008cc8 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8008ccc:	f7fa fcd8 	bl	8003680 <systick_timer_start>
}
 8008cd0:	bf00      	nop
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
 8008cde:	e01e      	b.n	8008d1e <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8008ce0:	7bfa      	ldrb	r2, [r7, #15]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4a23      	ldr	r2, [pc, #140]	@ (8008d78 <SCH_HandleScheduledTask+0xa4>)
 8008cec:	4413      	add	r3, r2
 8008cee:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d10f      	bne.n	8008d18 <SCH_HandleScheduledTask+0x44>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d10b      	bne.n	8008d18 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	4b17      	ldr	r3, [pc, #92]	@ (8008d7c <SCH_HandleScheduledTask+0xa8>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d3db      	bcc.n	8008ce0 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]
 8008d2c:	e01a      	b.n	8008d64 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8008d2e:	7bba      	ldrb	r2, [r7, #14]
 8008d30:	4613      	mov	r3, r2
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a11      	ldr	r2, [pc, #68]	@ (8008d80 <SCH_HandleScheduledTask+0xac>)
 8008d3a:	4413      	add	r3, r2
 8008d3c:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d10b      	bne.n	8008d5e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	3301      	adds	r3, #1
 8008d62:	73bb      	strb	r3, [r7, #14]
 8008d64:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <SCH_HandleScheduledTask+0xb0>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	7bba      	ldrb	r2, [r7, #14]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d3df      	bcc.n	8008d2e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	2001dc20 	.word	0x2001dc20
 8008d7c:	2001dd10 	.word	0x2001dd10
 8008d80:	2001dd14 	.word	0x2001dd14
 8008d84:	2001de04 	.word	0x2001de04

08008d88 <BME280_Write>:
static BME280_calib_t BME280_calib;
static BME280_RawData_t BME280_RawData = {
		.status = I2C_Success,
};

void BME280_Write(uint8_t reg, uint8_t data) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	460a      	mov	r2, r1
 8008d92:	71fb      	strb	r3, [r7, #7]
 8008d94:	4613      	mov	r3, r2
 8008d96:	71bb      	strb	r3, [r7, #6]
	BME280_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, BME280_I2C_ADDR, reg, data);
 8008d98:	79bb      	ldrb	r3, [r7, #6]
 8008d9a:	79fa      	ldrb	r2, [r7, #7]
 8008d9c:	2177      	movs	r1, #119	@ 0x77
 8008d9e:	4805      	ldr	r0, [pc, #20]	@ (8008db4 <BME280_Write+0x2c>)
 8008da0:	f7fa fafc 	bl	800339c <I2C_Write>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	4b03      	ldr	r3, [pc, #12]	@ (8008db8 <BME280_Write+0x30>)
 8008daa:	729a      	strb	r2, [r3, #10]
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	40005400 	.word	0x40005400
 8008db8:	2001de68 	.word	0x2001de68

08008dbc <BME280_Read>:

void BME280_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	71bb      	strb	r3, [r7, #6]
	BME280_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, BME280_I2C_ADDR, reg, pData, length);
 8008dcc:	79bb      	ldrb	r3, [r7, #6]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	79fa      	ldrb	r2, [r7, #7]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2177      	movs	r1, #119	@ 0x77
 8008dd8:	4805      	ldr	r0, [pc, #20]	@ (8008df0 <BME280_Read+0x34>)
 8008dda:	f7fa fb5d 	bl	8003498 <I2C_ReadMulti>
 8008dde:	4603      	mov	r3, r0
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <BME280_Read+0x38>)
 8008de4:	729a      	strb	r2, [r3, #10]
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40005400 	.word	0x40005400
 8008df4:	2001de68 	.word	0x2001de68

08008df8 <BME280_Init>:

I2C_Status_t BME280_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
	// reset device
	BME280_Write(BME280_RESET_REG, 0xB6);
 8008dfe:	21b6      	movs	r1, #182	@ 0xb6
 8008e00:	20e0      	movs	r0, #224	@ 0xe0
 8008e02:	f7ff ffc1 	bl	8008d88 <BME280_Write>

	// write the humidity oversampling
	// osrs_h[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	BME280_Write(BME280_CTRL_HUM_REG, 0x01);
 8008e06:	2101      	movs	r1, #1
 8008e08:	20f2      	movs	r0, #242	@ 0xf2
 8008e0a:	f7ff ffbd 	bl	8008d88 <BME280_Write>

	// write the standby time and IIR filter coeff
	BME280_Write(BME280_CONFIG_REG, 0b00010000);
 8008e0e:	2110      	movs	r1, #16
 8008e10:	20f5      	movs	r0, #245	@ 0xf5
 8008e12:	f7ff ffb9 	bl	8008d88 <BME280_Write>

	// write the pressure and temp oversampling along with mode to 0xF4
	// osrs_t[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	// osrs_p[2..0]= 000   001   010   011  100  101&others : oversampling is skipped 1  2  4  8  16
	// mode[1..0]=	 00   01and10  11 : SleepMode  ForcedMode   NormalMode
	BME280_Write(BME280_CTRL_MEAS_REG, 0b01010111);
 8008e16:	2157      	movs	r1, #87	@ 0x57
 8008e18:	20f4      	movs	r0, #244	@ 0xf4
 8008e1a:	f7ff ffb5 	bl	8008d88 <BME280_Write>
	uint8_t ID = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	71fb      	strb	r3, [r7, #7]
	BME280_Read_ID(&ID);
 8008e22:	1dfb      	adds	r3, r7, #7
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f80f 	bl	8008e48 <BME280_Read_ID>
	if (ID != BME280_ID) BME280_RawData.status = I2C_Error;
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	2b60      	cmp	r3, #96	@ 0x60
 8008e2e:	d002      	beq.n	8008e36 <BME280_Init+0x3e>
 8008e30:	4b04      	ldr	r3, [pc, #16]	@ (8008e44 <BME280_Init+0x4c>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	729a      	strb	r2, [r3, #10]
	return BME280_RawData.status;
 8008e36:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <BME280_Init+0x4c>)
 8008e38:	7a9b      	ldrb	r3, [r3, #10]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	2001de68 	.word	0x2001de68

08008e48 <BME280_Read_ID>:

I2C_Status_t BME280_Read_ID(uint8_t *ID) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	BME280_Read(BME280_ID_REG, ID, 1);
 8008e50:	2201      	movs	r2, #1
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	20d0      	movs	r0, #208	@ 0xd0
 8008e56:	f7ff ffb1 	bl	8008dbc <BME280_Read>
	return BME280_RawData.status;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	@ (8008e68 <BME280_Read_ID+0x20>)
 8008e5c:	7a9b      	ldrb	r3, [r3, #10]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	2001de68 	.word	0x2001de68

08008e6c <BME280_Read_CalibrationData>:

void BME280_Read_CalibrationData(void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af00      	add	r7, sp, #0
	uint8_t calib[26];
	BME280_Read(BME280_CALIB_REG_1, calib, 26);
 8008e72:	1d3b      	adds	r3, r7, #4
 8008e74:	221a      	movs	r2, #26
 8008e76:	4619      	mov	r1, r3
 8008e78:	2088      	movs	r0, #136	@ 0x88
 8008e7a:	f7ff ff9f 	bl	8008dbc <BME280_Read>

	BME280_calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8008e7e:	797b      	ldrb	r3, [r7, #5]
 8008e80:	b21b      	sxth	r3, r3
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	793b      	ldrb	r3, [r7, #4]
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	b21b      	sxth	r3, r3
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	4b54      	ldr	r3, [pc, #336]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008e92:	801a      	strh	r2, [r3, #0]
	BME280_calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	b21a      	sxth	r2, r3
 8008e9c:	79bb      	ldrb	r3, [r7, #6]
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008ea6:	805a      	strh	r2, [r3, #2]
	BME280_calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8008ea8:	7a7b      	ldrb	r3, [r7, #9]
 8008eaa:	b21b      	sxth	r3, r3
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	b21a      	sxth	r2, r3
 8008eb0:	7a3b      	ldrb	r3, [r7, #8]
 8008eb2:	b21b      	sxth	r3, r3
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	b21a      	sxth	r2, r3
 8008eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008eba:	809a      	strh	r2, [r3, #4]

	BME280_calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	b21a      	sxth	r2, r3
 8008ec4:	7abb      	ldrb	r3, [r7, #10]
 8008ec6:	b21b      	sxth	r3, r3
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	b21b      	sxth	r3, r3
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	4b45      	ldr	r3, [pc, #276]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008ed0:	80da      	strh	r2, [r3, #6]
	BME280_calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 8008ed2:	7b7b      	ldrb	r3, [r7, #13]
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	b21a      	sxth	r2, r3
 8008eda:	7b3b      	ldrb	r3, [r7, #12]
 8008edc:	b21b      	sxth	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b21a      	sxth	r2, r3
 8008ee2:	4b40      	ldr	r3, [pc, #256]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008ee4:	811a      	strh	r2, [r3, #8]
	BME280_calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	b21b      	sxth	r3, r3
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	b21a      	sxth	r2, r3
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b21a      	sxth	r2, r3
 8008ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008ef8:	815a      	strh	r2, [r3, #10]
	BME280_calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 8008efa:	7c7b      	ldrb	r3, [r7, #17]
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	021b      	lsls	r3, r3, #8
 8008f00:	b21a      	sxth	r2, r3
 8008f02:	7c3b      	ldrb	r3, [r7, #16]
 8008f04:	b21b      	sxth	r3, r3
 8008f06:	4313      	orrs	r3, r2
 8008f08:	b21a      	sxth	r2, r3
 8008f0a:	4b36      	ldr	r3, [pc, #216]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f0c:	819a      	strh	r2, [r3, #12]
	BME280_calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 8008f0e:	7cfb      	ldrb	r3, [r7, #19]
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	b21a      	sxth	r2, r3
 8008f16:	7cbb      	ldrb	r3, [r7, #18]
 8008f18:	b21b      	sxth	r3, r3
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	b21a      	sxth	r2, r3
 8008f1e:	4b31      	ldr	r3, [pc, #196]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f20:	81da      	strh	r2, [r3, #14]
	BME280_calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 8008f22:	7d7b      	ldrb	r3, [r7, #21]
 8008f24:	b21b      	sxth	r3, r3
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	b21a      	sxth	r2, r3
 8008f2a:	7d3b      	ldrb	r3, [r7, #20]
 8008f2c:	b21b      	sxth	r3, r3
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b21a      	sxth	r2, r3
 8008f32:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f34:	821a      	strh	r2, [r3, #16]
	BME280_calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	b21b      	sxth	r3, r3
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	b21a      	sxth	r2, r3
 8008f3e:	7dbb      	ldrb	r3, [r7, #22]
 8008f40:	b21b      	sxth	r3, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	b21a      	sxth	r2, r3
 8008f46:	4b27      	ldr	r3, [pc, #156]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f48:	825a      	strh	r2, [r3, #18]
	BME280_calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 8008f4a:	7e7b      	ldrb	r3, [r7, #25]
 8008f4c:	b21b      	sxth	r3, r3
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	b21a      	sxth	r2, r3
 8008f52:	7e3b      	ldrb	r3, [r7, #24]
 8008f54:	b21b      	sxth	r3, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	b21a      	sxth	r2, r3
 8008f5a:	4b22      	ldr	r3, [pc, #136]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f5c:	829a      	strh	r2, [r3, #20]
	BME280_calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 8008f5e:	7efb      	ldrb	r3, [r7, #27]
 8008f60:	b21b      	sxth	r3, r3
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	b21a      	sxth	r2, r3
 8008f66:	7ebb      	ldrb	r3, [r7, #26]
 8008f68:	b21b      	sxth	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b21a      	sxth	r2, r3
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f70:	82da      	strh	r2, [r3, #22]

	BME280_calib.dig_H1 = calib[25];
 8008f72:	7f7a      	ldrb	r2, [r7, #29]
 8008f74:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f76:	761a      	strb	r2, [r3, #24]

	BME280_Read(BME280_CALIB_REG_2, calib, 7);
 8008f78:	1d3b      	adds	r3, r7, #4
 8008f7a:	2207      	movs	r2, #7
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	20e1      	movs	r0, #225	@ 0xe1
 8008f80:	f7ff ff1c 	bl	8008dbc <BME280_Read>

	BME280_calib.dig_H2 = (int16_t)(calib[1] << 8 | calib[0]);
 8008f84:	797b      	ldrb	r3, [r7, #5]
 8008f86:	b21b      	sxth	r3, r3
 8008f88:	021b      	lsls	r3, r3, #8
 8008f8a:	b21a      	sxth	r2, r3
 8008f8c:	793b      	ldrb	r3, [r7, #4]
 8008f8e:	b21b      	sxth	r3, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	b21a      	sxth	r2, r3
 8008f94:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f96:	835a      	strh	r2, [r3, #26]
	BME280_calib.dig_H3 = calib[2];
 8008f98:	79ba      	ldrb	r2, [r7, #6]
 8008f9a:	4b12      	ldr	r3, [pc, #72]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008f9c:	771a      	strb	r2, [r3, #28]
	BME280_calib.dig_H4 = (int16_t)((calib[3] << 4) | (calib[4] & 0x0F));
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	b21b      	sxth	r3, r3
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	b21a      	sxth	r2, r3
 8008fa6:	7a3b      	ldrb	r3, [r7, #8]
 8008fa8:	b21b      	sxth	r3, r3
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	b21a      	sxth	r2, r3
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008fb6:	83da      	strh	r2, [r3, #30]
	BME280_calib.dig_H5 = (int16_t)((calib[5] << 4) | (calib[4] >> 4));
 8008fb8:	7a7b      	ldrb	r3, [r7, #9]
 8008fba:	b21b      	sxth	r3, r3
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	b21a      	sxth	r2, r3
 8008fc0:	7a3b      	ldrb	r3, [r7, #8]
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	b21b      	sxth	r3, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	b21a      	sxth	r2, r3
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008fce:	841a      	strh	r2, [r3, #32]
	BME280_calib.dig_H6 = (int8_t)calib[6];
 8008fd0:	7abb      	ldrb	r3, [r7, #10]
 8008fd2:	b25a      	sxtb	r2, r3
 8008fd4:	4b03      	ldr	r3, [pc, #12]	@ (8008fe4 <BME280_Read_CalibrationData+0x178>)
 8008fd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8008fda:	bf00      	nop
 8008fdc:	3720      	adds	r7, #32
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2001de44 	.word	0x2001de44

08008fe8 <BME280_Read_RawData>:

void BME280_Read_RawData(BME280_RawData_t *BME280_RawData) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	uint8_t RawData[8];
	BME280_Read(BME280_PRESS_REG, RawData, 8);
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	2208      	movs	r2, #8
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	20f7      	movs	r0, #247	@ 0xf7
 8008ffa:	f7ff fedf 	bl	8008dbc <BME280_Read>
	BME280_RawData->press = ((uint32_t)RawData[0] << 12) | ((uint32_t)RawData[1] << 4) | (RawData[2] >> 4);
 8008ffe:	7a3b      	ldrb	r3, [r7, #8]
 8009000:	031a      	lsls	r2, r3, #12
 8009002:	7a7b      	ldrb	r3, [r7, #9]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	4313      	orrs	r3, r2
 8009008:	7aba      	ldrb	r2, [r7, #10]
 800900a:	0912      	lsrs	r2, r2, #4
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	4313      	orrs	r3, r2
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	605a      	str	r2, [r3, #4]
	BME280_RawData->temp  = ((uint32_t)RawData[3] << 12) | ((uint32_t)RawData[4] << 4) | (RawData[5] >> 4);
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	031a      	lsls	r2, r3, #12
 800901a:	7b3b      	ldrb	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4313      	orrs	r3, r2
 8009020:	7b7a      	ldrb	r2, [r7, #13]
 8009022:	0912      	lsrs	r2, r2, #4
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	4313      	orrs	r3, r2
 8009028:	461a      	mov	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
	BME280_RawData->humi  = ((uint16_t)RawData[6] << 8) | RawData[7];
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	b21b      	sxth	r3, r3
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	b21a      	sxth	r2, r3
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	b21b      	sxth	r3, r3
 800903a:	4313      	orrs	r3, r2
 800903c:	b21a      	sxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	811a      	strh	r2, [r3, #8]
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <BME280_Compensate_Temperature>:

int32_t t_fine = 0;

float BME280_Compensate_Temperature(uint32_t adc_T) {
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	08da      	lsrs	r2, r3, #3
 8009058:	4b1f      	ldr	r3, [pc, #124]	@ (80090d8 <BME280_Compensate_Temperature+0x8c>)
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	1ad3      	subs	r3, r2, r3
		   ((int32_t)BME280_calib.dig_T2)) >> 11;
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <BME280_Compensate_Temperature+0x8c>)
 8009062:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 8009066:	fb02 f303 	mul.w	r3, r2, r3
		   ((int32_t)BME280_calib.dig_T2)) >> 11;
 800906a:	0adb      	lsrs	r3, r3, #11
	var1 = ((((adc_T >> 3) - ((int32_t)BME280_calib.dig_T1 << 1))) *
 800906c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	091b      	lsrs	r3, r3, #4
 8009072:	4a19      	ldr	r2, [pc, #100]	@ (80090d8 <BME280_Compensate_Temperature+0x8c>)
 8009074:	8812      	ldrh	r2, [r2, #0]
 8009076:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	0912      	lsrs	r2, r2, #4
 800907c:	4916      	ldr	r1, [pc, #88]	@ (80090d8 <BME280_Compensate_Temperature+0x8c>)
 800907e:	8809      	ldrh	r1, [r1, #0]
 8009080:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 8009082:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 8009086:	0b1b      	lsrs	r3, r3, #12
			((int32_t)BME280_calib.dig_T3)) >> 14;
 8009088:	4a13      	ldr	r2, [pc, #76]	@ (80090d8 <BME280_Compensate_Temperature+0x8c>)
 800908a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			  ((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1))) >> 12) *
 800908e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)BME280_calib.dig_T3)) >> 14;
 8009092:	0b9b      	lsrs	r3, r3, #14
	var2 = (((((adc_T >> 4) - ((int32_t)BME280_calib.dig_T1)) *
 8009094:	613b      	str	r3, [r7, #16]

	t_fine = var1 + var2;
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	4a0f      	ldr	r2, [pc, #60]	@ (80090dc <BME280_Compensate_Temperature+0x90>)
 800909e:	6013      	str	r3, [r2, #0]
	float T = (t_fine * 5 + 128) >> 8;
 80090a0:	4b0e      	ldr	r3, [pc, #56]	@ (80090dc <BME280_Compensate_Temperature+0x90>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	3380      	adds	r3, #128	@ 0x80
 80090ac:	121b      	asrs	r3, r3, #8
 80090ae:	ee07 3a90 	vmov	s15, r3
 80090b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090b6:	edc7 7a03 	vstr	s15, [r7, #12]
	return T / 100.0f;
 80090ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80090be:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80090e0 <BME280_Compensate_Temperature+0x94>
 80090c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80090ca:	eeb0 0a67 	vmov.f32	s0, s15
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	2001de44 	.word	0x2001de44
 80090dc:	2001de74 	.word	0x2001de74
 80090e0:	42c80000 	.word	0x42c80000

080090e4 <BME280_Compensate_Pressure>:

float BME280_Compensate_Pressure(uint32_t adc_P) {
 80090e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090e8:	b0ca      	sub	sp, #296	@ 0x128
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80090f0:	4baf      	ldr	r3, [pc, #700]	@ (80093b0 <BME280_Compensate_Pressure+0x2cc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	17da      	asrs	r2, r3, #31
 80090f6:	461c      	mov	r4, r3
 80090f8:	4615      	mov	r5, r2
 80090fa:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80090fe:	f145 3bff 	adc.w	fp, r5, #4294967295
 8009102:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)BME280_calib.dig_P6;
 8009106:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800910a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800910e:	fb03 f102 	mul.w	r1, r3, r2
 8009112:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8009116:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	18ca      	adds	r2, r1, r3
 8009120:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009124:	fba3 8903 	umull	r8, r9, r3, r3
 8009128:	eb02 0309 	add.w	r3, r2, r9
 800912c:	4699      	mov	r9, r3
 800912e:	4ba1      	ldr	r3, [pc, #644]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 8009130:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009134:	b21b      	sxth	r3, r3
 8009136:	17da      	asrs	r2, r3, #31
 8009138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800913c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009140:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8009144:	4603      	mov	r3, r0
 8009146:	fb03 f209 	mul.w	r2, r3, r9
 800914a:	460b      	mov	r3, r1
 800914c:	fb08 f303 	mul.w	r3, r8, r3
 8009150:	4413      	add	r3, r2
 8009152:	4602      	mov	r2, r0
 8009154:	fba8 1202 	umull	r1, r2, r8, r2
 8009158:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800915c:	460a      	mov	r2, r1
 800915e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8009162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009166:	4413      	add	r3, r2
 8009168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800916c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8009170:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8009174:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (int64_t)BME280_calib.dig_P5) << 17);
 8009178:	4b8e      	ldr	r3, [pc, #568]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 800917a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800917e:	b21b      	sxth	r3, r3
 8009180:	17da      	asrs	r2, r3, #31
 8009182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009186:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800918a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800918e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8009192:	462a      	mov	r2, r5
 8009194:	fb02 f203 	mul.w	r2, r2, r3
 8009198:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800919c:	4621      	mov	r1, r4
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	441a      	add	r2, r3
 80091a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80091a8:	4621      	mov	r1, r4
 80091aa:	fba3 1301 	umull	r1, r3, r3, r1
 80091ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091b2:	460b      	mov	r3, r1
 80091b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091bc:	18d3      	adds	r3, r2, r3
 80091be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f04f 0100 	mov.w	r1, #0
 80091ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80091ce:	462b      	mov	r3, r5
 80091d0:	0459      	lsls	r1, r3, #17
 80091d2:	4623      	mov	r3, r4
 80091d4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80091d8:	4623      	mov	r3, r4
 80091da:	0458      	lsls	r0, r3, #17
 80091dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80091e0:	1814      	adds	r4, r2, r0
 80091e2:	643c      	str	r4, [r7, #64]	@ 0x40
 80091e4:	414b      	adcs	r3, r1
 80091e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80091ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)BME280_calib.dig_P4) << 35);
 80091f0:	4b70      	ldr	r3, [pc, #448]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 80091f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80091f6:	b21b      	sxth	r3, r3
 80091f8:	17da      	asrs	r2, r3, #31
 80091fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091fe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f04f 0100 	mov.w	r1, #0
 800920a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800920e:	00d9      	lsls	r1, r3, #3
 8009210:	2000      	movs	r0, #0
 8009212:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009216:	1814      	adds	r4, r2, r0
 8009218:	63bc      	str	r4, [r7, #56]	@ 0x38
 800921a:	414b      	adcs	r3, r1
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8009222:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)BME280_calib.dig_P3) >> 8) +
 8009226:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800922a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800922e:	fb03 f102 	mul.w	r1, r3, r2
 8009232:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8009236:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	18ca      	adds	r2, r1, r3
 8009240:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009244:	fba3 1303 	umull	r1, r3, r3, r3
 8009248:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800924c:	460b      	mov	r3, r1
 800924e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800925c:	4b55      	ldr	r3, [pc, #340]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 800925e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009262:	b21b      	sxth	r3, r3
 8009264:	17da      	asrs	r2, r3, #31
 8009266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800926a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800926e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8009272:	462b      	mov	r3, r5
 8009274:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009278:	4642      	mov	r2, r8
 800927a:	fb02 f203 	mul.w	r2, r2, r3
 800927e:	464b      	mov	r3, r9
 8009280:	4621      	mov	r1, r4
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	4622      	mov	r2, r4
 800928a:	4641      	mov	r1, r8
 800928c:	fba2 1201 	umull	r1, r2, r2, r1
 8009290:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009294:	460a      	mov	r2, r1
 8009296:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800929a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800929e:	4413      	add	r3, r2
 80092a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092a4:	f04f 0000 	mov.w	r0, #0
 80092a8:	f04f 0100 	mov.w	r1, #0
 80092ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80092b0:	4623      	mov	r3, r4
 80092b2:	0a18      	lsrs	r0, r3, #8
 80092b4:	462b      	mov	r3, r5
 80092b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80092ba:	462b      	mov	r3, r5
 80092bc:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)BME280_calib.dig_P2) << 12);
 80092be:	4b3d      	ldr	r3, [pc, #244]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 80092c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092c4:	b21b      	sxth	r3, r3
 80092c6:	17da      	asrs	r2, r3, #31
 80092c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80092d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092d4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80092d8:	464a      	mov	r2, r9
 80092da:	fb02 f203 	mul.w	r2, r2, r3
 80092de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80092e2:	4644      	mov	r4, r8
 80092e4:	fb04 f303 	mul.w	r3, r4, r3
 80092e8:	441a      	add	r2, r3
 80092ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092ee:	4644      	mov	r4, r8
 80092f0:	fba3 4304 	umull	r4, r3, r3, r4
 80092f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092f8:	4623      	mov	r3, r4
 80092fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009302:	18d3      	adds	r3, r2, r3
 8009304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009308:	f04f 0200 	mov.w	r2, #0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009314:	464c      	mov	r4, r9
 8009316:	0323      	lsls	r3, r4, #12
 8009318:	4644      	mov	r4, r8
 800931a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800931e:	4644      	mov	r4, r8
 8009320:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)BME280_calib.dig_P3) >> 8) +
 8009322:	1884      	adds	r4, r0, r2
 8009324:	633c      	str	r4, [r7, #48]	@ 0x30
 8009326:	eb41 0303 	adc.w	r3, r1, r3
 800932a:	637b      	str	r3, [r7, #52]	@ 0x34
 800932c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009330:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)BME280_calib.dig_P1) >> 33;
 8009334:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009338:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800933c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8009340:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009344:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <BME280_Compensate_Pressure+0x2d0>)
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	b29b      	uxth	r3, r3
 800934a:	2200      	movs	r2, #0
 800934c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009354:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009358:	462b      	mov	r3, r5
 800935a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800935e:	4642      	mov	r2, r8
 8009360:	fb02 f203 	mul.w	r2, r2, r3
 8009364:	464b      	mov	r3, r9
 8009366:	4621      	mov	r1, r4
 8009368:	fb01 f303 	mul.w	r3, r1, r3
 800936c:	4413      	add	r3, r2
 800936e:	4622      	mov	r2, r4
 8009370:	4641      	mov	r1, r8
 8009372:	fba2 1201 	umull	r1, r2, r2, r1
 8009376:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800937a:	460a      	mov	r2, r1
 800937c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8009380:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009384:	4413      	add	r3, r2
 8009386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	f04f 0300 	mov.w	r3, #0
 8009392:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8009396:	4629      	mov	r1, r5
 8009398:	104a      	asrs	r2, r1, #1
 800939a:	4629      	mov	r1, r5
 800939c:	17cb      	asrs	r3, r1, #31
 800939e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0) return 0; // avoid division by zero
 80093a2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80093a6:	4313      	orrs	r3, r2
 80093a8:	d108      	bne.n	80093bc <BME280_Compensate_Pressure+0x2d8>
 80093aa:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80093b8 <BME280_Compensate_Pressure+0x2d4>
 80093ae:	e153      	b.n	8009658 <BME280_Compensate_Pressure+0x574>
 80093b0:	2001de74 	.word	0x2001de74
 80093b4:	2001de44 	.word	0x2001de44
 80093b8:	00000000 	.word	0x00000000

	p = 1048576 - adc_P;
 80093bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093c0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80093c4:	2200      	movs	r2, #0
 80093c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80093ce:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 80093d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093d6:	085b      	lsrs	r3, r3, #1
 80093d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093e0:	07db      	lsls	r3, r3, #31
 80093e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80093ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80093ee:	4621      	mov	r1, r4
 80093f0:	1a89      	subs	r1, r1, r2
 80093f2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80093f4:	4629      	mov	r1, r5
 80093f6:	eb61 0303 	sbc.w	r3, r1, r3
 80093fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093fc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009400:	4622      	mov	r2, r4
 8009402:	462b      	mov	r3, r5
 8009404:	1891      	adds	r1, r2, r2
 8009406:	6239      	str	r1, [r7, #32]
 8009408:	415b      	adcs	r3, r3
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
 800940c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009410:	4621      	mov	r1, r4
 8009412:	1851      	adds	r1, r2, r1
 8009414:	61b9      	str	r1, [r7, #24]
 8009416:	4629      	mov	r1, r5
 8009418:	414b      	adcs	r3, r1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009428:	4649      	mov	r1, r9
 800942a:	018b      	lsls	r3, r1, #6
 800942c:	4641      	mov	r1, r8
 800942e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009432:	4641      	mov	r1, r8
 8009434:	018a      	lsls	r2, r1, #6
 8009436:	4641      	mov	r1, r8
 8009438:	1889      	adds	r1, r1, r2
 800943a:	6139      	str	r1, [r7, #16]
 800943c:	4649      	mov	r1, r9
 800943e:	eb43 0101 	adc.w	r1, r3, r1
 8009442:	6179      	str	r1, [r7, #20]
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	f04f 0300 	mov.w	r3, #0
 800944c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009450:	4649      	mov	r1, r9
 8009452:	008b      	lsls	r3, r1, #2
 8009454:	4641      	mov	r1, r8
 8009456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800945a:	4641      	mov	r1, r8
 800945c:	008a      	lsls	r2, r1, #2
 800945e:	4610      	mov	r0, r2
 8009460:	4619      	mov	r1, r3
 8009462:	4603      	mov	r3, r0
 8009464:	4622      	mov	r2, r4
 8009466:	189b      	adds	r3, r3, r2
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	460b      	mov	r3, r1
 800946c:	462a      	mov	r2, r5
 800946e:	eb42 0303 	adc.w	r3, r2, r3
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009480:	4649      	mov	r1, r9
 8009482:	008b      	lsls	r3, r1, #2
 8009484:	4641      	mov	r1, r8
 8009486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800948a:	4641      	mov	r1, r8
 800948c:	008a      	lsls	r2, r1, #2
 800948e:	4610      	mov	r0, r2
 8009490:	4619      	mov	r1, r3
 8009492:	4603      	mov	r3, r0
 8009494:	4622      	mov	r2, r4
 8009496:	189b      	adds	r3, r3, r2
 8009498:	673b      	str	r3, [r7, #112]	@ 0x70
 800949a:	462b      	mov	r3, r5
 800949c:	460a      	mov	r2, r1
 800949e:	eb42 0303 	adc.w	r3, r2, r3
 80094a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80094a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80094ac:	f7f7 f9fa 	bl	80008a4 <__aeabi_ldivmod>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)BME280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80094b8:	4b6b      	ldr	r3, [pc, #428]	@ (8009668 <BME280_Compensate_Pressure+0x584>)
 80094ba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80094be:	b21b      	sxth	r3, r3
 80094c0:	17da      	asrs	r2, r3, #31
 80094c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80094ca:	f04f 0000 	mov.w	r0, #0
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	0b50      	lsrs	r0, r2, #13
 80094d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80094d8:	1359      	asrs	r1, r3, #13
 80094da:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80094de:	462b      	mov	r3, r5
 80094e0:	fb00 f203 	mul.w	r2, r0, r3
 80094e4:	4623      	mov	r3, r4
 80094e6:	fb03 f301 	mul.w	r3, r3, r1
 80094ea:	4413      	add	r3, r2
 80094ec:	4622      	mov	r2, r4
 80094ee:	fba2 1200 	umull	r1, r2, r2, r0
 80094f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80094f6:	460a      	mov	r2, r1
 80094f8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80094fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009500:	4413      	add	r3, r2
 8009502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009506:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800950a:	f04f 0000 	mov.w	r0, #0
 800950e:	f04f 0100 	mov.w	r1, #0
 8009512:	0b50      	lsrs	r0, r2, #13
 8009514:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009518:	1359      	asrs	r1, r3, #13
 800951a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800951e:	462b      	mov	r3, r5
 8009520:	fb00 f203 	mul.w	r2, r0, r3
 8009524:	4623      	mov	r3, r4
 8009526:	fb03 f301 	mul.w	r3, r3, r1
 800952a:	4413      	add	r3, r2
 800952c:	4622      	mov	r2, r4
 800952e:	fba2 1200 	umull	r1, r2, r2, r0
 8009532:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009536:	460a      	mov	r2, r1
 8009538:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800953c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8009540:	4413      	add	r3, r2
 8009542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8009552:	4621      	mov	r1, r4
 8009554:	0e4a      	lsrs	r2, r1, #25
 8009556:	4629      	mov	r1, r5
 8009558:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800955c:	4629      	mov	r1, r5
 800955e:	164b      	asrs	r3, r1, #25
 8009560:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)BME280_calib.dig_P8) * p) >> 19;
 8009564:	4b40      	ldr	r3, [pc, #256]	@ (8009668 <BME280_Compensate_Pressure+0x584>)
 8009566:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800956a:	b21b      	sxth	r3, r3
 800956c:	17da      	asrs	r2, r3, #31
 800956e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009570:	667a      	str	r2, [r7, #100]	@ 0x64
 8009572:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009576:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800957a:	462a      	mov	r2, r5
 800957c:	fb02 f203 	mul.w	r2, r2, r3
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	4621      	mov	r1, r4
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	4413      	add	r3, r2
 800958c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8009590:	4621      	mov	r1, r4
 8009592:	fba2 1201 	umull	r1, r2, r2, r1
 8009596:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800959a:	460a      	mov	r2, r1
 800959c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80095a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80095a4:	4413      	add	r3, r2
 80095a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095aa:	f04f 0200 	mov.w	r2, #0
 80095ae:	f04f 0300 	mov.w	r3, #0
 80095b2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80095b6:	4621      	mov	r1, r4
 80095b8:	0cca      	lsrs	r2, r1, #19
 80095ba:	4629      	mov	r1, r5
 80095bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80095c0:	4629      	mov	r1, r5
 80095c2:	14cb      	asrs	r3, r1, #19
 80095c4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)BME280_calib.dig_P7) << 4);
 80095c8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80095cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80095d0:	1884      	adds	r4, r0, r2
 80095d2:	65bc      	str	r4, [r7, #88]	@ 0x58
 80095d4:	eb41 0303 	adc.w	r3, r1, r3
 80095d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80095de:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80095e2:	4621      	mov	r1, r4
 80095e4:	1889      	adds	r1, r1, r2
 80095e6:	6539      	str	r1, [r7, #80]	@ 0x50
 80095e8:	4629      	mov	r1, r5
 80095ea:	eb43 0101 	adc.w	r1, r3, r1
 80095ee:	6579      	str	r1, [r7, #84]	@ 0x54
 80095f0:	f04f 0000 	mov.w	r0, #0
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80095fc:	4623      	mov	r3, r4
 80095fe:	0a18      	lsrs	r0, r3, #8
 8009600:	462b      	mov	r3, r5
 8009602:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009606:	462b      	mov	r3, r5
 8009608:	1219      	asrs	r1, r3, #8
 800960a:	4b17      	ldr	r3, [pc, #92]	@ (8009668 <BME280_Compensate_Pressure+0x584>)
 800960c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009610:	b21b      	sxth	r3, r3
 8009612:	17da      	asrs	r2, r3, #31
 8009614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009616:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8009624:	464c      	mov	r4, r9
 8009626:	0123      	lsls	r3, r4, #4
 8009628:	4644      	mov	r4, r8
 800962a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800962e:	4644      	mov	r4, r8
 8009630:	0122      	lsls	r2, r4, #4
 8009632:	1884      	adds	r4, r0, r2
 8009634:	603c      	str	r4, [r7, #0]
 8009636:	eb41 0303 	adc.w	r3, r1, r3
 800963a:	607b      	str	r3, [r7, #4]
 800963c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009640:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (float)p / 25600.0f;  // hPa
 8009644:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8009648:	f7f7 f8ee 	bl	8000828 <__aeabi_l2f>
 800964c:	ee06 0a90 	vmov	s13, r0
 8009650:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800966c <BME280_Compensate_Pressure+0x588>
 8009654:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8009658:	eeb0 0a67 	vmov.f32	s0, s15
 800965c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009660:	46bd      	mov	sp, r7
 8009662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009666:	bf00      	nop
 8009668:	2001de44 	.word	0x2001de44
 800966c:	46c80000 	.word	0x46c80000

08009670 <BME280_Compensate_Humidity>:

float BME280_Compensate_Humidity(uint16_t adc_H) {
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	80fb      	strh	r3, [r7, #6]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800967a:	4b32      	ldr	r3, [pc, #200]	@ (8009744 <BME280_Compensate_Humidity+0xd4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8009682:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	039a      	lsls	r2, r3, #14
 8009688:	4b2f      	ldr	r3, [pc, #188]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 800968a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800968e:	051b      	lsls	r3, r3, #20
 8009690:	1ad2      	subs	r2, r2, r3
					(((int32_t)BME280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8009692:	4b2d      	ldr	r3, [pc, #180]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 8009694:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009698:	4619      	mov	r1, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 80096a0:	1ad3      	subs	r3, r2, r3
					(((int32_t)BME280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80096a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80096a6:	13db      	asrs	r3, r3, #15
				 (((((((v_x1_u32r * ((int32_t)BME280_calib.dig_H6)) >> 10) *
 80096a8:	4a27      	ldr	r2, [pc, #156]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 80096aa:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80096ae:	4611      	mov	r1, r2
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	fb01 f202 	mul.w	r2, r1, r2
 80096b6:	1292      	asrs	r2, r2, #10
					  (((v_x1_u32r * ((int32_t)BME280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80096b8:	4923      	ldr	r1, [pc, #140]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 80096ba:	7f09      	ldrb	r1, [r1, #28]
 80096bc:	4608      	mov	r0, r1
 80096be:	68f9      	ldr	r1, [r7, #12]
 80096c0:	fb00 f101 	mul.w	r1, r0, r1
 80096c4:	12c9      	asrs	r1, r1, #11
 80096c6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
				 (((((((v_x1_u32r * ((int32_t)BME280_calib.dig_H6)) >> 10) *
 80096ca:	fb01 f202 	mul.w	r2, r1, r2
					  (((v_x1_u32r * ((int32_t)BME280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80096ce:	1292      	asrs	r2, r2, #10
 80096d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					((int32_t)2097152)) * ((int32_t)BME280_calib.dig_H2) + 8192) >> 14));
 80096d4:	491c      	ldr	r1, [pc, #112]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 80096d6:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80096da:	fb01 f202 	mul.w	r2, r1, r2
 80096de:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80096e2:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)BME280_calib.dig_H4) << 20) -
 80096e4:	fb02 f303 	mul.w	r3, r2, r3
 80096e8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	13db      	asrs	r3, r3, #15
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	13d2      	asrs	r2, r2, #15
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	11db      	asrs	r3, r3, #7
							((int32_t)BME280_calib.dig_H1)) >> 4);
 80096f8:	4a13      	ldr	r2, [pc, #76]	@ (8009748 <BME280_Compensate_Humidity+0xd8>)
 80096fa:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80096fc:	fb02 f303 	mul.w	r3, r2, r3
							((int32_t)BME280_calib.dig_H1)) >> 4);
 8009700:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800970e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8009716:	bfa8      	it	ge
 8009718:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800971c:	60fb      	str	r3, [r7, #12]
	return (float)(v_x1_u32r >> 12) / 1024.0f;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	131b      	asrs	r3, r3, #12
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800972a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800974c <BME280_Compensate_Humidity+0xdc>
 800972e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009732:	eef0 7a66 	vmov.f32	s15, s13
}
 8009736:	eeb0 0a67 	vmov.f32	s0, s15
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	2001de74 	.word	0x2001de74
 8009748:	2001de44 	.word	0x2001de44
 800974c:	44800000 	.word	0x44800000

08009750 <BME280_Convert_Raw_To_Physical>:

void BME280_Convert_Raw_To_Physical(BME280_RawData_t *RawData, BME280_Data_t *PhyData) {
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
	PhyData->temperature = BME280_Compensate_Temperature(RawData->temp);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fc74 	bl	800904c <BME280_Compensate_Temperature>
 8009764:	eef0 7a40 	vmov.f32	s15, s0
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	edc3 7a00 	vstr	s15, [r3]
	PhyData->pressure = BME280_Compensate_Pressure(RawData->press);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fcb6 	bl	80090e4 <BME280_Compensate_Pressure>
 8009778:	eef0 7a40 	vmov.f32	s15, s0
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	edc3 7a01 	vstr	s15, [r3, #4]
	PhyData->humidity = BME280_Compensate_Humidity(RawData->humi);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009788:	b29b      	uxth	r3, r3
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff ff70 	bl	8009670 <BME280_Compensate_Humidity>
 8009790:	eef0 7a40 	vmov.f32	s15, s0
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <BME280_Read_Data>:

I2C_Status_t BME280_Read_Data(BME280_Data_t *BME280_Data) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	if (BME280_RawData.status == I2C_Error) BME280_Init();
 80097ac:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <BME280_Read_Data+0x34>)
 80097ae:	7a9b      	ldrb	r3, [r3, #10]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d101      	bne.n	80097b8 <BME280_Read_Data+0x14>
 80097b4:	f7ff fb20 	bl	8008df8 <BME280_Init>
	BME280_Read_CalibrationData();
 80097b8:	f7ff fb58 	bl	8008e6c <BME280_Read_CalibrationData>
	BME280_Read_RawData(&BME280_RawData);
 80097bc:	4806      	ldr	r0, [pc, #24]	@ (80097d8 <BME280_Read_Data+0x34>)
 80097be:	f7ff fc13 	bl	8008fe8 <BME280_Read_RawData>
	BME280_Convert_Raw_To_Physical(&BME280_RawData, BME280_Data);
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4804      	ldr	r0, [pc, #16]	@ (80097d8 <BME280_Read_Data+0x34>)
 80097c6:	f7ff ffc3 	bl	8009750 <BME280_Convert_Raw_To_Physical>
	return BME280_RawData.status;
 80097ca:	4b03      	ldr	r3, [pc, #12]	@ (80097d8 <BME280_Read_Data+0x34>)
 80097cc:	7a9b      	ldrb	r3, [r3, #10]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	2001de68 	.word	0x2001de68

080097dc <H250_I2C_Read>:

static H250_I2C_RawData_t H250_I2C_RawData = {
		.status = I2C_Success,
};

void H250_I2C_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
 80097e8:	4613      	mov	r3, r2
 80097ea:	71bb      	strb	r3, [r7, #6]
	H250_I2C_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, H250_I2C_ADDR, reg, pData, length);
 80097ec:	79bb      	ldrb	r3, [r7, #6]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2131      	movs	r1, #49	@ 0x31
 80097f8:	4805      	ldr	r0, [pc, #20]	@ (8009810 <H250_I2C_Read+0x34>)
 80097fa:	f7f9 fe4d 	bl	8003498 <I2C_ReadMulti>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <H250_I2C_Read+0x38>)
 8009804:	71da      	strb	r2, [r3, #7]
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	40005400 	.word	0x40005400
 8009814:	2001de78 	.word	0x2001de78

08009818 <H250_I2C_Init>:

I2C_Status_t H250_I2C_Init(void) {
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
	H250_I2C_Read(H250_REG, &H250_I2C_RawData.RxData[0], 7);
 800981c:	2207      	movs	r2, #7
 800981e:	4907      	ldr	r1, [pc, #28]	@ (800983c <H250_I2C_Init+0x24>)
 8009820:	2052      	movs	r0, #82	@ 0x52
 8009822:	f7ff ffdb 	bl	80097dc <H250_I2C_Read>
	if (H250_I2C_RawData.RxData[0] == 0x08)
 8009826:	4b05      	ldr	r3, [pc, #20]	@ (800983c <H250_I2C_Init+0x24>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b08      	cmp	r3, #8
 800982c:	d102      	bne.n	8009834 <H250_I2C_Init+0x1c>
		return H250_I2C_RawData.status;
 800982e:	4b03      	ldr	r3, [pc, #12]	@ (800983c <H250_I2C_Init+0x24>)
 8009830:	79db      	ldrb	r3, [r3, #7]
 8009832:	e000      	b.n	8009836 <H250_I2C_Init+0x1e>
	else
		return I2C_Error;
 8009834:	2301      	movs	r3, #1
}
 8009836:	4618      	mov	r0, r3
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2001de78 	.word	0x2001de78

08009840 <H250_I2C_Read_Data>:

I2C_Status_t H250_I2C_Read_Data(H250_I2C_Data_t *H250_I2C_Data)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	H250_I2C_Read(H250_REG, &H250_I2C_RawData.RxData[0], 7);
 8009848:	2207      	movs	r2, #7
 800984a:	490b      	ldr	r1, [pc, #44]	@ (8009878 <H250_I2C_Read_Data+0x38>)
 800984c:	2052      	movs	r0, #82	@ 0x52
 800984e:	f7ff ffc5 	bl	80097dc <H250_I2C_Read>
	*H250_I2C_Data = (H250_I2C_RawData.RxData[1] << 8) | H250_I2C_RawData.RxData[2];
 8009852:	4b09      	ldr	r3, [pc, #36]	@ (8009878 <H250_I2C_Read_Data+0x38>)
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	b21b      	sxth	r3, r3
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	b21a      	sxth	r2, r3
 800985c:	4b06      	ldr	r3, [pc, #24]	@ (8009878 <H250_I2C_Read_Data+0x38>)
 800985e:	789b      	ldrb	r3, [r3, #2]
 8009860:	b21b      	sxth	r3, r3
 8009862:	4313      	orrs	r3, r2
 8009864:	b21b      	sxth	r3, r3
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	801a      	strh	r2, [r3, #0]
	return H250_I2C_RawData.status;
 800986c:	4b02      	ldr	r3, [pc, #8]	@ (8009878 <H250_I2C_Read_Data+0x38>)
 800986e:	79db      	ldrb	r3, [r3, #7]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	2001de78 	.word	0x2001de78

0800987c <H3LIS331DL_Write>:
H3LIS331DL_RawData_t H3LIS331DL_RawData = {
		.status = I2C_Success,
};

void H3LIS331DL_Write(uint8_t reg, uint8_t data)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	460a      	mov	r2, r1
 8009886:	71fb      	strb	r3, [r7, #7]
 8009888:	4613      	mov	r3, r2
 800988a:	71bb      	strb	r3, [r7, #6]
	H3LIS331DL_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, H3LIS331DL_I2C_ADDR, reg, data);
 800988c:	79bb      	ldrb	r3, [r7, #6]
 800988e:	79fa      	ldrb	r2, [r7, #7]
 8009890:	2118      	movs	r1, #24
 8009892:	4805      	ldr	r0, [pc, #20]	@ (80098a8 <H3LIS331DL_Write+0x2c>)
 8009894:	f7f9 fd82 	bl	800339c <I2C_Write>
 8009898:	4603      	mov	r3, r0
 800989a:	461a      	mov	r2, r3
 800989c:	4b03      	ldr	r3, [pc, #12]	@ (80098ac <H3LIS331DL_Write+0x30>)
 800989e:	731a      	strb	r2, [r3, #12]
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	40005400 	.word	0x40005400
 80098ac:	2001de80 	.word	0x2001de80

080098b0 <H3LIS331DL_Read>:

void H3LIS331DL_Read(uint8_t reg, uint8_t *pData, uint8_t length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
 80098bc:	4613      	mov	r3, r2
 80098be:	71bb      	strb	r3, [r7, #6]
	H3LIS331DL_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, H3LIS331DL_I2C_ADDR, reg, pData, length);
 80098c0:	79bb      	ldrb	r3, [r7, #6]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	79fa      	ldrb	r2, [r7, #7]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2118      	movs	r1, #24
 80098cc:	4805      	ldr	r0, [pc, #20]	@ (80098e4 <H3LIS331DL_Read+0x34>)
 80098ce:	f7f9 fde3 	bl	8003498 <I2C_ReadMulti>
 80098d2:	4603      	mov	r3, r0
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <H3LIS331DL_Read+0x38>)
 80098d8:	731a      	strb	r2, [r3, #12]
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40005400 	.word	0x40005400
 80098e8:	2001de80 	.word	0x2001de80

080098ec <H3LIS331DL_Init>:

I2C_Status_t H3LIS331DL_Init(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
	H3LIS331DL_Write(H3LIS331DL_CTRL_REG1, 0x3F);		// 0011 1111 (Normal mode, 1000Hz, enable XYZ)
 80098f2:	213f      	movs	r1, #63	@ 0x3f
 80098f4:	2020      	movs	r0, #32
 80098f6:	f7ff ffc1 	bl	800987c <H3LIS331DL_Write>
	H3LIS331DL_Write(H3LIS331DL_CTRL_REG4, 0x30);		// 0011 0000 (FS = 400g)
 80098fa:	2130      	movs	r1, #48	@ 0x30
 80098fc:	2023      	movs	r0, #35	@ 0x23
 80098fe:	f7ff ffbd 	bl	800987c <H3LIS331DL_Write>
	uint8_t ID = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	71fb      	strb	r3, [r7, #7]
	H3LIS331DL_Read_ID(&ID);
 8009906:	1dfb      	adds	r3, r7, #7
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f80f 	bl	800992c <H3LIS331DL_Read_ID>
	if (ID != H3LIS331DL_ID) H3LIS331DL_RawData.status = I2C_Error;
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b32      	cmp	r3, #50	@ 0x32
 8009912:	d002      	beq.n	800991a <H3LIS331DL_Init+0x2e>
 8009914:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <H3LIS331DL_Init+0x3c>)
 8009916:	2201      	movs	r2, #1
 8009918:	731a      	strb	r2, [r3, #12]
	return H3LIS331DL_RawData.status;
 800991a:	4b03      	ldr	r3, [pc, #12]	@ (8009928 <H3LIS331DL_Init+0x3c>)
 800991c:	7b1b      	ldrb	r3, [r3, #12]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2001de80 	.word	0x2001de80

0800992c <H3LIS331DL_Read_ID>:

I2C_Status_t H3LIS331DL_Read_ID(uint8_t *ID)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	H3LIS331DL_Read(H3LIS331DL_ID_REG, ID, 1);  //ID Device: 0x32
 8009934:	2201      	movs	r2, #1
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	200f      	movs	r0, #15
 800993a:	f7ff ffb9 	bl	80098b0 <H3LIS331DL_Read>
	return H3LIS331DL_RawData.status;
 800993e:	4b03      	ldr	r3, [pc, #12]	@ (800994c <H3LIS331DL_Read_ID+0x20>)
 8009940:	7b1b      	ldrb	r3, [r3, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	2001de80 	.word	0x2001de80

08009950 <H3LIS331DL_Read_RawData>:

void H3LIS331DL_Read_RawData(H3LIS331DL_RawData_t *RawData)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	H3LIS331DL_Read(H3LIS331DL_OUT_X_L, RawData->accel_raw, 6);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2206      	movs	r2, #6
 800995c:	4619      	mov	r1, r3
 800995e:	2028      	movs	r0, #40	@ 0x28
 8009960:	f7ff ffa6 	bl	80098b0 <H3LIS331DL_Read>

	// calib to int16
	RawData->acceleration[0] = (int16_t)((RawData->accel_raw[1] << 8) | RawData->accel_raw[0]);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	b21b      	sxth	r3, r3
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	b21a      	sxth	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b21b      	sxth	r3, r3
 8009974:	4313      	orrs	r3, r2
 8009976:	b21a      	sxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	80da      	strh	r2, [r3, #6]
	RawData->acceleration[1] = (int16_t)((RawData->accel_raw[3] << 8) | RawData->accel_raw[2]);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	78db      	ldrb	r3, [r3, #3]
 8009980:	b21b      	sxth	r3, r3
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	b21a      	sxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	b21b      	sxth	r3, r3
 800998c:	4313      	orrs	r3, r2
 800998e:	b21a      	sxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	811a      	strh	r2, [r3, #8]
	RawData->acceleration[2] = (int16_t)((RawData->accel_raw[5] << 8) | RawData->accel_raw[4]);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	795b      	ldrb	r3, [r3, #5]
 8009998:	b21b      	sxth	r3, r3
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	b21a      	sxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	b21b      	sxth	r3, r3
 80099a4:	4313      	orrs	r3, r2
 80099a6:	b21a      	sxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	815a      	strh	r2, [r3, #10]
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <H3LIS331DL_Get_Accel>:

I2C_Status_t H3LIS331DL_Get_Accel(H3LIS331DL_Data_t *Data)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	if (H3LIS331DL_RawData.status == I2C_Error) H3LIS331DL_Init();
 80099bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 80099be:	7b1b      	ldrb	r3, [r3, #12]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <H3LIS331DL_Get_Accel+0x14>
 80099c4:	f7ff ff92 	bl	80098ec <H3LIS331DL_Init>
	H3LIS331DL_Read_RawData(&H3LIS331DL_RawData);
 80099c8:	4819      	ldr	r0, [pc, #100]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 80099ca:	f7ff ffc1 	bl	8009950 <H3LIS331DL_Read_RawData>
	Data->x = (float)(H3LIS331DL_RawData.acceleration[0])*12.1875f;
 80099ce:	4b18      	ldr	r3, [pc, #96]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 80099d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80099d4:	ee07 3a90 	vmov	s15, r3
 80099d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099dc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8009a34 <H3LIS331DL_Get_Accel+0x80>
 80099e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	edc3 7a00 	vstr	s15, [r3]
	Data->y = (float)(H3LIS331DL_RawData.acceleration[1])*12.1875f;
 80099ea:	4b11      	ldr	r3, [pc, #68]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 80099ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009a34 <H3LIS331DL_Get_Accel+0x80>
 80099fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	edc3 7a01 	vstr	s15, [r3, #4]
	Data->z = (float)(H3LIS331DL_RawData.acceleration[2])*12.1875f;
 8009a06:	4b0a      	ldr	r3, [pc, #40]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 8009a08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a14:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009a34 <H3LIS331DL_Get_Accel+0x80>
 8009a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	edc3 7a02 	vstr	s15, [r3, #8]
	return H3LIS331DL_RawData.status;
 8009a22:	4b03      	ldr	r3, [pc, #12]	@ (8009a30 <H3LIS331DL_Get_Accel+0x7c>)
 8009a24:	7b1b      	ldrb	r3, [r3, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	2001de80 	.word	0x2001de80
 8009a34:	41430000 	.word	0x41430000

08009a38 <LL_I2C_IsActiveFlag_TXE>:
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <LL_I2C_IsActiveFlag_TXE+0x18>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e000      	b.n	8009a52 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <LL_I2C_IsActiveFlag_RXNE>:
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d101      	bne.n	8009a76 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <LL_I2C_IsActiveFlag_ADDR>:
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	f003 0308 	and.w	r3, r3, #8
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d101      	bne.n	8009a9c <LL_I2C_IsActiveFlag_ADDR+0x18>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <LL_I2C_IsActiveFlag_ADDR+0x1a>
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <LL_I2C_IsActiveFlag_BUSY>:
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009abe:	d101      	bne.n	8009ac4 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <LL_I2C_ClearFlag_ADDR>:
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f043 0208 	orr.w	r2, r3, #8
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	61da      	str	r2, [r3, #28]
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <LL_I2C_AcknowledgeNextData>:
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <LL_I2C_GenerateStartCondition>:
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	605a      	str	r2, [r3, #4]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <LL_I2C_GenerateStopCondition>:
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <LL_I2C_ReceiveData8>:
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	b2db      	uxtb	r3, r3
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <LL_I2C_TransmitData8>:
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <CheckSum>:
#include "stm32f7xx_ll_utils.h"


static K33_RawData_t K33_RawData;

uint8_t CheckSum(uint8_t * buf, uint8_t count) {
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
	uint8_t sum=0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
	while (count>0) {
 8009ba0:	e00a      	b.n	8009bb8 <CheckSum+0x28>
		sum += *buf;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	4413      	add	r3, r2
 8009baa:	73fb      	strb	r3, [r7, #15]
		buf++;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	607b      	str	r3, [r7, #4]
		count--;
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	70fb      	strb	r3, [r7, #3]
	while (count>0) {
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f1      	bne.n	8009ba2 <CheckSum+0x12>
	}
	return sum;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <K33_I2C_Read_RAM>:

I2C_Status_t K33_I2C_Read_RAM(uint8_t RAM_Addr, uint8_t *pData, uint8_t NumOfBytes) {
 8009bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	b0a3      	sub	sp, #140	@ 0x8c
 8009bd2:	af06      	add	r7, sp, #24
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	6039      	str	r1, [r7, #0]
 8009bd8:	71fb      	strb	r3, [r7, #7]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	71bb      	strb	r3, [r7, #6]
 8009bde:	466b      	mov	r3, sp
 8009be0:	461e      	mov	r6, r3
	uint8_t NumOfByteWrite = 3;
 8009be2:	2303      	movs	r3, #3
 8009be4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint8_t buf[NumOfByteWrite];
 8009be8:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 8009bec:	460b      	mov	r3, r1
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bf2:	b2cb      	uxtb	r3, r1
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4698      	mov	r8, r3
 8009bf8:	4691      	mov	r9, r2
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	f04f 0300 	mov.w	r3, #0
 8009c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c0e:	b2cb      	uxtb	r3, r1
 8009c10:	2200      	movs	r2, #0
 8009c12:	461c      	mov	r4, r3
 8009c14:	4615      	mov	r5, r2
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	f04f 0300 	mov.w	r3, #0
 8009c1e:	00eb      	lsls	r3, r5, #3
 8009c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c24:	00e2      	lsls	r2, r4, #3
 8009c26:	460b      	mov	r3, r1
 8009c28:	3307      	adds	r3, #7
 8009c2a:	08db      	lsrs	r3, r3, #3
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	ebad 0d03 	sub.w	sp, sp, r3
 8009c32:	ab06      	add	r3, sp, #24
 8009c34:	3300      	adds	r3, #0
 8009c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
	buf[0] = (uint8_t)(K33_READ_RAM_CMD | (NumOfBytes & 0x0F));
 8009c38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c3c:	f003 030f 	and.w	r3, r3, #15
 8009c40:	b25b      	sxtb	r3, r3
 8009c42:	f043 0320 	orr.w	r3, r3, #32
 8009c46:	b25b      	sxtb	r3, r3
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c4c:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00;
 8009c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c50:	2200      	movs	r2, #0
 8009c52:	705a      	strb	r2, [r3, #1]
	buf[2] = RAM_Addr;
 8009c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c56:	79fa      	ldrb	r2, [r7, #7]
 8009c58:	709a      	strb	r2, [r3, #2]

	uint32_t timeout = I2C_TIMEOUT;
 8009c5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while (LL_I2C_IsActiveFlag_BUSY(K33_I2C_HANDLE) && timeout--);
 8009c60:	bf00      	nop
 8009c62:	4886      	ldr	r0, [pc, #536]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009c64:	f7ff ff21 	bl	8009aaa <LL_I2C_IsActiveFlag_BUSY>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <K33_I2C_Read_RAM+0xac>
 8009c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c70:	1e5a      	subs	r2, r3, #1
 8009c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f4      	bne.n	8009c62 <K33_I2C_Read_RAM+0x96>
	if (timeout == 0) return I2C_Error;
 8009c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <K33_I2C_Read_RAM+0xb6>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e0f5      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>

	LL_I2C_GenerateStartCondition(K33_I2C_HANDLE);
 8009c82:	487e      	ldr	r0, [pc, #504]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009c84:	f7ff ff48 	bl	8009b18 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 8009c88:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
//	while (!LL_I2C_IsActiveFlag_SB(K33_I2C_HANDLE) && timeout--);
//	if (timeout == 0) return I2C_Error;

	LL_I2C_TransmitData8(K33_I2C_HANDLE, K33_I2C_ADDR << 1);
 8009c8e:	21d0      	movs	r1, #208	@ 0xd0
 8009c90:	487a      	ldr	r0, [pc, #488]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009c92:	f7ff ff6e 	bl	8009b72 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8009c96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while (!LL_I2C_IsActiveFlag_ADDR(K33_I2C_HANDLE) && timeout--);
 8009c9c:	bf00      	nop
 8009c9e:	4877      	ldr	r0, [pc, #476]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009ca0:	f7ff fef0 	bl	8009a84 <LL_I2C_IsActiveFlag_ADDR>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d104      	bne.n	8009cb4 <K33_I2C_Read_RAM+0xe8>
 8009caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cac:	1e5a      	subs	r2, r3, #1
 8009cae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1f4      	bne.n	8009c9e <K33_I2C_Read_RAM+0xd2>
	if (timeout == 0) return I2C_Error;
 8009cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <K33_I2C_Read_RAM+0xf2>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e0d7      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>
	LL_I2C_ClearFlag_ADDR(K33_I2C_HANDLE);
 8009cbe:	486f      	ldr	r0, [pc, #444]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009cc0:	f7ff ff07 	bl	8009ad2 <LL_I2C_ClearFlag_ADDR>

	for (uint8_t i = 0; i < NumOfByteWrite; i++) {
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8009cca:	e020      	b.n	8009d0e <K33_I2C_Read_RAM+0x142>
		LL_I2C_TransmitData8(K33_I2C_HANDLE, buf[i]);
 8009ccc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009cd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cd2:	5cd3      	ldrb	r3, [r2, r3]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4869      	ldr	r0, [pc, #420]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009cd8:	f7ff ff4b 	bl	8009b72 <LL_I2C_TransmitData8>
		timeout = I2C_TIMEOUT;
 8009cdc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
		while (!LL_I2C_IsActiveFlag_TXE(K33_I2C_HANDLE) && timeout--);
 8009ce2:	bf00      	nop
 8009ce4:	4865      	ldr	r0, [pc, #404]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009ce6:	f7ff fea7 	bl	8009a38 <LL_I2C_IsActiveFlag_TXE>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <K33_I2C_Read_RAM+0x12e>
 8009cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf2:	1e5a      	subs	r2, r3, #1
 8009cf4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f4      	bne.n	8009ce4 <K33_I2C_Read_RAM+0x118>
		if (timeout == 0) return I2C_Error;
 8009cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <K33_I2C_Read_RAM+0x138>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e0b4      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>
	for (uint8_t i = 0; i < NumOfByteWrite; i++) {
 8009d04:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009d08:	3301      	adds	r3, #1
 8009d0a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8009d0e:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8009d12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d3d8      	bcc.n	8009ccc <K33_I2C_Read_RAM+0x100>
	}

	uint8_t CSum_Byte = CheckSum(buf, NumOfByteWrite);
 8009d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009d22:	f7ff ff35 	bl	8009b90 <CheckSum>
 8009d26:	4603      	mov	r3, r0
 8009d28:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	LL_I2C_TransmitData8(K33_I2C_HANDLE, CSum_Byte);
 8009d2c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009d30:	4619      	mov	r1, r3
 8009d32:	4852      	ldr	r0, [pc, #328]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d34:	f7ff ff1d 	bl	8009b72 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8009d38:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while (!LL_I2C_IsActiveFlag_TXE(K33_I2C_HANDLE) && timeout--);
 8009d3e:	bf00      	nop
 8009d40:	484e      	ldr	r0, [pc, #312]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d42:	f7ff fe79 	bl	8009a38 <LL_I2C_IsActiveFlag_TXE>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d104      	bne.n	8009d56 <K33_I2C_Read_RAM+0x18a>
 8009d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4e:	1e5a      	subs	r2, r3, #1
 8009d50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1f4      	bne.n	8009d40 <K33_I2C_Read_RAM+0x174>
	if (timeout == 0) return I2C_Error;
 8009d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <K33_I2C_Read_RAM+0x194>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e086      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>

	LL_I2C_GenerateStopCondition(K33_I2C_HANDLE);
 8009d60:	4846      	ldr	r0, [pc, #280]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d62:	f7ff fee9 	bl	8009b38 <LL_I2C_GenerateStopCondition>

	LL_I2C_GenerateStartCondition(K33_I2C_HANDLE);
 8009d66:	4845      	ldr	r0, [pc, #276]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d68:	f7ff fed6 	bl	8009b18 <LL_I2C_GenerateStartCondition>
	timeout = I2C_TIMEOUT;
 8009d6c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
//	while (!LL_I2C_IsActiveFlag_SB(K33_I2C_HANDLE) && timeout--);
//	if (timeout == 0) return I2C_Error;

	LL_I2C_TransmitData8(K33_I2C_HANDLE, (K33_I2C_ADDR << 1) | 1);
 8009d72:	21d1      	movs	r1, #209	@ 0xd1
 8009d74:	4841      	ldr	r0, [pc, #260]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d76:	f7ff fefc 	bl	8009b72 <LL_I2C_TransmitData8>
	timeout = I2C_TIMEOUT;
 8009d7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while (!LL_I2C_IsActiveFlag_ADDR(K33_I2C_HANDLE) && timeout--);
 8009d80:	bf00      	nop
 8009d82:	483e      	ldr	r0, [pc, #248]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009d84:	f7ff fe7e 	bl	8009a84 <LL_I2C_IsActiveFlag_ADDR>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <K33_I2C_Read_RAM+0x1cc>
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	1e5a      	subs	r2, r3, #1
 8009d92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1f4      	bne.n	8009d82 <K33_I2C_Read_RAM+0x1b6>
	if (timeout == 0) return I2C_Error;
 8009d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <K33_I2C_Read_RAM+0x1d6>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e065      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>
	LL_I2C_ClearFlag_ADDR(K33_I2C_HANDLE);
 8009da2:	4836      	ldr	r0, [pc, #216]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009da4:	f7ff fe95 	bl	8009ad2 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_AcknowledgeNextData(K33_I2C_HANDLE, LL_I2C_ACK);
 8009da8:	2100      	movs	r1, #0
 8009daa:	4834      	ldr	r0, [pc, #208]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009dac:	f7ff fea1 	bl	8009af2 <LL_I2C_AcknowledgeNextData>

	for (uint16_t i = 0; i < (NumOfBytes + 2); i++) {
 8009db0:	2300      	movs	r3, #0
 8009db2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009db6:	e035      	b.n	8009e24 <K33_I2C_Read_RAM+0x258>
		timeout = I2C_TIMEOUT;
 8009db8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
		while (!LL_I2C_IsActiveFlag_RXNE(K33_I2C_HANDLE) && timeout--);
 8009dbe:	bf00      	nop
 8009dc0:	482e      	ldr	r0, [pc, #184]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009dc2:	f7ff fe4c 	bl	8009a5e <LL_I2C_IsActiveFlag_RXNE>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <K33_I2C_Read_RAM+0x20a>
 8009dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dce:	1e5a      	subs	r2, r3, #1
 8009dd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1f4      	bne.n	8009dc0 <K33_I2C_Read_RAM+0x1f4>
		if (timeout == 0) return I2C_Error;
 8009dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <K33_I2C_Read_RAM+0x214>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e046      	b.n	8009e6e <K33_I2C_Read_RAM+0x2a2>

		if (i == (NumOfBytes)) {
 8009de0:	79bb      	ldrb	r3, [r7, #6]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d104      	bne.n	8009df6 <K33_I2C_Read_RAM+0x22a>
			LL_I2C_AcknowledgeNextData(K33_I2C_HANDLE, LL_I2C_NACK);
 8009dec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009df0:	4822      	ldr	r0, [pc, #136]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009df2:	f7ff fe7e 	bl	8009af2 <LL_I2C_AcknowledgeNextData>
		}
		if (i == (NumOfBytes + 1)) {
 8009df6:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8009dfa:	79bb      	ldrb	r3, [r7, #6]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d102      	bne.n	8009e08 <K33_I2C_Read_RAM+0x23c>
			LL_I2C_GenerateStopCondition(K33_I2C_HANDLE);
 8009e02:	481e      	ldr	r0, [pc, #120]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009e04:	f7ff fe98 	bl	8009b38 <LL_I2C_GenerateStopCondition>
		}
		pData[i] = LL_I2C_ReceiveData8(K33_I2C_HANDLE);
 8009e08:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	18d4      	adds	r4, r2, r3
 8009e10:	481a      	ldr	r0, [pc, #104]	@ (8009e7c <K33_I2C_Read_RAM+0x2b0>)
 8009e12:	f7ff fea1 	bl	8009b58 <LL_I2C_ReceiveData8>
 8009e16:	4603      	mov	r3, r0
 8009e18:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < (NumOfBytes + 2); i++) {
 8009e1a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009e1e:	3301      	adds	r3, #1
 8009e20:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009e24:	79bb      	ldrb	r3, [r7, #6]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	dac3      	bge.n	8009db8 <K33_I2C_Read_RAM+0x1ec>
	}

	char buffer[80];
	snprintf(buffer, sizeof(buffer), "Start  0x%X   0x%X   0x%X   0x%X   0x%X  Stop Start  0x%X \r\n", K33_I2C_ADDR << 1, buf[0], buf[1], buf[2], CSum_Byte, (K33_I2C_ADDR << 1) | 1);
 8009e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	461c      	mov	r4, r3
 8009e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e3e:	789b      	ldrb	r3, [r3, #2]
 8009e40:	461d      	mov	r5, r3
 8009e42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009e46:	f107 0008 	add.w	r0, r7, #8
 8009e4a:	22d1      	movs	r2, #209	@ 0xd1
 8009e4c:	9204      	str	r2, [sp, #16]
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	9502      	str	r5, [sp, #8]
 8009e52:	9401      	str	r4, [sp, #4]
 8009e54:	9100      	str	r1, [sp, #0]
 8009e56:	23d0      	movs	r3, #208	@ 0xd0
 8009e58:	4a09      	ldr	r2, [pc, #36]	@ (8009e80 <K33_I2C_Read_RAM+0x2b4>)
 8009e5a:	2150      	movs	r1, #80	@ 0x50
 8009e5c:	f006 fa68 	bl	8010330 <sniprintf>
	UART_Driver_SendString(EXP_UART_CONSOLE_HANDLE, buffer);
 8009e60:	f107 0308 	add.w	r3, r7, #8
 8009e64:	4619      	mov	r1, r3
 8009e66:	4807      	ldr	r0, [pc, #28]	@ (8009e84 <K33_I2C_Read_RAM+0x2b8>)
 8009e68:	f7f9 fecc 	bl	8003c04 <UART_Driver_SendString>

	return I2C_Success;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	46b5      	mov	sp, r6
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3774      	adds	r7, #116	@ 0x74
 8009e74:	46bd      	mov	sp, r7
 8009e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40005400 	.word	0x40005400
 8009e80:	08014114 	.word	0x08014114
 8009e84:	40011400 	.word	0x40011400

08009e88 <K33_Read_Data>:
	if ((RxData & 0xF0) != 0x10) return I2C_Error;
	K33_RawData.Calib_status = RxData & 0x01;
	return I2C_Success;
}

I2C_Status_t K33_Read_Data(K33_Data_t *K33_Data) {
 8009e88:	b590      	push	{r4, r7, lr}
 8009e8a:	b09b      	sub	sp, #108	@ 0x6c
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	6078      	str	r0, [r7, #4]
	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_CO2_ADDR, K33_RawData.RxData, 2);
 8009e90:	2202      	movs	r2, #2
 8009e92:	4957      	ldr	r1, [pc, #348]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009e94:	2008      	movs	r0, #8
 8009e96:	f7ff fe99 	bl	8009bcc <K33_I2C_Read_RAM>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4b54      	ldr	r3, [pc, #336]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009ea0:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 8009ea2:	4b53      	ldr	r3, [pc, #332]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009ea4:	79db      	ldrb	r3, [r3, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d137      	bne.n	8009f1a <K33_Read_Data+0x92>
		K33_Data->CO2 = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 8009eaa:	4b51      	ldr	r3, [pc, #324]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	b21a      	sxth	r2, r3
 8009eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009eb6:	789b      	ldrb	r3, [r3, #2]
 8009eb8:	b21b      	sxth	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b21a      	sxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	801a      	strh	r2, [r3, #0]
	else return K33_RawData.status;

	char buffer[80];
	snprintf(buffer, sizeof(buffer), "  0x%X   0x%X   0x%X   0x%X \r\n", K33_RawData.RxData[0], K33_RawData.RxData[1], K33_RawData.RxData[2], K33_RawData.RxData[3]);
 8009ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	461c      	mov	r4, r3
 8009ec8:	4b49      	ldr	r3, [pc, #292]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	4b48      	ldr	r3, [pc, #288]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4b46      	ldr	r3, [pc, #280]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009ed6:	78db      	ldrb	r3, [r3, #3]
 8009ed8:	f107 0008 	add.w	r0, r7, #8
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	9101      	str	r1, [sp, #4]
 8009ee0:	9200      	str	r2, [sp, #0]
 8009ee2:	4623      	mov	r3, r4
 8009ee4:	4a43      	ldr	r2, [pc, #268]	@ (8009ff4 <K33_Read_Data+0x16c>)
 8009ee6:	2150      	movs	r1, #80	@ 0x50
 8009ee8:	f006 fa22 	bl	8010330 <sniprintf>

	UART_Driver_SendString(EXP_UART_CONSOLE_HANDLE, buffer);
 8009eec:	f107 0308 	add.w	r3, r7, #8
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4841      	ldr	r0, [pc, #260]	@ (8009ff8 <K33_Read_Data+0x170>)
 8009ef4:	f7f9 fe86 	bl	8003c04 <UART_Driver_SendString>
	LL_mDelay(10);
 8009ef8:	200a      	movs	r0, #10
 8009efa:	f004 fea1 	bl	800ec40 <LL_mDelay>

	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_TEMP_ADDR, K33_RawData.RxData, 2);
 8009efe:	2202      	movs	r2, #2
 8009f00:	493b      	ldr	r1, [pc, #236]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f02:	2012      	movs	r0, #18
 8009f04:	f7ff fe62 	bl	8009bcc <K33_I2C_Read_RAM>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	4b38      	ldr	r3, [pc, #224]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f0e:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 8009f10:	4b37      	ldr	r3, [pc, #220]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f12:	79db      	ldrb	r3, [r3, #7]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d13b      	bne.n	8009f90 <K33_Read_Data+0x108>
 8009f18:	e002      	b.n	8009f20 <K33_Read_Data+0x98>
	else return K33_RawData.status;
 8009f1a:	4b35      	ldr	r3, [pc, #212]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f1c:	79db      	ldrb	r3, [r3, #7]
 8009f1e:	e063      	b.n	8009fe8 <K33_Read_Data+0x160>
		K33_Data->Temp = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 8009f20:	4b33      	ldr	r3, [pc, #204]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	b21b      	sxth	r3, r3
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	b21a      	sxth	r2, r3
 8009f2a:	4b31      	ldr	r3, [pc, #196]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	b21b      	sxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b21a      	sxth	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	805a      	strh	r2, [r3, #2]
	else return K33_RawData.status;

	snprintf(buffer, sizeof(buffer), "  0x%X   0x%X   0x%X   0x%X \r\n", K33_RawData.RxData[0], K33_RawData.RxData[1], K33_RawData.RxData[2], K33_RawData.RxData[3]);
 8009f38:	4b2d      	ldr	r3, [pc, #180]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	461c      	mov	r4, r3
 8009f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	461a      	mov	r2, r3
 8009f44:	4b2a      	ldr	r3, [pc, #168]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f46:	789b      	ldrb	r3, [r3, #2]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4b29      	ldr	r3, [pc, #164]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f4c:	78db      	ldrb	r3, [r3, #3]
 8009f4e:	f107 0008 	add.w	r0, r7, #8
 8009f52:	9302      	str	r3, [sp, #8]
 8009f54:	9101      	str	r1, [sp, #4]
 8009f56:	9200      	str	r2, [sp, #0]
 8009f58:	4623      	mov	r3, r4
 8009f5a:	4a26      	ldr	r2, [pc, #152]	@ (8009ff4 <K33_Read_Data+0x16c>)
 8009f5c:	2150      	movs	r1, #80	@ 0x50
 8009f5e:	f006 f9e7 	bl	8010330 <sniprintf>
	UART_Driver_SendString(EXP_UART_CONSOLE_HANDLE, buffer);
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	4823      	ldr	r0, [pc, #140]	@ (8009ff8 <K33_Read_Data+0x170>)
 8009f6a:	f7f9 fe4b 	bl	8003c04 <UART_Driver_SendString>

	LL_mDelay(10);
 8009f6e:	200a      	movs	r0, #10
 8009f70:	f004 fe66 	bl	800ec40 <LL_mDelay>

	K33_RawData.status = K33_I2C_Read_RAM(K33_RAM_RH_ADDR, K33_RawData.RxData, 2);
 8009f74:	2202      	movs	r2, #2
 8009f76:	491e      	ldr	r1, [pc, #120]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f78:	2014      	movs	r0, #20
 8009f7a:	f7ff fe27 	bl	8009bcc <K33_I2C_Read_RAM>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f84:	71da      	strb	r2, [r3, #7]
	if (K33_RawData.status == I2C_Success)
 8009f86:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f88:	79db      	ldrb	r3, [r3, #7]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10f      	bne.n	8009fae <K33_Read_Data+0x126>
 8009f8e:	e002      	b.n	8009f96 <K33_Read_Data+0x10e>
	else return K33_RawData.status;
 8009f90:	4b17      	ldr	r3, [pc, #92]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f92:	79db      	ldrb	r3, [r3, #7]
 8009f94:	e028      	b.n	8009fe8 <K33_Read_Data+0x160>
		K33_Data->RH = (K33_RawData.RxData[1] << 8) | K33_RawData.RxData[2];
 8009f96:	4b16      	ldr	r3, [pc, #88]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	b21b      	sxth	r3, r3
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	b21a      	sxth	r2, r3
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	b21b      	sxth	r3, r3
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	b21a      	sxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	809a      	strh	r2, [r3, #4]

	snprintf(buffer, sizeof(buffer), "  0x%X   0x%X   0x%X   0x%X \r\n", K33_RawData.RxData[0], K33_RawData.RxData[1], K33_RawData.RxData[2], K33_RawData.RxData[3]);
 8009fae:	4b10      	ldr	r3, [pc, #64]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	461c      	mov	r4, r3
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fbc:	789b      	ldrb	r3, [r3, #2]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fc2:	78db      	ldrb	r3, [r3, #3]
 8009fc4:	f107 0008 	add.w	r0, r7, #8
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	9101      	str	r1, [sp, #4]
 8009fcc:	9200      	str	r2, [sp, #0]
 8009fce:	4623      	mov	r3, r4
 8009fd0:	4a08      	ldr	r2, [pc, #32]	@ (8009ff4 <K33_Read_Data+0x16c>)
 8009fd2:	2150      	movs	r1, #80	@ 0x50
 8009fd4:	f006 f9ac 	bl	8010330 <sniprintf>
	UART_Driver_SendString(EXP_UART_CONSOLE_HANDLE, buffer);
 8009fd8:	f107 0308 	add.w	r3, r7, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4806      	ldr	r0, [pc, #24]	@ (8009ff8 <K33_Read_Data+0x170>)
 8009fe0:	f7f9 fe10 	bl	8003c04 <UART_Driver_SendString>

	return K33_RawData.status;
 8009fe4:	4b02      	ldr	r3, [pc, #8]	@ (8009ff0 <K33_Read_Data+0x168>)
 8009fe6:	79db      	ldrb	r3, [r3, #7]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	375c      	adds	r7, #92	@ 0x5c
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd90      	pop	{r4, r7, pc}
 8009ff0:	2001de90 	.word	0x2001de90
 8009ff4:	08014154 	.word	0x08014154
 8009ff8:	40011400 	.word	0x40011400

08009ffc <LSM6DSOX_Write>:

static LSM6DSOX_RawData_t LSM6DSOX_RawData = {
	.status = 0,
};

void LSM6DSOX_Write(uint8_t reg, uint8_t data) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	460a      	mov	r2, r1
 800a006:	71fb      	strb	r3, [r7, #7]
 800a008:	4613      	mov	r3, r2
 800a00a:	71bb      	strb	r3, [r7, #6]
	LSM6DSOX_RawData.status = I2C_Write(EXP_I2C_SENSOR_HANDLE, LSM6DSOX_ADDRESS, reg, data);
 800a00c:	79bb      	ldrb	r3, [r7, #6]
 800a00e:	79fa      	ldrb	r2, [r7, #7]
 800a010:	216a      	movs	r1, #106	@ 0x6a
 800a012:	4805      	ldr	r0, [pc, #20]	@ (800a028 <LSM6DSOX_Write+0x2c>)
 800a014:	f7f9 f9c2 	bl	800339c <I2C_Write>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <LSM6DSOX_Write+0x30>)
 800a01e:	731a      	strb	r2, [r3, #12]
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	40005400 	.word	0x40005400
 800a02c:	2001de98 	.word	0x2001de98

0800a030 <LSM6DSOX_Read>:

void LSM6DSOX_Read(uint8_t reg, uint8_t *pData, uint8_t length) {
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af02      	add	r7, sp, #8
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71bb      	strb	r3, [r7, #6]
	LSM6DSOX_RawData.status = I2C_ReadMulti(EXP_I2C_SENSOR_HANDLE, LSM6DSOX_ADDRESS, reg, pData, length);
 800a040:	79bb      	ldrb	r3, [r7, #6]
 800a042:	b29b      	uxth	r3, r3
 800a044:	79fa      	ldrb	r2, [r7, #7]
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	216a      	movs	r1, #106	@ 0x6a
 800a04c:	4805      	ldr	r0, [pc, #20]	@ (800a064 <LSM6DSOX_Read+0x34>)
 800a04e:	f7f9 fa23 	bl	8003498 <I2C_ReadMulti>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	4b04      	ldr	r3, [pc, #16]	@ (800a068 <LSM6DSOX_Read+0x38>)
 800a058:	731a      	strb	r2, [r3, #12]
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	40005400 	.word	0x40005400
 800a068:	2001de98 	.word	0x2001de98

0800a06c <LSM6DSOX_Init>:

I2C_Status_t LSM6DSOX_Init(void) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
	// Accelerometer: 104 Hz, 8g ~ 78.48 m/s^2
	LSM6DSOX_Write(LSM6DSOX_CTRL1_XL, 0x58);
 800a072:	2158      	movs	r1, #88	@ 0x58
 800a074:	2010      	movs	r0, #16
 800a076:	f7ff ffc1 	bl	8009ffc <LSM6DSOX_Write>
	// Gyroscope: 104 Hz, 500 dps
	LSM6DSOX_Write(LSM6DSOX_CTRL2_G, 0x54);
 800a07a:	2154      	movs	r1, #84	@ 0x54
 800a07c:	2011      	movs	r0, #17
 800a07e:	f7ff ffbd 	bl	8009ffc <LSM6DSOX_Write>
	uint8_t ID = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	71fb      	strb	r3, [r7, #7]
	LSM6DSOX_Read_ID(&ID);
 800a086:	1dfb      	adds	r3, r7, #7
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f80f 	bl	800a0ac <LSM6DSOX_Read_ID>
	if (ID != LSM6DSOX_ID) LSM6DSOX_RawData.status = I2C_Error;
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b6c      	cmp	r3, #108	@ 0x6c
 800a092:	d002      	beq.n	800a09a <LSM6DSOX_Init+0x2e>
 800a094:	4b04      	ldr	r3, [pc, #16]	@ (800a0a8 <LSM6DSOX_Init+0x3c>)
 800a096:	2201      	movs	r2, #1
 800a098:	731a      	strb	r2, [r3, #12]
	return LSM6DSOX_RawData.status;
 800a09a:	4b03      	ldr	r3, [pc, #12]	@ (800a0a8 <LSM6DSOX_Init+0x3c>)
 800a09c:	7b1b      	ldrb	r3, [r3, #12]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2001de98 	.word	0x2001de98

0800a0ac <LSM6DSOX_Read_ID>:

I2C_Status_t LSM6DSOX_Read_ID(uint8_t *ID) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	LSM6DSOX_Read(LSM6DSOX_ID_ADDR, ID, 1);
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	200f      	movs	r0, #15
 800a0ba:	f7ff ffb9 	bl	800a030 <LSM6DSOX_Read>
	return LSM6DSOX_RawData.status;
 800a0be:	4b03      	ldr	r3, [pc, #12]	@ (800a0cc <LSM6DSOX_Read_ID+0x20>)
 800a0c0:	7b1b      	ldrb	r3, [r3, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	2001de98 	.word	0x2001de98

0800a0d0 <LSM6DSOX_Read_Data>:

I2C_Status_t LSM6DSOX_Read_Data(LSM6DSOX_Data_t* LSM6DSOX_Data)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	if (LSM6DSOX_RawData.status == I2C_Error) LSM6DSOX_Init();
 800a0d8:	4b59      	ldr	r3, [pc, #356]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a0da:	7b1b      	ldrb	r3, [r3, #12]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <LSM6DSOX_Read_Data+0x14>
 800a0e0:	f7ff ffc4 	bl	800a06c <LSM6DSOX_Init>
    LSM6DSOX_Read(LSM6DSOX_OUTX_L_G, LSM6DSOX_RawData.RxData, 12);
 800a0e4:	220c      	movs	r2, #12
 800a0e6:	4956      	ldr	r1, [pc, #344]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a0e8:	2022      	movs	r0, #34	@ 0x22
 800a0ea:	f7ff ffa1 	bl	800a030 <LSM6DSOX_Read>

    int16_t gx = (int16_t)(LSM6DSOX_RawData.RxData[1] << 8 | LSM6DSOX_RawData.RxData[0]);
 800a0ee:	4b54      	ldr	r3, [pc, #336]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	b21b      	sxth	r3, r3
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	b21a      	sxth	r2, r3
 800a0f8:	4b51      	ldr	r3, [pc, #324]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b21b      	sxth	r3, r3
 800a0fe:	4313      	orrs	r3, r2
 800a100:	82fb      	strh	r3, [r7, #22]
    int16_t gy = (int16_t)(LSM6DSOX_RawData.RxData[3] << 8 | LSM6DSOX_RawData.RxData[2]);
 800a102:	4b4f      	ldr	r3, [pc, #316]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a104:	78db      	ldrb	r3, [r3, #3]
 800a106:	b21b      	sxth	r3, r3
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	b21a      	sxth	r2, r3
 800a10c:	4b4c      	ldr	r3, [pc, #304]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a10e:	789b      	ldrb	r3, [r3, #2]
 800a110:	b21b      	sxth	r3, r3
 800a112:	4313      	orrs	r3, r2
 800a114:	82bb      	strh	r3, [r7, #20]
    int16_t gz = (int16_t)(LSM6DSOX_RawData.RxData[5] << 8 | LSM6DSOX_RawData.RxData[4]);
 800a116:	4b4a      	ldr	r3, [pc, #296]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a118:	795b      	ldrb	r3, [r3, #5]
 800a11a:	b21b      	sxth	r3, r3
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	b21a      	sxth	r2, r3
 800a120:	4b47      	ldr	r3, [pc, #284]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a122:	791b      	ldrb	r3, [r3, #4]
 800a124:	b21b      	sxth	r3, r3
 800a126:	4313      	orrs	r3, r2
 800a128:	827b      	strh	r3, [r7, #18]
    int16_t ax = (int16_t)(LSM6DSOX_RawData.RxData[7] << 8 | LSM6DSOX_RawData.RxData[6]);
 800a12a:	4b45      	ldr	r3, [pc, #276]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a12c:	79db      	ldrb	r3, [r3, #7]
 800a12e:	b21b      	sxth	r3, r3
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b21a      	sxth	r2, r3
 800a134:	4b42      	ldr	r3, [pc, #264]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a136:	799b      	ldrb	r3, [r3, #6]
 800a138:	b21b      	sxth	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	823b      	strh	r3, [r7, #16]
    int16_t ay = (int16_t)(LSM6DSOX_RawData.RxData[9] << 8 | LSM6DSOX_RawData.RxData[8]);
 800a13e:	4b40      	ldr	r3, [pc, #256]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a140:	7a5b      	ldrb	r3, [r3, #9]
 800a142:	b21b      	sxth	r3, r3
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	b21a      	sxth	r2, r3
 800a148:	4b3d      	ldr	r3, [pc, #244]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a14a:	7a1b      	ldrb	r3, [r3, #8]
 800a14c:	b21b      	sxth	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	81fb      	strh	r3, [r7, #14]
    int16_t az = (int16_t)(LSM6DSOX_RawData.RxData[11] << 8 | LSM6DSOX_RawData.RxData[10]);
 800a152:	4b3b      	ldr	r3, [pc, #236]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a154:	7adb      	ldrb	r3, [r3, #11]
 800a156:	b21b      	sxth	r3, r3
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b21a      	sxth	r2, r3
 800a15c:	4b38      	ldr	r3, [pc, #224]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a15e:	7a9b      	ldrb	r3, [r3, #10]
 800a160:	b21b      	sxth	r3, r3
 800a162:	4313      	orrs	r3, r2
 800a164:	81bb      	strh	r3, [r7, #12]

    LSM6DSOX_Data->Gyro.x = gx * GYRO_SENSITIVITY_500DPS;
 800a166:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a172:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a244 <LSM6DSOX_Read_Data+0x174>
 800a176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a17a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a17e:	ee17 3a90 	vmov	r3, s15
 800a182:	b21a      	sxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	80da      	strh	r2, [r3, #6]
    LSM6DSOX_Data->Gyro.y = gy * GYRO_SENSITIVITY_500DPS;
 800a188:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a18c:	ee07 3a90 	vmov	s15, r3
 800a190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a194:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800a244 <LSM6DSOX_Read_Data+0x174>
 800a198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a19c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1a0:	ee17 3a90 	vmov	r3, s15
 800a1a4:	b21a      	sxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	811a      	strh	r2, [r3, #8]
    LSM6DSOX_Data->Gyro.z = gz * GYRO_SENSITIVITY_500DPS;
 800a1aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1b6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800a244 <LSM6DSOX_Read_Data+0x174>
 800a1ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1c2:	ee17 3a90 	vmov	r3, s15
 800a1c6:	b21a      	sxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	815a      	strh	r2, [r3, #10]

    LSM6DSOX_Data->Accel.x = ax * ACCEL_SENSITIVITY_8G;
 800a1cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a248 <LSM6DSOX_Read_Data+0x178>
 800a1dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1e4:	ee17 3a90 	vmov	r3, s15
 800a1e8:	b21a      	sxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	801a      	strh	r2, [r3, #0]
    LSM6DSOX_Data->Accel.y = ay * ACCEL_SENSITIVITY_8G;
 800a1ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1fa:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a248 <LSM6DSOX_Read_Data+0x178>
 800a1fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a206:	ee17 3a90 	vmov	r3, s15
 800a20a:	b21a      	sxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	805a      	strh	r2, [r3, #2]
    LSM6DSOX_Data->Accel.z = az * ACCEL_SENSITIVITY_8G;
 800a210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a214:	ee07 3a90 	vmov	s15, r3
 800a218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a21c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800a248 <LSM6DSOX_Read_Data+0x178>
 800a220:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a228:	ee17 3a90 	vmov	r3, s15
 800a22c:	b21a      	sxth	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	809a      	strh	r2, [r3, #4]

    return LSM6DSOX_RawData.status;
 800a232:	4b03      	ldr	r3, [pc, #12]	@ (800a240 <LSM6DSOX_Read_Data+0x170>)
 800a234:	7b1b      	ldrb	r3, [r3, #12]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	2001de98 	.word	0x2001de98
 800a244:	3c8f5c29 	.word	0x3c8f5c29
 800a248:	397fda40 	.word	0x397fda40

0800a24c <LL_GPIO_SetOutputPin>:
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	619a      	str	r2, [r3, #24]
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <Sensor_I2C_Init>:
		.h250 = 0,
		.k33 = 0,
		.sfc = 0,
};

void  Sensor_I2C_Init(void) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SENSOR1_EN_GPIO_Port, SENSOR1_EN_Pin);
 800a26e:	2120      	movs	r1, #32
 800a270:	4828      	ldr	r0, [pc, #160]	@ (800a314 <Sensor_I2C_Init+0xac>)
 800a272:	f7ff ffeb 	bl	800a24c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(SENSOR2_EN_GPIO_Port, SENSOR2_EN_Pin);
 800a276:	2140      	movs	r1, #64	@ 0x40
 800a278:	4826      	ldr	r0, [pc, #152]	@ (800a314 <Sensor_I2C_Init+0xac>)
 800a27a:	f7ff ffe7 	bl	800a24c <LL_GPIO_SetOutputPin>
	I2C_Status_t I2C_status = I2C_Error;
 800a27e:	2301      	movs	r3, #1
 800a280:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800a282:	2064      	movs	r0, #100	@ 0x64
 800a284:	f004 fcdc 	bl	800ec40 <LL_mDelay>
	I2C_status = LSM6DSOX_Init();
 800a288:	f7ff fef0 	bl	800a06c <LSM6DSOX_Init>
 800a28c:	4603      	mov	r3, r0
 800a28e:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Success) Sensor_list.lsm = 1;
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <Sensor_I2C_Init+0x36>
 800a296:	4b20      	ldr	r3, [pc, #128]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a298:	2201      	movs	r2, #1
 800a29a:	705a      	strb	r2, [r3, #1]
 800a29c:	e002      	b.n	800a2a4 <Sensor_I2C_Init+0x3c>
	else Sensor_list.lsm = 0;
 800a29e:	4b1e      	ldr	r3, [pc, #120]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	705a      	strb	r2, [r3, #1]

	LL_mDelay(100);
 800a2a4:	2064      	movs	r0, #100	@ 0x64
 800a2a6:	f004 fccb 	bl	800ec40 <LL_mDelay>
	I2C_status = BME280_Init();
 800a2aa:	f7fe fda5 	bl	8008df8 <BME280_Init>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Success) Sensor_list.bme = 1;
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <Sensor_I2C_Init+0x58>
 800a2b8:	4b17      	ldr	r3, [pc, #92]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	70da      	strb	r2, [r3, #3]
 800a2be:	e002      	b.n	800a2c6 <Sensor_I2C_Init+0x5e>
	else Sensor_list.bme = 0;
 800a2c0:	4b15      	ldr	r3, [pc, #84]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	70da      	strb	r2, [r3, #3]

	LL_mDelay(100);
 800a2c6:	2064      	movs	r0, #100	@ 0x64
 800a2c8:	f004 fcba 	bl	800ec40 <LL_mDelay>
	I2C_status = H3LIS331DL_Init();
 800a2cc:	f7ff fb0e 	bl	80098ec <H3LIS331DL_Init>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Success) Sensor_list.h3l = 1;
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d103      	bne.n	800a2e2 <Sensor_I2C_Init+0x7a>
 800a2da:	4b0f      	ldr	r3, [pc, #60]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	711a      	strb	r2, [r3, #4]
 800a2e0:	e002      	b.n	800a2e8 <Sensor_I2C_Init+0x80>
	else Sensor_list.h3l = 0;
 800a2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	711a      	strb	r2, [r3, #4]

	LL_mDelay(100);
 800a2e8:	2064      	movs	r0, #100	@ 0x64
 800a2ea:	f004 fca9 	bl	800ec40 <LL_mDelay>
	I2C_status = H250_I2C_Init();
 800a2ee:	f7ff fa93 	bl	8009818 <H250_I2C_Init>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
	if (I2C_status == I2C_Success) Sensor_list.h250 = 1;
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <Sensor_I2C_Init+0x9c>
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	715a      	strb	r2, [r3, #5]

#ifdef H250_UART
	H250_UART_Init(EXP_UART_CO2_HANDLE);
#endif

}
 800a302:	e002      	b.n	800a30a <Sensor_I2C_Init+0xa2>
	else Sensor_list.h250 = 0;
 800a304:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <Sensor_I2C_Init+0xb0>)
 800a306:	2200      	movs	r2, #0
 800a308:	715a      	strb	r2, [r3, #5]
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40020c00 	.word	0x40020c00
 800a318:	2001ded8 	.word	0x2001ded8

0800a31c <LL_TIM_OC_SetCompareCH1>:
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_TIM_OC_SetCompareCH2>:
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <LL_TIM_OC_SetCompareCH3>:
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <LL_TIM_OC_SetCompareCH4>:
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <heater_set_duty_pwm_channel>:

#include "heater.h"
#include "main.h"

void heater_set_duty_pwm_channel(uint8_t channel, uint16_t duty_pwm)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	460a      	mov	r2, r1
 800a396:	71fb      	strb	r3, [r7, #7]
 800a398:	4613      	mov	r3, r2
 800a39a:	80bb      	strh	r3, [r7, #4]
    if (duty_pwm > 999) duty_pwm = 999;
 800a39c:	88bb      	ldrh	r3, [r7, #4]
 800a39e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3a2:	d302      	bcc.n	800a3aa <heater_set_duty_pwm_channel+0x1e>
 800a3a4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800a3a8:	80bb      	strh	r3, [r7, #4]
    switch (channel)
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d823      	bhi.n	800a3f8 <heater_set_duty_pwm_channel+0x6c>
 800a3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b8 <heater_set_duty_pwm_channel+0x2c>)
 800a3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b6:	bf00      	nop
 800a3b8:	0800a3c9 	.word	0x0800a3c9
 800a3bc:	0800a3d5 	.word	0x0800a3d5
 800a3c0:	0800a3e1 	.word	0x0800a3e1
 800a3c4:	0800a3ed 	.word	0x0800a3ed
    {
        case 0:
            LL_TIM_OC_SetCompareCH1(TIM1, duty_pwm);
 800a3c8:	88bb      	ldrh	r3, [r7, #4]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	480d      	ldr	r0, [pc, #52]	@ (800a404 <heater_set_duty_pwm_channel+0x78>)
 800a3ce:	f7ff ffa5 	bl	800a31c <LL_TIM_OC_SetCompareCH1>
            break;
 800a3d2:	e012      	b.n	800a3fa <heater_set_duty_pwm_channel+0x6e>
        case 1:
            LL_TIM_OC_SetCompareCH2(TIM1, duty_pwm);
 800a3d4:	88bb      	ldrh	r3, [r7, #4]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	480a      	ldr	r0, [pc, #40]	@ (800a404 <heater_set_duty_pwm_channel+0x78>)
 800a3da:	f7ff ffad 	bl	800a338 <LL_TIM_OC_SetCompareCH2>
            break;
 800a3de:	e00c      	b.n	800a3fa <heater_set_duty_pwm_channel+0x6e>
        case 2:
            LL_TIM_OC_SetCompareCH3(TIM1, duty_pwm);
 800a3e0:	88bb      	ldrh	r3, [r7, #4]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4807      	ldr	r0, [pc, #28]	@ (800a404 <heater_set_duty_pwm_channel+0x78>)
 800a3e6:	f7ff ffb5 	bl	800a354 <LL_TIM_OC_SetCompareCH3>
            break;
 800a3ea:	e006      	b.n	800a3fa <heater_set_duty_pwm_channel+0x6e>
        case 3:
            LL_TIM_OC_SetCompareCH4(TIM1, duty_pwm);
 800a3ec:	88bb      	ldrh	r3, [r7, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4804      	ldr	r0, [pc, #16]	@ (800a404 <heater_set_duty_pwm_channel+0x78>)
 800a3f2:	f7ff ffbd 	bl	800a370 <LL_TIM_OC_SetCompareCH4>
            break;
 800a3f6:	e000      	b.n	800a3fa <heater_set_duty_pwm_channel+0x6e>
        default:
            break;
 800a3f8:	bf00      	nop
    }
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000

0800a408 <LL_SPI_IsActiveFlag_RXNE>:
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <LL_SPI_ReceiveData8>:
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	330c      	adds	r3, #12
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	b2db      	uxtb	r3, r3
}
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <LL_SPI_TransmitData8>:
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	330c      	adds	r3, #12
 800a45a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	701a      	strb	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <LL_GPIO_SetOutputPin>:
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	619a      	str	r2, [r3, #24]
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <LL_GPIO_ResetOutputPin>:
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	041a      	lsls	r2, r3, #16
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	619a      	str	r2, [r3, #24]
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <csLOW>:
		LT8722_SPIS_AMUX_SIZE
	},
};

/* SPI support function --------------------------------------------------*/
static inline void csLOW(struct lt8722_dev *dev) {
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(dev->cs_port, dev->cs_pin);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	891b      	ldrh	r3, [r3, #8]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f7ff ffe5 	bl	800a48a <LL_GPIO_ResetOutputPin>
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <csHIGH>:

static inline void csHIGH(struct lt8722_dev *dev) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(dev->cs_port, dev->cs_pin);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	891b      	ldrh	r3, [r3, #8]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f7ff ffc7 	bl	800a46e <LL_GPIO_SetOutputPin>
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SPI_LL_Transmit>:

static uint8_t SPI_LL_Transmit(struct lt8722_dev *dev, uint8_t data)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
	LL_SPI_TransmitData8(SPI_TEC, data);
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4809      	ldr	r0, [pc, #36]	@ (800a520 <SPI_LL_Transmit+0x38>)
 800a4fa:	f7ff ffa6 	bl	800a44a <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(dev->hspi));
 800a4fe:	bf00      	nop
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff ff7f 	bl	800a408 <LL_SPI_IsActiveFlag_RXNE>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0f7      	beq.n	800a500 <SPI_LL_Transmit+0x18>
	return LL_SPI_ReceiveData8(SPI_TEC);
 800a510:	4803      	ldr	r0, [pc, #12]	@ (800a520 <SPI_LL_Transmit+0x38>)
 800a512:	f7ff ff8c 	bl	800a42e <LL_SPI_ReceiveData8>
 800a516:	4603      	mov	r3, r0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	40003c00 	.word	0x40003c00

0800a524 <SPI_write_and_read_buffer>:

uint8_t SPI_write_and_read_buffer(struct lt8722_dev *dev, uint8_t *buffer, uint8_t byte_number)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4613      	mov	r3, r2
 800a530:	71fb      	strb	r3, [r7, #7]
    uint8_t received_data = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]
    csLOW(dev);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff ffb6 	bl	800a4a8 <csLOW>
    for (uint8_t i = 0; i < byte_number; i++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	75bb      	strb	r3, [r7, #22]
 800a540:	e011      	b.n	800a566 <SPI_write_and_read_buffer+0x42>
    {
        received_data = SPI_LL_Transmit(dev, buffer[i]);
 800a542:	7dbb      	ldrb	r3, [r7, #22]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	4413      	add	r3, r2
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4619      	mov	r1, r3
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7ff ffcb 	bl	800a4e8 <SPI_LL_Transmit>
 800a552:	4603      	mov	r3, r0
 800a554:	75fb      	strb	r3, [r7, #23]
        buffer[i] = received_data;
 800a556:	7dbb      	ldrb	r3, [r7, #22]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	4413      	add	r3, r2
 800a55c:	7dfa      	ldrb	r2, [r7, #23]
 800a55e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < byte_number; i++)
 800a560:	7dbb      	ldrb	r3, [r7, #22]
 800a562:	3301      	adds	r3, #1
 800a564:	75bb      	strb	r3, [r7, #22]
 800a566:	7dba      	ldrb	r2, [r7, #22]
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d3e9      	bcc.n	800a542 <SPI_write_and_read_buffer+0x1e>
    }
    csHIGH(dev);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff ffaa 	bl	800a4c8 <csHIGH>
    return received_data;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <lt8722_voltage_to_dac>:
 * @brief Convert voltage to DAC code.
 * @param voltage - Voltage value in nanovolts.
 * @return DAC code.
 */
int32_t lt8722_voltage_to_dac(int64_t voltage)
{
 800a580:	b5b0      	push	{r4, r5, r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	e9c7 0100 	strd	r0, r1, [r7]
	return (LT8722_DAC_OFFSET - voltage) * (1 << LT8722_DAC_RESOLUTION) / LT8722_DAC_VREF;
 800a58a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a58e:	4d0e      	ldr	r5, [pc, #56]	@ (800a5c8 <lt8722_voltage_to_dac+0x48>)
 800a590:	2400      	movs	r4, #0
 800a592:	1a2a      	subs	r2, r5, r0
 800a594:	eb64 0301 	sbc.w	r3, r4, r1
 800a598:	f04f 0000 	mov.w	r0, #0
 800a59c:	f04f 0100 	mov.w	r1, #0
 800a5a0:	0659      	lsls	r1, r3, #25
 800a5a2:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800a5a6:	0650      	lsls	r0, r2, #25
 800a5a8:	a305      	add	r3, pc, #20	@ (adr r3, 800a5c0 <lt8722_voltage_to_dac+0x40>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f6 f979 	bl	80008a4 <__aeabi_ldivmod>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4613      	mov	r3, r2
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c0:	9502f900 	.word	0x9502f900
 800a5c4:	00000000 	.word	0x00000000
 800a5c8:	4a817c80 	.word	0x4a817c80

0800a5cc <lt8722_dac_to_voltage>:
 * @brief Convert DAC code to nanovolts.
 * @param dac - DAC code.
 * @return Voltage value in nanovolts.
 */
int64_t lt8722_dac_to_voltage(int32_t dac)
{
 800a5cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
	return LT8722_DAC_OFFSET - dac * LT8722_DAC_VREF /(1 << LT8722_DAC_RESOLUTION);
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	17c8      	asrs	r0, r1, #31
 800a5da:	460c      	mov	r4, r1
 800a5dc:	4605      	mov	r5, r0
 800a5de:	491b      	ldr	r1, [pc, #108]	@ (800a64c <lt8722_dac_to_voltage+0x80>)
 800a5e0:	fb01 f005 	mul.w	r0, r1, r5
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	fb04 f101 	mul.w	r1, r4, r1
 800a5ea:	4401      	add	r1, r0
 800a5ec:	4817      	ldr	r0, [pc, #92]	@ (800a64c <lt8722_dac_to_voltage+0x80>)
 800a5ee:	fba4 2300 	umull	r2, r3, r4, r0
 800a5f2:	4419      	add	r1, r3
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	da08      	bge.n	800a610 <lt8722_dac_to_voltage+0x44>
 800a5fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a602:	18c3      	adds	r3, r0, r3
 800a604:	603b      	str	r3, [r7, #0]
 800a606:	f141 0300 	adc.w	r3, r1, #0
 800a60a:	607b      	str	r3, [r7, #4]
 800a60c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	f04f 0300 	mov.w	r3, #0
 800a618:	0e42      	lsrs	r2, r0, #25
 800a61a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800a61e:	164b      	asrs	r3, r1, #25
 800a620:	2100      	movs	r1, #0
 800a622:	f1d2 0a00 	rsbs	sl, r2, #0
 800a626:	eb61 0b03 	sbc.w	fp, r1, r3
 800a62a:	4652      	mov	r2, sl
 800a62c:	465b      	mov	r3, fp
 800a62e:	4908      	ldr	r1, [pc, #32]	@ (800a650 <lt8722_dac_to_voltage+0x84>)
 800a630:	eb12 0801 	adds.w	r8, r2, r1
 800a634:	f143 0900 	adc.w	r9, r3, #0
 800a638:	4642      	mov	r2, r8
 800a63a:	464b      	mov	r3, r9
}
 800a63c:	4610      	mov	r0, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	9502f900 	.word	0x9502f900
 800a650:	4a817c80 	.word	0x4a817c80

0800a654 <lt8722_transaction>:
 * @param dev - LT8722 device descriptor
 * @param packet - LT8722 packet.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_transaction(struct lt8722_dev *dev, struct lt8722_packet *packet)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[8] = {0};
 800a65e:	f107 030c 	add.w	r3, r7, #12
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	605a      	str	r2, [r3, #4]
	buffer[0] = packet->command.byte;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	733b      	strb	r3, [r7, #12]
	buffer[1] = packet->reg.address << 1;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	791b      	ldrb	r3, [r3, #4]
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	b2db      	uxtb	r3, r3
 800a676:	737b      	strb	r3, [r7, #13]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2bf2      	cmp	r3, #242	@ 0xf2
 800a67e:	d111      	bne.n	800a6a4 <lt8722_transaction+0x50>
	{
		put_unaligned_be32(packet->data, &buffer[2]);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	f107 030c 	add.w	r3, r7, #12
 800a688:	3302      	adds	r3, #2
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f000 fabb 	bl	800ac08 <put_unaligned_be32>
		buffer[6] = Calculate_CRC8(buffer, 6);
 800a692:	f107 030c 	add.w	r3, r7, #12
 800a696:	2106      	movs	r1, #6
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fa79 	bl	800ab90 <Calculate_CRC8>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	74bb      	strb	r3, [r7, #18]
 800a6a2:	e007      	b.n	800a6b4 <lt8722_transaction+0x60>
	} else
		buffer[2] = Calculate_CRC8(buffer, 2);
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fa70 	bl	800ab90 <Calculate_CRC8>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73bb      	strb	r3, [r7, #14]
	SPI_write_and_read_buffer(dev, buffer, packet->command.size);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	785a      	ldrb	r2, [r3, #1]
 800a6b8:	f107 030c 	add.w	r3, r7, #12
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff ff30 	bl	800a524 <SPI_write_and_read_buffer>
	packet->status = (get_unaligned_be16(&buffer[0]) & GENMASK(10, 0));
 800a6c4:	f107 030c 	add.w	r3, r7, #12
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fadb 	bl	800ac84 <get_unaligned_be16>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	055b      	lsls	r3, r3, #21
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	0d5b      	lsrs	r3, r3, #21
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	82da      	strh	r2, [r3, #22]
	if (packet->command.byte == LT8722_DATA_WRITE_COMMAND)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2bf2      	cmp	r3, #242	@ 0xf2
 800a6f6:	d106      	bne.n	800a706 <lt8722_transaction+0xb2>
	{
		packet->crc = buffer[2];
 800a6f8:	7bba      	ldrb	r2, [r7, #14]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800a6fe:	7cfa      	ldrb	r2, [r7, #19]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	755a      	strb	r2, [r3, #21]
 800a704:	e019      	b.n	800a73a <lt8722_transaction+0xe6>
	} else if (packet->command.byte == LT8722_DATA_READ_COMMAND) {
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2bf4      	cmp	r3, #244	@ 0xf4
 800a70c:	d10f      	bne.n	800a72e <lt8722_transaction+0xda>
		packet->data = get_unaligned_be32(&buffer[2]);
 800a70e:	f107 030c 	add.w	r3, r7, #12
 800a712:	3302      	adds	r3, #2
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fa98 	bl	800ac4a <get_unaligned_be32>
 800a71a:	4602      	mov	r2, r0
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	611a      	str	r2, [r3, #16]
		packet->crc = buffer[6];
 800a720:	7cba      	ldrb	r2, [r7, #18]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[7];
 800a726:	7cfa      	ldrb	r2, [r7, #19]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	755a      	strb	r2, [r3, #21]
 800a72c:	e005      	b.n	800a73a <lt8722_transaction+0xe6>
	} else {
		packet->crc = buffer[2];
 800a72e:	7bba      	ldrb	r2, [r7, #14]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	751a      	strb	r2, [r3, #20]
		packet->ack = buffer[3];
 800a734:	7bfa      	ldrb	r2, [r7, #15]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	755a      	strb	r2, [r3, #21]
	}
	if (packet->ack != LT8722_ACK_ACKNOWLEDGE)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	7d5b      	ldrb	r3, [r3, #21]
 800a73e:	2ba5      	cmp	r3, #165	@ 0xa5
 800a740:	d002      	beq.n	800a748 <lt8722_transaction+0xf4>
		return -1;
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
 800a746:	e000      	b.n	800a74a <lt8722_transaction+0xf6>
	return 0;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <lt8722_reg_read>:
 * @param address - Register address.
 * @param data - Received data.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_read(struct lt8722_dev *dev, uint8_t address, uint32_t *data)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08c      	sub	sp, #48	@ 0x30
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	460b      	mov	r3, r1
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	72fb      	strb	r3, [r7, #11]
	int8_t ret = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800a768:	4b14      	ldr	r3, [pc, #80]	@ (800a7bc <lt8722_reg_read+0x68>)
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	823b      	strh	r3, [r7, #16]
		LT8722_DATA_READ_COMMAND,
		LT8722_DATA_READ_COMMAND_SIZE
	};
	packet.command = command;
 800a76e:	8a3b      	ldrh	r3, [r7, #16]
 800a770:	82bb      	strh	r3, [r7, #20]
	packet.reg = lt8722_regs[address];
 800a772:	7afa      	ldrb	r2, [r7, #11]
 800a774:	4912      	ldr	r1, [pc, #72]	@ (800a7c0 <lt8722_reg_read+0x6c>)
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	18ca      	adds	r2, r1, r3
 800a780:	f107 0318 	add.w	r3, r7, #24
 800a784:	ca07      	ldmia	r2, {r0, r1, r2}
 800a786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ret = lt8722_transaction(dev, &packet);
 800a78a:	f107 0314 	add.w	r3, r7, #20
 800a78e:	4619      	mov	r1, r3
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff ff5f 	bl	800a654 <lt8722_transaction>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (ret)
 800a79c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <lt8722_reg_read+0x56>
		return ret;
 800a7a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a7a8:	e003      	b.n	800a7b2 <lt8722_reg_read+0x5e>
	*data = packet.data;
 800a7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
	return 0;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3730      	adds	r7, #48	@ 0x30
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	08014174 	.word	0x08014174
 800a7c0:	20000148 	.word	0x20000148

0800a7c4 <lt8722_reg_write>:
 * @param address - Register address.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write(struct lt8722_dev *dev, uint8_t address, uint32_t data)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08c      	sub	sp, #48	@ 0x30
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	72fb      	strb	r3, [r7, #11]
	struct lt8722_packet packet;
	struct lt8722_command command = {
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <lt8722_reg_write+0x4c>)
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	82bb      	strh	r3, [r7, #20]
		LT8722_DATA_WRITE_COMMAND,
		LT8722_DATA_WRITE_COMMAND_SIZE
	};
	packet.command = command;
 800a7d8:	8abb      	ldrh	r3, [r7, #20]
 800a7da:	833b      	strh	r3, [r7, #24]
	packet.reg = lt8722_regs[address];
 800a7dc:	7afa      	ldrb	r2, [r7, #11]
 800a7de:	490d      	ldr	r1, [pc, #52]	@ (800a814 <lt8722_reg_write+0x50>)
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	18ca      	adds	r2, r1, r3
 800a7ea:	f107 031c 	add.w	r3, r7, #28
 800a7ee:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	packet.data = data;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	return lt8722_transaction(dev, &packet);
 800a7f8:	f107 0318 	add.w	r3, r7, #24
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff ff28 	bl	800a654 <lt8722_transaction>
 800a804:	4603      	mov	r3, r0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3730      	adds	r7, #48	@ 0x30
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	08014178 	.word	0x08014178
 800a814:	20000148 	.word	0x20000148

0800a818 <lt8722_reg_write_mask>:
 * @param mask - Mask to be applied.
 * @param data - Data to be written.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reg_write_mask(struct lt8722_dev *dev, uint8_t address, uint32_t mask, uint32_t data)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	607a      	str	r2, [r7, #4]
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	460b      	mov	r3, r1
 800a826:	72fb      	strb	r3, [r7, #11]
	uint32_t reg_data;
	lt8722_reg_read(dev, address, &reg_data);
 800a828:	f107 0214 	add.w	r2, r7, #20
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff ff8f 	bl	800a754 <lt8722_reg_read>
	reg_data &= ~mask;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	43da      	mvns	r2, r3
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4013      	ands	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]
	reg_data |= field_prep(mask, data);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa4e 	bl	800ace4 <field_prep>
 800a848:	4602      	mov	r2, r0
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]
	return lt8722_reg_write(dev, address, reg_data);
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	4619      	mov	r1, r3
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff ffb4 	bl	800a7c4 <lt8722_reg_write>
 800a85c:	4603      	mov	r3, r0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <lt8722_set_enable_req>:
 * @brief Set ENABLE_REQ field in LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_enable_req(struct lt8722_dev *dev, bool value)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_ENABLE_REQ_MASK, value);
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	2201      	movs	r2, #1
 800a876:	2100      	movs	r1, #0
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff ffcd 	bl	800a818 <lt8722_reg_write_mask>
 800a87e:	4603      	mov	r3, r0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <lt8722_set_swen_req>:
 * @brief Set switching enable of LT8722 device.
 * @param value - Enable if true, disabled otherwise
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_swen_req(struct lt8722_dev *dev, bool value)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SWEN_REQ_MASK, value);
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	2202      	movs	r2, #2
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff ffbc 	bl	800a818 <lt8722_reg_write_mask>
 800a8a0:	4603      	mov	r3, r0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <lt8722_reset>:
/**
 * @brief Shutdown the LT8722 device.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_reset(struct lt8722_dev *dev)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_COMMAND, LT8722_SPI_RST_MASK, LT8722_SPI_RST_RESET);
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff ffac 	bl	800a818 <lt8722_reg_write_mask>
 800a8c0:	4603      	mov	r3, r0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <lt8722_clear_faults>:
/**
 * @brief Clear LT8722 device faults.
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_clear_faults(struct lt8722_dev *dev)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_STATUS, LT8722_FAULTS_MASK, 0);
 800a8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	069b      	lsls	r3, r3, #26
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	0d5b      	lsrs	r3, r3, #21
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ff94 	bl	800a818 <lt8722_reg_write_mask>
 800a8f0:	4603      	mov	r3, r0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <lt8722_set_dac>:
 * @brief Set DAC code of LT8722 device.
 * @param value - DAC value
 * @return 0 in case of succes, negative error code otherwise
 */
int8_t lt8722_set_dac(struct lt8722_dev *dev, uint32_t value)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
	return lt8722_reg_write_mask(dev, LT8722_SPIS_DAC, LT8722_SPIS_DAC_MASK, value);
 800a904:	f04f 33ff 	mov.w	r3, #4294967295
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2104      	movs	r1, #4
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff81 	bl	800a818 <lt8722_reg_write_mask>
 800a916:	4603      	mov	r3, r0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <lt8722_init>:
 * @param init_param - Initialization parameter containing information about the
 * 		LT8722 device to be initialized.
 * @return 0 in case of success, negative error code otherwise
*/
int8_t lt8722_init(struct lt8722_dev *dev)
{
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	b091      	sub	sp, #68	@ 0x44
 800a926:	af00      	add	r7, sp, #0
 800a928:	6178      	str	r0, [r7, #20]
	int8_t ret = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	int64_t voltage;
	int64_t start_voltage;
	int64_t end_voltage;
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
//	LL_GPIO_ResetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_ResetOutputPin(dev->en_port, dev->en_pin);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	8a1b      	ldrh	r3, [r3, #16]
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7ff fda5 	bl	800a48a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(dev->swen_port, dev->swen_pin);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	8b1b      	ldrh	r3, [r3, #24]
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7ff fd9d 	bl	800a48a <LL_GPIO_ResetOutputPin>
//		LL_GPIO_ResetOutputPin(TEC_1_EN_GPIO_Port, TEC_1_EN_Pin);
//		LL_GPIO_ResetOutputPin(TEC_1_SWEN_GPIO_Port, TEC_1_SWEN_Pin);
	/*
	 * Reset LT8722
	 */
	lt8722_reset(dev);
 800a950:	6978      	ldr	r0, [r7, #20]
 800a952:	f7ff ffaa 	bl	800a8aa <lt8722_reset>
	 * Start-up sequence
	 * 1. Apply proper VIN and VDDIO voltages
	 *
	 * 2. Enable VCC LDO and other LT8722 circuitry
	 */
	ret = lt8722_clear_faults(dev);
 800a956:	6978      	ldr	r0, [r7, #20]
 800a958:	f7ff ffb7 	bl	800a8ca <lt8722_clear_faults>
 800a95c:	4603      	mov	r3, r0
 800a95e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)en_port[channel], en_pin[channel]);
	LL_GPIO_SetOutputPin(dev->en_port, dev->en_pin);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	8a1b      	ldrh	r3, [r3, #16]
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7ff fd7e 	bl	800a46e <LL_GPIO_SetOutputPin>

	ret = lt8722_set_enable_req(dev, LT8722_ENABLE_REQ_ENABLED);
 800a972:	2101      	movs	r1, #1
 800a974:	6978      	ldr	r0, [r7, #20]
 800a976:	f7ff ff76 	bl	800a866 <lt8722_set_enable_req>
 800a97a:	4603      	mov	r3, r0
 800a97c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 800a980:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800a984:	2100      	movs	r1, #0
 800a986:	6978      	ldr	r0, [r7, #20]
 800a988:	f7ff ff1c 	bl	800a7c4 <lt8722_reg_write>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 3. Configure output voltage control DAC to 0xFF000000
	 */
	ret = lt8722_set_dac(dev, 0xFF000000);
 800a992:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 800a996:	6978      	ldr	r0, [r7, #20]
 800a998:	f7ff ffaf 	bl	800a8fa <lt8722_set_dac>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 4. Write all SPIS_STATUS registers to 0
	 */
	ret = lt8722_reg_write(dev, LT8722_SPIS_STATUS, 0);
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	6978      	ldr	r0, [r7, #20]
 800a9a8:	f7ff ff0c 	bl	800a7c4 <lt8722_reg_write>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	LL_mDelay(1);
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	f004 f944 	bl	800ec40 <LL_mDelay>
	ret = lt8722_reg_write(dev, LT8722_SPIS_COMMAND, 0x00003A01);
 800a9b8:	f643 2201 	movw	r2, #14849	@ 0x3a01
 800a9bc:	2100      	movs	r1, #0
 800a9be:	6978      	ldr	r0, [r7, #20]
 800a9c0:	f7ff ff00 	bl	800a7c4 <lt8722_reg_write>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	/*
	 * 5. Ramp the output voltage control DAC from 0xFF000000 to 0x00000000
	 */
	start_voltage = lt8722_dac_to_voltage(0xFF000000);
 800a9ca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800a9ce:	f7ff fdfd 	bl	800a5cc <lt8722_dac_to_voltage>
 800a9d2:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
	end_voltage = lt8722_dac_to_voltage(0x00000000);
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f7ff fdf8 	bl	800a5cc <lt8722_dac_to_voltage>
 800a9dc:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	for (uint8_t i = 0;  i < 5; i++)
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a9e6:	e046      	b.n	800aa76 <lt8722_init+0x156>
	{
		voltage = (start_voltage + (end_voltage - start_voltage) * i / 4);
 800a9e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a9ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a9f0:	1a84      	subs	r4, r0, r2
 800a9f2:	eb61 0503 	sbc.w	r5, r1, r3
 800a9f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4698      	mov	r8, r3
 800a9fe:	4691      	mov	r9, r2
 800aa00:	fb08 f205 	mul.w	r2, r8, r5
 800aa04:	fb04 f309 	mul.w	r3, r4, r9
 800aa08:	4413      	add	r3, r2
 800aa0a:	fba4 ab08 	umull	sl, fp, r4, r8
 800aa0e:	445b      	add	r3, fp
 800aa10:	469b      	mov	fp, r3
 800aa12:	4652      	mov	r2, sl
 800aa14:	465b      	mov	r3, fp
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da06      	bge.n	800aa28 <lt8722_init+0x108>
 800aa1a:	1cd1      	adds	r1, r2, #3
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	f143 0300 	adc.w	r3, r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa28:	f04f 0000 	mov.w	r0, #0
 800aa2c:	f04f 0100 	mov.w	r1, #0
 800aa30:	0890      	lsrs	r0, r2, #2
 800aa32:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800aa36:	1099      	asrs	r1, r3, #2
 800aa38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800aa3c:	1816      	adds	r6, r2, r0
 800aa3e:	603e      	str	r6, [r7, #0]
 800aa40:	414b      	adcs	r3, r1
 800aa42:	607b      	str	r3, [r7, #4]
 800aa44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa48:	e9c7 2308 	strd	r2, r3, [r7, #32]
		dac = lt8722_voltage_to_dac(voltage);
 800aa4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aa50:	f7ff fd96 	bl	800a580 <lt8722_voltage_to_dac>
 800aa54:	61f8      	str	r0, [r7, #28]
		ret = lt8722_set_dac(dev, dac);
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6978      	ldr	r0, [r7, #20]
 800aa5c:	f7ff ff4d 	bl	800a8fa <lt8722_set_dac>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		LL_mDelay(1);
 800aa66:	2001      	movs	r0, #1
 800aa68:	f004 f8ea 	bl	800ec40 <LL_mDelay>
	for (uint8_t i = 0;  i < 5; i++)
 800aa6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa70:	3301      	adds	r3, #1
 800aa72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aa76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d9b4      	bls.n	800a9e8 <lt8722_init+0xc8>
	}
	/*
	 * 6. Enable the PWM switching behavior
	 */
//	LL_GPIO_SetOutputPin((GPIO_TypeDef*)swen_port[channel], swen_pin[channel]);
	LL_GPIO_SetOutputPin(dev->swen_port, dev->swen_pin);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	695a      	ldr	r2, [r3, #20]
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	8b1b      	ldrh	r3, [r3, #24]
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7ff fcf0 	bl	800a46e <LL_GPIO_SetOutputPin>
	ret = lt8722_set_swen_req(dev, LT8722_SWEN_REQ_ENABLED);
 800aa8e:	2101      	movs	r1, #1
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f7ff fef9 	bl	800a888 <lt8722_set_swen_req>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
//	delay_us(200);
	LL_mDelay(1);
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f004 f8cf 	bl	800ec40 <LL_mDelay>
//
//		delay_us(255);
//		delay_us(255);
//
//		ret = lt8722_set_swen_req(channel, LT8722_SWEN_REQ_DISABLED);
	return ret;
 800aaa2:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3744      	adds	r7, #68	@ 0x44
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aab0 <lt8722_set_output_voltage_channel>:
 * @param channel - Channel of lt8722.
 * @param value - Output voltage value in nanovolts.
 * @return 0 in case of success, negative error code otherwise
 */
int8_t lt8722_set_output_voltage_channel(struct lt8722_dev *dev, tec_dir_t dir, int64_t value)
{
 800aab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aab4:	b08c      	sub	sp, #48	@ 0x30
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	61f8      	str	r0, [r7, #28]
 800aaba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800aabe:	460b      	mov	r3, r1
 800aac0:	76fb      	strb	r3, [r7, #27]
	uint8_t ret = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int64_t vdac = 0;
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	int32_t dac = 0x0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	623b      	str	r3, [r7, #32]
	if (dir == TEC_COOL)
 800aad8:	7efb      	ldrb	r3, [r7, #27]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d124      	bne.n	800ab28 <lt8722_set_output_voltage_channel+0x78>
		vdac = LT8722_DAC_OFFSET - value / 16;
 800aade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aae2:	4610      	mov	r0, r2
 800aae4:	4619      	mov	r1, r3
 800aae6:	2900      	cmp	r1, #0
 800aae8:	da07      	bge.n	800aafa <lt8722_set_output_voltage_channel+0x4a>
 800aaea:	f110 030f 	adds.w	r3, r0, #15
 800aaee:	60bb      	str	r3, [r7, #8]
 800aaf0:	f141 0300 	adc.w	r3, r1, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aafa:	f04f 0200 	mov.w	r2, #0
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	0902      	lsrs	r2, r0, #4
 800ab04:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800ab08:	110b      	asrs	r3, r1, #4
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4250      	negs	r0, r2
 800ab0e:	6038      	str	r0, [r7, #0]
 800ab10:	eb61 0303 	sbc.w	r3, r1, r3
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1a:	491c      	ldr	r1, [pc, #112]	@ (800ab8c <lt8722_set_output_voltage_channel+0xdc>)
 800ab1c:	eb12 0801 	adds.w	r8, r2, r1
 800ab20:	f143 0900 	adc.w	r9, r3, #0
 800ab24:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	if (dir == TEC_HEAT)
 800ab28:	7efb      	ldrb	r3, [r7, #27]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d119      	bne.n	800ab62 <lt8722_set_output_voltage_channel+0xb2>
		vdac = LT8722_DAC_OFFSET + value / 16;
 800ab2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da05      	bge.n	800ab42 <lt8722_set_output_voltage_channel+0x92>
 800ab36:	f112 0a0f 	adds.w	sl, r2, #15
 800ab3a:	f143 0b00 	adc.w	fp, r3, #0
 800ab3e:	4652      	mov	r2, sl
 800ab40:	465b      	mov	r3, fp
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f04f 0100 	mov.w	r1, #0
 800ab4a:	0910      	lsrs	r0, r2, #4
 800ab4c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800ab50:	1119      	asrs	r1, r3, #4
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	490d      	ldr	r1, [pc, #52]	@ (800ab8c <lt8722_set_output_voltage_channel+0xdc>)
 800ab58:	1854      	adds	r4, r2, r1
 800ab5a:	f143 0500 	adc.w	r5, r3, #0
 800ab5e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
	dac = lt8722_voltage_to_dac(vdac);
 800ab62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ab66:	f7ff fd0b 	bl	800a580 <lt8722_voltage_to_dac>
 800ab6a:	6238      	str	r0, [r7, #32]
	ret = lt8722_set_dac(dev, dac);
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	69f8      	ldr	r0, [r7, #28]
 800ab72:	f7ff fec2 	bl	800a8fa <lt8722_set_dac>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	return ret;
 800ab7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3730      	adds	r7, #48	@ 0x30
 800ab84:	46bd      	mov	sp, r7
 800ab86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab8a:	bf00      	nop
 800ab8c:	4a817c80 	.word	0x4a817c80

0800ab90 <Calculate_CRC8>:

/* Private support function definition ------------------------------------*/
uint8_t Calculate_CRC8(uint8_t *data, uint8_t length)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
    uint8_t poly = 0x07;
 800aba0:	2307      	movs	r3, #7
 800aba2:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 800aba4:	2300      	movs	r3, #0
 800aba6:	73bb      	strb	r3, [r7, #14]
 800aba8:	e023      	b.n	800abf2 <Calculate_CRC8+0x62>
    {
        crc ^= data[i];
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	4053      	eors	r3, r2
 800abb6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800abb8:	2300      	movs	r3, #0
 800abba:	737b      	strb	r3, [r7, #13]
 800abbc:	e013      	b.n	800abe6 <Calculate_CRC8+0x56>
        {
            if (crc & 0x80)
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da09      	bge.n	800abda <Calculate_CRC8+0x4a>
                crc = (crc << 1) ^ poly;
 800abc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	b25a      	sxtb	r2, r3
 800abce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800abd2:	4053      	eors	r3, r2
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	73fb      	strb	r3, [r7, #15]
 800abd8:	e002      	b.n	800abe0 <Calculate_CRC8+0x50>
            else
                crc <<= 1;
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 0; bit < 8; bit++)
 800abe0:	7b7b      	ldrb	r3, [r7, #13]
 800abe2:	3301      	adds	r3, #1
 800abe4:	737b      	strb	r3, [r7, #13]
 800abe6:	7b7b      	ldrb	r3, [r7, #13]
 800abe8:	2b07      	cmp	r3, #7
 800abea:	d9e8      	bls.n	800abbe <Calculate_CRC8+0x2e>
    for (uint8_t i = 0; i < length; i++)
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	3301      	adds	r3, #1
 800abf0:	73bb      	strb	r3, [r7, #14]
 800abf2:	7bba      	ldrb	r2, [r7, #14]
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d3d7      	bcc.n	800abaa <Calculate_CRC8+0x1a>
        }
    }
    return crc;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <put_unaligned_be32>:

void put_unaligned_be32(uint32_t val, uint8_t *buf)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
	buf[3] = val & 0xFF;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	3303      	adds	r3, #3
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	701a      	strb	r2, [r3, #0]
	buf[2] = (val >> 8) & 0xFF;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	0a1a      	lsrs	r2, r3, #8
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	3302      	adds	r3, #2
 800ac24:	b2d2      	uxtb	r2, r2
 800ac26:	701a      	strb	r2, [r3, #0]
	buf[1] = (val >> 16) & 0xFF;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	0c1a      	lsrs	r2, r3, #16
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	701a      	strb	r2, [r3, #0]
	buf[0] = val >> 24;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	0e1b      	lsrs	r3, r3, #24
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	701a      	strb	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <get_unaligned_be32>:
{
	buf[1] = val & 0xFF;
	buf[0] = val >> 8;
}
uint32_t get_unaligned_be32(uint8_t *buf)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
	return buf[3] | ((uint16_t)buf[2] << 8) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[0] << 24);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3303      	adds	r3, #3
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	4313      	orrs	r3, r2
 800ac64:	461a      	mov	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	061b      	lsls	r3, r3, #24
 800ac76:	4313      	orrs	r3, r2
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <get_unaligned_be16>:
uint32_t get_unaligned_be16(uint8_t *buf)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	return buf[1] | ((uint16_t)buf[0] << 8);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	021b      	lsls	r3, r3, #8
 800ac9a:	4313      	orrs	r3, r2
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <find_first_set_bit>:
uint32_t find_first_set_bit(uint32_t word)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	uint32_t first_set_bit = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
	while (word) {
 800acb4:	e00c      	b.n	800acd0 <find_first_set_bit+0x28>
		if (word & 0x1)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <find_first_set_bit+0x1c>
			return first_set_bit;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	e009      	b.n	800acd8 <find_first_set_bit+0x30>
		word >>= 1;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	085b      	lsrs	r3, r3, #1
 800acc8:	607b      	str	r3, [r7, #4]
		first_set_bit ++;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
	while (word) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1ef      	bne.n	800acb6 <find_first_set_bit+0xe>
	}
	return 32;
 800acd6:	2320      	movs	r3, #32
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <field_prep>:
uint32_t field_prep(uint32_t mask, uint32_t val)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	return (val << find_first_set_bit(mask)) & mask;
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ffda 	bl	800aca8 <find_first_set_bit>
 800acf4:	4602      	mov	r2, r0
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	fa03 f202 	lsl.w	r2, r3, r2
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4013      	ands	r3, r2
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f043 0201 	orr.w	r2, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	609a      	str	r2, [r3, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2301      	moveq	r3, #1
 800ad3e:	2300      	movne	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	609a      	str	r2, [r3, #8]
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <LL_DMA_EnableStream>:
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800ad7a:	4a0c      	ldr	r2, [pc, #48]	@ (800adac <LL_DMA_EnableStream+0x3c>)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	4413      	add	r3, r2
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4413      	add	r3, r2
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4908      	ldr	r1, [pc, #32]	@ (800adac <LL_DMA_EnableStream+0x3c>)
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	440a      	add	r2, r1
 800ad90:	7812      	ldrb	r2, [r2, #0]
 800ad92:	4611      	mov	r1, r2
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	440a      	add	r2, r1
 800ad98:	f043 0301 	orr.w	r3, r3, #1
 800ad9c:	6013      	str	r3, [r2, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	08014578 	.word	0x08014578

0800adb0 <LL_DMA_SetDataTransferDirection>:
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800adbc:	4a0d      	ldr	r2, [pc, #52]	@ (800adf4 <LL_DMA_SetDataTransferDirection+0x44>)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4413      	add	r3, r2
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	4413      	add	r3, r2
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800add0:	4908      	ldr	r1, [pc, #32]	@ (800adf4 <LL_DMA_SetDataTransferDirection+0x44>)
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	440b      	add	r3, r1
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	4619      	mov	r1, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	440b      	add	r3, r1
 800adde:	4619      	mov	r1, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	600b      	str	r3, [r1, #0]
}
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	08014578 	.word	0x08014578

0800adf8 <LL_DMA_SetMode>:
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800ae04:	4a0d      	ldr	r2, [pc, #52]	@ (800ae3c <LL_DMA_SetMode+0x44>)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	4413      	add	r3, r2
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	4413      	add	r3, r2
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 800ae18:	4908      	ldr	r1, [pc, #32]	@ (800ae3c <LL_DMA_SetMode+0x44>)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	440b      	add	r3, r1
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	440b      	add	r3, r1
 800ae26:	4619      	mov	r1, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	600b      	str	r3, [r1, #0]
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	08014578 	.word	0x08014578

0800ae40 <LL_DMA_SetPeriphIncMode>:
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae84 <LL_DMA_SetPeriphIncMode+0x44>)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4413      	add	r3, r2
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ae60:	4908      	ldr	r1, [pc, #32]	@ (800ae84 <LL_DMA_SetPeriphIncMode+0x44>)
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	440b      	add	r3, r1
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	440b      	add	r3, r1
 800ae6e:	4619      	mov	r1, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]
}
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	08014578 	.word	0x08014578

0800ae88 <LL_DMA_SetMemoryIncMode>:
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800ae94:	4a0d      	ldr	r2, [pc, #52]	@ (800aecc <LL_DMA_SetMemoryIncMode+0x44>)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aea8:	4908      	ldr	r1, [pc, #32]	@ (800aecc <LL_DMA_SetMemoryIncMode+0x44>)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	440b      	add	r3, r1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	440b      	add	r3, r1
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	600b      	str	r3, [r1, #0]
}
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	08014578 	.word	0x08014578

0800aed0 <LL_DMA_SetPeriphSize>:
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800aedc:	4a0d      	ldr	r2, [pc, #52]	@ (800af14 <LL_DMA_SetPeriphSize+0x44>)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	4413      	add	r3, r2
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	461a      	mov	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4413      	add	r3, r2
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800aef0:	4908      	ldr	r1, [pc, #32]	@ (800af14 <LL_DMA_SetPeriphSize+0x44>)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	440b      	add	r3, r1
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	4619      	mov	r1, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	440b      	add	r3, r1
 800aefe:	4619      	mov	r1, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4313      	orrs	r3, r2
 800af04:	600b      	str	r3, [r1, #0]
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	08014578 	.word	0x08014578

0800af18 <LL_DMA_SetMemorySize>:
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800af24:	4a0d      	ldr	r2, [pc, #52]	@ (800af5c <LL_DMA_SetMemorySize+0x44>)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	4413      	add	r3, r2
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4413      	add	r3, r2
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800af38:	4908      	ldr	r1, [pc, #32]	@ (800af5c <LL_DMA_SetMemorySize+0x44>)
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	440b      	add	r3, r1
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	4619      	mov	r1, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	440b      	add	r3, r1
 800af46:	4619      	mov	r1, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	600b      	str	r3, [r1, #0]
}
 800af4e:	bf00      	nop
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	08014578 	.word	0x08014578

0800af60 <LL_DMA_SetDataLength>:
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800af6c:	4a0d      	ldr	r2, [pc, #52]	@ (800afa4 <LL_DMA_SetDataLength+0x44>)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	4413      	add	r3, r2
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	461a      	mov	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	4b0a      	ldr	r3, [pc, #40]	@ (800afa8 <LL_DMA_SetDataLength+0x48>)
 800af7e:	4013      	ands	r3, r2
 800af80:	4908      	ldr	r1, [pc, #32]	@ (800afa4 <LL_DMA_SetDataLength+0x44>)
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	440a      	add	r2, r1
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	4611      	mov	r1, r2
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	440a      	add	r2, r1
 800af8e:	4611      	mov	r1, r2
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	4313      	orrs	r3, r2
 800af94:	604b      	str	r3, [r1, #4]
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	08014578 	.word	0x08014578
 800afa8:	ffff0000 	.word	0xffff0000

0800afac <LL_DMA_SetChannelSelection>:
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800afb8:	4a0d      	ldr	r2, [pc, #52]	@ (800aff0 <LL_DMA_SetChannelSelection+0x44>)
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	4413      	add	r3, r2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	461a      	mov	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f023 52f0 	bic.w	r2, r3, #503316480	@ 0x1e000000
 800afcc:	4908      	ldr	r1, [pc, #32]	@ (800aff0 <LL_DMA_SetChannelSelection+0x44>)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	440b      	add	r3, r1
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	440b      	add	r3, r1
 800afda:	4619      	mov	r1, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4313      	orrs	r3, r2
 800afe0:	600b      	str	r3, [r1, #0]
}
 800afe2:	bf00      	nop
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	08014578 	.word	0x08014578

0800aff4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800b000:	4a07      	ldr	r2, [pc, #28]	@ (800b020 <LL_DMA_SetMemoryAddress+0x2c>)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4413      	add	r3, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	4413      	add	r3, r2
 800b00e:	461a      	mov	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	60d3      	str	r3, [r2, #12]
}
 800b014:	bf00      	nop
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	08014578 	.word	0x08014578

0800b024 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800b030:	4a07      	ldr	r2, [pc, #28]	@ (800b050 <LL_DMA_SetPeriphAddress+0x2c>)
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	4413      	add	r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6093      	str	r3, [r2, #8]
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	08014578 	.word	0x08014578

0800b054 <NTC_DMA_ADC_Init>:
  3401, 3625, 3938, 4436, 5486, 6536
};


void NTC_DMA_ADC_Init(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
    // Cấu hình DMA
    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	4823      	ldr	r0, [pc, #140]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b05e:	f7ff ffa5 	bl	800afac <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800b062:	2200      	movs	r2, #0
 800b064:	2100      	movs	r1, #0
 800b066:	4821      	ldr	r0, [pc, #132]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b068:	f7ff fea2 	bl	800adb0 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 800b06c:	2200      	movs	r2, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	481e      	ldr	r0, [pc, #120]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b072:	f7ff fee5 	bl	800ae40 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800b076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b07a:	2100      	movs	r1, #0
 800b07c:	481b      	ldr	r0, [pc, #108]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b07e:	f7ff ff03 	bl	800ae88 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800b082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b086:	2100      	movs	r1, #0
 800b088:	4818      	ldr	r0, [pc, #96]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b08a:	f7ff ff21 	bl	800aed0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800b08e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b092:	2100      	movs	r1, #0
 800b094:	4815      	ldr	r0, [pc, #84]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b096:	f7ff ff3f 	bl	800af18 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 8); // 8 kênh
 800b09a:	2208      	movs	r2, #8
 800b09c:	2100      	movs	r1, #0
 800b09e:	4813      	ldr	r0, [pc, #76]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b0a0:	f7ff ff5e 	bl	800af60 <LL_DMA_SetDataLength>

    // Địa chỉ của ADC data register
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 800b0a4:	4a12      	ldr	r2, [pc, #72]	@ (800b0f0 <NTC_DMA_ADC_Init+0x9c>)
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4810      	ldr	r0, [pc, #64]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b0aa:	f7ff ffbb 	bl	800b024 <LL_DMA_SetPeriphAddress>

    // Địa chỉ bộ nhớ DMA
    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)NTC_ADC_value);
 800b0ae:	4b11      	ldr	r3, [pc, #68]	@ (800b0f4 <NTC_DMA_ADC_Init+0xa0>)
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	480d      	ldr	r0, [pc, #52]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b0b6:	f7ff ff9d 	bl	800aff4 <LL_DMA_SetMemoryAddress>

    // Cấu hình DMA ở chế độ vòng lặp (Circular Mode)
    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800b0ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b0be:	2100      	movs	r1, #0
 800b0c0:	480a      	ldr	r0, [pc, #40]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b0c2:	f7ff fe99 	bl	800adf8 <LL_DMA_SetMode>

    // Bật DMA stream
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4808      	ldr	r0, [pc, #32]	@ (800b0ec <NTC_DMA_ADC_Init+0x98>)
 800b0ca:	f7ff fe51 	bl	800ad70 <LL_DMA_EnableStream>

    // Bật ADC
    LL_ADC_Enable(ADC1);
 800b0ce:	480a      	ldr	r0, [pc, #40]	@ (800b0f8 <NTC_DMA_ADC_Init+0xa4>)
 800b0d0:	f7ff fe1a 	bl	800ad08 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 800b0d4:	bf00      	nop
 800b0d6:	4808      	ldr	r0, [pc, #32]	@ (800b0f8 <NTC_DMA_ADC_Init+0xa4>)
 800b0d8:	f7ff fe26 	bl	800ad28 <LL_ADC_IsEnabled>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0f9      	beq.n	800b0d6 <NTC_DMA_ADC_Init+0x82>

    // Bắt đầu chuyển đổi ADC
    LL_ADC_REG_StartConversionSWStart(ADC1);
 800b0e2:	4805      	ldr	r0, [pc, #20]	@ (800b0f8 <NTC_DMA_ADC_Init+0xa4>)
 800b0e4:	f7ff fe33 	bl	800ad4e <LL_ADC_REG_StartConversionSWStart>
}
 800b0e8:	bf00      	nop
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	40026400 	.word	0x40026400
 800b0f0:	4001204c 	.word	0x4001204c
 800b0f4:	2001dee0 	.word	0x2001dee0
 800b0f8:	40012000 	.word	0x40012000

0800b0fc <NTC_get_temperature>:

void NTC_get_temperature(int16_t* temp)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
 800b108:	e029      	b.n	800b15e <NTC_get_temperature+0x62>
	{
		temp[i] = NTC_table[NTC_ADC_value[i]];
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	4a19      	ldr	r2, [pc, #100]	@ (800b174 <NTC_get_temperature+0x78>)
 800b10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b112:	461a      	mov	r2, r3
 800b114:	4b18      	ldr	r3, [pc, #96]	@ (800b178 <NTC_get_temperature+0x7c>)
 800b116:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	005b      	lsls	r3, r3, #1
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	4413      	add	r3, r2
 800b122:	b20a      	sxth	r2, r1
 800b124:	801a      	strh	r2, [r3, #0]
		if (temp[i] < -500 || temp[i] > 2000)  temp[i] = 0x7FFF;
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	4413      	add	r3, r2
 800b12e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b132:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800b136:	db08      	blt.n	800b14a <NTC_get_temperature+0x4e>
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	4413      	add	r3, r2
 800b140:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b144:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b148:	dd06      	ble.n	800b158 <NTC_get_temperature+0x5c>
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b156:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	3301      	adds	r3, #1
 800b15c:	73fb      	strb	r3, [r7, #15]
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b07      	cmp	r3, #7
 800b162:	d9d2      	bls.n	800b10a <NTC_get_temperature+0xe>
	}
};
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	2001dee0 	.word	0x2001dee0
 800b178:	200001a8 	.word	0x200001a8

0800b17c <temperature_update>:
	 0,								// NTC_Ref			// is one NTC from 0 to 7
	 0,								// Temp_auto;			// ON/OFF
};

static void temperature_update(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.Temp_change_flag)
 800b182:	4b28      	ldr	r3, [pc, #160]	@ (800b224 <temperature_update+0xa8>)
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d03c      	beq.n	800b204 <temperature_update+0x88>
	{
		uint8_t Tec_dir = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	71bb      	strb	r3, [r7, #6]
		for (uint8_t channel = 0; channel < 4; channel ++)
 800b18e:	2300      	movs	r3, #0
 800b190:	71fb      	strb	r3, [r7, #7]
 800b192:	e031      	b.n	800b1f8 <temperature_update+0x7c>
		{
			Tec_dir = ((s_Temperature_CurrentState.Tec_dir & (1 << channel)) == (1 << channel)) ? TEC_HEAT : TEC_COOL;
 800b194:	4b23      	ldr	r3, [pc, #140]	@ (800b224 <temperature_update+0xa8>)
 800b196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b19a:	4619      	mov	r1, r3
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a4:	ea01 0203 	and.w	r2, r1, r3
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	bf0c      	ite	eq
 800b1b4:	2301      	moveq	r3, #1
 800b1b6:	2300      	movne	r3, #0
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	71bb      	strb	r3, [r7, #6]
			lt8722_set_output_voltage_channel(tec_table[channel], Tec_dir, s_Temperature_CurrentState.Tec_vol[channel]);
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	4a1a      	ldr	r2, [pc, #104]	@ (800b228 <temperature_update+0xac>)
 800b1c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	4a17      	ldr	r2, [pc, #92]	@ (800b224 <temperature_update+0xa8>)
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	4413      	add	r3, r2
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	79b9      	ldrb	r1, [r7, #6]
 800b1d4:	f7ff fc6c 	bl	800aab0 <lt8722_set_output_voltage_channel>
			heater_set_duty_pwm_channel(channel, s_Temperature_CurrentState.Heater_duty[channel]);
 800b1d8:	79fb      	ldrb	r3, [r7, #7]
 800b1da:	4a12      	ldr	r2, [pc, #72]	@ (800b224 <temperature_update+0xa8>)
 800b1dc:	3314      	adds	r3, #20
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	79fb      	ldrb	r3, [r7, #7]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff f8cd 	bl	800a38c <heater_set_duty_pwm_channel>
		for (uint8_t channel = 0; channel < 4; channel ++)
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	71fb      	strb	r3, [r7, #7]
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d9ca      	bls.n	800b194 <temperature_update+0x18>
		}
		s_Temperature_CurrentState.Temp_change_flag = 0;
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <temperature_update+0xa8>)
 800b200:	2200      	movs	r2, #0
 800b202:	705a      	strb	r2, [r3, #1]
	}
	NTC_get_temperature(s_Temperature_CurrentState.NTC_temp);
 800b204:	4809      	ldr	r0, [pc, #36]	@ (800b22c <temperature_update+0xb0>)
 800b206:	f7ff ff79 	bl	800b0fc <NTC_get_temperature>

	if (s_Temperature_CurrentState.Temp_auto) {
 800b20a:	4b06      	ldr	r3, [pc, #24]	@ (800b224 <temperature_update+0xa8>)
 800b20c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <temperature_update+0xa0>
		temperature_auto_TEC();
 800b214:	f000 f80c 	bl	800b230 <temperature_auto_TEC>
		temperature_auto_HTR();
 800b218:	f000 f8b0 	bl	800b37c <temperature_auto_HTR>
	}
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	200041c0 	.word	0x200041c0
 800b228:	200000e8 	.word	0x200000e8
 800b22c:	200041f2 	.word	0x200041f2

0800b230 <temperature_auto_TEC>:

void temperature_auto_TEC(void) {
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.NTC_temp[s_Temperature_CurrentState.NTC_Ref] > s_Temperature_CurrentState.Temp_Ref + s_Temperature_CurrentState.High_Threshold) {
 800b234:	4b4c      	ldr	r3, [pc, #304]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b23a:	4a4b      	ldr	r2, [pc, #300]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b23c:	3318      	adds	r3, #24
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	4413      	add	r3, r2
 800b242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b246:	461a      	mov	r2, r3
 800b248:	4b47      	ldr	r3, [pc, #284]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b24a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b24e:	4619      	mov	r1, r3
 800b250:	4b45      	ldr	r3, [pc, #276]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b256:	440b      	add	r3, r1
 800b258:	429a      	cmp	r2, r3
 800b25a:	f340 8082 	ble.w	800b362 <temperature_auto_TEC+0x132>
		heater_set_duty_pwm_channel(0, 0);
 800b25e:	2100      	movs	r1, #0
 800b260:	2000      	movs	r0, #0
 800b262:	f7ff f893 	bl	800a38c <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(1, 0);
 800b266:	2100      	movs	r1, #0
 800b268:	2001      	movs	r0, #1
 800b26a:	f7ff f88f 	bl	800a38c <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(2, 0);
 800b26e:	2100      	movs	r1, #0
 800b270:	2002      	movs	r0, #2
 800b272:	f7ff f88b 	bl	800a38c <heater_set_duty_pwm_channel>
		heater_set_duty_pwm_channel(3, 0);
 800b276:	2100      	movs	r1, #0
 800b278:	2003      	movs	r0, #3
 800b27a:	f7ff f887 	bl	800a38c <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC0_EN) & 0x01) {
 800b27e:	4b3a      	ldr	r3, [pc, #232]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d013      	beq.n	800b2b4 <temperature_auto_TEC+0x84>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC0_EN);
 800b28c:	4b36      	ldr	r3, [pc, #216]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b28e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b292:	f023 0301 	bic.w	r3, r3, #1
 800b296:	b2da      	uxtb	r2, r3
 800b298:	4b33      	ldr	r3, [pc, #204]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b29a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_0, TEC_COOL, s_Temperature_CurrentState.Tec_vol[0]);
 800b29e:	4b32      	ldr	r3, [pc, #200]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4831      	ldr	r0, [pc, #196]	@ (800b36c <temperature_auto_TEC+0x13c>)
 800b2a8:	f7ff fc02 	bl	800aab0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_0, LT8722_SWEN_REQ_ENABLED);
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	482f      	ldr	r0, [pc, #188]	@ (800b36c <temperature_auto_TEC+0x13c>)
 800b2b0:	f7ff faea 	bl	800a888 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC1_EN) & 0x01) {
 800b2b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d013      	beq.n	800b2ee <temperature_auto_TEC+0xbe>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC1_EN);
 800b2c6:	4b28      	ldr	r3, [pc, #160]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2cc:	f023 0302 	bic.w	r3, r3, #2
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	4b25      	ldr	r3, [pc, #148]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_1, TEC_COOL, s_Temperature_CurrentState.Tec_vol[1]);
 800b2d8:	4b23      	ldr	r3, [pc, #140]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4823      	ldr	r0, [pc, #140]	@ (800b370 <temperature_auto_TEC+0x140>)
 800b2e2:	f7ff fbe5 	bl	800aab0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_1, LT8722_SWEN_REQ_ENABLED);
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	4821      	ldr	r0, [pc, #132]	@ (800b370 <temperature_auto_TEC+0x140>)
 800b2ea:	f7ff facd 	bl	800a888 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC2_EN) & 0x01) {
 800b2ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b2f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2f4:	089b      	lsrs	r3, r3, #2
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d013      	beq.n	800b328 <temperature_auto_TEC+0xf8>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC2_EN);
 800b300:	4b19      	ldr	r3, [pc, #100]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b302:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b306:	f023 0304 	bic.w	r3, r3, #4
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	4b16      	ldr	r3, [pc, #88]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b30e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_2, TEC_COOL, s_Temperature_CurrentState.Tec_vol[2]);
 800b312:	4b15      	ldr	r3, [pc, #84]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b314:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b318:	2100      	movs	r1, #0
 800b31a:	4816      	ldr	r0, [pc, #88]	@ (800b374 <temperature_auto_TEC+0x144>)
 800b31c:	f7ff fbc8 	bl	800aab0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_2, LT8722_SWEN_REQ_ENABLED);
 800b320:	2101      	movs	r1, #1
 800b322:	4814      	ldr	r0, [pc, #80]	@ (800b374 <temperature_auto_TEC+0x144>)
 800b324:	f7ff fab0 	bl	800a888 <lt8722_set_swen_req>
		}
		if ((s_Temperature_CurrentState.Tec_Heater_status >> TEC3_EN) & 0x01) {
 800b328:	4b0f      	ldr	r3, [pc, #60]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b32a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	b2db      	uxtb	r3, r3
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d013      	beq.n	800b362 <temperature_auto_TEC+0x132>
			s_Temperature_CurrentState.Tec_dir &= ~(1 << TEC3_EN);
 800b33a:	4b0b      	ldr	r3, [pc, #44]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b33c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b340:	f023 0308 	bic.w	r3, r3, #8
 800b344:	b2da      	uxtb	r2, r3
 800b346:	4b08      	ldr	r3, [pc, #32]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b348:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			lt8722_set_output_voltage_channel(&tec_3, TEC_COOL, s_Temperature_CurrentState.Tec_vol[3]);
 800b34c:	4b06      	ldr	r3, [pc, #24]	@ (800b368 <temperature_auto_TEC+0x138>)
 800b34e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b352:	2100      	movs	r1, #0
 800b354:	4808      	ldr	r0, [pc, #32]	@ (800b378 <temperature_auto_TEC+0x148>)
 800b356:	f7ff fbab 	bl	800aab0 <lt8722_set_output_voltage_channel>
			lt8722_set_swen_req(&tec_3, LT8722_SWEN_REQ_ENABLED);
 800b35a:	2101      	movs	r1, #1
 800b35c:	4806      	ldr	r0, [pc, #24]	@ (800b378 <temperature_auto_TEC+0x148>)
 800b35e:	f7ff fa93 	bl	800a888 <lt8722_set_swen_req>
		}
	}
}
 800b362:	bf00      	nop
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	200041c0 	.word	0x200041c0
 800b36c:	20000068 	.word	0x20000068
 800b370:	20000088 	.word	0x20000088
 800b374:	200000a8 	.word	0x200000a8
 800b378:	200000c8 	.word	0x200000c8

0800b37c <temperature_auto_HTR>:
void temperature_auto_HTR(void) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
	if (s_Temperature_CurrentState.NTC_temp[s_Temperature_CurrentState.NTC_Ref] < s_Temperature_CurrentState.Temp_Ref + s_Temperature_CurrentState.Low_Threshold) {
 800b380:	4b34      	ldr	r3, [pc, #208]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b382:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b386:	4a33      	ldr	r2, [pc, #204]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b388:	3318      	adds	r3, #24
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	4413      	add	r3, r2
 800b38e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b392:	461a      	mov	r2, r3
 800b394:	4b2f      	ldr	r3, [pc, #188]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b39a:	4619      	mov	r1, r3
 800b39c:	4b2d      	ldr	r3, [pc, #180]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b39e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3a2:	440b      	add	r3, r1
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	da53      	bge.n	800b450 <temperature_auto_HTR+0xd4>
		lt8722_set_swen_req(&tec_0, LT8722_SWEN_REQ_DISABLED);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	482b      	ldr	r0, [pc, #172]	@ (800b458 <temperature_auto_HTR+0xdc>)
 800b3ac:	f7ff fa6c 	bl	800a888 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_1, LT8722_SWEN_REQ_DISABLED);
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	482a      	ldr	r0, [pc, #168]	@ (800b45c <temperature_auto_HTR+0xe0>)
 800b3b4:	f7ff fa68 	bl	800a888 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_2, LT8722_SWEN_REQ_DISABLED);
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4829      	ldr	r0, [pc, #164]	@ (800b460 <temperature_auto_HTR+0xe4>)
 800b3bc:	f7ff fa64 	bl	800a888 <lt8722_set_swen_req>
		lt8722_set_swen_req(&tec_3, LT8722_SWEN_REQ_DISABLED);
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	4828      	ldr	r0, [pc, #160]	@ (800b464 <temperature_auto_HTR+0xe8>)
 800b3c4:	f7ff fa60 	bl	800a888 <lt8722_set_swen_req>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER0_EN) & 0x01)
 800b3c8:	4b22      	ldr	r3, [pc, #136]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b3ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3ce:	091b      	lsrs	r3, r3, #4
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <temperature_auto_HTR+0x6e>
			heater_set_duty_pwm_channel(0, s_Temperature_CurrentState.Heater_duty[0]);
 800b3da:	4b1e      	ldr	r3, [pc, #120]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b3dc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	f7fe ffd1 	bl	800a38c <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER1_EN) & 0x01)
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3f0:	095b      	lsrs	r3, r3, #5
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <temperature_auto_HTR+0x90>
			heater_set_duty_pwm_channel(1, s_Temperature_CurrentState.Heater_duty[1]);
 800b3fc:	4b15      	ldr	r3, [pc, #84]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b3fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800b402:	b29b      	uxth	r3, r3
 800b404:	4619      	mov	r1, r3
 800b406:	2001      	movs	r0, #1
 800b408:	f7fe ffc0 	bl	800a38c <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER2_EN) & 0x01)
 800b40c:	4b11      	ldr	r3, [pc, #68]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b40e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b412:	099b      	lsrs	r3, r3, #6
 800b414:	b2db      	uxtb	r3, r3
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d007      	beq.n	800b42e <temperature_auto_HTR+0xb2>
			heater_set_duty_pwm_channel(2, s_Temperature_CurrentState.Heater_duty[2]);
 800b41e:	4b0d      	ldr	r3, [pc, #52]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b420:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800b424:	b29b      	uxth	r3, r3
 800b426:	4619      	mov	r1, r3
 800b428:	2002      	movs	r0, #2
 800b42a:	f7fe ffaf 	bl	800a38c <heater_set_duty_pwm_channel>
		if ((s_Temperature_CurrentState.Tec_Heater_status >> HEATER3_EN) & 0x01)
 800b42e:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b434:	09db      	lsrs	r3, r3, #7
 800b436:	b2db      	uxtb	r3, r3
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d007      	beq.n	800b450 <temperature_auto_HTR+0xd4>
			heater_set_duty_pwm_channel(3, s_Temperature_CurrentState.Heater_duty[3]);
 800b440:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <temperature_auto_HTR+0xd8>)
 800b442:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b446:	b29b      	uxth	r3, r3
 800b448:	4619      	mov	r1, r3
 800b44a:	2003      	movs	r0, #3
 800b44c:	f7fe ff9e 	bl	800a38c <heater_set_duty_pwm_channel>
	}
}
 800b450:	bf00      	nop
 800b452:	bd80      	pop	{r7, pc}
 800b454:	200041c0 	.word	0x200041c0
 800b458:	20000068 	.word	0x20000068
 800b45c:	20000088 	.word	0x20000088
 800b460:	200000a8 	.word	0x200000a8
 800b464:	200000c8 	.word	0x200000c8

0800b468 <Temperature_GetSet_CreateTask>:
{
	return;
}

void Temperature_GetSet_CreateTask(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&temp_task_context.taskHandle, &temp_task_context.taskProperty);
 800b46c:	4902      	ldr	r1, [pc, #8]	@ (800b478 <Temperature_GetSet_CreateTask+0x10>)
 800b46e:	4803      	ldr	r0, [pc, #12]	@ (800b47c <Temperature_GetSet_CreateTask+0x14>)
 800b470:	f7fd fb56 	bl	8008b20 <SCH_TASK_CreateTask>
	return;
 800b474:	bf00      	nop
}
 800b476:	bd80      	pop	{r7, pc}
 800b478:	200041ac 	.word	0x200041ac
 800b47c:	200041a8 	.word	0x200041a8

0800b480 <temperature_set_setpoint>:

void temperature_set_setpoint(int16_t setpoint)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	80fb      	strh	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_Ref = setpoint;
 800b48a:	4a04      	ldr	r2, [pc, #16]	@ (800b49c <temperature_set_setpoint+0x1c>)
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	8053      	strh	r3, [r2, #2]
	return;
 800b490:	bf00      	nop
}
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	200041c0 	.word	0x200041c0

0800b4a0 <temperature_get_setpoint>:

int16_t temperature_get_setpoint()
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
	return s_Temperature_CurrentState.Temp_Ref;
 800b4a4:	4b03      	ldr	r3, [pc, #12]	@ (800b4b4 <temperature_get_setpoint+0x14>)
 800b4a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	200041c0 	.word	0x200041c0

0800b4b8 <temperature_set_tec_vol>:
{
	return s_Temperature_CurrentState.NTC_temp[channel];
}

void temperature_set_tec_vol(uint8_t channel, uint16_t voltage)
{
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	b087      	sub	sp, #28
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	460a      	mov	r2, r1
 800b4c4:	75fb      	strb	r3, [r7, #23]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800b4ca:	4b2c      	ldr	r3, [pc, #176]	@ (800b57c <temperature_set_tec_vol+0xc4>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	705a      	strb	r2, [r3, #1]
	if (voltage > 3000) voltage = 3000;
 800b4d0:	8abb      	ldrh	r3, [r7, #20]
 800b4d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d902      	bls.n	800b4e0 <temperature_set_tec_vol+0x28>
 800b4da:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b4de:	82bb      	strh	r3, [r7, #20]
	s_Temperature_CurrentState.Tec_vol[channel] = (int64_t)voltage*1000000;
 800b4e0:	8abb      	ldrh	r3, [r7, #20]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	469a      	mov	sl, r3
 800b4e6:	4693      	mov	fp, r2
 800b4e8:	7dfe      	ldrb	r6, [r7, #23]
 800b4ea:	4652      	mov	r2, sl
 800b4ec:	465b      	mov	r3, fp
 800b4ee:	f04f 0000 	mov.w	r0, #0
 800b4f2:	f04f 0100 	mov.w	r1, #0
 800b4f6:	0159      	lsls	r1, r3, #5
 800b4f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4fc:	0150      	lsls	r0, r2, #5
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	ebb2 040a 	subs.w	r4, r2, sl
 800b506:	eb63 050b 	sbc.w	r5, r3, fp
 800b50a:	f04f 0200 	mov.w	r2, #0
 800b50e:	f04f 0300 	mov.w	r3, #0
 800b512:	026b      	lsls	r3, r5, #9
 800b514:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800b518:	0262      	lsls	r2, r4, #9
 800b51a:	4614      	mov	r4, r2
 800b51c:	461d      	mov	r5, r3
 800b51e:	eb14 080a 	adds.w	r8, r4, sl
 800b522:	eb45 090b 	adc.w	r9, r5, fp
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f04f 0300 	mov.w	r3, #0
 800b52e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b53a:	ebb2 0108 	subs.w	r1, r2, r8
 800b53e:	6039      	str	r1, [r7, #0]
 800b540:	eb63 0309 	sbc.w	r3, r3, r9
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b54a:	460b      	mov	r3, r1
 800b54c:	eb13 030a 	adds.w	r3, r3, sl
 800b550:	60bb      	str	r3, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	eb43 030b 	adc.w	r3, r3, fp
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	4a08      	ldr	r2, [pc, #32]	@ (800b57c <temperature_set_tec_vol+0xc4>)
 800b55c:	1c73      	adds	r3, r6, #1
 800b55e:	00db      	lsls	r3, r3, #3
 800b560:	4413      	add	r3, r2
 800b562:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b566:	e9c3 1200 	strd	r1, r2, [r3]
	LL_mDelay(1);
 800b56a:	2001      	movs	r0, #1
 800b56c:	f003 fb68 	bl	800ec40 <LL_mDelay>
}
 800b570:	bf00      	nop
 800b572:	371c      	adds	r7, #28
 800b574:	46bd      	mov	sp, r7
 800b576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57a:	bf00      	nop
 800b57c:	200041c0 	.word	0x200041c0

0800b580 <temperature_get_tec_vol_set>:

uint16_t temperature_get_tec_vol_set(uint8_t channel)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	4a08      	ldr	r2, [pc, #32]	@ (800b5b0 <temperature_get_tec_vol_set+0x30>)
 800b58e:	3301      	adds	r3, #1
 800b590:	00db      	lsls	r3, r3, #3
 800b592:	4413      	add	r3, r2
 800b594:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b598:	4a06      	ldr	r2, [pc, #24]	@ (800b5b4 <temperature_get_tec_vol_set+0x34>)
 800b59a:	f04f 0300 	mov.w	r3, #0
 800b59e:	f7f5 f981 	bl	80008a4 <__aeabi_ldivmod>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	b293      	uxth	r3, r2
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	200041c0 	.word	0x200041c0
 800b5b4:	000f4240 	.word	0x000f4240

0800b5b8 <temperature_get_tec_vol_adc>:

uint16_t temperature_get_tec_vol_adc(uint8_t channel)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Tec_vol[channel]/1000000);
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	4a08      	ldr	r2, [pc, #32]	@ (800b5e8 <temperature_get_tec_vol_adc+0x30>)
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5d0:	4a06      	ldr	r2, [pc, #24]	@ (800b5ec <temperature_get_tec_vol_adc+0x34>)
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	f7f5 f965 	bl	80008a4 <__aeabi_ldivmod>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	b293      	uxth	r3, r2
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200041c0 	.word	0x200041c0
 800b5ec:	000f4240 	.word	0x000f4240

0800b5f0 <temperature_set_heater_duty>:

void temperature_set_heater_duty(uint8_t channel, uint8_t duty)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	460a      	mov	r2, r1
 800b5fa:	71fb      	strb	r3, [r7, #7]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Temp_change_flag = 1;
 800b600:	4b0e      	ldr	r3, [pc, #56]	@ (800b63c <temperature_set_heater_duty+0x4c>)
 800b602:	2201      	movs	r2, #1
 800b604:	705a      	strb	r2, [r3, #1]
    if (duty > 100) duty = 100;
 800b606:	79bb      	ldrb	r3, [r7, #6]
 800b608:	2b64      	cmp	r3, #100	@ 0x64
 800b60a:	d901      	bls.n	800b610 <temperature_set_heater_duty+0x20>
 800b60c:	2364      	movs	r3, #100	@ 0x64
 800b60e:	71bb      	strb	r3, [r7, #6]
	s_Temperature_CurrentState.Heater_duty[channel] = duty*10;
 800b610:	79bb      	ldrb	r3, [r7, #6]
 800b612:	b29b      	uxth	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	0092      	lsls	r2, r2, #2
 800b618:	4413      	add	r3, r2
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	79fb      	ldrb	r3, [r7, #7]
 800b620:	b211      	sxth	r1, r2
 800b622:	4a06      	ldr	r2, [pc, #24]	@ (800b63c <temperature_set_heater_duty+0x4c>)
 800b624:	3314      	adds	r3, #20
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	4413      	add	r3, r2
 800b62a:	460a      	mov	r2, r1
 800b62c:	805a      	strh	r2, [r3, #2]
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	200041c0 	.word	0x200041c0

0800b640 <temperature_get_heater_duty>:
uint8_t temperature_get_heater_duty(uint8_t channel)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
	return (s_Temperature_CurrentState.Heater_duty[channel]/10);
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	4a09      	ldr	r2, [pc, #36]	@ (800b674 <temperature_get_heater_duty+0x34>)
 800b64e:	3314      	adds	r3, #20
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	4413      	add	r3, r2
 800b654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b658:	4a07      	ldr	r2, [pc, #28]	@ (800b678 <temperature_get_heater_duty+0x38>)
 800b65a:	fb82 1203 	smull	r1, r2, r2, r3
 800b65e:	1092      	asrs	r2, r2, #2
 800b660:	17db      	asrs	r3, r3, #31
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	b21b      	sxth	r3, r3
 800b666:	b2db      	uxtb	r3, r3
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	200041c0 	.word	0x200041c0
 800b678:	66666667 	.word	0x66666667

0800b67c <temperature_set_tec_dir>:

void temperature_set_tec_dir(tec_dir_t dir_0, tec_dir_t dir_1, tec_dir_t dir_2, tec_dir_t dir_3)
{
 800b67c:	b490      	push	{r4, r7}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	4611      	mov	r1, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	4623      	mov	r3, r4
 800b68c:	71fb      	strb	r3, [r7, #7]
 800b68e:	4603      	mov	r3, r0
 800b690:	71bb      	strb	r3, [r7, #6]
 800b692:	460b      	mov	r3, r1
 800b694:	717b      	strb	r3, [r7, #5]
 800b696:	4613      	mov	r3, r2
 800b698:	713b      	strb	r3, [r7, #4]
    s_Temperature_CurrentState.Temp_change_flag = 1;
 800b69a:	4b10      	ldr	r3, [pc, #64]	@ (800b6dc <temperature_set_tec_dir+0x60>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	705a      	strb	r2, [r3, #1]
    s_Temperature_CurrentState.Tec_dir = (dir_0 << TEC0_DIR) | (dir_1 << TEC1_DIR) | (dir_2 << TEC2_DIR) | (dir_3 << TEC3_DIR);
 800b6a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	b25a      	sxtb	r2, r3
 800b6a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	b25a      	sxtb	r2, r3
 800b6b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	b25b      	sxtb	r3, r3
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	b25a      	sxtb	r2, r3
 800b6bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	b25b      	sxtb	r3, r3
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	b25b      	sxtb	r3, r3
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	4b04      	ldr	r3, [pc, #16]	@ (800b6dc <temperature_set_tec_dir+0x60>)
 800b6cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    return;
 800b6d0:	bf00      	nop
}
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bc90      	pop	{r4, r7}
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	200041c0 	.word	0x200041c0

0800b6e0 <temperature_get_tec_dir>:

void temperature_get_tec_dir(tec_dir_t *dir_0, tec_dir_t *dir_1, tec_dir_t *dir_2, tec_dir_t *dir_3)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]
	uint8_t dir = s_Temperature_CurrentState.Tec_dir;
 800b6ee:	4b14      	ldr	r3, [pc, #80]	@ (800b740 <temperature_get_tec_dir+0x60>)
 800b6f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6f4:	75fb      	strb	r3, [r7, #23]
    *dir_0 = (tec_dir_t)((dir >> TEC0_DIR) & 0x01);
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	701a      	strb	r2, [r3, #0]
    *dir_1 = (tec_dir_t)((dir >> TEC1_DIR) & 0x01);
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	085b      	lsrs	r3, r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	701a      	strb	r2, [r3, #0]
    *dir_2 = (tec_dir_t)((dir >> TEC2_DIR) & 0x01);
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	089b      	lsrs	r3, r3, #2
 800b716:	b2db      	uxtb	r3, r3
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	b2da      	uxtb	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	701a      	strb	r2, [r3, #0]
    *dir_3 = (tec_dir_t)((dir >> TEC3_DIR) & 0x01);
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	08db      	lsrs	r3, r3, #3
 800b726:	b2db      	uxtb	r3, r3
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	701a      	strb	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	371c      	adds	r7, #28
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	200041c0 	.word	0x200041c0

0800b744 <temperature_set_tec_auto>:

void temperature_set_tec_auto(uint8_t tec_0_en, uint8_t tec_1_en, uint8_t tec_2_en, uint8_t tec_3_en) {
 800b744:	b490      	push	{r4, r7}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	4611      	mov	r1, r2
 800b750:	461a      	mov	r2, r3
 800b752:	4623      	mov	r3, r4
 800b754:	71fb      	strb	r3, [r7, #7]
 800b756:	4603      	mov	r3, r0
 800b758:	71bb      	strb	r3, [r7, #6]
 800b75a:	460b      	mov	r3, r1
 800b75c:	717b      	strb	r3, [r7, #5]
 800b75e:	4613      	mov	r3, r2
 800b760:	713b      	strb	r3, [r7, #4]
	uint8_t tec_ena = (tec_0_en << TEC0_EN) | (tec_1_en << TEC1_EN) | (tec_2_en << TEC2_EN) | (tec_3_en << TEC3_EN);
 800b762:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	b25a      	sxtb	r2, r3
 800b76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76e:	4313      	orrs	r3, r2
 800b770:	b25a      	sxtb	r2, r3
 800b772:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	4313      	orrs	r3, r2
 800b77c:	b25a      	sxtb	r2, r3
 800b77e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	b25b      	sxtb	r3, r3
 800b786:	4313      	orrs	r3, r2
 800b788:	b25b      	sxtb	r3, r3
 800b78a:	73fb      	strb	r3, [r7, #15]
	uint8_t heater_ena = s_Temperature_CurrentState.Tec_Heater_status & 0xF0;
 800b78c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <temperature_set_tec_auto+0x80>)
 800b78e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b792:	f023 030f 	bic.w	r3, r3, #15
 800b796:	73bb      	strb	r3, [r7, #14]
	s_Temperature_CurrentState.Tec_Heater_status = (heater_ena & 0xF0) | (tec_ena & 0x0F);
 800b798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b79c:	f023 030f 	bic.w	r3, r3, #15
 800b7a0:	b25a      	sxtb	r2, r3
 800b7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	b25b      	sxtb	r3, r3
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b25b      	sxtb	r3, r3
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	4b04      	ldr	r3, [pc, #16]	@ (800b7c4 <temperature_set_tec_auto+0x80>)
 800b7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 800b7b8:	bf00      	nop
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc90      	pop	{r4, r7}
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	200041c0 	.word	0x200041c0

0800b7c8 <temperature_get_tec_auto>:

void temperature_get_tec_auto(uint8_t *tec_0_en, uint8_t *tec_1_en, uint8_t *tec_2_en, uint8_t *tec_3_en) {
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
	uint8_t Tec_Heater_status = s_Temperature_CurrentState.Tec_Heater_status;
 800b7d6:	4b14      	ldr	r3, [pc, #80]	@ (800b828 <temperature_get_tec_auto+0x60>)
 800b7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7dc:	75fb      	strb	r3, [r7, #23]
    *tec_0_en = (Tec_Heater_status >> TEC0_EN) & 0x01;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	701a      	strb	r2, [r3, #0]
    *tec_1_en = (Tec_Heater_status >> TEC1_EN) & 0x01;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	701a      	strb	r2, [r3, #0]
    *tec_2_en = (Tec_Heater_status >> TEC2_EN) & 0x01;
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	089b      	lsrs	r3, r3, #2
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	701a      	strb	r2, [r3, #0]
    *tec_3_en = (Tec_Heater_status >> TEC3_EN) & 0x01;
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	08db      	lsrs	r3, r3, #3
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	b2da      	uxtb	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	701a      	strb	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	200041c0 	.word	0x200041c0

0800b82c <temperature_set_heater_auto>:

void temperature_set_heater_auto(uint8_t heater_0_en, uint8_t heater_1_en, uint8_t heater_2_en, uint8_t heater_3_en) {
 800b82c:	b490      	push	{r4, r7}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	4604      	mov	r4, r0
 800b834:	4608      	mov	r0, r1
 800b836:	4611      	mov	r1, r2
 800b838:	461a      	mov	r2, r3
 800b83a:	4623      	mov	r3, r4
 800b83c:	71fb      	strb	r3, [r7, #7]
 800b83e:	4603      	mov	r3, r0
 800b840:	71bb      	strb	r3, [r7, #6]
 800b842:	460b      	mov	r3, r1
 800b844:	717b      	strb	r3, [r7, #5]
 800b846:	4613      	mov	r3, r2
 800b848:	713b      	strb	r3, [r7, #4]
    uint8_t heater_ena = (heater_0_en << HEATER0_EN) | (heater_1_en << HEATER1_EN) | (heater_2_en << HEATER2_EN) | (heater_3_en << HEATER3_EN);
 800b84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	b25a      	sxtb	r2, r3
 800b852:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b856:	015b      	lsls	r3, r3, #5
 800b858:	b25b      	sxtb	r3, r3
 800b85a:	4313      	orrs	r3, r2
 800b85c:	b25a      	sxtb	r2, r3
 800b85e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b862:	019b      	lsls	r3, r3, #6
 800b864:	b25b      	sxtb	r3, r3
 800b866:	4313      	orrs	r3, r2
 800b868:	b25a      	sxtb	r2, r3
 800b86a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b86e:	01db      	lsls	r3, r3, #7
 800b870:	b25b      	sxtb	r3, r3
 800b872:	4313      	orrs	r3, r2
 800b874:	b25b      	sxtb	r3, r3
 800b876:	73fb      	strb	r3, [r7, #15]
    uint8_t tec_ena = s_Temperature_CurrentState.Tec_Heater_status & 0x0F;
 800b878:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b0 <temperature_set_heater_auto+0x84>)
 800b87a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b87e:	f003 030f 	and.w	r3, r3, #15
 800b882:	73bb      	strb	r3, [r7, #14]
    s_Temperature_CurrentState.Tec_Heater_status = (heater_ena & 0xF0) | (tec_ena & 0x0F);
 800b884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b888:	f023 030f 	bic.w	r3, r3, #15
 800b88c:	b25a      	sxtb	r2, r3
 800b88e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b892:	f003 030f 	and.w	r3, r3, #15
 800b896:	b25b      	sxtb	r3, r3
 800b898:	4313      	orrs	r3, r2
 800b89a:	b25b      	sxtb	r3, r3
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	4b04      	ldr	r3, [pc, #16]	@ (800b8b0 <temperature_set_heater_auto+0x84>)
 800b8a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 800b8a4:	bf00      	nop
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bc90      	pop	{r4, r7}
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	200041c0 	.word	0x200041c0

0800b8b4 <temperature_get_heater_auto>:

void temperature_get_heater_auto(uint8_t *heater_0_en, uint8_t *heater_1_en, uint8_t *heater_2_en, uint8_t *heater_3_en) {
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
	uint8_t Tec_Heater_status = s_Temperature_CurrentState.Tec_Heater_status;
 800b8c2:	4b13      	ldr	r3, [pc, #76]	@ (800b910 <temperature_get_heater_auto+0x5c>)
 800b8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8c8:	75fb      	strb	r3, [r7, #23]
    *heater_0_en = (Tec_Heater_status >> HEATER0_EN) & 0x01;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	091b      	lsrs	r3, r3, #4
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	701a      	strb	r2, [r3, #0]
    *heater_1_en = (Tec_Heater_status >> HEATER1_EN) & 0x01;
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	095b      	lsrs	r3, r3, #5
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	701a      	strb	r2, [r3, #0]
    *heater_2_en = (Tec_Heater_status >> HEATER2_EN) & 0x01;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	099b      	lsrs	r3, r3, #6
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	701a      	strb	r2, [r3, #0]
    *heater_3_en = (Tec_Heater_status >> HEATER3_EN) & 0x01;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	09db      	lsrs	r3, r3, #7
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	701a      	strb	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	200041c0 	.word	0x200041c0

0800b914 <temperature_set_ntc_ref>:

void temperature_set_ntc_ref(uint8_t NTC_Ref) {
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.NTC_Ref = NTC_Ref;
 800b91e:	4a05      	ldr	r2, [pc, #20]	@ (800b934 <temperature_set_ntc_ref+0x20>)
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	200041c0 	.word	0x200041c0

0800b938 <temperature_get_ntc_ref>:

void temperature_get_ntc_ref(uint8_t *NTC_Ref) {
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	*NTC_Ref = s_Temperature_CurrentState.NTC_Ref;
 800b940:	4b05      	ldr	r3, [pc, #20]	@ (800b958 <temperature_get_ntc_ref+0x20>)
 800b942:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	701a      	strb	r2, [r3, #0]
}
 800b94a:	bf00      	nop
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	200041c0 	.word	0x200041c0

0800b95c <temperature_set_auto_ctrl>:

void temperature_set_auto_ctrl(uint8_t Temp_auto) {
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	71fb      	strb	r3, [r7, #7]
	s_Temperature_CurrentState.Temp_auto = Temp_auto;
 800b966:	4a05      	ldr	r2, [pc, #20]	@ (800b97c <temperature_set_auto_ctrl+0x20>)
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	200041c0 	.word	0x200041c0

0800b980 <temperature_get_auto_ctrl>:
void temperature_get_auto_ctrl(uint8_t *Temp_auto) {
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	*Temp_auto = s_Temperature_CurrentState.Temp_auto;
 800b988:	4b05      	ldr	r3, [pc, #20]	@ (800b9a0 <temperature_get_auto_ctrl+0x20>)
 800b98a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	701a      	strb	r2, [r3, #0]
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	200041c0 	.word	0x200041c0

0800b9a4 <LL_GPIO_SetOutputPin>:
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	619a      	str	r2, [r3, #24]
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <LL_GPIO_ResetOutputPin>:
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	041a      	lsls	r2, r3, #16
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	619a      	str	r2, [r3, #24]
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
	...

0800b9e0 <Ex_Watchdog_Init>:
		181
	}
};

void Ex_Watchdog_Init(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800b9e4:	4b03      	ldr	r3, [pc, #12]	@ (800b9f4 <Ex_Watchdog_Init+0x14>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	701a      	strb	r2, [r3, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	2001df00 	.word	0x2001df00

0800b9f8 <Ex_Watchdog_CreateTask>:

void Ex_Watchdog_CreateTask(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800b9fc:	4902      	ldr	r1, [pc, #8]	@ (800ba08 <Ex_Watchdog_CreateTask+0x10>)
 800b9fe:	4803      	ldr	r0, [pc, #12]	@ (800ba0c <Ex_Watchdog_CreateTask+0x14>)
 800ba00:	f7fd f88e 	bl	8008b20 <SCH_TASK_CreateTask>
}
 800ba04:	bf00      	nop
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	2000420c 	.word	0x2000420c
 800ba0c:	20004208 	.word	0x20004208

0800ba10 <status_wdt_update>:

void status_wdt_update(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	af00      	add	r7, sp, #0
	if (WDT_Current)
 800ba14:	4b15      	ldr	r3, [pc, #84]	@ (800ba6c <status_wdt_update+0x5c>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d013      	beq.n	800ba44 <status_wdt_update+0x34>
	{
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	f7fd f869 	bl	8008af4 <SCH_TIM_HasCompleted>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01f      	beq.n	800ba68 <status_wdt_update+0x58>
		{
			WDT_Current = 0;
 800ba28:	4b10      	ldr	r3, [pc, #64]	@ (800ba6c <status_wdt_update+0x5c>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800ba2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ba32:	480f      	ldr	r0, [pc, #60]	@ (800ba70 <status_wdt_update+0x60>)
 800ba34:	f7ff ffc4 	bl	800b9c0 <LL_GPIO_ResetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800ba38:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	f7fd f843 	bl	8008ac8 <SCH_TIM_Start>
			WDT_Current = 1;
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
		}
	}
}
 800ba42:	e011      	b.n	800ba68 <status_wdt_update+0x58>
		if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800ba44:	2001      	movs	r0, #1
 800ba46:	f7fd f855 	bl	8008af4 <SCH_TIM_HasCompleted>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00b      	beq.n	800ba68 <status_wdt_update+0x58>
			WDT_Current = 1;
 800ba50:	4b06      	ldr	r3, [pc, #24]	@ (800ba6c <status_wdt_update+0x5c>)
 800ba52:	2201      	movs	r2, #1
 800ba54:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800ba56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ba5a:	4805      	ldr	r0, [pc, #20]	@ (800ba70 <status_wdt_update+0x60>)
 800ba5c:	f7ff ffa2 	bl	800b9a4 <LL_GPIO_SetOutputPin>
			SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800ba60:	21c8      	movs	r1, #200	@ 0xc8
 800ba62:	2001      	movs	r0, #1
 800ba64:	f7fd f830 	bl	8008ac8 <SCH_TIM_Start>
}
 800ba68:	bf00      	nop
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	2001df00 	.word	0x2001df00
 800ba70:	40021000 	.word	0x40021000

0800ba74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba78:	2003      	movs	r0, #3
 800ba7a:	f000 f929 	bl	800bcd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ba7e:	200f      	movs	r0, #15
 800ba80:	f000 f806 	bl	800ba90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ba84:	f7f7 fa12 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ba98:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <HAL_InitTick+0x54>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <HAL_InitTick+0x58>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800baa6:	fbb3 f3f1 	udiv	r3, r3, r1
 800baaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f943 	bl	800bd3a <HAL_SYSTICK_Config>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e00e      	b.n	800badc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b0f      	cmp	r3, #15
 800bac2:	d80a      	bhi.n	800bada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bac4:	2200      	movs	r2, #0
 800bac6:	6879      	ldr	r1, [r7, #4]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	f000 f90b 	bl	800bce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bad0:	4a06      	ldr	r2, [pc, #24]	@ (800baec <HAL_InitTick+0x5c>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e000      	b.n	800badc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000000 	.word	0x20000000
 800bae8:	20004220 	.word	0x20004220
 800baec:	2000421c 	.word	0x2000421c

0800baf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <HAL_IncTick+0x20>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	461a      	mov	r2, r3
 800bafa:	4b06      	ldr	r3, [pc, #24]	@ (800bb14 <HAL_IncTick+0x24>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4413      	add	r3, r2
 800bb00:	4a04      	ldr	r2, [pc, #16]	@ (800bb14 <HAL_IncTick+0x24>)
 800bb02:	6013      	str	r3, [r2, #0]
}
 800bb04:	bf00      	nop
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20004220 	.word	0x20004220
 800bb14:	2001df04 	.word	0x2001df04

0800bb18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  return uwTick;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <HAL_GetTick+0x14>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	2001df04 	.word	0x2001df04

0800bb30 <__NVIC_SetPriorityGrouping>:
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb40:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <__NVIC_SetPriorityGrouping+0x40>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bb58:	4b06      	ldr	r3, [pc, #24]	@ (800bb74 <__NVIC_SetPriorityGrouping+0x44>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bb5e:	4a04      	ldr	r2, [pc, #16]	@ (800bb70 <__NVIC_SetPriorityGrouping+0x40>)
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	60d3      	str	r3, [r2, #12]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	e000ed00 	.word	0xe000ed00
 800bb74:	05fa0000 	.word	0x05fa0000

0800bb78 <__NVIC_GetPriorityGrouping>:
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb7c:	4b04      	ldr	r3, [pc, #16]	@ (800bb90 <__NVIC_GetPriorityGrouping+0x18>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	0a1b      	lsrs	r3, r3, #8
 800bb82:	f003 0307 	and.w	r3, r3, #7
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	e000ed00 	.word	0xe000ed00

0800bb94 <__NVIC_EnableIRQ>:
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db0b      	blt.n	800bbbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bba6:	79fb      	ldrb	r3, [r7, #7]
 800bba8:	f003 021f 	and.w	r2, r3, #31
 800bbac:	4907      	ldr	r1, [pc, #28]	@ (800bbcc <__NVIC_EnableIRQ+0x38>)
 800bbae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb2:	095b      	lsrs	r3, r3, #5
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	fa00 f202 	lsl.w	r2, r0, r2
 800bbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bbbe:	bf00      	nop
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	e000e100 	.word	0xe000e100

0800bbd0 <__NVIC_SetPriority>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	db0a      	blt.n	800bbfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	490c      	ldr	r1, [pc, #48]	@ (800bc1c <__NVIC_SetPriority+0x4c>)
 800bbea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbee:	0112      	lsls	r2, r2, #4
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbf8:	e00a      	b.n	800bc10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	4908      	ldr	r1, [pc, #32]	@ (800bc20 <__NVIC_SetPriority+0x50>)
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	3b04      	subs	r3, #4
 800bc08:	0112      	lsls	r2, r2, #4
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	440b      	add	r3, r1
 800bc0e:	761a      	strb	r2, [r3, #24]
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	e000e100 	.word	0xe000e100
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <NVIC_EncodePriority>:
{
 800bc24:	b480      	push	{r7}
 800bc26:	b089      	sub	sp, #36	@ 0x24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f1c3 0307 	rsb	r3, r3, #7
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	bf28      	it	cs
 800bc42:	2304      	movcs	r3, #4
 800bc44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	3304      	adds	r3, #4
 800bc4a:	2b06      	cmp	r3, #6
 800bc4c:	d902      	bls.n	800bc54 <NVIC_EncodePriority+0x30>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	3b03      	subs	r3, #3
 800bc52:	e000      	b.n	800bc56 <NVIC_EncodePriority+0x32>
 800bc54:	2300      	movs	r3, #0
 800bc56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	43da      	mvns	r2, r3
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	401a      	ands	r2, r3
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc6c:	f04f 31ff 	mov.w	r1, #4294967295
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	fa01 f303 	lsl.w	r3, r1, r3
 800bc76:	43d9      	mvns	r1, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc7c:	4313      	orrs	r3, r2
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3724      	adds	r7, #36	@ 0x24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <SysTick_Config>:
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc9c:	d301      	bcc.n	800bca2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e00f      	b.n	800bcc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bca2:	4a0a      	ldr	r2, [pc, #40]	@ (800bccc <SysTick_Config+0x40>)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bcaa:	210f      	movs	r1, #15
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	f7ff ff8e 	bl	800bbd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bcb4:	4b05      	ldr	r3, [pc, #20]	@ (800bccc <SysTick_Config+0x40>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bcba:	4b04      	ldr	r3, [pc, #16]	@ (800bccc <SysTick_Config+0x40>)
 800bcbc:	2207      	movs	r2, #7
 800bcbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	e000e010 	.word	0xe000e010

0800bcd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff29 	bl	800bb30 <__NVIC_SetPriorityGrouping>
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b086      	sub	sp, #24
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	4603      	mov	r3, r0
 800bcee:	60b9      	str	r1, [r7, #8]
 800bcf0:	607a      	str	r2, [r7, #4]
 800bcf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bcf8:	f7ff ff3e 	bl	800bb78 <__NVIC_GetPriorityGrouping>
 800bcfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	6978      	ldr	r0, [r7, #20]
 800bd04:	f7ff ff8e 	bl	800bc24 <NVIC_EncodePriority>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff ff5d 	bl	800bbd0 <__NVIC_SetPriority>
}
 800bd16:	bf00      	nop
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	4603      	mov	r3, r0
 800bd26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff ff31 	bl	800bb94 <__NVIC_EnableIRQ>
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff ffa2 	bl	800bc8c <SysTick_Config>
 800bd48:	4603      	mov	r3, r0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bd60:	f7ff feda 	bl	800bb18 <HAL_GetTick>
 800bd64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d008      	beq.n	800bd84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2280      	movs	r2, #128	@ 0x80
 800bd76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e052      	b.n	800be2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f022 0216 	bic.w	r2, r2, #22
 800bd92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	695a      	ldr	r2, [r3, #20]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bda2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d103      	bne.n	800bdb4 <HAL_DMA_Abort+0x62>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0208 	bic.w	r2, r2, #8
 800bdc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0201 	bic.w	r2, r2, #1
 800bdd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bdd4:	e013      	b.n	800bdfe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bdd6:	f7ff fe9f 	bl	800bb18 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	2b05      	cmp	r3, #5
 800bde2:	d90c      	bls.n	800bdfe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2203      	movs	r2, #3
 800bdee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e015      	b.n	800be2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e4      	bne.n	800bdd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be10:	223f      	movs	r2, #63	@ 0x3f
 800be12:	409a      	lsls	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d004      	beq.n	800be50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2280      	movs	r2, #128	@ 0x80
 800be4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e00c      	b.n	800be6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2205      	movs	r2, #5
 800be54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f022 0201 	bic.w	r2, r2, #1
 800be66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	@ 0x24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800be82:	2300      	movs	r3, #0
 800be84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800be86:	2300      	movs	r3, #0
 800be88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800be8a:	2300      	movs	r3, #0
 800be8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be8e:	2300      	movs	r3, #0
 800be90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800be92:	2300      	movs	r3, #0
 800be94:	61fb      	str	r3, [r7, #28]
 800be96:	e175      	b.n	800c184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be98:	2201      	movs	r2, #1
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	4013      	ands	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	f040 8164 	bne.w	800c17e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d005      	beq.n	800bece <HAL_GPIO_Init+0x56>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	2b02      	cmp	r3, #2
 800becc:	d130      	bne.n	800bf30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	2203      	movs	r2, #3
 800beda:	fa02 f303 	lsl.w	r3, r2, r3
 800bede:	43db      	mvns	r3, r3
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	4013      	ands	r3, r2
 800bee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	68da      	ldr	r2, [r3, #12]
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	fa02 f303 	lsl.w	r3, r2, r3
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf04:	2201      	movs	r2, #1
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0c:	43db      	mvns	r3, r3
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	4013      	ands	r3, r2
 800bf12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	f003 0201 	and.w	r2, r3, #1
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	fa02 f303 	lsl.w	r3, r2, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f003 0303 	and.w	r3, r3, #3
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d017      	beq.n	800bf6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	2203      	movs	r2, #3
 800bf48:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4c:	43db      	mvns	r3, r3
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	4013      	ands	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d123      	bne.n	800bfc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	08da      	lsrs	r2, r3, #3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3208      	adds	r2, #8
 800bf80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	f003 0307 	and.w	r3, r3, #7
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	220f      	movs	r2, #15
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	43db      	mvns	r3, r3
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	08da      	lsrs	r2, r3, #3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3208      	adds	r2, #8
 800bfba:	69b9      	ldr	r1, [r7, #24]
 800bfbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	2203      	movs	r2, #3
 800bfcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd0:	43db      	mvns	r3, r3
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f003 0203 	and.w	r2, r3, #3
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80be 	beq.w	800c17e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c002:	4b66      	ldr	r3, [pc, #408]	@ (800c19c <HAL_GPIO_Init+0x324>)
 800c004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c006:	4a65      	ldr	r2, [pc, #404]	@ (800c19c <HAL_GPIO_Init+0x324>)
 800c008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c00c:	6453      	str	r3, [r2, #68]	@ 0x44
 800c00e:	4b63      	ldr	r3, [pc, #396]	@ (800c19c <HAL_GPIO_Init+0x324>)
 800c010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c01a:	4a61      	ldr	r2, [pc, #388]	@ (800c1a0 <HAL_GPIO_Init+0x328>)
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	089b      	lsrs	r3, r3, #2
 800c020:	3302      	adds	r3, #2
 800c022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f003 0303 	and.w	r3, r3, #3
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	220f      	movs	r2, #15
 800c032:	fa02 f303 	lsl.w	r3, r2, r3
 800c036:	43db      	mvns	r3, r3
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	4013      	ands	r3, r2
 800c03c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a58      	ldr	r2, [pc, #352]	@ (800c1a4 <HAL_GPIO_Init+0x32c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d037      	beq.n	800c0b6 <HAL_GPIO_Init+0x23e>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a57      	ldr	r2, [pc, #348]	@ (800c1a8 <HAL_GPIO_Init+0x330>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d031      	beq.n	800c0b2 <HAL_GPIO_Init+0x23a>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a56      	ldr	r2, [pc, #344]	@ (800c1ac <HAL_GPIO_Init+0x334>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d02b      	beq.n	800c0ae <HAL_GPIO_Init+0x236>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a55      	ldr	r2, [pc, #340]	@ (800c1b0 <HAL_GPIO_Init+0x338>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d025      	beq.n	800c0aa <HAL_GPIO_Init+0x232>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a54      	ldr	r2, [pc, #336]	@ (800c1b4 <HAL_GPIO_Init+0x33c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d01f      	beq.n	800c0a6 <HAL_GPIO_Init+0x22e>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a53      	ldr	r2, [pc, #332]	@ (800c1b8 <HAL_GPIO_Init+0x340>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d019      	beq.n	800c0a2 <HAL_GPIO_Init+0x22a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a52      	ldr	r2, [pc, #328]	@ (800c1bc <HAL_GPIO_Init+0x344>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d013      	beq.n	800c09e <HAL_GPIO_Init+0x226>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a51      	ldr	r2, [pc, #324]	@ (800c1c0 <HAL_GPIO_Init+0x348>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d00d      	beq.n	800c09a <HAL_GPIO_Init+0x222>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a50      	ldr	r2, [pc, #320]	@ (800c1c4 <HAL_GPIO_Init+0x34c>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d007      	beq.n	800c096 <HAL_GPIO_Init+0x21e>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a4f      	ldr	r2, [pc, #316]	@ (800c1c8 <HAL_GPIO_Init+0x350>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d101      	bne.n	800c092 <HAL_GPIO_Init+0x21a>
 800c08e:	2309      	movs	r3, #9
 800c090:	e012      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c092:	230a      	movs	r3, #10
 800c094:	e010      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c096:	2308      	movs	r3, #8
 800c098:	e00e      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c09a:	2307      	movs	r3, #7
 800c09c:	e00c      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c09e:	2306      	movs	r3, #6
 800c0a0:	e00a      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0a2:	2305      	movs	r3, #5
 800c0a4:	e008      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	e006      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	e004      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e002      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <HAL_GPIO_Init+0x240>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	69fa      	ldr	r2, [r7, #28]
 800c0ba:	f002 0203 	and.w	r2, r2, #3
 800c0be:	0092      	lsls	r2, r2, #2
 800c0c0:	4093      	lsls	r3, r2
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c0c8:	4935      	ldr	r1, [pc, #212]	@ (800c1a0 <HAL_GPIO_Init+0x328>)
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	089b      	lsrs	r3, r3, #2
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c0d6:	4b3d      	ldr	r3, [pc, #244]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	43db      	mvns	r3, r3
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0fa:	4a34      	ldr	r2, [pc, #208]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c100:	4b32      	ldr	r3, [pc, #200]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	43db      	mvns	r3, r3
 800c10a:	69ba      	ldr	r2, [r7, #24]
 800c10c:	4013      	ands	r3, r2
 800c10e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4313      	orrs	r3, r2
 800c122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c124:	4a29      	ldr	r2, [pc, #164]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c12a:	4b28      	ldr	r3, [pc, #160]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	43db      	mvns	r3, r3
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	4013      	ands	r3, r2
 800c138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d003      	beq.n	800c14e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c14e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c154:	4b1d      	ldr	r3, [pc, #116]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	43db      	mvns	r3, r3
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	4013      	ands	r3, r2
 800c162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4313      	orrs	r3, r2
 800c176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c178:	4a14      	ldr	r2, [pc, #80]	@ (800c1cc <HAL_GPIO_Init+0x354>)
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	3301      	adds	r3, #1
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b0f      	cmp	r3, #15
 800c188:	f67f ae86 	bls.w	800be98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	3724      	adds	r7, #36	@ 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	40023800 	.word	0x40023800
 800c1a0:	40013800 	.word	0x40013800
 800c1a4:	40020000 	.word	0x40020000
 800c1a8:	40020400 	.word	0x40020400
 800c1ac:	40020800 	.word	0x40020800
 800c1b0:	40020c00 	.word	0x40020c00
 800c1b4:	40021000 	.word	0x40021000
 800c1b8:	40021400 	.word	0x40021400
 800c1bc:	40021800 	.word	0x40021800
 800c1c0:	40021c00 	.word	0x40021c00
 800c1c4:	40022000 	.word	0x40022000
 800c1c8:	40022400 	.word	0x40022400
 800c1cc:	40013c00 	.word	0x40013c00

0800c1d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1d4:	b090      	sub	sp, #64	@ 0x40
 800c1d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1dc:	2300      	movs	r3, #0
 800c1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1e8:	4b59      	ldr	r3, [pc, #356]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f003 030c 	and.w	r3, r3, #12
 800c1f0:	2b08      	cmp	r3, #8
 800c1f2:	d00d      	beq.n	800c210 <HAL_RCC_GetSysClockFreq+0x40>
 800c1f4:	2b08      	cmp	r3, #8
 800c1f6:	f200 80a1 	bhi.w	800c33c <HAL_RCC_GetSysClockFreq+0x16c>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <HAL_RCC_GetSysClockFreq+0x34>
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d003      	beq.n	800c20a <HAL_RCC_GetSysClockFreq+0x3a>
 800c202:	e09b      	b.n	800c33c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c204:	4b53      	ldr	r3, [pc, #332]	@ (800c354 <HAL_RCC_GetSysClockFreq+0x184>)
 800c206:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c208:	e09b      	b.n	800c342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c20a:	4b53      	ldr	r3, [pc, #332]	@ (800c358 <HAL_RCC_GetSysClockFreq+0x188>)
 800c20c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c20e:	e098      	b.n	800c342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c210:	4b4f      	ldr	r3, [pc, #316]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c218:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c21a:	4b4d      	ldr	r3, [pc, #308]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d028      	beq.n	800c278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c226:	4b4a      	ldr	r3, [pc, #296]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	099b      	lsrs	r3, r3, #6
 800c22c:	2200      	movs	r2, #0
 800c22e:	623b      	str	r3, [r7, #32]
 800c230:	627a      	str	r2, [r7, #36]	@ 0x24
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c238:	2100      	movs	r1, #0
 800c23a:	4b47      	ldr	r3, [pc, #284]	@ (800c358 <HAL_RCC_GetSysClockFreq+0x188>)
 800c23c:	fb03 f201 	mul.w	r2, r3, r1
 800c240:	2300      	movs	r3, #0
 800c242:	fb00 f303 	mul.w	r3, r0, r3
 800c246:	4413      	add	r3, r2
 800c248:	4a43      	ldr	r2, [pc, #268]	@ (800c358 <HAL_RCC_GetSysClockFreq+0x188>)
 800c24a:	fba0 1202 	umull	r1, r2, r0, r2
 800c24e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c250:	460a      	mov	r2, r1
 800c252:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c256:	4413      	add	r3, r2
 800c258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25c:	2200      	movs	r2, #0
 800c25e:	61bb      	str	r3, [r7, #24]
 800c260:	61fa      	str	r2, [r7, #28]
 800c262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c26a:	f7f4 fb6b 	bl	8000944 <__aeabi_uldivmod>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4613      	mov	r3, r2
 800c274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c276:	e053      	b.n	800c320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c278:	4b35      	ldr	r3, [pc, #212]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	099b      	lsrs	r3, r3, #6
 800c27e:	2200      	movs	r2, #0
 800c280:	613b      	str	r3, [r7, #16]
 800c282:	617a      	str	r2, [r7, #20]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c28a:	f04f 0b00 	mov.w	fp, #0
 800c28e:	4652      	mov	r2, sl
 800c290:	465b      	mov	r3, fp
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f04f 0100 	mov.w	r1, #0
 800c29a:	0159      	lsls	r1, r3, #5
 800c29c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c2a0:	0150      	lsls	r0, r2, #5
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	ebb2 080a 	subs.w	r8, r2, sl
 800c2aa:	eb63 090b 	sbc.w	r9, r3, fp
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c2ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c2be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c2c2:	ebb2 0408 	subs.w	r4, r2, r8
 800c2c6:	eb63 0509 	sbc.w	r5, r3, r9
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	f04f 0300 	mov.w	r3, #0
 800c2d2:	00eb      	lsls	r3, r5, #3
 800c2d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2d8:	00e2      	lsls	r2, r4, #3
 800c2da:	4614      	mov	r4, r2
 800c2dc:	461d      	mov	r5, r3
 800c2de:	eb14 030a 	adds.w	r3, r4, sl
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	eb45 030b 	adc.w	r3, r5, fp
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	f04f 0200 	mov.w	r2, #0
 800c2ee:	f04f 0300 	mov.w	r3, #0
 800c2f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	028b      	lsls	r3, r1, #10
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c300:	4621      	mov	r1, r4
 800c302:	028a      	lsls	r2, r1, #10
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30a:	2200      	movs	r2, #0
 800c30c:	60bb      	str	r3, [r7, #8]
 800c30e:	60fa      	str	r2, [r7, #12]
 800c310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c314:	f7f4 fb16 	bl	8000944 <__aeabi_uldivmod>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4613      	mov	r3, r2
 800c31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c320:	4b0b      	ldr	r3, [pc, #44]	@ (800c350 <HAL_RCC_GetSysClockFreq+0x180>)
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	0c1b      	lsrs	r3, r3, #16
 800c326:	f003 0303 	and.w	r3, r3, #3
 800c32a:	3301      	adds	r3, #1
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c334:	fbb2 f3f3 	udiv	r3, r2, r3
 800c338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c33a:	e002      	b.n	800c342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c33c:	4b05      	ldr	r3, [pc, #20]	@ (800c354 <HAL_RCC_GetSysClockFreq+0x184>)
 800c33e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c340:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c344:	4618      	mov	r0, r3
 800c346:	3740      	adds	r7, #64	@ 0x40
 800c348:	46bd      	mov	sp, r7
 800c34a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c34e:	bf00      	nop
 800c350:	40023800 	.word	0x40023800
 800c354:	00f42400 	.word	0x00f42400
 800c358:	017d7840 	.word	0x017d7840

0800c35c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c360:	4b03      	ldr	r3, [pc, #12]	@ (800c370 <HAL_RCC_GetHCLKFreq+0x14>)
 800c362:	681b      	ldr	r3, [r3, #0]
}
 800c364:	4618      	mov	r0, r3
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20000000 	.word	0x20000000

0800c374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c378:	f7ff fff0 	bl	800c35c <HAL_RCC_GetHCLKFreq>
 800c37c:	4602      	mov	r2, r0
 800c37e:	4b05      	ldr	r3, [pc, #20]	@ (800c394 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	0a9b      	lsrs	r3, r3, #10
 800c384:	f003 0307 	and.w	r3, r3, #7
 800c388:	4903      	ldr	r1, [pc, #12]	@ (800c398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c38a:	5ccb      	ldrb	r3, [r1, r3]
 800c38c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	bd80      	pop	{r7, pc}
 800c394:	40023800 	.word	0x40023800
 800c398:	080141b0 	.word	0x080141b0

0800c39c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c3a0:	f7ff ffdc 	bl	800c35c <HAL_RCC_GetHCLKFreq>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	4b05      	ldr	r3, [pc, #20]	@ (800c3bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	0b5b      	lsrs	r3, r3, #13
 800c3ac:	f003 0307 	and.w	r3, r3, #7
 800c3b0:	4903      	ldr	r1, [pc, #12]	@ (800c3c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3b2:	5ccb      	ldrb	r3, [r1, r3]
 800c3b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	40023800 	.word	0x40023800
 800c3c0:	080141b0 	.word	0x080141b0

0800c3c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e040      	b.n	800c458 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d106      	bne.n	800c3ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7f6 fd84 	bl	8002ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2224      	movs	r2, #36	@ 0x24
 800c3f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0201 	bic.w	r2, r2, #1
 800c400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fd9e 	bl	800cf4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fb37 	bl	800ca84 <UART_SetConfig>
 800c416:	4603      	mov	r3, r0
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d101      	bne.n	800c420 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e01b      	b.n	800c458 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c42e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689a      	ldr	r2, [r3, #8]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c43e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0201 	orr.w	r2, r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fe1d 	bl	800d090 <UART_CheckIdleState>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b0ba      	sub	sp, #232	@ 0xe8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c48a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c48e:	4013      	ands	r3, r2
 800c490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d115      	bne.n	800c4c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a0:	f003 0320 	and.w	r3, r3, #32
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00f      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ac:	f003 0320 	and.w	r3, r3, #32
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d009      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 82ac 	beq.w	800ca16 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	4798      	blx	r3
      }
      return;
 800c4c6:	e2a6      	b.n	800ca16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c4c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8117 	beq.w	800c700 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c4de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c4e2:	4b85      	ldr	r3, [pc, #532]	@ (800c6f8 <HAL_UART_IRQHandler+0x298>)
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 810a 	beq.w	800c700 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d011      	beq.n	800c51c <HAL_UART_IRQHandler+0xbc>
 800c4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2201      	movs	r2, #1
 800c50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c512:	f043 0201 	orr.w	r2, r3, #1
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d011      	beq.n	800c54c <HAL_UART_IRQHandler+0xec>
 800c528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00b      	beq.n	800c54c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2202      	movs	r2, #2
 800c53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c542:	f043 0204 	orr.w	r2, r3, #4
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c550:	f003 0304 	and.w	r3, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	d011      	beq.n	800c57c <HAL_UART_IRQHandler+0x11c>
 800c558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2204      	movs	r2, #4
 800c56a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c572:	f043 0202 	orr.w	r2, r3, #2
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c580:	f003 0308 	and.w	r3, r3, #8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d017      	beq.n	800c5b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c598:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2208      	movs	r2, #8
 800c5a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5ae:	f043 0208 	orr.w	r2, r3, #8
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d012      	beq.n	800c5ea <HAL_UART_IRQHandler+0x18a>
 800c5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00c      	beq.n	800c5ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5e0:	f043 0220 	orr.w	r2, r3, #32
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 8212 	beq.w	800ca1a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00d      	beq.n	800c61e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c606:	f003 0320 	and.w	r3, r3, #32
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d007      	beq.n	800c61e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c632:	2b40      	cmp	r3, #64	@ 0x40
 800c634:	d005      	beq.n	800c642 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c63a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d04f      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fe39 	bl	800d2ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c652:	2b40      	cmp	r3, #64	@ 0x40
 800c654:	d141      	bne.n	800c6da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3308      	adds	r3, #8
 800c65c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c664:	e853 3f00 	ldrex	r3, [r3]
 800c668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c66c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3308      	adds	r3, #8
 800c67e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c68e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c692:	e841 2300 	strex	r3, r2, [r1]
 800c696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1d9      	bne.n	800c656 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d013      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ae:	4a13      	ldr	r2, [pc, #76]	@ (800c6fc <HAL_UART_IRQHandler+0x29c>)
 800c6b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fbbb 	bl	800be32 <HAL_DMA_Abort_IT>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d017      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d0:	e00f      	b.n	800c6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9b6 	bl	800ca44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d8:	e00b      	b.n	800c6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f9b2 	bl	800ca44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e0:	e007      	b.n	800c6f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f9ae 	bl	800ca44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c6f0:	e193      	b.n	800ca1a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6f2:	bf00      	nop
    return;
 800c6f4:	e191      	b.n	800ca1a <HAL_UART_IRQHandler+0x5ba>
 800c6f6:	bf00      	nop
 800c6f8:	04000120 	.word	0x04000120
 800c6fc:	0800d383 	.word	0x0800d383

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c704:	2b01      	cmp	r3, #1
 800c706:	f040 814c 	bne.w	800c9a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c70e:	f003 0310 	and.w	r3, r3, #16
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8145 	beq.w	800c9a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 813e 	beq.w	800c9a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2210      	movs	r2, #16
 800c72c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c738:	2b40      	cmp	r3, #64	@ 0x40
 800c73a:	f040 80b6 	bne.w	800c8aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c74a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 8165 	beq.w	800ca1e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c75a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c75e:	429a      	cmp	r2, r3
 800c760:	f080 815d 	bcs.w	800ca1e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c76a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c778:	f000 8086 	beq.w	800c888 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c788:	e853 3f00 	ldrex	r3, [r3]
 800c78c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c7a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c7aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1da      	bne.n	800c77c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	3308      	adds	r3, #8
 800c7cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7d0:	e853 3f00 	ldrex	r3, [r3]
 800c7d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7d8:	f023 0301 	bic.w	r3, r3, #1
 800c7dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7f6:	e841 2300 	strex	r3, r2, [r1]
 800c7fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1e1      	bne.n	800c7c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c80c:	e853 3f00 	ldrex	r3, [r3]
 800c810:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c828:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c82c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c82e:	e841 2300 	strex	r3, r2, [r1]
 800c832:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e3      	bne.n	800c802 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2220      	movs	r2, #32
 800c83e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c858:	f023 0310 	bic.w	r3, r3, #16
 800c85c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	461a      	mov	r2, r3
 800c866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c86a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c86c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e4      	bne.n	800c848 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fa65 	bl	800bd52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2202      	movs	r2, #2
 800c88c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f8d8 	bl	800ca58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8a8:	e0b9      	b.n	800ca1e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80ab 	beq.w	800ca22 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800c8cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80a6 	beq.w	800ca22 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c8f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c900:	e841 2300 	strex	r3, r2, [r1]
 800c904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e4      	bne.n	800c8d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c916:	e853 3f00 	ldrex	r3, [r3]
 800c91a:	623b      	str	r3, [r7, #32]
   return(result);
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	f023 0301 	bic.w	r3, r3, #1
 800c922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c930:	633a      	str	r2, [r7, #48]	@ 0x30
 800c932:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c938:	e841 2300 	strex	r3, r2, [r1]
 800c93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1e3      	bne.n	800c90c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2220      	movs	r2, #32
 800c948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	60fb      	str	r3, [r7, #12]
   return(result);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f023 0310 	bic.w	r3, r3, #16
 800c96c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	461a      	mov	r2, r3
 800c976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c97a:	61fb      	str	r3, [r7, #28]
 800c97c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	69b9      	ldr	r1, [r7, #24]
 800c980:	69fa      	ldr	r2, [r7, #28]
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	617b      	str	r3, [r7, #20]
   return(result);
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e4      	bne.n	800c958 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2202      	movs	r2, #2
 800c992:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f85c 	bl	800ca58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9a0:	e03f      	b.n	800ca22 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00e      	beq.n	800c9cc <HAL_UART_IRQHandler+0x56c>
 800c9ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c9c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f853 	bl	800ca70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9ca:	e02d      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00e      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d01c      	beq.n	800ca26 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	4798      	blx	r3
    }
    return;
 800c9f4:	e017      	b.n	800ca26 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d012      	beq.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
 800ca02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00c      	beq.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fccd 	bl	800d3ae <UART_EndTransmit_IT>
    return;
 800ca14:	e008      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ca16:	bf00      	nop
 800ca18:	e006      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ca1a:	bf00      	nop
 800ca1c:	e004      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ca1e:	bf00      	nop
 800ca20:	e002      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ca22:	bf00      	nop
 800ca24:	e000      	b.n	800ca28 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ca26:	bf00      	nop
  }

}
 800ca28:	37e8      	adds	r7, #232	@ 0xe8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop

0800ca30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	460b      	mov	r3, r1
 800ca62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689a      	ldr	r2, [r3, #8]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	431a      	orrs	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	431a      	orrs	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4ba6      	ldr	r3, [pc, #664]	@ (800cd48 <UART_SetConfig+0x2c4>)
 800cab0:	4013      	ands	r3, r2
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	6979      	ldr	r1, [r7, #20]
 800cab8:	430b      	orrs	r3, r1
 800caba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	4313      	orrs	r3, r2
 800cae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a94      	ldr	r2, [pc, #592]	@ (800cd4c <UART_SetConfig+0x2c8>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d120      	bne.n	800cb42 <UART_SetConfig+0xbe>
 800cb00:	4b93      	ldr	r3, [pc, #588]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d816      	bhi.n	800cb3c <UART_SetConfig+0xb8>
 800cb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb14 <UART_SetConfig+0x90>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cb25 	.word	0x0800cb25
 800cb18:	0800cb31 	.word	0x0800cb31
 800cb1c:	0800cb2b 	.word	0x0800cb2b
 800cb20:	0800cb37 	.word	0x0800cb37
 800cb24:	2301      	movs	r3, #1
 800cb26:	77fb      	strb	r3, [r7, #31]
 800cb28:	e150      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	77fb      	strb	r3, [r7, #31]
 800cb2e:	e14d      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb30:	2304      	movs	r3, #4
 800cb32:	77fb      	strb	r3, [r7, #31]
 800cb34:	e14a      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb36:	2308      	movs	r3, #8
 800cb38:	77fb      	strb	r3, [r7, #31]
 800cb3a:	e147      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb3c:	2310      	movs	r3, #16
 800cb3e:	77fb      	strb	r3, [r7, #31]
 800cb40:	e144      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a83      	ldr	r2, [pc, #524]	@ (800cd54 <UART_SetConfig+0x2d0>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d132      	bne.n	800cbb2 <UART_SetConfig+0x12e>
 800cb4c:	4b80      	ldr	r3, [pc, #512]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb52:	f003 030c 	and.w	r3, r3, #12
 800cb56:	2b0c      	cmp	r3, #12
 800cb58:	d828      	bhi.n	800cbac <UART_SetConfig+0x128>
 800cb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb60 <UART_SetConfig+0xdc>)
 800cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb60:	0800cb95 	.word	0x0800cb95
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cba1 	.word	0x0800cba1
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cbad 	.word	0x0800cbad
 800cb7c:	0800cbad 	.word	0x0800cbad
 800cb80:	0800cb9b 	.word	0x0800cb9b
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cbad 	.word	0x0800cbad
 800cb8c:	0800cbad 	.word	0x0800cbad
 800cb90:	0800cba7 	.word	0x0800cba7
 800cb94:	2300      	movs	r3, #0
 800cb96:	77fb      	strb	r3, [r7, #31]
 800cb98:	e118      	b.n	800cdcc <UART_SetConfig+0x348>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	77fb      	strb	r3, [r7, #31]
 800cb9e:	e115      	b.n	800cdcc <UART_SetConfig+0x348>
 800cba0:	2304      	movs	r3, #4
 800cba2:	77fb      	strb	r3, [r7, #31]
 800cba4:	e112      	b.n	800cdcc <UART_SetConfig+0x348>
 800cba6:	2308      	movs	r3, #8
 800cba8:	77fb      	strb	r3, [r7, #31]
 800cbaa:	e10f      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbac:	2310      	movs	r3, #16
 800cbae:	77fb      	strb	r3, [r7, #31]
 800cbb0:	e10c      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a68      	ldr	r2, [pc, #416]	@ (800cd58 <UART_SetConfig+0x2d4>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d120      	bne.n	800cbfe <UART_SetConfig+0x17a>
 800cbbc:	4b64      	ldr	r3, [pc, #400]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cbc6:	2b30      	cmp	r3, #48	@ 0x30
 800cbc8:	d013      	beq.n	800cbf2 <UART_SetConfig+0x16e>
 800cbca:	2b30      	cmp	r3, #48	@ 0x30
 800cbcc:	d814      	bhi.n	800cbf8 <UART_SetConfig+0x174>
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d009      	beq.n	800cbe6 <UART_SetConfig+0x162>
 800cbd2:	2b20      	cmp	r3, #32
 800cbd4:	d810      	bhi.n	800cbf8 <UART_SetConfig+0x174>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <UART_SetConfig+0x15c>
 800cbda:	2b10      	cmp	r3, #16
 800cbdc:	d006      	beq.n	800cbec <UART_SetConfig+0x168>
 800cbde:	e00b      	b.n	800cbf8 <UART_SetConfig+0x174>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	77fb      	strb	r3, [r7, #31]
 800cbe4:	e0f2      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	77fb      	strb	r3, [r7, #31]
 800cbea:	e0ef      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbec:	2304      	movs	r3, #4
 800cbee:	77fb      	strb	r3, [r7, #31]
 800cbf0:	e0ec      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbf2:	2308      	movs	r3, #8
 800cbf4:	77fb      	strb	r3, [r7, #31]
 800cbf6:	e0e9      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbf8:	2310      	movs	r3, #16
 800cbfa:	77fb      	strb	r3, [r7, #31]
 800cbfc:	e0e6      	b.n	800cdcc <UART_SetConfig+0x348>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a56      	ldr	r2, [pc, #344]	@ (800cd5c <UART_SetConfig+0x2d8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d120      	bne.n	800cc4a <UART_SetConfig+0x1c6>
 800cc08:	4b51      	ldr	r3, [pc, #324]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc12:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc14:	d013      	beq.n	800cc3e <UART_SetConfig+0x1ba>
 800cc16:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc18:	d814      	bhi.n	800cc44 <UART_SetConfig+0x1c0>
 800cc1a:	2b80      	cmp	r3, #128	@ 0x80
 800cc1c:	d009      	beq.n	800cc32 <UART_SetConfig+0x1ae>
 800cc1e:	2b80      	cmp	r3, #128	@ 0x80
 800cc20:	d810      	bhi.n	800cc44 <UART_SetConfig+0x1c0>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <UART_SetConfig+0x1a8>
 800cc26:	2b40      	cmp	r3, #64	@ 0x40
 800cc28:	d006      	beq.n	800cc38 <UART_SetConfig+0x1b4>
 800cc2a:	e00b      	b.n	800cc44 <UART_SetConfig+0x1c0>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	77fb      	strb	r3, [r7, #31]
 800cc30:	e0cc      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc32:	2302      	movs	r3, #2
 800cc34:	77fb      	strb	r3, [r7, #31]
 800cc36:	e0c9      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc38:	2304      	movs	r3, #4
 800cc3a:	77fb      	strb	r3, [r7, #31]
 800cc3c:	e0c6      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc3e:	2308      	movs	r3, #8
 800cc40:	77fb      	strb	r3, [r7, #31]
 800cc42:	e0c3      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc44:	2310      	movs	r3, #16
 800cc46:	77fb      	strb	r3, [r7, #31]
 800cc48:	e0c0      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a44      	ldr	r2, [pc, #272]	@ (800cd60 <UART_SetConfig+0x2dc>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d125      	bne.n	800cca0 <UART_SetConfig+0x21c>
 800cc54:	4b3e      	ldr	r3, [pc, #248]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc62:	d017      	beq.n	800cc94 <UART_SetConfig+0x210>
 800cc64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc68:	d817      	bhi.n	800cc9a <UART_SetConfig+0x216>
 800cc6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6e:	d00b      	beq.n	800cc88 <UART_SetConfig+0x204>
 800cc70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc74:	d811      	bhi.n	800cc9a <UART_SetConfig+0x216>
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <UART_SetConfig+0x1fe>
 800cc7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc7e:	d006      	beq.n	800cc8e <UART_SetConfig+0x20a>
 800cc80:	e00b      	b.n	800cc9a <UART_SetConfig+0x216>
 800cc82:	2300      	movs	r3, #0
 800cc84:	77fb      	strb	r3, [r7, #31]
 800cc86:	e0a1      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc88:	2302      	movs	r3, #2
 800cc8a:	77fb      	strb	r3, [r7, #31]
 800cc8c:	e09e      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc8e:	2304      	movs	r3, #4
 800cc90:	77fb      	strb	r3, [r7, #31]
 800cc92:	e09b      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc94:	2308      	movs	r3, #8
 800cc96:	77fb      	strb	r3, [r7, #31]
 800cc98:	e098      	b.n	800cdcc <UART_SetConfig+0x348>
 800cc9a:	2310      	movs	r3, #16
 800cc9c:	77fb      	strb	r3, [r7, #31]
 800cc9e:	e095      	b.n	800cdcc <UART_SetConfig+0x348>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a2f      	ldr	r2, [pc, #188]	@ (800cd64 <UART_SetConfig+0x2e0>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d125      	bne.n	800ccf6 <UART_SetConfig+0x272>
 800ccaa:	4b29      	ldr	r3, [pc, #164]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800ccac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ccb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccb8:	d017      	beq.n	800ccea <UART_SetConfig+0x266>
 800ccba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccbe:	d817      	bhi.n	800ccf0 <UART_SetConfig+0x26c>
 800ccc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccc4:	d00b      	beq.n	800ccde <UART_SetConfig+0x25a>
 800ccc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccca:	d811      	bhi.n	800ccf0 <UART_SetConfig+0x26c>
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d003      	beq.n	800ccd8 <UART_SetConfig+0x254>
 800ccd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccd4:	d006      	beq.n	800cce4 <UART_SetConfig+0x260>
 800ccd6:	e00b      	b.n	800ccf0 <UART_SetConfig+0x26c>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	77fb      	strb	r3, [r7, #31]
 800ccdc:	e076      	b.n	800cdcc <UART_SetConfig+0x348>
 800ccde:	2302      	movs	r3, #2
 800cce0:	77fb      	strb	r3, [r7, #31]
 800cce2:	e073      	b.n	800cdcc <UART_SetConfig+0x348>
 800cce4:	2304      	movs	r3, #4
 800cce6:	77fb      	strb	r3, [r7, #31]
 800cce8:	e070      	b.n	800cdcc <UART_SetConfig+0x348>
 800ccea:	2308      	movs	r3, #8
 800ccec:	77fb      	strb	r3, [r7, #31]
 800ccee:	e06d      	b.n	800cdcc <UART_SetConfig+0x348>
 800ccf0:	2310      	movs	r3, #16
 800ccf2:	77fb      	strb	r3, [r7, #31]
 800ccf4:	e06a      	b.n	800cdcc <UART_SetConfig+0x348>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a1b      	ldr	r2, [pc, #108]	@ (800cd68 <UART_SetConfig+0x2e4>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d138      	bne.n	800cd72 <UART_SetConfig+0x2ee>
 800cd00:	4b13      	ldr	r3, [pc, #76]	@ (800cd50 <UART_SetConfig+0x2cc>)
 800cd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cd0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd0e:	d017      	beq.n	800cd40 <UART_SetConfig+0x2bc>
 800cd10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd14:	d82a      	bhi.n	800cd6c <UART_SetConfig+0x2e8>
 800cd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd1a:	d00b      	beq.n	800cd34 <UART_SetConfig+0x2b0>
 800cd1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd20:	d824      	bhi.n	800cd6c <UART_SetConfig+0x2e8>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <UART_SetConfig+0x2aa>
 800cd26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd2a:	d006      	beq.n	800cd3a <UART_SetConfig+0x2b6>
 800cd2c:	e01e      	b.n	800cd6c <UART_SetConfig+0x2e8>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	77fb      	strb	r3, [r7, #31]
 800cd32:	e04b      	b.n	800cdcc <UART_SetConfig+0x348>
 800cd34:	2302      	movs	r3, #2
 800cd36:	77fb      	strb	r3, [r7, #31]
 800cd38:	e048      	b.n	800cdcc <UART_SetConfig+0x348>
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	77fb      	strb	r3, [r7, #31]
 800cd3e:	e045      	b.n	800cdcc <UART_SetConfig+0x348>
 800cd40:	2308      	movs	r3, #8
 800cd42:	77fb      	strb	r3, [r7, #31]
 800cd44:	e042      	b.n	800cdcc <UART_SetConfig+0x348>
 800cd46:	bf00      	nop
 800cd48:	efff69f3 	.word	0xefff69f3
 800cd4c:	40011000 	.word	0x40011000
 800cd50:	40023800 	.word	0x40023800
 800cd54:	40004400 	.word	0x40004400
 800cd58:	40004800 	.word	0x40004800
 800cd5c:	40004c00 	.word	0x40004c00
 800cd60:	40005000 	.word	0x40005000
 800cd64:	40011400 	.word	0x40011400
 800cd68:	40007800 	.word	0x40007800
 800cd6c:	2310      	movs	r3, #16
 800cd6e:	77fb      	strb	r3, [r7, #31]
 800cd70:	e02c      	b.n	800cdcc <UART_SetConfig+0x348>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a72      	ldr	r2, [pc, #456]	@ (800cf40 <UART_SetConfig+0x4bc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d125      	bne.n	800cdc8 <UART_SetConfig+0x344>
 800cd7c:	4b71      	ldr	r3, [pc, #452]	@ (800cf44 <UART_SetConfig+0x4c0>)
 800cd7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cd86:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cd8a:	d017      	beq.n	800cdbc <UART_SetConfig+0x338>
 800cd8c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cd90:	d817      	bhi.n	800cdc2 <UART_SetConfig+0x33e>
 800cd92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd96:	d00b      	beq.n	800cdb0 <UART_SetConfig+0x32c>
 800cd98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd9c:	d811      	bhi.n	800cdc2 <UART_SetConfig+0x33e>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <UART_SetConfig+0x326>
 800cda2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cda6:	d006      	beq.n	800cdb6 <UART_SetConfig+0x332>
 800cda8:	e00b      	b.n	800cdc2 <UART_SetConfig+0x33e>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	77fb      	strb	r3, [r7, #31]
 800cdae:	e00d      	b.n	800cdcc <UART_SetConfig+0x348>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	77fb      	strb	r3, [r7, #31]
 800cdb4:	e00a      	b.n	800cdcc <UART_SetConfig+0x348>
 800cdb6:	2304      	movs	r3, #4
 800cdb8:	77fb      	strb	r3, [r7, #31]
 800cdba:	e007      	b.n	800cdcc <UART_SetConfig+0x348>
 800cdbc:	2308      	movs	r3, #8
 800cdbe:	77fb      	strb	r3, [r7, #31]
 800cdc0:	e004      	b.n	800cdcc <UART_SetConfig+0x348>
 800cdc2:	2310      	movs	r3, #16
 800cdc4:	77fb      	strb	r3, [r7, #31]
 800cdc6:	e001      	b.n	800cdcc <UART_SetConfig+0x348>
 800cdc8:	2310      	movs	r3, #16
 800cdca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	69db      	ldr	r3, [r3, #28]
 800cdd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdd4:	d15b      	bne.n	800ce8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cdd6:	7ffb      	ldrb	r3, [r7, #31]
 800cdd8:	2b08      	cmp	r3, #8
 800cdda:	d828      	bhi.n	800ce2e <UART_SetConfig+0x3aa>
 800cddc:	a201      	add	r2, pc, #4	@ (adr r2, 800cde4 <UART_SetConfig+0x360>)
 800cdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde2:	bf00      	nop
 800cde4:	0800ce09 	.word	0x0800ce09
 800cde8:	0800ce11 	.word	0x0800ce11
 800cdec:	0800ce19 	.word	0x0800ce19
 800cdf0:	0800ce2f 	.word	0x0800ce2f
 800cdf4:	0800ce1f 	.word	0x0800ce1f
 800cdf8:	0800ce2f 	.word	0x0800ce2f
 800cdfc:	0800ce2f 	.word	0x0800ce2f
 800ce00:	0800ce2f 	.word	0x0800ce2f
 800ce04:	0800ce27 	.word	0x0800ce27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce08:	f7ff fab4 	bl	800c374 <HAL_RCC_GetPCLK1Freq>
 800ce0c:	61b8      	str	r0, [r7, #24]
        break;
 800ce0e:	e013      	b.n	800ce38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce10:	f7ff fac4 	bl	800c39c <HAL_RCC_GetPCLK2Freq>
 800ce14:	61b8      	str	r0, [r7, #24]
        break;
 800ce16:	e00f      	b.n	800ce38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce18:	4b4b      	ldr	r3, [pc, #300]	@ (800cf48 <UART_SetConfig+0x4c4>)
 800ce1a:	61bb      	str	r3, [r7, #24]
        break;
 800ce1c:	e00c      	b.n	800ce38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce1e:	f7ff f9d7 	bl	800c1d0 <HAL_RCC_GetSysClockFreq>
 800ce22:	61b8      	str	r0, [r7, #24]
        break;
 800ce24:	e008      	b.n	800ce38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce2a:	61bb      	str	r3, [r7, #24]
        break;
 800ce2c:	e004      	b.n	800ce38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	77bb      	strb	r3, [r7, #30]
        break;
 800ce36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d074      	beq.n	800cf28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	005a      	lsls	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	085b      	lsrs	r3, r3, #1
 800ce48:	441a      	add	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	d916      	bls.n	800ce88 <UART_SetConfig+0x404>
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce60:	d212      	bcs.n	800ce88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f023 030f 	bic.w	r3, r3, #15
 800ce6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	085b      	lsrs	r3, r3, #1
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	89fb      	ldrh	r3, [r7, #14]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	89fa      	ldrh	r2, [r7, #14]
 800ce84:	60da      	str	r2, [r3, #12]
 800ce86:	e04f      	b.n	800cf28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	77bb      	strb	r3, [r7, #30]
 800ce8c:	e04c      	b.n	800cf28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce8e:	7ffb      	ldrb	r3, [r7, #31]
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d828      	bhi.n	800cee6 <UART_SetConfig+0x462>
 800ce94:	a201      	add	r2, pc, #4	@ (adr r2, 800ce9c <UART_SetConfig+0x418>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec9 	.word	0x0800cec9
 800cea4:	0800ced1 	.word	0x0800ced1
 800cea8:	0800cee7 	.word	0x0800cee7
 800ceac:	0800ced7 	.word	0x0800ced7
 800ceb0:	0800cee7 	.word	0x0800cee7
 800ceb4:	0800cee7 	.word	0x0800cee7
 800ceb8:	0800cee7 	.word	0x0800cee7
 800cebc:	0800cedf 	.word	0x0800cedf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cec0:	f7ff fa58 	bl	800c374 <HAL_RCC_GetPCLK1Freq>
 800cec4:	61b8      	str	r0, [r7, #24]
        break;
 800cec6:	e013      	b.n	800cef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cec8:	f7ff fa68 	bl	800c39c <HAL_RCC_GetPCLK2Freq>
 800cecc:	61b8      	str	r0, [r7, #24]
        break;
 800cece:	e00f      	b.n	800cef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ced0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf48 <UART_SetConfig+0x4c4>)
 800ced2:	61bb      	str	r3, [r7, #24]
        break;
 800ced4:	e00c      	b.n	800cef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ced6:	f7ff f97b 	bl	800c1d0 <HAL_RCC_GetSysClockFreq>
 800ceda:	61b8      	str	r0, [r7, #24]
        break;
 800cedc:	e008      	b.n	800cef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cee2:	61bb      	str	r3, [r7, #24]
        break;
 800cee4:	e004      	b.n	800cef0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	77bb      	strb	r3, [r7, #30]
        break;
 800ceee:	bf00      	nop
    }

    if (pclk != 0U)
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d018      	beq.n	800cf28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	085a      	lsrs	r2, r3, #1
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	441a      	add	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2b0f      	cmp	r3, #15
 800cf0e:	d909      	bls.n	800cf24 <UART_SetConfig+0x4a0>
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf16:	d205      	bcs.n	800cf24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60da      	str	r2, [r3, #12]
 800cf22:	e001      	b.n	800cf28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cf34:	7fbb      	ldrb	r3, [r7, #30]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	40007c00 	.word	0x40007c00
 800cf44:	40023800 	.word	0x40023800
 800cf48:	00f42400 	.word	0x00f42400

0800cf4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	430a      	orrs	r2, r1
 800cf74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00a      	beq.n	800cf98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	430a      	orrs	r2, r1
 800cf96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9c:	f003 0302 	and.w	r3, r3, #2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbe:	f003 0304 	and.w	r3, r3, #4
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	430a      	orrs	r2, r1
 800cfda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe0:	f003 0310 	and.w	r3, r3, #16
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d002:	f003 0320 	and.w	r3, r3, #32
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01a      	beq.n	800d062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d04a:	d10a      	bne.n	800d062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	605a      	str	r2, [r3, #4]
  }
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b098      	sub	sp, #96	@ 0x60
 800d094:	af02      	add	r7, sp, #8
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0a0:	f7fe fd3a 	bl	800bb18 <HAL_GetTick>
 800d0a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 0308 	and.w	r3, r3, #8
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	d12e      	bne.n	800d112 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f88c 	bl	800d1e0 <UART_WaitOnFlagUntilTimeout>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d021      	beq.n	800d112 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d6:	e853 3f00 	ldrex	r3, [r3]
 800d0da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d0f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0f4:	e841 2300 	strex	r3, r2, [r1]
 800d0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1e6      	bne.n	800d0ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e062      	b.n	800d1d8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d149      	bne.n	800d1b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d124:	9300      	str	r3, [sp, #0]
 800d126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d128:	2200      	movs	r2, #0
 800d12a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f856 	bl	800d1e0 <UART_WaitOnFlagUntilTimeout>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d03c      	beq.n	800d1b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	623b      	str	r3, [r7, #32]
   return(result);
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d158:	633b      	str	r3, [r7, #48]	@ 0x30
 800d15a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e6      	bne.n	800d13a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3308      	adds	r3, #8
 800d172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	e853 3f00 	ldrex	r3, [r3]
 800d17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f023 0301 	bic.w	r3, r3, #1
 800d182:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3308      	adds	r3, #8
 800d18a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d18c:	61fa      	str	r2, [r7, #28]
 800d18e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	69b9      	ldr	r1, [r7, #24]
 800d192:	69fa      	ldr	r2, [r7, #28]
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	617b      	str	r3, [r7, #20]
   return(result);
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e5      	bne.n	800d16c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e011      	b.n	800d1d8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2220      	movs	r2, #32
 800d1be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3758      	adds	r7, #88	@ 0x58
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	603b      	str	r3, [r7, #0]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f0:	e04f      	b.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f8:	d04b      	beq.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1fa:	f7fe fc8d 	bl	800bb18 <HAL_GetTick>
 800d1fe:	4602      	mov	r2, r0
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	429a      	cmp	r2, r3
 800d208:	d302      	bcc.n	800d210 <UART_WaitOnFlagUntilTimeout+0x30>
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e04e      	b.n	800d2b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f003 0304 	and.w	r3, r3, #4
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d037      	beq.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b80      	cmp	r3, #128	@ 0x80
 800d226:	d034      	beq.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b40      	cmp	r3, #64	@ 0x40
 800d22c:	d031      	beq.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	f003 0308 	and.w	r3, r3, #8
 800d238:	2b08      	cmp	r3, #8
 800d23a:	d110      	bne.n	800d25e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2208      	movs	r2, #8
 800d242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f000 f838 	bl	800d2ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2208      	movs	r2, #8
 800d24e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e029      	b.n	800d2b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	69db      	ldr	r3, [r3, #28]
 800d264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d26c:	d111      	bne.n	800d292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 f81e 	bl	800d2ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2220      	movs	r2, #32
 800d282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	e00f      	b.n	800d2b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	69da      	ldr	r2, [r3, #28]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	4013      	ands	r3, r2
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	bf0c      	ite	eq
 800d2a2:	2301      	moveq	r3, #1
 800d2a4:	2300      	movne	r3, #0
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d0a0      	beq.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b095      	sub	sp, #84	@ 0x54
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ca:	e853 3f00 	ldrex	r3, [r3]
 800d2ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2e8:	e841 2300 	strex	r3, r2, [r1]
 800d2ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1e6      	bne.n	800d2c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3308      	adds	r3, #8
 800d2fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	e853 3f00 	ldrex	r3, [r3]
 800d302:	61fb      	str	r3, [r7, #28]
   return(result);
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	f023 0301 	bic.w	r3, r3, #1
 800d30a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3308      	adds	r3, #8
 800d312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d31a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d31c:	e841 2300 	strex	r3, r2, [r1]
 800d320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e5      	bne.n	800d2f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d118      	bne.n	800d362 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	e853 3f00 	ldrex	r3, [r3]
 800d33c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	f023 0310 	bic.w	r3, r3, #16
 800d344:	647b      	str	r3, [r7, #68]	@ 0x44
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	461a      	mov	r2, r3
 800d34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d34e:	61bb      	str	r3, [r7, #24]
 800d350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d352:	6979      	ldr	r1, [r7, #20]
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	e841 2300 	strex	r3, r2, [r1]
 800d35a:	613b      	str	r3, [r7, #16]
   return(result);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1e6      	bne.n	800d330 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2220      	movs	r2, #32
 800d366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d376:	bf00      	nop
 800d378:	3754      	adds	r7, #84	@ 0x54
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d38e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f7ff fb4f 	bl	800ca44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3a6:	bf00      	nop
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b088      	sub	sp, #32
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	e853 3f00 	ldrex	r3, [r3]
 800d3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	61bb      	str	r3, [r7, #24]
 800d3d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6979      	ldr	r1, [r7, #20]
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e6      	bne.n	800d3b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff fb1b 	bl	800ca30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3fa:	bf00      	nop
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <LL_ADC_REG_SetSequencerLength>:
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d410:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	431a      	orrs	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <LL_ADC_IsEnabled>:
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b01      	cmp	r3, #1
 800d43a:	bf0c      	ite	eq
 800d43c:	2301      	moveq	r3, #1
 800d43e:	2300      	movne	r3, #0
 800d440:	b2db      	uxtb	r3, r3
}
 800d442:	4618      	mov	r0, r3
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
	...

0800d450 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800d450:	b590      	push	{r4, r7, lr}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800d45e:	481c      	ldr	r0, [pc, #112]	@ (800d4d0 <LL_ADC_CommonInit+0x80>)
 800d460:	f7ff ffe2 	bl	800d428 <LL_ADC_IsEnabled>
 800d464:	4604      	mov	r4, r0
 800d466:	481b      	ldr	r0, [pc, #108]	@ (800d4d4 <LL_ADC_CommonInit+0x84>)
 800d468:	f7ff ffde 	bl	800d428 <LL_ADC_IsEnabled>
 800d46c:	4603      	mov	r3, r0
 800d46e:	431c      	orrs	r4, r3
 800d470:	4819      	ldr	r0, [pc, #100]	@ (800d4d8 <LL_ADC_CommonInit+0x88>)
 800d472:	f7ff ffd9 	bl	800d428 <LL_ADC_IsEnabled>
 800d476:	4603      	mov	r3, r0
 800d478:	4323      	orrs	r3, r4
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d120      	bne.n	800d4c0 <LL_ADC_CommonInit+0x70>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d012      	beq.n	800d4ac <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	685a      	ldr	r2, [r3, #4]
 800d48a:	4b14      	ldr	r3, [pc, #80]	@ (800d4dc <LL_ADC_CommonInit+0x8c>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	6811      	ldr	r1, [r2, #0]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	6852      	ldr	r2, [r2, #4]
 800d496:	4311      	orrs	r1, r2
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	6892      	ldr	r2, [r2, #8]
 800d49c:	4311      	orrs	r1, r2
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	68d2      	ldr	r2, [r2, #12]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	431a      	orrs	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	605a      	str	r2, [r3, #4]
 800d4aa:	e00b      	b.n	800d4c4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <LL_ADC_CommonInit+0x8c>)
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	605a      	str	r2, [r3, #4]
 800d4be:	e001      	b.n	800d4c4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd90      	pop	{r4, r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	40012000 	.word	0x40012000
 800d4d4:	40012100 	.word	0x40012100
 800d4d8:	40012200 	.word	0x40012200
 800d4dc:	fffc10e0 	.word	0xfffc10e0

0800d4e0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ff9a 	bl	800d428 <LL_ADC_IsEnabled>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d115      	bne.n	800d526 <LL_ADC_Init+0x46>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <LL_ADC_Init+0x54>)
 800d500:	4013      	ands	r3, r2
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	6811      	ldr	r1, [r2, #0]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	6892      	ldr	r2, [r2, #8]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	431a      	orrs	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	609a      	str	r2, [r3, #8]
 800d524:	e001      	b.n	800d52a <LL_ADC_Init+0x4a>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	fcfffeff 	.word	0xfcfffeff

0800d538 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800d542:	2300      	movs	r3, #0
 800d544:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff ff6e 	bl	800d428 <LL_ADC_IsEnabled>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d131      	bne.n	800d5b6 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00c      	beq.n	800d574 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	6859      	ldr	r1, [r3, #4]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	430b      	orrs	r3, r1
 800d56c:	431a      	orrs	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	605a      	str	r2, [r3, #4]
 800d572:	e008      	b.n	800d586 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	431a      	orrs	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	689a      	ldr	r2, [r3, #8]
 800d58a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c4 <LL_ADC_REG_Init+0x8c>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	6812      	ldr	r2, [r2, #0]
 800d592:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	68d2      	ldr	r2, [r2, #12]
 800d59a:	4311      	orrs	r1, r2
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	6912      	ldr	r2, [r2, #16]
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ff27 	bl	800d402 <LL_ADC_REG_SetSequencerLength>
 800d5b4:	e001      	b.n	800d5ba <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	c0fffcfd 	.word	0xc0fffcfd

0800d5c8 <LL_GPIO_SetPinMode>:
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b089      	sub	sp, #36	@ 0x24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	fa93 f3a3 	rbit	r3, r3
 800d5e2:	613b      	str	r3, [r7, #16]
  return result;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	fab3 f383 	clz	r3, r3
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	2103      	movs	r1, #3
 800d5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f4:	43db      	mvns	r3, r3
 800d5f6:	401a      	ands	r2, r3
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	fa93 f3a3 	rbit	r3, r3
 800d602:	61bb      	str	r3, [r7, #24]
  return result;
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	fab3 f383 	clz	r3, r3
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	005b      	lsls	r3, r3, #1
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	fa01 f303 	lsl.w	r3, r1, r3
 800d614:	431a      	orrs	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	601a      	str	r2, [r3, #0]
}
 800d61a:	bf00      	nop
 800d61c:	3724      	adds	r7, #36	@ 0x24
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <LL_GPIO_SetPinOutputType>:
{
 800d626:	b480      	push	{r7}
 800d628:	b085      	sub	sp, #20
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	43db      	mvns	r3, r3
 800d63a:	401a      	ands	r2, r3
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	fb01 f303 	mul.w	r3, r1, r3
 800d644:	431a      	orrs	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	605a      	str	r2, [r3, #4]
}
 800d64a:	bf00      	nop
 800d64c:	3714      	adds	r7, #20
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <LL_GPIO_SetPinSpeed>:
{
 800d656:	b480      	push	{r7}
 800d658:	b089      	sub	sp, #36	@ 0x24
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	60b9      	str	r1, [r7, #8]
 800d660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	689a      	ldr	r2, [r3, #8]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	fa93 f3a3 	rbit	r3, r3
 800d670:	613b      	str	r3, [r7, #16]
  return result;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	fab3 f383 	clz	r3, r3
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	2103      	movs	r1, #3
 800d67e:	fa01 f303 	lsl.w	r3, r1, r3
 800d682:	43db      	mvns	r3, r3
 800d684:	401a      	ands	r2, r3
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	fa93 f3a3 	rbit	r3, r3
 800d690:	61bb      	str	r3, [r7, #24]
  return result;
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	fab3 f383 	clz	r3, r3
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	6879      	ldr	r1, [r7, #4]
 800d69e:	fa01 f303 	lsl.w	r3, r1, r3
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	609a      	str	r2, [r3, #8]
}
 800d6a8:	bf00      	nop
 800d6aa:	3724      	adds	r7, #36	@ 0x24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <LL_GPIO_SetPinPull>:
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b089      	sub	sp, #36	@ 0x24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	68da      	ldr	r2, [r3, #12]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	fa93 f3a3 	rbit	r3, r3
 800d6ce:	613b      	str	r3, [r7, #16]
  return result;
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	fab3 f383 	clz	r3, r3
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	2103      	movs	r1, #3
 800d6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	401a      	ands	r2, r3
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	fa93 f3a3 	rbit	r3, r3
 800d6ee:	61bb      	str	r3, [r7, #24]
  return result;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	fab3 f383 	clz	r3, r3
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d700:	431a      	orrs	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	60da      	str	r2, [r3, #12]
}
 800d706:	bf00      	nop
 800d708:	3724      	adds	r7, #36	@ 0x24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <LL_GPIO_SetAFPin_0_7>:
{
 800d712:	b480      	push	{r7}
 800d714:	b089      	sub	sp, #36	@ 0x24
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6a1a      	ldr	r2, [r3, #32]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	fa93 f3a3 	rbit	r3, r3
 800d72c:	613b      	str	r3, [r7, #16]
  return result;
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	fab3 f383 	clz	r3, r3
 800d734:	b2db      	uxtb	r3, r3
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	210f      	movs	r1, #15
 800d73a:	fa01 f303 	lsl.w	r3, r1, r3
 800d73e:	43db      	mvns	r3, r3
 800d740:	401a      	ands	r2, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	fa93 f3a3 	rbit	r3, r3
 800d74c:	61bb      	str	r3, [r7, #24]
  return result;
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	fab3 f383 	clz	r3, r3
 800d754:	b2db      	uxtb	r3, r3
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	fa01 f303 	lsl.w	r3, r1, r3
 800d75e:	431a      	orrs	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	621a      	str	r2, [r3, #32]
}
 800d764:	bf00      	nop
 800d766:	3724      	adds	r7, #36	@ 0x24
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <LL_GPIO_SetAFPin_8_15>:
{
 800d770:	b480      	push	{r7}
 800d772:	b089      	sub	sp, #36	@ 0x24
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	0a1b      	lsrs	r3, r3, #8
 800d784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	fa93 f3a3 	rbit	r3, r3
 800d78c:	613b      	str	r3, [r7, #16]
  return result;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	fab3 f383 	clz	r3, r3
 800d794:	b2db      	uxtb	r3, r3
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	210f      	movs	r1, #15
 800d79a:	fa01 f303 	lsl.w	r3, r1, r3
 800d79e:	43db      	mvns	r3, r3
 800d7a0:	401a      	ands	r2, r3
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	0a1b      	lsrs	r3, r3, #8
 800d7a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	fa93 f3a3 	rbit	r3, r3
 800d7ae:	61bb      	str	r3, [r7, #24]
  return result;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	fab3 f383 	clz	r3, r3
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d7c6:	bf00      	nop
 800d7c8:	3724      	adds	r7, #36	@ 0x24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b088      	sub	sp, #32
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	fa93 f3a3 	rbit	r3, r3
 800d7f0:	613b      	str	r3, [r7, #16]
  return result;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	fab3 f383 	clz	r3, r3
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d7fc:	e051      	b.n	800d8a2 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	2101      	movs	r1, #1
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	fa01 f303 	lsl.w	r3, r1, r3
 800d80a:	4013      	ands	r3, r2
 800d80c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d043      	beq.n	800d89c <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d003      	beq.n	800d824 <LL_GPIO_Init+0x52>
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	2b02      	cmp	r3, #2
 800d822:	d10e      	bne.n	800d842 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	461a      	mov	r2, r3
 800d82a:	69b9      	ldr	r1, [r7, #24]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff ff12 	bl	800d656 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff fef2 	bl	800d626 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	461a      	mov	r2, r3
 800d848:	69b9      	ldr	r1, [r7, #24]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff ff32 	bl	800d6b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d11a      	bne.n	800d88e <LL_GPIO_Init+0xbc>
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	fa93 f3a3 	rbit	r3, r3
 800d862:	60bb      	str	r3, [r7, #8]
  return result;
 800d864:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800d866:	fab3 f383 	clz	r3, r3
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b07      	cmp	r3, #7
 800d86e:	d807      	bhi.n	800d880 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	461a      	mov	r2, r3
 800d876:	69b9      	ldr	r1, [r7, #24]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ff4a 	bl	800d712 <LL_GPIO_SetAFPin_0_7>
 800d87e:	e006      	b.n	800d88e <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	695b      	ldr	r3, [r3, #20]
 800d884:	461a      	mov	r2, r3
 800d886:	69b9      	ldr	r1, [r7, #24]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff ff71 	bl	800d770 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	461a      	mov	r2, r3
 800d894:	69b9      	ldr	r1, [r7, #24]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff fe96 	bl	800d5c8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1a6      	bne.n	800d7fe <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3720      	adds	r7, #32
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <LL_I2C_Enable>:
{
 800d8ba:	b480      	push	{r7}
 800d8bc:	b083      	sub	sp, #12
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f043 0201 	orr.w	r2, r3, #1
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	601a      	str	r2, [r3, #0]
}
 800d8ce:	bf00      	nop
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <LL_I2C_Disable>:
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f023 0201 	bic.w	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
}
 800d8ee:	bf00      	nop
 800d8f0:	370c      	adds	r7, #12
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <LL_I2C_ConfigFilters>:
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	0219      	lsls	r1, r3, #8
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	430b      	orrs	r3, r1
 800d916:	431a      	orrs	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	601a      	str	r2, [r3, #0]
}
 800d91c:	bf00      	nop
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <LL_I2C_SetOwnAddress1>:
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <LL_I2C_SetOwnAddress1+0x2c>)
 800d93a:	4013      	ands	r3, r2
 800d93c:	68b9      	ldr	r1, [r7, #8]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	430a      	orrs	r2, r1
 800d942:	431a      	orrs	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	609a      	str	r2, [r3, #8]
}
 800d948:	bf00      	nop
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	fffff800 	.word	0xfffff800

0800d958 <LL_I2C_EnableOwnAddress1>:
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	609a      	str	r2, [r3, #8]
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <LL_I2C_DisableOwnAddress1>:
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	609a      	str	r2, [r3, #8]
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <LL_I2C_SetTiming>:
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	611a      	str	r2, [r3, #16]
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <LL_I2C_SetMode>:
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	601a      	str	r2, [r3, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <LL_I2C_AcknowledgeNextData>:
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	605a      	str	r2, [r3, #4]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff ff65 	bl	800d8da <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	6899      	ldr	r1, [r3, #8]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	461a      	mov	r2, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff ff6d 	bl	800d8fa <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	4619      	mov	r1, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff ffb6 	bl	800d998 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7ff ff44 	bl	800d8ba <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff ffa0 	bl	800d978 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	6919      	ldr	r1, [r3, #16]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	699b      	ldr	r3, [r3, #24]
 800da40:	461a      	mov	r2, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff70 	bl	800d928 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ff81 	bl	800d958 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f7ff ffa9 	bl	800d9b4 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff ffb6 	bl	800d9da <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <LL_RCC_HSI_IsReady>:
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800da7c:	4b06      	ldr	r3, [pc, #24]	@ (800da98 <LL_RCC_HSI_IsReady+0x20>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f003 0302 	and.w	r3, r3, #2
 800da84:	2b02      	cmp	r3, #2
 800da86:	bf0c      	ite	eq
 800da88:	2301      	moveq	r3, #1
 800da8a:	2300      	movne	r3, #0
 800da8c:	b2db      	uxtb	r3, r3
}
 800da8e:	4618      	mov	r0, r3
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	40023800 	.word	0x40023800

0800da9c <LL_RCC_LSE_IsReady>:
{
 800da9c:	b480      	push	{r7}
 800da9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800daa0:	4b06      	ldr	r3, [pc, #24]	@ (800dabc <LL_RCC_LSE_IsReady+0x20>)
 800daa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	bf0c      	ite	eq
 800daac:	2301      	moveq	r3, #1
 800daae:	2300      	movne	r3, #0
 800dab0:	b2db      	uxtb	r3, r3
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	40023800 	.word	0x40023800

0800dac0 <LL_RCC_GetSysClkSource>:
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800dac4:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <LL_RCC_GetSysClkSource+0x18>)
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	f003 030c 	and.w	r3, r3, #12
}
 800dacc:	4618      	mov	r0, r3
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	40023800 	.word	0x40023800

0800dadc <LL_RCC_GetAHBPrescaler>:
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800dae0:	4b04      	ldr	r3, [pc, #16]	@ (800daf4 <LL_RCC_GetAHBPrescaler+0x18>)
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	40023800 	.word	0x40023800

0800daf8 <LL_RCC_GetAPB1Prescaler>:
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800dafc:	4b04      	ldr	r3, [pc, #16]	@ (800db10 <LL_RCC_GetAPB1Prescaler+0x18>)
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800db04:	4618      	mov	r0, r3
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	40023800 	.word	0x40023800

0800db14 <LL_RCC_GetAPB2Prescaler>:
{
 800db14:	b480      	push	{r7}
 800db16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800db18:	4b04      	ldr	r3, [pc, #16]	@ (800db2c <LL_RCC_GetAPB2Prescaler+0x18>)
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800db20:	4618      	mov	r0, r3
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	40023800 	.word	0x40023800

0800db30 <LL_RCC_GetUSARTClockSource>:
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800db38:	4b06      	ldr	r3, [pc, #24]	@ (800db54 <LL_RCC_GetUSARTClockSource+0x24>)
 800db3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	401a      	ands	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	041b      	lsls	r3, r3, #16
 800db46:	4313      	orrs	r3, r2
}
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr
 800db54:	40023800 	.word	0x40023800

0800db58 <LL_RCC_GetUARTClockSource>:
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 800db60:	4b06      	ldr	r3, [pc, #24]	@ (800db7c <LL_RCC_GetUARTClockSource+0x24>)
 800db62:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	401a      	ands	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	041b      	lsls	r3, r3, #16
 800db6e:	4313      	orrs	r3, r2
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	40023800 	.word	0x40023800

0800db80 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800db80:	b480      	push	{r7}
 800db82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800db84:	4b04      	ldr	r3, [pc, #16]	@ (800db98 <LL_RCC_PLL_GetMainSource+0x18>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	40023800 	.word	0x40023800

0800db9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800dba0:	4b04      	ldr	r3, [pc, #16]	@ (800dbb4 <LL_RCC_PLL_GetN+0x18>)
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	099b      	lsrs	r3, r3, #6
 800dba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	40023800 	.word	0x40023800

0800dbb8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800dbbc:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <LL_RCC_PLL_GetP+0x18>)
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	40023800 	.word	0x40023800

0800dbd4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800dbd8:	4b04      	ldr	r3, [pc, #16]	@ (800dbec <LL_RCC_PLL_GetDivider+0x18>)
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	40023800 	.word	0x40023800

0800dbf0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b03      	cmp	r3, #3
 800dc00:	d133      	bne.n	800dc6a <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff94 	bl	800db30 <LL_RCC_GetUSARTClockSource>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800dc0e:	d016      	beq.n	800dc3e <LL_RCC_GetUSARTClockFreq+0x4e>
 800dc10:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800dc14:	d81d      	bhi.n	800dc52 <LL_RCC_GetUSARTClockFreq+0x62>
 800dc16:	4a70      	ldr	r2, [pc, #448]	@ (800ddd8 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d003      	beq.n	800dc24 <LL_RCC_GetUSARTClockFreq+0x34>
 800dc1c:	4a6f      	ldr	r2, [pc, #444]	@ (800dddc <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d004      	beq.n	800dc2c <LL_RCC_GetUSARTClockFreq+0x3c>
 800dc22:	e016      	b.n	800dc52 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800dc24:	f000 f9f2 	bl	800e00c <RCC_GetSystemClockFreq>
 800dc28:	60f8      	str	r0, [r7, #12]
        break;
 800dc2a:	e0cf      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800dc2c:	f7ff ff24 	bl	800da78 <LL_RCC_HSI_IsReady>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f000 80bb 	beq.w	800ddae <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 800dc38:	4b69      	ldr	r3, [pc, #420]	@ (800dde0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800dc3a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dc3c:	e0b7      	b.n	800ddae <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800dc3e:	f7ff ff2d 	bl	800da9c <LL_RCC_LSE_IsReady>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f000 80b4 	beq.w	800ddb2 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 800dc4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc4e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dc50:	e0af      	b.n	800ddb2 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dc52:	f000 f9db 	bl	800e00c <RCC_GetSystemClockFreq>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 f9ff 	bl	800e05c <RCC_GetHCLKClockFreq>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 fa25 	bl	800e0b0 <RCC_GetPCLK2ClockFreq>
 800dc66:	60f8      	str	r0, [r7, #12]
        break;
 800dc68:	e0b0      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b0c      	cmp	r3, #12
 800dc6e:	d133      	bne.n	800dcd8 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff ff5d 	bl	800db30 <LL_RCC_GetUSARTClockSource>
 800dc76:	4603      	mov	r3, r0
 800dc78:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800dc7c:	d016      	beq.n	800dcac <LL_RCC_GetUSARTClockFreq+0xbc>
 800dc7e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800dc82:	d81d      	bhi.n	800dcc0 <LL_RCC_GetUSARTClockFreq+0xd0>
 800dc84:	4a57      	ldr	r2, [pc, #348]	@ (800dde4 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d003      	beq.n	800dc92 <LL_RCC_GetUSARTClockFreq+0xa2>
 800dc8a:	4a57      	ldr	r2, [pc, #348]	@ (800dde8 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d004      	beq.n	800dc9a <LL_RCC_GetUSARTClockFreq+0xaa>
 800dc90:	e016      	b.n	800dcc0 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800dc92:	f000 f9bb 	bl	800e00c <RCC_GetSystemClockFreq>
 800dc96:	60f8      	str	r0, [r7, #12]
        break;
 800dc98:	e098      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800dc9a:	f7ff feed 	bl	800da78 <LL_RCC_HSI_IsReady>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 8088 	beq.w	800ddb6 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 800dca6:	4b4e      	ldr	r3, [pc, #312]	@ (800dde0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800dca8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dcaa:	e084      	b.n	800ddb6 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800dcac:	f7ff fef6 	bl	800da9c <LL_RCC_LSE_IsReady>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 8081 	beq.w	800ddba <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 800dcb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dcbe:	e07c      	b.n	800ddba <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dcc0:	f000 f9a4 	bl	800e00c <RCC_GetSystemClockFreq>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f9c8 	bl	800e05c <RCC_GetHCLKClockFreq>
 800dccc:	4603      	mov	r3, r0
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f000 f9da 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800dcd4:	60f8      	str	r0, [r7, #12]
        break;
 800dcd6:	e079      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dcde:	d131      	bne.n	800dd44 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7ff ff25 	bl	800db30 <LL_RCC_GetUSARTClockSource>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800dcec:	d015      	beq.n	800dd1a <LL_RCC_GetUSARTClockFreq+0x12a>
 800dcee:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800dcf2:	d81b      	bhi.n	800dd2c <LL_RCC_GetUSARTClockFreq+0x13c>
 800dcf4:	4a3d      	ldr	r2, [pc, #244]	@ (800ddec <LL_RCC_GetUSARTClockFreq+0x1fc>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d003      	beq.n	800dd02 <LL_RCC_GetUSARTClockFreq+0x112>
 800dcfa:	4a3d      	ldr	r2, [pc, #244]	@ (800ddf0 <LL_RCC_GetUSARTClockFreq+0x200>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d004      	beq.n	800dd0a <LL_RCC_GetUSARTClockFreq+0x11a>
 800dd00:	e014      	b.n	800dd2c <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800dd02:	f000 f983 	bl	800e00c <RCC_GetSystemClockFreq>
 800dd06:	60f8      	str	r0, [r7, #12]
        break;
 800dd08:	e060      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800dd0a:	f7ff feb5 	bl	800da78 <LL_RCC_HSI_IsReady>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d054      	beq.n	800ddbe <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 800dd14:	4b32      	ldr	r3, [pc, #200]	@ (800dde0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800dd16:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dd18:	e051      	b.n	800ddbe <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800dd1a:	f7ff febf 	bl	800da9c <LL_RCC_LSE_IsReady>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d04e      	beq.n	800ddc2 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 800dd24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd28:	60fb      	str	r3, [r7, #12]
        }
        break;
 800dd2a:	e04a      	b.n	800ddc2 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dd2c:	f000 f96e 	bl	800e00c <RCC_GetSystemClockFreq>
 800dd30:	4603      	mov	r3, r0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 f992 	bl	800e05c <RCC_GetHCLKClockFreq>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 f9b8 	bl	800e0b0 <RCC_GetPCLK2ClockFreq>
 800dd40:	60f8      	str	r0, [r7, #12]
        break;
 800dd42:	e043      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b30      	cmp	r3, #48	@ 0x30
 800dd48:	d140      	bne.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fef0 	bl	800db30 <LL_RCC_GetUSARTClockSource>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800dd56:	d015      	beq.n	800dd84 <LL_RCC_GetUSARTClockFreq+0x194>
 800dd58:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800dd5c:	d81b      	bhi.n	800dd96 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800dd5e:	4a25      	ldr	r2, [pc, #148]	@ (800ddf4 <LL_RCC_GetUSARTClockFreq+0x204>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d003      	beq.n	800dd6c <LL_RCC_GetUSARTClockFreq+0x17c>
 800dd64:	4a24      	ldr	r2, [pc, #144]	@ (800ddf8 <LL_RCC_GetUSARTClockFreq+0x208>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d004      	beq.n	800dd74 <LL_RCC_GetUSARTClockFreq+0x184>
 800dd6a:	e014      	b.n	800dd96 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800dd6c:	f000 f94e 	bl	800e00c <RCC_GetSystemClockFreq>
 800dd70:	60f8      	str	r0, [r7, #12]
          break;
 800dd72:	e02b      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800dd74:	f7ff fe80 	bl	800da78 <LL_RCC_HSI_IsReady>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d023      	beq.n	800ddc6 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 800dd7e:	4b18      	ldr	r3, [pc, #96]	@ (800dde0 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800dd80:	60fb      	str	r3, [r7, #12]
          }
          break;
 800dd82:	e020      	b.n	800ddc6 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800dd84:	f7ff fe8a 	bl	800da9c <LL_RCC_LSE_IsReady>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d01d      	beq.n	800ddca <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 800dd8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd92:	60fb      	str	r3, [r7, #12]
          }
          break;
 800dd94:	e019      	b.n	800ddca <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dd96:	f000 f939 	bl	800e00c <RCC_GetSystemClockFreq>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f95d 	bl	800e05c <RCC_GetHCLKClockFreq>
 800dda2:	4603      	mov	r3, r0
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 f96f 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800ddaa:	60f8      	str	r0, [r7, #12]
          break;
 800ddac:	e00e      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddae:	bf00      	nop
 800ddb0:	e00c      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddb2:	bf00      	nop
 800ddb4:	e00a      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddb6:	bf00      	nop
 800ddb8:	e008      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddba:	bf00      	nop
 800ddbc:	e006      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddbe:	bf00      	nop
 800ddc0:	e004      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800ddc2:	bf00      	nop
 800ddc4:	e002      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800ddc6:	bf00      	nop
 800ddc8:	e000      	b.n	800ddcc <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800ddca:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	00030001 	.word	0x00030001
 800dddc:	00030002 	.word	0x00030002
 800dde0:	00f42400 	.word	0x00f42400
 800dde4:	000c0004 	.word	0x000c0004
 800dde8:	000c0008 	.word	0x000c0008
 800ddec:	0c000400 	.word	0x0c000400
 800ddf0:	0c000800 	.word	0x0c000800
 800ddf4:	00300010 	.word	0x00300010
 800ddf8:	00300020 	.word	0x00300020

0800ddfc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800de04:	2300      	movs	r3, #0
 800de06:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800de0c:	d133      	bne.n	800de76 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff fea2 	bl	800db58 <LL_RCC_GetUARTClockSource>
 800de14:	4603      	mov	r3, r0
 800de16:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800de1a:	d016      	beq.n	800de4a <LL_RCC_GetUARTClockFreq+0x4e>
 800de1c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800de20:	d81d      	bhi.n	800de5e <LL_RCC_GetUARTClockFreq+0x62>
 800de22:	4a71      	ldr	r2, [pc, #452]	@ (800dfe8 <LL_RCC_GetUARTClockFreq+0x1ec>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d003      	beq.n	800de30 <LL_RCC_GetUARTClockFreq+0x34>
 800de28:	4a70      	ldr	r2, [pc, #448]	@ (800dfec <LL_RCC_GetUARTClockFreq+0x1f0>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d004      	beq.n	800de38 <LL_RCC_GetUARTClockFreq+0x3c>
 800de2e:	e016      	b.n	800de5e <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800de30:	f000 f8ec 	bl	800e00c <RCC_GetSystemClockFreq>
 800de34:	60f8      	str	r0, [r7, #12]
        break;
 800de36:	e0d1      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800de38:	f7ff fe1e 	bl	800da78 <LL_RCC_HSI_IsReady>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 80bd 	beq.w	800dfbe <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 800de44:	4b6a      	ldr	r3, [pc, #424]	@ (800dff0 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800de46:	60fb      	str	r3, [r7, #12]
        }
        break;
 800de48:	e0b9      	b.n	800dfbe <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800de4a:	f7ff fe27 	bl	800da9c <LL_RCC_LSE_IsReady>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 80b6 	beq.w	800dfc2 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 800de56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800de5c:	e0b1      	b.n	800dfc2 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800de5e:	f000 f8d5 	bl	800e00c <RCC_GetSystemClockFreq>
 800de62:	4603      	mov	r3, r0
 800de64:	4618      	mov	r0, r3
 800de66:	f000 f8f9 	bl	800e05c <RCC_GetHCLKClockFreq>
 800de6a:	4603      	mov	r3, r0
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 f90b 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800de72:	60f8      	str	r0, [r7, #12]
        break;
 800de74:	e0b2      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de7c:	d133      	bne.n	800dee6 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fe6a 	bl	800db58 <LL_RCC_GetUARTClockSource>
 800de84:	4603      	mov	r3, r0
 800de86:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800de8a:	d016      	beq.n	800deba <LL_RCC_GetUARTClockFreq+0xbe>
 800de8c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800de90:	d81d      	bhi.n	800dece <LL_RCC_GetUARTClockFreq+0xd2>
 800de92:	4a58      	ldr	r2, [pc, #352]	@ (800dff4 <LL_RCC_GetUARTClockFreq+0x1f8>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d003      	beq.n	800dea0 <LL_RCC_GetUARTClockFreq+0xa4>
 800de98:	4a57      	ldr	r2, [pc, #348]	@ (800dff8 <LL_RCC_GetUARTClockFreq+0x1fc>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d004      	beq.n	800dea8 <LL_RCC_GetUARTClockFreq+0xac>
 800de9e:	e016      	b.n	800dece <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800dea0:	f000 f8b4 	bl	800e00c <RCC_GetSystemClockFreq>
 800dea4:	60f8      	str	r0, [r7, #12]
        break;
 800dea6:	e099      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800dea8:	f7ff fde6 	bl	800da78 <LL_RCC_HSI_IsReady>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f000 8089 	beq.w	800dfc6 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 800deb4:	4b4e      	ldr	r3, [pc, #312]	@ (800dff0 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800deb6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800deb8:	e085      	b.n	800dfc6 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800deba:	f7ff fdef 	bl	800da9c <LL_RCC_LSE_IsReady>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 8082 	beq.w	800dfca <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 800dec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800deca:	60fb      	str	r3, [r7, #12]
        }
        break;
 800decc:	e07d      	b.n	800dfca <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dece:	f000 f89d 	bl	800e00c <RCC_GetSystemClockFreq>
 800ded2:	4603      	mov	r3, r0
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 f8c1 	bl	800e05c <RCC_GetHCLKClockFreq>
 800deda:	4603      	mov	r3, r0
 800dedc:	4618      	mov	r0, r3
 800dede:	f000 f8d3 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800dee2:	60f8      	str	r0, [r7, #12]
        break;
 800dee4:	e07a      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800deec:	d131      	bne.n	800df52 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fe32 	bl	800db58 <LL_RCC_GetUARTClockSource>
 800def4:	4603      	mov	r3, r0
 800def6:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800defa:	d015      	beq.n	800df28 <LL_RCC_GetUARTClockFreq+0x12c>
 800defc:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800df00:	d81b      	bhi.n	800df3a <LL_RCC_GetUARTClockFreq+0x13e>
 800df02:	4a3e      	ldr	r2, [pc, #248]	@ (800dffc <LL_RCC_GetUARTClockFreq+0x200>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d003      	beq.n	800df10 <LL_RCC_GetUARTClockFreq+0x114>
 800df08:	4a3d      	ldr	r2, [pc, #244]	@ (800e000 <LL_RCC_GetUARTClockFreq+0x204>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d004      	beq.n	800df18 <LL_RCC_GetUARTClockFreq+0x11c>
 800df0e:	e014      	b.n	800df3a <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800df10:	f000 f87c 	bl	800e00c <RCC_GetSystemClockFreq>
 800df14:	60f8      	str	r0, [r7, #12]
        break;
 800df16:	e061      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800df18:	f7ff fdae 	bl	800da78 <LL_RCC_HSI_IsReady>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d055      	beq.n	800dfce <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 800df22:	4b33      	ldr	r3, [pc, #204]	@ (800dff0 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800df24:	60fb      	str	r3, [r7, #12]
        }
        break;
 800df26:	e052      	b.n	800dfce <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800df28:	f7ff fdb8 	bl	800da9c <LL_RCC_LSE_IsReady>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d04f      	beq.n	800dfd2 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 800df32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df36:	60fb      	str	r3, [r7, #12]
        }
        break;
 800df38:	e04b      	b.n	800dfd2 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800df3a:	f000 f867 	bl	800e00c <RCC_GetSystemClockFreq>
 800df3e:	4603      	mov	r3, r0
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f88b 	bl	800e05c <RCC_GetHCLKClockFreq>
 800df46:	4603      	mov	r3, r0
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 f89d 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800df4e:	60f8      	str	r0, [r7, #12]
        break;
 800df50:	e044      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800df58:	d140      	bne.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff fdfc 	bl	800db58 <LL_RCC_GetUARTClockSource>
 800df60:	4603      	mov	r3, r0
 800df62:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800df66:	d015      	beq.n	800df94 <LL_RCC_GetUARTClockFreq+0x198>
 800df68:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800df6c:	d81b      	bhi.n	800dfa6 <LL_RCC_GetUARTClockFreq+0x1aa>
 800df6e:	4a25      	ldr	r2, [pc, #148]	@ (800e004 <LL_RCC_GetUARTClockFreq+0x208>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d003      	beq.n	800df7c <LL_RCC_GetUARTClockFreq+0x180>
 800df74:	4a24      	ldr	r2, [pc, #144]	@ (800e008 <LL_RCC_GetUARTClockFreq+0x20c>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d004      	beq.n	800df84 <LL_RCC_GetUARTClockFreq+0x188>
 800df7a:	e014      	b.n	800dfa6 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 800df7c:	f000 f846 	bl	800e00c <RCC_GetSystemClockFreq>
 800df80:	60f8      	str	r0, [r7, #12]
          break;
 800df82:	e02b      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800df84:	f7ff fd78 	bl	800da78 <LL_RCC_HSI_IsReady>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d023      	beq.n	800dfd6 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 800df8e:	4b18      	ldr	r3, [pc, #96]	@ (800dff0 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800df90:	60fb      	str	r3, [r7, #12]
          }
          break;
 800df92:	e020      	b.n	800dfd6 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800df94:	f7ff fd82 	bl	800da9c <LL_RCC_LSE_IsReady>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d01d      	beq.n	800dfda <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 800df9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfa2:	60fb      	str	r3, [r7, #12]
          }
          break;
 800dfa4:	e019      	b.n	800dfda <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800dfa6:	f000 f831 	bl	800e00c <RCC_GetSystemClockFreq>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	4618      	mov	r0, r3
 800dfae:	f000 f855 	bl	800e05c <RCC_GetHCLKClockFreq>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 f867 	bl	800e088 <RCC_GetPCLK1ClockFreq>
 800dfba:	60f8      	str	r0, [r7, #12]
          break;
 800dfbc:	e00e      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfbe:	bf00      	nop
 800dfc0:	e00c      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfc2:	bf00      	nop
 800dfc4:	e00a      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfc6:	bf00      	nop
 800dfc8:	e008      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfca:	bf00      	nop
 800dfcc:	e006      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfce:	bf00      	nop
 800dfd0:	e004      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800dfd2:	bf00      	nop
 800dfd4:	e002      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800dfd6:	bf00      	nop
 800dfd8:	e000      	b.n	800dfdc <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800dfda:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	00c00040 	.word	0x00c00040
 800dfec:	00c00080 	.word	0x00c00080
 800dff0:	00f42400 	.word	0x00f42400
 800dff4:	03000100 	.word	0x03000100
 800dff8:	03000200 	.word	0x03000200
 800dffc:	30001000 	.word	0x30001000
 800e000:	30002000 	.word	0x30002000
 800e004:	c0004000 	.word	0xc0004000
 800e008:	c0008000 	.word	0xc0008000

0800e00c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800e012:	2300      	movs	r3, #0
 800e014:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e016:	f7ff fd53 	bl	800dac0 <LL_RCC_GetSysClkSource>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b08      	cmp	r3, #8
 800e01e:	d00c      	beq.n	800e03a <RCC_GetSystemClockFreq+0x2e>
 800e020:	2b08      	cmp	r3, #8
 800e022:	d80e      	bhi.n	800e042 <RCC_GetSystemClockFreq+0x36>
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <RCC_GetSystemClockFreq+0x22>
 800e028:	2b04      	cmp	r3, #4
 800e02a:	d003      	beq.n	800e034 <RCC_GetSystemClockFreq+0x28>
 800e02c:	e009      	b.n	800e042 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800e02e:	4b09      	ldr	r3, [pc, #36]	@ (800e054 <RCC_GetSystemClockFreq+0x48>)
 800e030:	607b      	str	r3, [r7, #4]
      break;
 800e032:	e009      	b.n	800e048 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e034:	4b08      	ldr	r3, [pc, #32]	@ (800e058 <RCC_GetSystemClockFreq+0x4c>)
 800e036:	607b      	str	r3, [r7, #4]
      break;
 800e038:	e006      	b.n	800e048 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e03a:	f000 f84d 	bl	800e0d8 <RCC_PLL_GetFreqDomain_SYS>
 800e03e:	6078      	str	r0, [r7, #4]
      break;
 800e040:	e002      	b.n	800e048 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800e042:	4b04      	ldr	r3, [pc, #16]	@ (800e054 <RCC_GetSystemClockFreq+0x48>)
 800e044:	607b      	str	r3, [r7, #4]
      break;
 800e046:	bf00      	nop
  }

  return frequency;
 800e048:	687b      	ldr	r3, [r7, #4]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	00f42400 	.word	0x00f42400
 800e058:	017d7840 	.word	0x017d7840

0800e05c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e064:	f7ff fd3a 	bl	800dadc <LL_RCC_GetAHBPrescaler>
 800e068:	4603      	mov	r3, r0
 800e06a:	091b      	lsrs	r3, r3, #4
 800e06c:	f003 030f 	and.w	r3, r3, #15
 800e070:	4a04      	ldr	r2, [pc, #16]	@ (800e084 <RCC_GetHCLKClockFreq+0x28>)
 800e072:	5cd3      	ldrb	r3, [r2, r3]
 800e074:	461a      	mov	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	40d3      	lsrs	r3, r2
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	080141a0 	.word	0x080141a0

0800e088 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e090:	f7ff fd32 	bl	800daf8 <LL_RCC_GetAPB1Prescaler>
 800e094:	4603      	mov	r3, r0
 800e096:	0a9b      	lsrs	r3, r3, #10
 800e098:	4a04      	ldr	r2, [pc, #16]	@ (800e0ac <RCC_GetPCLK1ClockFreq+0x24>)
 800e09a:	5cd3      	ldrb	r3, [r2, r3]
 800e09c:	461a      	mov	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	40d3      	lsrs	r3, r2
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	080141b0 	.word	0x080141b0

0800e0b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800e0b8:	f7ff fd2c 	bl	800db14 <LL_RCC_GetAPB2Prescaler>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	0b5b      	lsrs	r3, r3, #13
 800e0c0:	4a04      	ldr	r2, [pc, #16]	@ (800e0d4 <RCC_GetPCLK2ClockFreq+0x24>)
 800e0c2:	5cd3      	ldrb	r3, [r2, r3]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	40d3      	lsrs	r3, r2
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	080141b0 	.word	0x080141b0

0800e0d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e0d8:	b590      	push	{r4, r7, lr}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	607b      	str	r3, [r7, #4]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e0e6:	f7ff fd4b 	bl	800db80 <LL_RCC_PLL_GetMainSource>
 800e0ea:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d004      	beq.n	800e0fc <RCC_PLL_GetFreqDomain_SYS+0x24>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0f8:	d003      	beq.n	800e102 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800e0fa:	e005      	b.n	800e108 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800e13c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800e0fe:	607b      	str	r3, [r7, #4]
      break;
 800e100:	e005      	b.n	800e10e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e102:	4b0f      	ldr	r3, [pc, #60]	@ (800e140 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800e104:	607b      	str	r3, [r7, #4]
      break;
 800e106:	e002      	b.n	800e10e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 800e108:	4b0c      	ldr	r3, [pc, #48]	@ (800e13c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800e10a:	607b      	str	r3, [r7, #4]
      break;
 800e10c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800e10e:	f7ff fd61 	bl	800dbd4 <LL_RCC_PLL_GetDivider>
 800e112:	4602      	mov	r2, r0
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	fbb3 f4f2 	udiv	r4, r3, r2
 800e11a:	f7ff fd3f 	bl	800db9c <LL_RCC_PLL_GetN>
 800e11e:	4603      	mov	r3, r0
 800e120:	fb03 f404 	mul.w	r4, r3, r4
 800e124:	f7ff fd48 	bl	800dbb8 <LL_RCC_PLL_GetP>
 800e128:	4603      	mov	r3, r0
 800e12a:	0c1b      	lsrs	r3, r3, #16
 800e12c:	3301      	adds	r3, #1
 800e12e:	005b      	lsls	r3, r3, #1
 800e130:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800e134:	4618      	mov	r0, r3
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd90      	pop	{r4, r7, pc}
 800e13c:	00f42400 	.word	0x00f42400
 800e140:	017d7840 	.word	0x017d7840

0800e144 <LL_SPI_IsEnabled>:
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e154:	2b40      	cmp	r3, #64	@ 0x40
 800e156:	d101      	bne.n	800e15c <LL_SPI_IsEnabled+0x18>
 800e158:	2301      	movs	r3, #1
 800e15a:	e000      	b.n	800e15e <LL_SPI_IsEnabled+0x1a>
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <LL_SPI_SetRxFIFOThreshold>:
{
 800e16a:	b480      	push	{r7}
 800e16c:	b083      	sub	sp, #12
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	431a      	orrs	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	605a      	str	r2, [r3, #4]
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <LL_SPI_SetCRCPolynomial>:
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	461a      	mov	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	611a      	str	r2, [r3, #16]
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ffc0 	bl	800e144 <LL_SPI_IsEnabled>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d141      	bne.n	800e24e <LL_SPI_Init+0x9e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	4b25      	ldr	r3, [pc, #148]	@ (800e264 <LL_SPI_Init+0xb4>)
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	683a      	ldr	r2, [r7, #0]
 800e1d4:	6811      	ldr	r1, [r2, #0]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	6852      	ldr	r2, [r2, #4]
 800e1da:	4311      	orrs	r1, r2
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	68d2      	ldr	r2, [r2, #12]
 800e1e0:	4311      	orrs	r1, r2
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	6912      	ldr	r2, [r2, #16]
 800e1e6:	4311      	orrs	r1, r2
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	6952      	ldr	r2, [r2, #20]
 800e1ec:	4311      	orrs	r1, r2
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	6992      	ldr	r2, [r2, #24]
 800e1f2:	4311      	orrs	r1, r2
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	69d2      	ldr	r2, [r2, #28]
 800e1f8:	4311      	orrs	r1, r2
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	6a12      	ldr	r2, [r2, #32]
 800e1fe:	430a      	orrs	r2, r1
 800e200:	431a      	orrs	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685a      	ldr	r2, [r3, #4]
 800e20a:	4b17      	ldr	r3, [pc, #92]	@ (800e268 <LL_SPI_Init+0xb8>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	6891      	ldr	r1, [r2, #8]
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	6952      	ldr	r2, [r2, #20]
 800e216:	0c12      	lsrs	r2, r2, #16
 800e218:	430a      	orrs	r2, r1
 800e21a:	431a      	orrs	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e228:	d204      	bcs.n	800e234 <LL_SPI_Init+0x84>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800e22a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff ff9b 	bl	800e16a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e23c:	d105      	bne.n	800e24a <LL_SPI_Init+0x9a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e242:	4619      	mov	r1, r3
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7ff ffa3 	bl	800e190 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800e24a:	2300      	movs	r3, #0
 800e24c:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	61da      	str	r2, [r3, #28]
  return status;
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	ffff0040 	.word	0xffff0040
 800e268:	fffff0fb 	.word	0xfffff0fb

0800e26c <LL_TIM_SetPrescaler>:
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <LL_TIM_SetAutoReload>:
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e298:	bf00      	nop
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <LL_TIM_SetRepetitionCounter>:
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <LL_TIM_OC_SetCompareCH1>:
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <LL_TIM_OC_SetCompareCH2>:
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <LL_TIM_OC_SetCompareCH3>:
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <LL_TIM_OC_SetCompareCH4>:
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <LL_TIM_OC_SetCompareCH5>:
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <LL_TIM_OC_SetCompareCH6>:
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	f043 0201 	orr.w	r2, r3, #1
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	615a      	str	r2, [r3, #20]
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a3d      	ldr	r2, [pc, #244]	@ (800e494 <LL_TIM_Init+0x108>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d013      	beq.n	800e3cc <LL_TIM_Init+0x40>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3aa:	d00f      	beq.n	800e3cc <LL_TIM_Init+0x40>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4a3a      	ldr	r2, [pc, #232]	@ (800e498 <LL_TIM_Init+0x10c>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d00b      	beq.n	800e3cc <LL_TIM_Init+0x40>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a39      	ldr	r2, [pc, #228]	@ (800e49c <LL_TIM_Init+0x110>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d007      	beq.n	800e3cc <LL_TIM_Init+0x40>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a38      	ldr	r2, [pc, #224]	@ (800e4a0 <LL_TIM_Init+0x114>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d003      	beq.n	800e3cc <LL_TIM_Init+0x40>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a37      	ldr	r2, [pc, #220]	@ (800e4a4 <LL_TIM_Init+0x118>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d106      	bne.n	800e3da <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a2d      	ldr	r2, [pc, #180]	@ (800e494 <LL_TIM_Init+0x108>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d02b      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3e8:	d027      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4a2a      	ldr	r2, [pc, #168]	@ (800e498 <LL_TIM_Init+0x10c>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d023      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4a29      	ldr	r2, [pc, #164]	@ (800e49c <LL_TIM_Init+0x110>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d01f      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4a28      	ldr	r2, [pc, #160]	@ (800e4a0 <LL_TIM_Init+0x114>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d01b      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4a27      	ldr	r2, [pc, #156]	@ (800e4a4 <LL_TIM_Init+0x118>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d017      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4a26      	ldr	r2, [pc, #152]	@ (800e4a8 <LL_TIM_Init+0x11c>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d013      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a25      	ldr	r2, [pc, #148]	@ (800e4ac <LL_TIM_Init+0x120>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d00f      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a24      	ldr	r2, [pc, #144]	@ (800e4b0 <LL_TIM_Init+0x124>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d00b      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a23      	ldr	r2, [pc, #140]	@ (800e4b4 <LL_TIM_Init+0x128>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d007      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a22      	ldr	r2, [pc, #136]	@ (800e4b8 <LL_TIM_Init+0x12c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d003      	beq.n	800e43a <LL_TIM_Init+0xae>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a21      	ldr	r2, [pc, #132]	@ (800e4bc <LL_TIM_Init+0x130>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d106      	bne.n	800e448 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	4313      	orrs	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff ff17 	bl	800e288 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff ff03 	bl	800e26c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	4a0a      	ldr	r2, [pc, #40]	@ (800e494 <LL_TIM_Init+0x108>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d003      	beq.n	800e476 <LL_TIM_Init+0xea>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4a0c      	ldr	r2, [pc, #48]	@ (800e4a4 <LL_TIM_Init+0x118>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d105      	bne.n	800e482 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff ff11 	bl	800e2a4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff ff72 	bl	800e36c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	40010000 	.word	0x40010000
 800e498:	40000400 	.word	0x40000400
 800e49c:	40000800 	.word	0x40000800
 800e4a0:	40000c00 	.word	0x40000c00
 800e4a4:	40010400 	.word	0x40010400
 800e4a8:	40014000 	.word	0x40014000
 800e4ac:	40014400 	.word	0x40014400
 800e4b0:	40014800 	.word	0x40014800
 800e4b4:	40001800 	.word	0x40001800
 800e4b8:	40001c00 	.word	0x40001c00
 800e4bc:	40002000 	.word	0x40002000

0800e4c0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4d6:	d045      	beq.n	800e564 <LL_TIM_OC_Init+0xa4>
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4de:	d848      	bhi.n	800e572 <LL_TIM_OC_Init+0xb2>
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4e6:	d036      	beq.n	800e556 <LL_TIM_OC_Init+0x96>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4ee:	d840      	bhi.n	800e572 <LL_TIM_OC_Init+0xb2>
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4f6:	d027      	beq.n	800e548 <LL_TIM_OC_Init+0x88>
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4fe:	d838      	bhi.n	800e572 <LL_TIM_OC_Init+0xb2>
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e506:	d018      	beq.n	800e53a <LL_TIM_OC_Init+0x7a>
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e50e:	d830      	bhi.n	800e572 <LL_TIM_OC_Init+0xb2>
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d003      	beq.n	800e51e <LL_TIM_OC_Init+0x5e>
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b10      	cmp	r3, #16
 800e51a:	d007      	beq.n	800e52c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800e51c:	e029      	b.n	800e572 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800e51e:	6879      	ldr	r1, [r7, #4]
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f000 f82d 	bl	800e580 <OC1Config>
 800e526:	4603      	mov	r3, r0
 800e528:	75fb      	strb	r3, [r7, #23]
      break;
 800e52a:	e023      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800e52c:	6879      	ldr	r1, [r7, #4]
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f000 f894 	bl	800e65c <OC2Config>
 800e534:	4603      	mov	r3, r0
 800e536:	75fb      	strb	r3, [r7, #23]
      break;
 800e538:	e01c      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 f8ff 	bl	800e740 <OC3Config>
 800e542:	4603      	mov	r3, r0
 800e544:	75fb      	strb	r3, [r7, #23]
      break;
 800e546:	e015      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f000 f96a 	bl	800e824 <OC4Config>
 800e550:	4603      	mov	r3, r0
 800e552:	75fb      	strb	r3, [r7, #23]
      break;
 800e554:	e00e      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800e556:	6879      	ldr	r1, [r7, #4]
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f000 f9bd 	bl	800e8d8 <OC5Config>
 800e55e:	4603      	mov	r3, r0
 800e560:	75fb      	strb	r3, [r7, #23]
      break;
 800e562:	e007      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 fa08 	bl	800e97c <OC6Config>
 800e56c:	4603      	mov	r3, r0
 800e56e:	75fb      	strb	r3, [r7, #23]
      break;
 800e570:	e000      	b.n	800e574 <LL_TIM_OC_Init+0xb4>
      break;
 800e572:	bf00      	nop
  }

  return result;
 800e574:	7dfb      	ldrb	r3, [r7, #23]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3718      	adds	r7, #24
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
	...

0800e580 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	f023 0201 	bic.w	r2, r3, #1
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a1b      	ldr	r3, [r3, #32]
 800e59a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f023 0303 	bic.w	r3, r3, #3
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4b27      	ldr	r3, [pc, #156]	@ (800e650 <OC1Config+0xd0>)
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	6812      	ldr	r2, [r2, #0]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f023 0202 	bic.w	r2, r3, #2
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	f023 0201 	bic.w	r2, r3, #1
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e654 <OC1Config+0xd4>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d003      	beq.n	800e5ea <OC1Config+0x6a>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e658 <OC1Config+0xd8>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d11e      	bne.n	800e628 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	f023 0208 	bic.w	r2, r3, #8
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f023 0204 	bic.w	r2, r3, #4
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	4313      	orrs	r3, r2
 800e608:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	4313      	orrs	r3, r2
 800e616:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	69db      	ldr	r3, [r3, #28]
 800e622:	005b      	lsls	r3, r3, #1
 800e624:	4313      	orrs	r3, r2
 800e626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	4619      	mov	r1, r3
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7ff fe40 	bl	800e2c0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	fffeff8f 	.word	0xfffeff8f
 800e654:	40010000 	.word	0x40010000
 800e658:	40010400 	.word	0x40010400

0800e65c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	f023 0210 	bic.w	r2, r3, #16
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a1b      	ldr	r3, [r3, #32]
 800e676:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	4b29      	ldr	r3, [pc, #164]	@ (800e734 <OC2Config+0xd8>)
 800e690:	4013      	ands	r3, r2
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	6812      	ldr	r2, [r2, #0]
 800e696:	0212      	lsls	r2, r2, #8
 800e698:	4313      	orrs	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f023 0220 	bic.w	r2, r3, #32
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	011b      	lsls	r3, r3, #4
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f023 0210 	bic.w	r2, r3, #16
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a1e      	ldr	r2, [pc, #120]	@ (800e738 <OC2Config+0xdc>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d003      	beq.n	800e6cc <OC2Config+0x70>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a1d      	ldr	r2, [pc, #116]	@ (800e73c <OC2Config+0xe0>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d11f      	bne.n	800e70c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	695b      	ldr	r3, [r3, #20]
 800e6d6:	019b      	lsls	r3, r3, #6
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	019b      	lsls	r3, r3, #6
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	699b      	ldr	r3, [r3, #24]
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	69db      	ldr	r3, [r3, #28]
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	4313      	orrs	r3, r2
 800e70a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff fddc 	bl	800e2dc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	feff8fff 	.word	0xfeff8fff
 800e738:	40010000 	.word	0x40010000
 800e73c:	40010400 	.word	0x40010400

0800e740 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	69db      	ldr	r3, [r3, #28]
 800e766:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f023 0303 	bic.w	r3, r3, #3
 800e76e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	4b29      	ldr	r3, [pc, #164]	@ (800e818 <OC3Config+0xd8>)
 800e774:	4013      	ands	r3, r2
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	6812      	ldr	r2, [r2, #0]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	021b      	lsls	r3, r3, #8
 800e78a:	4313      	orrs	r3, r2
 800e78c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	4313      	orrs	r3, r2
 800e79c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a1e      	ldr	r2, [pc, #120]	@ (800e81c <OC3Config+0xdc>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d003      	beq.n	800e7ae <OC3Config+0x6e>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e820 <OC3Config+0xe0>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d11f      	bne.n	800e7ee <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	029b      	lsls	r3, r3, #10
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	029b      	lsls	r3, r3, #10
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	011b      	lsls	r3, r3, #4
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	69db      	ldr	r3, [r3, #28]
 800e7e8:	015b      	lsls	r3, r3, #5
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7ff fd79 	bl	800e2f8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	fffeff8f 	.word	0xfffeff8f
 800e81c:	40010000 	.word	0x40010000
 800e820:	40010400 	.word	0x40010400

0800e824 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	4b1d      	ldr	r3, [pc, #116]	@ (800e8cc <OC4Config+0xa8>)
 800e858:	4013      	ands	r3, r2
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	0212      	lsls	r2, r2, #8
 800e860:	4313      	orrs	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	031b      	lsls	r3, r3, #12
 800e870:	4313      	orrs	r3, r2
 800e872:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	031b      	lsls	r3, r3, #12
 800e880:	4313      	orrs	r3, r2
 800e882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a12      	ldr	r2, [pc, #72]	@ (800e8d0 <OC4Config+0xac>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d003      	beq.n	800e894 <OC4Config+0x70>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a11      	ldr	r2, [pc, #68]	@ (800e8d4 <OC4Config+0xb0>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d107      	bne.n	800e8a4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	699b      	ldr	r3, [r3, #24]
 800e89e:	019b      	lsls	r3, r3, #6
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff fd2c 	bl	800e314 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	feff8fff 	.word	0xfeff8fff
 800e8d0:	40010000 	.word	0x40010000
 800e8d4:	40010400 	.word	0x40010400

0800e8d8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e970 <OC5Config+0x98>)
 800e8fe:	4013      	ands	r3, r2
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	6812      	ldr	r2, [r2, #0]
 800e904:	4313      	orrs	r3, r2
 800e906:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	041b      	lsls	r3, r3, #16
 800e914:	4313      	orrs	r3, r2
 800e916:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	041b      	lsls	r3, r3, #16
 800e924:	4313      	orrs	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a12      	ldr	r2, [pc, #72]	@ (800e974 <OC5Config+0x9c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d003      	beq.n	800e938 <OC5Config+0x60>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a11      	ldr	r2, [pc, #68]	@ (800e978 <OC5Config+0xa0>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d109      	bne.n	800e94c <OC5Config+0x74>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	021b      	lsls	r3, r3, #8
 800e946:	431a      	orrs	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	4619      	mov	r1, r3
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7ff fce9 	bl	800e330 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	fffeff8f 	.word	0xfffeff8f
 800e974:	40010000 	.word	0x40010000
 800e978:	40010400 	.word	0x40010400

0800e97c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e99c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800ea14 <OC6Config+0x98>)
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	6812      	ldr	r2, [r2, #0]
 800e9a8:	0212      	lsls	r2, r2, #8
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	051b      	lsls	r3, r3, #20
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	051b      	lsls	r3, r3, #20
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a11      	ldr	r2, [pc, #68]	@ (800ea18 <OC6Config+0x9c>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d003      	beq.n	800e9de <OC6Config+0x62>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a10      	ldr	r2, [pc, #64]	@ (800ea1c <OC6Config+0xa0>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d109      	bne.n	800e9f2 <OC6Config+0x76>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	699b      	ldr	r3, [r3, #24]
 800e9ea:	029b      	lsls	r3, r3, #10
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fca6 	bl	800e350 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	feff8fff 	.word	0xfeff8fff
 800ea18:	40010000 	.word	0x40010000
 800ea1c:	40010400 	.word	0x40010400

0800ea20 <LL_USART_IsEnabled>:
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d101      	bne.n	800ea38 <LL_USART_IsEnabled+0x18>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e000      	b.n	800ea3a <LL_USART_IsEnabled+0x1a>
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	370c      	adds	r7, #12
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <LL_USART_SetStopBitsLength>:
{
 800ea46:	b480      	push	{r7}
 800ea48:	b083      	sub	sp, #12
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
 800ea4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	605a      	str	r2, [r3, #4]
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <LL_USART_SetHWFlowCtrl>:
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	431a      	orrs	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	609a      	str	r2, [r3, #8]
}
 800ea86:	bf00      	nop
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <LL_USART_SetBaudRate>:
{
 800ea92:	b480      	push	{r7}
 800ea94:	b087      	sub	sp, #28
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	60f8      	str	r0, [r7, #12]
 800ea9a:	60b9      	str	r1, [r7, #8]
 800ea9c:	607a      	str	r2, [r7, #4]
 800ea9e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eaa6:	d11a      	bne.n	800eade <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	005a      	lsls	r2, r3, #1
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	085b      	lsrs	r3, r3, #1
 800eab0:	441a      	add	r2, r3
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800eac2:	4013      	ands	r3, r2
 800eac4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	085b      	lsrs	r3, r3, #1
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	f003 0307 	and.w	r3, r3, #7
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	693a      	ldr	r2, [r7, #16]
 800eada:	60da      	str	r2, [r3, #12]
}
 800eadc:	e00a      	b.n	800eaf4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	085a      	lsrs	r2, r3, #1
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	441a      	add	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	461a      	mov	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	60da      	str	r2, [r3, #12]
}
 800eaf4:	bf00      	nop
 800eaf6:	371c      	adds	r7, #28
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7ff ff84 	bl	800ea20 <LL_USART_IsEnabled>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d179      	bne.n	800ec12 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	4b3e      	ldr	r3, [pc, #248]	@ (800ec1c <LL_USART_Init+0x11c>)
 800eb24:	4013      	ands	r3, r2
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	6851      	ldr	r1, [r2, #4]
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	68d2      	ldr	r2, [r2, #12]
 800eb2e:	4311      	orrs	r1, r2
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	6912      	ldr	r2, [r2, #16]
 800eb34:	4311      	orrs	r1, r2
 800eb36:	683a      	ldr	r2, [r7, #0]
 800eb38:	6992      	ldr	r2, [r2, #24]
 800eb3a:	430a      	orrs	r2, r1
 800eb3c:	431a      	orrs	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	4619      	mov	r1, r3
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7ff ff7c 	bl	800ea46 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff ff89 	bl	800ea6c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4a30      	ldr	r2, [pc, #192]	@ (800ec20 <LL_USART_Init+0x120>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d104      	bne.n	800eb6c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800eb62:	2003      	movs	r0, #3
 800eb64:	f7ff f844 	bl	800dbf0 <LL_RCC_GetUSARTClockFreq>
 800eb68:	60b8      	str	r0, [r7, #8]
 800eb6a:	e041      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a2d      	ldr	r2, [pc, #180]	@ (800ec24 <LL_USART_Init+0x124>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d104      	bne.n	800eb7e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800eb74:	200c      	movs	r0, #12
 800eb76:	f7ff f83b 	bl	800dbf0 <LL_RCC_GetUSARTClockFreq>
 800eb7a:	60b8      	str	r0, [r7, #8]
 800eb7c:	e038      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a29      	ldr	r2, [pc, #164]	@ (800ec28 <LL_USART_Init+0x128>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d104      	bne.n	800eb90 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800eb86:	2030      	movs	r0, #48	@ 0x30
 800eb88:	f7ff f832 	bl	800dbf0 <LL_RCC_GetUSARTClockFreq>
 800eb8c:	60b8      	str	r0, [r7, #8]
 800eb8e:	e02f      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a26      	ldr	r2, [pc, #152]	@ (800ec2c <LL_USART_Init+0x12c>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d104      	bne.n	800eba2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800eb98:	20c0      	movs	r0, #192	@ 0xc0
 800eb9a:	f7ff f92f 	bl	800ddfc <LL_RCC_GetUARTClockFreq>
 800eb9e:	60b8      	str	r0, [r7, #8]
 800eba0:	e026      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a22      	ldr	r2, [pc, #136]	@ (800ec30 <LL_USART_Init+0x130>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d105      	bne.n	800ebb6 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800ebaa:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800ebae:	f7ff f925 	bl	800ddfc <LL_RCC_GetUARTClockFreq>
 800ebb2:	60b8      	str	r0, [r7, #8]
 800ebb4:	e01c      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a1e      	ldr	r2, [pc, #120]	@ (800ec34 <LL_USART_Init+0x134>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d105      	bne.n	800ebca <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800ebbe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800ebc2:	f7ff f815 	bl	800dbf0 <LL_RCC_GetUSARTClockFreq>
 800ebc6:	60b8      	str	r0, [r7, #8]
 800ebc8:	e012      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a1a      	ldr	r2, [pc, #104]	@ (800ec38 <LL_USART_Init+0x138>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d105      	bne.n	800ebde <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800ebd2:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800ebd6:	f7ff f911 	bl	800ddfc <LL_RCC_GetUARTClockFreq>
 800ebda:	60b8      	str	r0, [r7, #8]
 800ebdc:	e008      	b.n	800ebf0 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4a16      	ldr	r2, [pc, #88]	@ (800ec3c <LL_USART_Init+0x13c>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d104      	bne.n	800ebf0 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800ebe6:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800ebea:	f7ff f907 	bl	800ddfc <LL_RCC_GetUARTClockFreq>
 800ebee:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00d      	beq.n	800ec12 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d009      	beq.n	800ec12 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800ec0a:	68b9      	ldr	r1, [r7, #8]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff ff40 	bl	800ea92 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	efff69f3 	.word	0xefff69f3
 800ec20:	40011000 	.word	0x40011000
 800ec24:	40004400 	.word	0x40004400
 800ec28:	40004800 	.word	0x40004800
 800ec2c:	40004c00 	.word	0x40004c00
 800ec30:	40005000 	.word	0x40005000
 800ec34:	40011400 	.word	0x40011400
 800ec38:	40007800 	.word	0x40007800
 800ec3c:	40007c00 	.word	0x40007c00

0800ec40 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800ec48:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <LL_mDelay+0x48>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800ec4e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec56:	d00c      	beq.n	800ec72 <LL_mDelay+0x32>
  {
    Delay++;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800ec5e:	e008      	b.n	800ec72 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800ec60:	4b09      	ldr	r3, [pc, #36]	@ (800ec88 <LL_mDelay+0x48>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <LL_mDelay+0x32>
    {
      Delay--;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	607b      	str	r3, [r7, #4]
  while (Delay)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1f3      	bne.n	800ec60 <LL_mDelay+0x20>
    }
  }
}
 800ec78:	bf00      	nop
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	e000e010 	.word	0xe000e010

0800ec8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800ec94:	4a04      	ldr	r2, [pc, #16]	@ (800eca8 <LL_SetSystemCoreClock+0x1c>)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6013      	str	r3, [r2, #0]
}
 800ec9a:	bf00      	nop
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	20000000 	.word	0x20000000

0800ecac <atof>:
 800ecac:	2100      	movs	r1, #0
 800ecae:	f000 bdb9 	b.w	800f824 <strtod>

0800ecb2 <atoi>:
 800ecb2:	220a      	movs	r2, #10
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	f000 be3b 	b.w	800f930 <strtol>

0800ecba <sulp>:
 800ecba:	b570      	push	{r4, r5, r6, lr}
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	460d      	mov	r5, r1
 800ecc0:	4616      	mov	r6, r2
 800ecc2:	ec45 4b10 	vmov	d0, r4, r5
 800ecc6:	f003 fa5d 	bl	8012184 <__ulp>
 800ecca:	b17e      	cbz	r6, 800ecec <sulp+0x32>
 800eccc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ecd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dd09      	ble.n	800ecec <sulp+0x32>
 800ecd8:	051b      	lsls	r3, r3, #20
 800ecda:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ecde:	2000      	movs	r0, #0
 800ece0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ece4:	ec41 0b17 	vmov	d7, r0, r1
 800ece8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ecec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ecf0 <_strtod_l>:
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	ed2d 8b0a 	vpush	{d8-d12}
 800ecf8:	b097      	sub	sp, #92	@ 0x5c
 800ecfa:	4688      	mov	r8, r1
 800ecfc:	920e      	str	r2, [sp, #56]	@ 0x38
 800ecfe:	2200      	movs	r2, #0
 800ed00:	9212      	str	r2, [sp, #72]	@ 0x48
 800ed02:	9005      	str	r0, [sp, #20]
 800ed04:	f04f 0a00 	mov.w	sl, #0
 800ed08:	f04f 0b00 	mov.w	fp, #0
 800ed0c:	460a      	mov	r2, r1
 800ed0e:	9211      	str	r2, [sp, #68]	@ 0x44
 800ed10:	7811      	ldrb	r1, [r2, #0]
 800ed12:	292b      	cmp	r1, #43	@ 0x2b
 800ed14:	d04c      	beq.n	800edb0 <_strtod_l+0xc0>
 800ed16:	d839      	bhi.n	800ed8c <_strtod_l+0x9c>
 800ed18:	290d      	cmp	r1, #13
 800ed1a:	d833      	bhi.n	800ed84 <_strtod_l+0x94>
 800ed1c:	2908      	cmp	r1, #8
 800ed1e:	d833      	bhi.n	800ed88 <_strtod_l+0x98>
 800ed20:	2900      	cmp	r1, #0
 800ed22:	d03c      	beq.n	800ed9e <_strtod_l+0xae>
 800ed24:	2200      	movs	r2, #0
 800ed26:	9208      	str	r2, [sp, #32]
 800ed28:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ed2a:	782a      	ldrb	r2, [r5, #0]
 800ed2c:	2a30      	cmp	r2, #48	@ 0x30
 800ed2e:	f040 80b7 	bne.w	800eea0 <_strtod_l+0x1b0>
 800ed32:	786a      	ldrb	r2, [r5, #1]
 800ed34:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ed38:	2a58      	cmp	r2, #88	@ 0x58
 800ed3a:	d170      	bne.n	800ee1e <_strtod_l+0x12e>
 800ed3c:	9302      	str	r3, [sp, #8]
 800ed3e:	9b08      	ldr	r3, [sp, #32]
 800ed40:	9301      	str	r3, [sp, #4]
 800ed42:	ab12      	add	r3, sp, #72	@ 0x48
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	4a90      	ldr	r2, [pc, #576]	@ (800ef88 <_strtod_l+0x298>)
 800ed48:	9805      	ldr	r0, [sp, #20]
 800ed4a:	ab13      	add	r3, sp, #76	@ 0x4c
 800ed4c:	a911      	add	r1, sp, #68	@ 0x44
 800ed4e:	f002 fb13 	bl	8011378 <__gethex>
 800ed52:	f010 060f 	ands.w	r6, r0, #15
 800ed56:	4604      	mov	r4, r0
 800ed58:	d005      	beq.n	800ed66 <_strtod_l+0x76>
 800ed5a:	2e06      	cmp	r6, #6
 800ed5c:	d12a      	bne.n	800edb4 <_strtod_l+0xc4>
 800ed5e:	3501      	adds	r5, #1
 800ed60:	2300      	movs	r3, #0
 800ed62:	9511      	str	r5, [sp, #68]	@ 0x44
 800ed64:	9308      	str	r3, [sp, #32]
 800ed66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f040 8537 	bne.w	800f7dc <_strtod_l+0xaec>
 800ed6e:	9b08      	ldr	r3, [sp, #32]
 800ed70:	ec4b ab10 	vmov	d0, sl, fp
 800ed74:	b1cb      	cbz	r3, 800edaa <_strtod_l+0xba>
 800ed76:	eeb1 0b40 	vneg.f64	d0, d0
 800ed7a:	b017      	add	sp, #92	@ 0x5c
 800ed7c:	ecbd 8b0a 	vpop	{d8-d12}
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	2920      	cmp	r1, #32
 800ed86:	d1cd      	bne.n	800ed24 <_strtod_l+0x34>
 800ed88:	3201      	adds	r2, #1
 800ed8a:	e7c0      	b.n	800ed0e <_strtod_l+0x1e>
 800ed8c:	292d      	cmp	r1, #45	@ 0x2d
 800ed8e:	d1c9      	bne.n	800ed24 <_strtod_l+0x34>
 800ed90:	2101      	movs	r1, #1
 800ed92:	9108      	str	r1, [sp, #32]
 800ed94:	1c51      	adds	r1, r2, #1
 800ed96:	9111      	str	r1, [sp, #68]	@ 0x44
 800ed98:	7852      	ldrb	r2, [r2, #1]
 800ed9a:	2a00      	cmp	r2, #0
 800ed9c:	d1c4      	bne.n	800ed28 <_strtod_l+0x38>
 800ed9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eda0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f040 8517 	bne.w	800f7d8 <_strtod_l+0xae8>
 800edaa:	ec4b ab10 	vmov	d0, sl, fp
 800edae:	e7e4      	b.n	800ed7a <_strtod_l+0x8a>
 800edb0:	2100      	movs	r1, #0
 800edb2:	e7ee      	b.n	800ed92 <_strtod_l+0xa2>
 800edb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800edb6:	b13a      	cbz	r2, 800edc8 <_strtod_l+0xd8>
 800edb8:	2135      	movs	r1, #53	@ 0x35
 800edba:	a814      	add	r0, sp, #80	@ 0x50
 800edbc:	f003 fad9 	bl	8012372 <__copybits>
 800edc0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800edc2:	9805      	ldr	r0, [sp, #20]
 800edc4:	f002 feb2 	bl	8011b2c <_Bfree>
 800edc8:	1e73      	subs	r3, r6, #1
 800edca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800edcc:	2b04      	cmp	r3, #4
 800edce:	d806      	bhi.n	800edde <_strtod_l+0xee>
 800edd0:	e8df f003 	tbb	[pc, r3]
 800edd4:	201d0314 	.word	0x201d0314
 800edd8:	14          	.byte	0x14
 800edd9:	00          	.byte	0x00
 800edda:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800edde:	05e3      	lsls	r3, r4, #23
 800ede0:	bf48      	it	mi
 800ede2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ede6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edea:	0d1b      	lsrs	r3, r3, #20
 800edec:	051b      	lsls	r3, r3, #20
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1b9      	bne.n	800ed66 <_strtod_l+0x76>
 800edf2:	f001 fbe5 	bl	80105c0 <__errno>
 800edf6:	2322      	movs	r3, #34	@ 0x22
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	e7b4      	b.n	800ed66 <_strtod_l+0x76>
 800edfc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ee00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ee04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ee08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ee0c:	e7e7      	b.n	800edde <_strtod_l+0xee>
 800ee0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ef90 <_strtod_l+0x2a0>
 800ee12:	e7e4      	b.n	800edde <_strtod_l+0xee>
 800ee14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ee18:	f04f 3aff 	mov.w	sl, #4294967295
 800ee1c:	e7df      	b.n	800edde <_strtod_l+0xee>
 800ee1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	9211      	str	r2, [sp, #68]	@ 0x44
 800ee24:	785b      	ldrb	r3, [r3, #1]
 800ee26:	2b30      	cmp	r3, #48	@ 0x30
 800ee28:	d0f9      	beq.n	800ee1e <_strtod_l+0x12e>
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d09b      	beq.n	800ed66 <_strtod_l+0x76>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	9307      	str	r3, [sp, #28]
 800ee32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ee34:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee36:	2300      	movs	r3, #0
 800ee38:	9306      	str	r3, [sp, #24]
 800ee3a:	4699      	mov	r9, r3
 800ee3c:	461d      	mov	r5, r3
 800ee3e:	220a      	movs	r2, #10
 800ee40:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ee42:	7804      	ldrb	r4, [r0, #0]
 800ee44:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ee48:	b2d9      	uxtb	r1, r3
 800ee4a:	2909      	cmp	r1, #9
 800ee4c:	d92a      	bls.n	800eea4 <_strtod_l+0x1b4>
 800ee4e:	494f      	ldr	r1, [pc, #316]	@ (800ef8c <_strtod_l+0x29c>)
 800ee50:	2201      	movs	r2, #1
 800ee52:	f001 fb46 	bl	80104e2 <strncmp>
 800ee56:	b398      	cbz	r0, 800eec0 <_strtod_l+0x1d0>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	462b      	mov	r3, r5
 800ee5e:	4607      	mov	r7, r0
 800ee60:	4601      	mov	r1, r0
 800ee62:	2a65      	cmp	r2, #101	@ 0x65
 800ee64:	d001      	beq.n	800ee6a <_strtod_l+0x17a>
 800ee66:	2a45      	cmp	r2, #69	@ 0x45
 800ee68:	d118      	bne.n	800ee9c <_strtod_l+0x1ac>
 800ee6a:	b91b      	cbnz	r3, 800ee74 <_strtod_l+0x184>
 800ee6c:	9b07      	ldr	r3, [sp, #28]
 800ee6e:	4303      	orrs	r3, r0
 800ee70:	d095      	beq.n	800ed9e <_strtod_l+0xae>
 800ee72:	2300      	movs	r3, #0
 800ee74:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ee78:	f108 0201 	add.w	r2, r8, #1
 800ee7c:	9211      	str	r2, [sp, #68]	@ 0x44
 800ee7e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ee82:	2a2b      	cmp	r2, #43	@ 0x2b
 800ee84:	d074      	beq.n	800ef70 <_strtod_l+0x280>
 800ee86:	2a2d      	cmp	r2, #45	@ 0x2d
 800ee88:	d07a      	beq.n	800ef80 <_strtod_l+0x290>
 800ee8a:	f04f 0e00 	mov.w	lr, #0
 800ee8e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800ee92:	2c09      	cmp	r4, #9
 800ee94:	f240 8082 	bls.w	800ef9c <_strtod_l+0x2ac>
 800ee98:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ee9c:	2400      	movs	r4, #0
 800ee9e:	e09d      	b.n	800efdc <_strtod_l+0x2ec>
 800eea0:	2300      	movs	r3, #0
 800eea2:	e7c5      	b.n	800ee30 <_strtod_l+0x140>
 800eea4:	2d08      	cmp	r5, #8
 800eea6:	bfc8      	it	gt
 800eea8:	9906      	ldrgt	r1, [sp, #24]
 800eeaa:	f100 0001 	add.w	r0, r0, #1
 800eeae:	bfca      	itet	gt
 800eeb0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eeb4:	fb02 3909 	mlale	r9, r2, r9, r3
 800eeb8:	9306      	strgt	r3, [sp, #24]
 800eeba:	3501      	adds	r5, #1
 800eebc:	9011      	str	r0, [sp, #68]	@ 0x44
 800eebe:	e7bf      	b.n	800ee40 <_strtod_l+0x150>
 800eec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	9211      	str	r2, [sp, #68]	@ 0x44
 800eec6:	785a      	ldrb	r2, [r3, #1]
 800eec8:	b3bd      	cbz	r5, 800ef3a <_strtod_l+0x24a>
 800eeca:	4607      	mov	r7, r0
 800eecc:	462b      	mov	r3, r5
 800eece:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eed2:	2909      	cmp	r1, #9
 800eed4:	d912      	bls.n	800eefc <_strtod_l+0x20c>
 800eed6:	2101      	movs	r1, #1
 800eed8:	e7c3      	b.n	800ee62 <_strtod_l+0x172>
 800eeda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eedc:	1c5a      	adds	r2, r3, #1
 800eede:	9211      	str	r2, [sp, #68]	@ 0x44
 800eee0:	785a      	ldrb	r2, [r3, #1]
 800eee2:	3001      	adds	r0, #1
 800eee4:	2a30      	cmp	r2, #48	@ 0x30
 800eee6:	d0f8      	beq.n	800eeda <_strtod_l+0x1ea>
 800eee8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eeec:	2b08      	cmp	r3, #8
 800eeee:	f200 847a 	bhi.w	800f7e6 <_strtod_l+0xaf6>
 800eef2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eef4:	930a      	str	r3, [sp, #40]	@ 0x28
 800eef6:	4607      	mov	r7, r0
 800eef8:	2000      	movs	r0, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	3a30      	subs	r2, #48	@ 0x30
 800eefe:	f100 0101 	add.w	r1, r0, #1
 800ef02:	d014      	beq.n	800ef2e <_strtod_l+0x23e>
 800ef04:	440f      	add	r7, r1
 800ef06:	469c      	mov	ip, r3
 800ef08:	f04f 0e0a 	mov.w	lr, #10
 800ef0c:	f10c 0401 	add.w	r4, ip, #1
 800ef10:	1ae6      	subs	r6, r4, r3
 800ef12:	42b1      	cmp	r1, r6
 800ef14:	dc13      	bgt.n	800ef3e <_strtod_l+0x24e>
 800ef16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ef1a:	1819      	adds	r1, r3, r0
 800ef1c:	2908      	cmp	r1, #8
 800ef1e:	f103 0301 	add.w	r3, r3, #1
 800ef22:	4403      	add	r3, r0
 800ef24:	dc19      	bgt.n	800ef5a <_strtod_l+0x26a>
 800ef26:	210a      	movs	r1, #10
 800ef28:	fb01 2909 	mla	r9, r1, r9, r2
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ef30:	1c50      	adds	r0, r2, #1
 800ef32:	9011      	str	r0, [sp, #68]	@ 0x44
 800ef34:	7852      	ldrb	r2, [r2, #1]
 800ef36:	4608      	mov	r0, r1
 800ef38:	e7c9      	b.n	800eece <_strtod_l+0x1de>
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	e7d2      	b.n	800eee4 <_strtod_l+0x1f4>
 800ef3e:	f1bc 0f08 	cmp.w	ip, #8
 800ef42:	dc03      	bgt.n	800ef4c <_strtod_l+0x25c>
 800ef44:	fb0e f909 	mul.w	r9, lr, r9
 800ef48:	46a4      	mov	ip, r4
 800ef4a:	e7df      	b.n	800ef0c <_strtod_l+0x21c>
 800ef4c:	2c10      	cmp	r4, #16
 800ef4e:	bfde      	ittt	le
 800ef50:	9e06      	ldrle	r6, [sp, #24]
 800ef52:	fb0e f606 	mulle.w	r6, lr, r6
 800ef56:	9606      	strle	r6, [sp, #24]
 800ef58:	e7f6      	b.n	800ef48 <_strtod_l+0x258>
 800ef5a:	290f      	cmp	r1, #15
 800ef5c:	bfdf      	itttt	le
 800ef5e:	9806      	ldrle	r0, [sp, #24]
 800ef60:	210a      	movle	r1, #10
 800ef62:	fb01 2200 	mlale	r2, r1, r0, r2
 800ef66:	9206      	strle	r2, [sp, #24]
 800ef68:	e7e0      	b.n	800ef2c <_strtod_l+0x23c>
 800ef6a:	2700      	movs	r7, #0
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	e77d      	b.n	800ee6c <_strtod_l+0x17c>
 800ef70:	f04f 0e00 	mov.w	lr, #0
 800ef74:	f108 0202 	add.w	r2, r8, #2
 800ef78:	9211      	str	r2, [sp, #68]	@ 0x44
 800ef7a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ef7e:	e786      	b.n	800ee8e <_strtod_l+0x19e>
 800ef80:	f04f 0e01 	mov.w	lr, #1
 800ef84:	e7f6      	b.n	800ef74 <_strtod_l+0x284>
 800ef86:	bf00      	nop
 800ef88:	08014768 	.word	0x08014768
 800ef8c:	08014580 	.word	0x08014580
 800ef90:	7ff00000 	.word	0x7ff00000
 800ef94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ef96:	1c54      	adds	r4, r2, #1
 800ef98:	9411      	str	r4, [sp, #68]	@ 0x44
 800ef9a:	7852      	ldrb	r2, [r2, #1]
 800ef9c:	2a30      	cmp	r2, #48	@ 0x30
 800ef9e:	d0f9      	beq.n	800ef94 <_strtod_l+0x2a4>
 800efa0:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800efa4:	2c08      	cmp	r4, #8
 800efa6:	f63f af79 	bhi.w	800ee9c <_strtod_l+0x1ac>
 800efaa:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800efae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800efb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800efb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800efb4:	1c54      	adds	r4, r2, #1
 800efb6:	9411      	str	r4, [sp, #68]	@ 0x44
 800efb8:	7852      	ldrb	r2, [r2, #1]
 800efba:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800efbe:	2e09      	cmp	r6, #9
 800efc0:	d937      	bls.n	800f032 <_strtod_l+0x342>
 800efc2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800efc4:	1ba4      	subs	r4, r4, r6
 800efc6:	2c08      	cmp	r4, #8
 800efc8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800efcc:	dc02      	bgt.n	800efd4 <_strtod_l+0x2e4>
 800efce:	4564      	cmp	r4, ip
 800efd0:	bfa8      	it	ge
 800efd2:	4664      	movge	r4, ip
 800efd4:	f1be 0f00 	cmp.w	lr, #0
 800efd8:	d000      	beq.n	800efdc <_strtod_l+0x2ec>
 800efda:	4264      	negs	r4, r4
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d14d      	bne.n	800f07c <_strtod_l+0x38c>
 800efe0:	9b07      	ldr	r3, [sp, #28]
 800efe2:	4318      	orrs	r0, r3
 800efe4:	f47f aebf 	bne.w	800ed66 <_strtod_l+0x76>
 800efe8:	2900      	cmp	r1, #0
 800efea:	f47f aed8 	bne.w	800ed9e <_strtod_l+0xae>
 800efee:	2a69      	cmp	r2, #105	@ 0x69
 800eff0:	d027      	beq.n	800f042 <_strtod_l+0x352>
 800eff2:	dc24      	bgt.n	800f03e <_strtod_l+0x34e>
 800eff4:	2a49      	cmp	r2, #73	@ 0x49
 800eff6:	d024      	beq.n	800f042 <_strtod_l+0x352>
 800eff8:	2a4e      	cmp	r2, #78	@ 0x4e
 800effa:	f47f aed0 	bne.w	800ed9e <_strtod_l+0xae>
 800effe:	4997      	ldr	r1, [pc, #604]	@ (800f25c <_strtod_l+0x56c>)
 800f000:	a811      	add	r0, sp, #68	@ 0x44
 800f002:	f002 fbdb 	bl	80117bc <__match>
 800f006:	2800      	cmp	r0, #0
 800f008:	f43f aec9 	beq.w	800ed9e <_strtod_l+0xae>
 800f00c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b28      	cmp	r3, #40	@ 0x28
 800f012:	d12d      	bne.n	800f070 <_strtod_l+0x380>
 800f014:	4992      	ldr	r1, [pc, #584]	@ (800f260 <_strtod_l+0x570>)
 800f016:	aa14      	add	r2, sp, #80	@ 0x50
 800f018:	a811      	add	r0, sp, #68	@ 0x44
 800f01a:	f002 fbe3 	bl	80117e4 <__hexnan>
 800f01e:	2805      	cmp	r0, #5
 800f020:	d126      	bne.n	800f070 <_strtod_l+0x380>
 800f022:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f024:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800f028:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f02c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f030:	e699      	b.n	800ed66 <_strtod_l+0x76>
 800f032:	240a      	movs	r4, #10
 800f034:	fb04 2c0c 	mla	ip, r4, ip, r2
 800f038:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800f03c:	e7b9      	b.n	800efb2 <_strtod_l+0x2c2>
 800f03e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f040:	e7db      	b.n	800effa <_strtod_l+0x30a>
 800f042:	4988      	ldr	r1, [pc, #544]	@ (800f264 <_strtod_l+0x574>)
 800f044:	a811      	add	r0, sp, #68	@ 0x44
 800f046:	f002 fbb9 	bl	80117bc <__match>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	f43f aea7 	beq.w	800ed9e <_strtod_l+0xae>
 800f050:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f052:	4985      	ldr	r1, [pc, #532]	@ (800f268 <_strtod_l+0x578>)
 800f054:	3b01      	subs	r3, #1
 800f056:	a811      	add	r0, sp, #68	@ 0x44
 800f058:	9311      	str	r3, [sp, #68]	@ 0x44
 800f05a:	f002 fbaf 	bl	80117bc <__match>
 800f05e:	b910      	cbnz	r0, 800f066 <_strtod_l+0x376>
 800f060:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f062:	3301      	adds	r3, #1
 800f064:	9311      	str	r3, [sp, #68]	@ 0x44
 800f066:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800f27c <_strtod_l+0x58c>
 800f06a:	f04f 0a00 	mov.w	sl, #0
 800f06e:	e67a      	b.n	800ed66 <_strtod_l+0x76>
 800f070:	487e      	ldr	r0, [pc, #504]	@ (800f26c <_strtod_l+0x57c>)
 800f072:	f001 fae1 	bl	8010638 <nan>
 800f076:	ec5b ab10 	vmov	sl, fp, d0
 800f07a:	e674      	b.n	800ed66 <_strtod_l+0x76>
 800f07c:	ee07 9a90 	vmov	s15, r9
 800f080:	1be2      	subs	r2, r4, r7
 800f082:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f086:	2d00      	cmp	r5, #0
 800f088:	bf08      	it	eq
 800f08a:	461d      	moveq	r5, r3
 800f08c:	2b10      	cmp	r3, #16
 800f08e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f090:	461a      	mov	r2, r3
 800f092:	bfa8      	it	ge
 800f094:	2210      	movge	r2, #16
 800f096:	2b09      	cmp	r3, #9
 800f098:	ec5b ab17 	vmov	sl, fp, d7
 800f09c:	dc15      	bgt.n	800f0ca <_strtod_l+0x3da>
 800f09e:	1be1      	subs	r1, r4, r7
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	f43f ae60 	beq.w	800ed66 <_strtod_l+0x76>
 800f0a6:	eba4 0107 	sub.w	r1, r4, r7
 800f0aa:	dd72      	ble.n	800f192 <_strtod_l+0x4a2>
 800f0ac:	2916      	cmp	r1, #22
 800f0ae:	dc59      	bgt.n	800f164 <_strtod_l+0x474>
 800f0b0:	4b6f      	ldr	r3, [pc, #444]	@ (800f270 <_strtod_l+0x580>)
 800f0b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0b8:	ed93 7b00 	vldr	d7, [r3]
 800f0bc:	ec4b ab16 	vmov	d6, sl, fp
 800f0c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0c4:	ec5b ab17 	vmov	sl, fp, d7
 800f0c8:	e64d      	b.n	800ed66 <_strtod_l+0x76>
 800f0ca:	4969      	ldr	r1, [pc, #420]	@ (800f270 <_strtod_l+0x580>)
 800f0cc:	eddd 6a06 	vldr	s13, [sp, #24]
 800f0d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f0d4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800f0d8:	2b0f      	cmp	r3, #15
 800f0da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f0de:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f0e2:	ec5b ab16 	vmov	sl, fp, d6
 800f0e6:	ddda      	ble.n	800f09e <_strtod_l+0x3ae>
 800f0e8:	1a9a      	subs	r2, r3, r2
 800f0ea:	1be1      	subs	r1, r4, r7
 800f0ec:	440a      	add	r2, r1
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	f340 8094 	ble.w	800f21c <_strtod_l+0x52c>
 800f0f4:	f012 000f 	ands.w	r0, r2, #15
 800f0f8:	d00a      	beq.n	800f110 <_strtod_l+0x420>
 800f0fa:	495d      	ldr	r1, [pc, #372]	@ (800f270 <_strtod_l+0x580>)
 800f0fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f100:	ed91 7b00 	vldr	d7, [r1]
 800f104:	ec4b ab16 	vmov	d6, sl, fp
 800f108:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f10c:	ec5b ab17 	vmov	sl, fp, d7
 800f110:	f032 020f 	bics.w	r2, r2, #15
 800f114:	d073      	beq.n	800f1fe <_strtod_l+0x50e>
 800f116:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800f11a:	dd47      	ble.n	800f1ac <_strtod_l+0x4bc>
 800f11c:	2400      	movs	r4, #0
 800f11e:	4625      	mov	r5, r4
 800f120:	9407      	str	r4, [sp, #28]
 800f122:	4626      	mov	r6, r4
 800f124:	9a05      	ldr	r2, [sp, #20]
 800f126:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f27c <_strtod_l+0x58c>
 800f12a:	2322      	movs	r3, #34	@ 0x22
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	f04f 0a00 	mov.w	sl, #0
 800f132:	9b07      	ldr	r3, [sp, #28]
 800f134:	2b00      	cmp	r3, #0
 800f136:	f43f ae16 	beq.w	800ed66 <_strtod_l+0x76>
 800f13a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f13c:	9805      	ldr	r0, [sp, #20]
 800f13e:	f002 fcf5 	bl	8011b2c <_Bfree>
 800f142:	9805      	ldr	r0, [sp, #20]
 800f144:	4631      	mov	r1, r6
 800f146:	f002 fcf1 	bl	8011b2c <_Bfree>
 800f14a:	9805      	ldr	r0, [sp, #20]
 800f14c:	4629      	mov	r1, r5
 800f14e:	f002 fced 	bl	8011b2c <_Bfree>
 800f152:	9907      	ldr	r1, [sp, #28]
 800f154:	9805      	ldr	r0, [sp, #20]
 800f156:	f002 fce9 	bl	8011b2c <_Bfree>
 800f15a:	9805      	ldr	r0, [sp, #20]
 800f15c:	4621      	mov	r1, r4
 800f15e:	f002 fce5 	bl	8011b2c <_Bfree>
 800f162:	e600      	b.n	800ed66 <_strtod_l+0x76>
 800f164:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800f168:	1be0      	subs	r0, r4, r7
 800f16a:	4281      	cmp	r1, r0
 800f16c:	dbbc      	blt.n	800f0e8 <_strtod_l+0x3f8>
 800f16e:	4a40      	ldr	r2, [pc, #256]	@ (800f270 <_strtod_l+0x580>)
 800f170:	f1c3 030f 	rsb	r3, r3, #15
 800f174:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f178:	ed91 7b00 	vldr	d7, [r1]
 800f17c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f17e:	ec4b ab16 	vmov	d6, sl, fp
 800f182:	1acb      	subs	r3, r1, r3
 800f184:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f188:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f18c:	ed92 6b00 	vldr	d6, [r2]
 800f190:	e796      	b.n	800f0c0 <_strtod_l+0x3d0>
 800f192:	3116      	adds	r1, #22
 800f194:	dba8      	blt.n	800f0e8 <_strtod_l+0x3f8>
 800f196:	4b36      	ldr	r3, [pc, #216]	@ (800f270 <_strtod_l+0x580>)
 800f198:	1b3c      	subs	r4, r7, r4
 800f19a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f19e:	ed94 7b00 	vldr	d7, [r4]
 800f1a2:	ec4b ab16 	vmov	d6, sl, fp
 800f1a6:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f1aa:	e78b      	b.n	800f0c4 <_strtod_l+0x3d4>
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	ec4b ab17 	vmov	d7, sl, fp
 800f1b2:	4e30      	ldr	r6, [pc, #192]	@ (800f274 <_strtod_l+0x584>)
 800f1b4:	1112      	asrs	r2, r2, #4
 800f1b6:	4601      	mov	r1, r0
 800f1b8:	2a01      	cmp	r2, #1
 800f1ba:	dc23      	bgt.n	800f204 <_strtod_l+0x514>
 800f1bc:	b108      	cbz	r0, 800f1c2 <_strtod_l+0x4d2>
 800f1be:	ec5b ab17 	vmov	sl, fp, d7
 800f1c2:	4a2c      	ldr	r2, [pc, #176]	@ (800f274 <_strtod_l+0x584>)
 800f1c4:	482c      	ldr	r0, [pc, #176]	@ (800f278 <_strtod_l+0x588>)
 800f1c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f1ca:	ed92 7b00 	vldr	d7, [r2]
 800f1ce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f1d2:	ec4b ab16 	vmov	d6, sl, fp
 800f1d6:	4a29      	ldr	r2, [pc, #164]	@ (800f27c <_strtod_l+0x58c>)
 800f1d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1dc:	ee17 1a90 	vmov	r1, s15
 800f1e0:	400a      	ands	r2, r1
 800f1e2:	4282      	cmp	r2, r0
 800f1e4:	ec5b ab17 	vmov	sl, fp, d7
 800f1e8:	d898      	bhi.n	800f11c <_strtod_l+0x42c>
 800f1ea:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800f1ee:	4282      	cmp	r2, r0
 800f1f0:	bf86      	itte	hi
 800f1f2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800f280 <_strtod_l+0x590>
 800f1f6:	f04f 3aff 	movhi.w	sl, #4294967295
 800f1fa:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800f1fe:	2200      	movs	r2, #0
 800f200:	9206      	str	r2, [sp, #24]
 800f202:	e076      	b.n	800f2f2 <_strtod_l+0x602>
 800f204:	f012 0f01 	tst.w	r2, #1
 800f208:	d004      	beq.n	800f214 <_strtod_l+0x524>
 800f20a:	ed96 6b00 	vldr	d6, [r6]
 800f20e:	2001      	movs	r0, #1
 800f210:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f214:	3101      	adds	r1, #1
 800f216:	1052      	asrs	r2, r2, #1
 800f218:	3608      	adds	r6, #8
 800f21a:	e7cd      	b.n	800f1b8 <_strtod_l+0x4c8>
 800f21c:	d0ef      	beq.n	800f1fe <_strtod_l+0x50e>
 800f21e:	4252      	negs	r2, r2
 800f220:	f012 000f 	ands.w	r0, r2, #15
 800f224:	d00a      	beq.n	800f23c <_strtod_l+0x54c>
 800f226:	4912      	ldr	r1, [pc, #72]	@ (800f270 <_strtod_l+0x580>)
 800f228:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f22c:	ed91 7b00 	vldr	d7, [r1]
 800f230:	ec4b ab16 	vmov	d6, sl, fp
 800f234:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f238:	ec5b ab17 	vmov	sl, fp, d7
 800f23c:	1112      	asrs	r2, r2, #4
 800f23e:	d0de      	beq.n	800f1fe <_strtod_l+0x50e>
 800f240:	2a1f      	cmp	r2, #31
 800f242:	dd1f      	ble.n	800f284 <_strtod_l+0x594>
 800f244:	2400      	movs	r4, #0
 800f246:	4625      	mov	r5, r4
 800f248:	9407      	str	r4, [sp, #28]
 800f24a:	4626      	mov	r6, r4
 800f24c:	9a05      	ldr	r2, [sp, #20]
 800f24e:	2322      	movs	r3, #34	@ 0x22
 800f250:	f04f 0a00 	mov.w	sl, #0
 800f254:	f04f 0b00 	mov.w	fp, #0
 800f258:	6013      	str	r3, [r2, #0]
 800f25a:	e76a      	b.n	800f132 <_strtod_l+0x442>
 800f25c:	0801458f 	.word	0x0801458f
 800f260:	08014754 	.word	0x08014754
 800f264:	08014587 	.word	0x08014587
 800f268:	080145c1 	.word	0x080145c1
 800f26c:	08014750 	.word	0x08014750
 800f270:	080148e0 	.word	0x080148e0
 800f274:	080148b8 	.word	0x080148b8
 800f278:	7ca00000 	.word	0x7ca00000
 800f27c:	7ff00000 	.word	0x7ff00000
 800f280:	7fefffff 	.word	0x7fefffff
 800f284:	f012 0110 	ands.w	r1, r2, #16
 800f288:	bf18      	it	ne
 800f28a:	216a      	movne	r1, #106	@ 0x6a
 800f28c:	9106      	str	r1, [sp, #24]
 800f28e:	ec4b ab17 	vmov	d7, sl, fp
 800f292:	49af      	ldr	r1, [pc, #700]	@ (800f550 <_strtod_l+0x860>)
 800f294:	2000      	movs	r0, #0
 800f296:	07d6      	lsls	r6, r2, #31
 800f298:	d504      	bpl.n	800f2a4 <_strtod_l+0x5b4>
 800f29a:	ed91 6b00 	vldr	d6, [r1]
 800f29e:	2001      	movs	r0, #1
 800f2a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2a4:	1052      	asrs	r2, r2, #1
 800f2a6:	f101 0108 	add.w	r1, r1, #8
 800f2aa:	d1f4      	bne.n	800f296 <_strtod_l+0x5a6>
 800f2ac:	b108      	cbz	r0, 800f2b2 <_strtod_l+0x5c2>
 800f2ae:	ec5b ab17 	vmov	sl, fp, d7
 800f2b2:	9a06      	ldr	r2, [sp, #24]
 800f2b4:	b1b2      	cbz	r2, 800f2e4 <_strtod_l+0x5f4>
 800f2b6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800f2ba:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800f2be:	2a00      	cmp	r2, #0
 800f2c0:	4658      	mov	r0, fp
 800f2c2:	dd0f      	ble.n	800f2e4 <_strtod_l+0x5f4>
 800f2c4:	2a1f      	cmp	r2, #31
 800f2c6:	dd55      	ble.n	800f374 <_strtod_l+0x684>
 800f2c8:	2a34      	cmp	r2, #52	@ 0x34
 800f2ca:	bfde      	ittt	le
 800f2cc:	f04f 32ff 	movle.w	r2, #4294967295
 800f2d0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800f2d4:	408a      	lslle	r2, r1
 800f2d6:	f04f 0a00 	mov.w	sl, #0
 800f2da:	bfcc      	ite	gt
 800f2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f2e0:	ea02 0b00 	andle.w	fp, r2, r0
 800f2e4:	ec4b ab17 	vmov	d7, sl, fp
 800f2e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f0:	d0a8      	beq.n	800f244 <_strtod_l+0x554>
 800f2f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f2f4:	9805      	ldr	r0, [sp, #20]
 800f2f6:	f8cd 9000 	str.w	r9, [sp]
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	f002 fc7e 	bl	8011bfc <__s2b>
 800f300:	9007      	str	r0, [sp, #28]
 800f302:	2800      	cmp	r0, #0
 800f304:	f43f af0a 	beq.w	800f11c <_strtod_l+0x42c>
 800f308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f30a:	1b3f      	subs	r7, r7, r4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bfb4      	ite	lt
 800f310:	463b      	movlt	r3, r7
 800f312:	2300      	movge	r3, #0
 800f314:	930a      	str	r3, [sp, #40]	@ 0x28
 800f316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f318:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800f540 <_strtod_l+0x850>
 800f31c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f320:	2400      	movs	r4, #0
 800f322:	930d      	str	r3, [sp, #52]	@ 0x34
 800f324:	4625      	mov	r5, r4
 800f326:	9b07      	ldr	r3, [sp, #28]
 800f328:	9805      	ldr	r0, [sp, #20]
 800f32a:	6859      	ldr	r1, [r3, #4]
 800f32c:	f002 fbbe 	bl	8011aac <_Balloc>
 800f330:	4606      	mov	r6, r0
 800f332:	2800      	cmp	r0, #0
 800f334:	f43f aef6 	beq.w	800f124 <_strtod_l+0x434>
 800f338:	9b07      	ldr	r3, [sp, #28]
 800f33a:	691a      	ldr	r2, [r3, #16]
 800f33c:	ec4b ab19 	vmov	d9, sl, fp
 800f340:	3202      	adds	r2, #2
 800f342:	f103 010c 	add.w	r1, r3, #12
 800f346:	0092      	lsls	r2, r2, #2
 800f348:	300c      	adds	r0, #12
 800f34a:	f001 f966 	bl	801061a <memcpy>
 800f34e:	eeb0 0b49 	vmov.f64	d0, d9
 800f352:	9805      	ldr	r0, [sp, #20]
 800f354:	aa14      	add	r2, sp, #80	@ 0x50
 800f356:	a913      	add	r1, sp, #76	@ 0x4c
 800f358:	f002 ff84 	bl	8012264 <__d2b>
 800f35c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f35e:	2800      	cmp	r0, #0
 800f360:	f43f aee0 	beq.w	800f124 <_strtod_l+0x434>
 800f364:	9805      	ldr	r0, [sp, #20]
 800f366:	2101      	movs	r1, #1
 800f368:	f002 fcde 	bl	8011d28 <__i2b>
 800f36c:	4605      	mov	r5, r0
 800f36e:	b940      	cbnz	r0, 800f382 <_strtod_l+0x692>
 800f370:	2500      	movs	r5, #0
 800f372:	e6d7      	b.n	800f124 <_strtod_l+0x434>
 800f374:	f04f 31ff 	mov.w	r1, #4294967295
 800f378:	fa01 f202 	lsl.w	r2, r1, r2
 800f37c:	ea02 0a0a 	and.w	sl, r2, sl
 800f380:	e7b0      	b.n	800f2e4 <_strtod_l+0x5f4>
 800f382:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800f384:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f386:	2f00      	cmp	r7, #0
 800f388:	bfab      	itete	ge
 800f38a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800f38c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800f38e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800f392:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800f396:	bfac      	ite	ge
 800f398:	eb07 0903 	addge.w	r9, r7, r3
 800f39c:	eba3 0807 	sublt.w	r8, r3, r7
 800f3a0:	9b06      	ldr	r3, [sp, #24]
 800f3a2:	1aff      	subs	r7, r7, r3
 800f3a4:	4417      	add	r7, r2
 800f3a6:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800f3aa:	4a6a      	ldr	r2, [pc, #424]	@ (800f554 <_strtod_l+0x864>)
 800f3ac:	3f01      	subs	r7, #1
 800f3ae:	4297      	cmp	r7, r2
 800f3b0:	da51      	bge.n	800f456 <_strtod_l+0x766>
 800f3b2:	1bd1      	subs	r1, r2, r7
 800f3b4:	291f      	cmp	r1, #31
 800f3b6:	eba3 0301 	sub.w	r3, r3, r1
 800f3ba:	f04f 0201 	mov.w	r2, #1
 800f3be:	dc3e      	bgt.n	800f43e <_strtod_l+0x74e>
 800f3c0:	408a      	lsls	r2, r1
 800f3c2:	920c      	str	r2, [sp, #48]	@ 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f3c8:	eb09 0703 	add.w	r7, r9, r3
 800f3cc:	4498      	add	r8, r3
 800f3ce:	9b06      	ldr	r3, [sp, #24]
 800f3d0:	45b9      	cmp	r9, r7
 800f3d2:	4498      	add	r8, r3
 800f3d4:	464b      	mov	r3, r9
 800f3d6:	bfa8      	it	ge
 800f3d8:	463b      	movge	r3, r7
 800f3da:	4543      	cmp	r3, r8
 800f3dc:	bfa8      	it	ge
 800f3de:	4643      	movge	r3, r8
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	bfc2      	ittt	gt
 800f3e4:	1aff      	subgt	r7, r7, r3
 800f3e6:	eba8 0803 	subgt.w	r8, r8, r3
 800f3ea:	eba9 0903 	subgt.w	r9, r9, r3
 800f3ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dd16      	ble.n	800f422 <_strtod_l+0x732>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	9805      	ldr	r0, [sp, #20]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	f002 fd4d 	bl	8011e98 <__pow5mult>
 800f3fe:	4605      	mov	r5, r0
 800f400:	2800      	cmp	r0, #0
 800f402:	d0b5      	beq.n	800f370 <_strtod_l+0x680>
 800f404:	4601      	mov	r1, r0
 800f406:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f408:	9805      	ldr	r0, [sp, #20]
 800f40a:	f002 fca3 	bl	8011d54 <__multiply>
 800f40e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f410:	2800      	cmp	r0, #0
 800f412:	f43f ae87 	beq.w	800f124 <_strtod_l+0x434>
 800f416:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f418:	9805      	ldr	r0, [sp, #20]
 800f41a:	f002 fb87 	bl	8011b2c <_Bfree>
 800f41e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f420:	9312      	str	r3, [sp, #72]	@ 0x48
 800f422:	2f00      	cmp	r7, #0
 800f424:	dc1b      	bgt.n	800f45e <_strtod_l+0x76e>
 800f426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f428:	2b00      	cmp	r3, #0
 800f42a:	dd21      	ble.n	800f470 <_strtod_l+0x780>
 800f42c:	4631      	mov	r1, r6
 800f42e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f430:	9805      	ldr	r0, [sp, #20]
 800f432:	f002 fd31 	bl	8011e98 <__pow5mult>
 800f436:	4606      	mov	r6, r0
 800f438:	b9d0      	cbnz	r0, 800f470 <_strtod_l+0x780>
 800f43a:	2600      	movs	r6, #0
 800f43c:	e672      	b.n	800f124 <_strtod_l+0x434>
 800f43e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800f442:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800f446:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800f44a:	37e2      	adds	r7, #226	@ 0xe2
 800f44c:	fa02 f107 	lsl.w	r1, r2, r7
 800f450:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f452:	920c      	str	r2, [sp, #48]	@ 0x30
 800f454:	e7b8      	b.n	800f3c8 <_strtod_l+0x6d8>
 800f456:	2200      	movs	r2, #0
 800f458:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f45a:	2201      	movs	r2, #1
 800f45c:	e7f9      	b.n	800f452 <_strtod_l+0x762>
 800f45e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f460:	9805      	ldr	r0, [sp, #20]
 800f462:	463a      	mov	r2, r7
 800f464:	f002 fd72 	bl	8011f4c <__lshift>
 800f468:	9012      	str	r0, [sp, #72]	@ 0x48
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d1db      	bne.n	800f426 <_strtod_l+0x736>
 800f46e:	e659      	b.n	800f124 <_strtod_l+0x434>
 800f470:	f1b8 0f00 	cmp.w	r8, #0
 800f474:	dd07      	ble.n	800f486 <_strtod_l+0x796>
 800f476:	4631      	mov	r1, r6
 800f478:	9805      	ldr	r0, [sp, #20]
 800f47a:	4642      	mov	r2, r8
 800f47c:	f002 fd66 	bl	8011f4c <__lshift>
 800f480:	4606      	mov	r6, r0
 800f482:	2800      	cmp	r0, #0
 800f484:	d0d9      	beq.n	800f43a <_strtod_l+0x74a>
 800f486:	f1b9 0f00 	cmp.w	r9, #0
 800f48a:	dd08      	ble.n	800f49e <_strtod_l+0x7ae>
 800f48c:	4629      	mov	r1, r5
 800f48e:	9805      	ldr	r0, [sp, #20]
 800f490:	464a      	mov	r2, r9
 800f492:	f002 fd5b 	bl	8011f4c <__lshift>
 800f496:	4605      	mov	r5, r0
 800f498:	2800      	cmp	r0, #0
 800f49a:	f43f ae43 	beq.w	800f124 <_strtod_l+0x434>
 800f49e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f4a0:	9805      	ldr	r0, [sp, #20]
 800f4a2:	4632      	mov	r2, r6
 800f4a4:	f002 fdda 	bl	801205c <__mdiff>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f43f ae3a 	beq.w	800f124 <_strtod_l+0x434>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800f4b6:	60c3      	str	r3, [r0, #12]
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	f002 fdb3 	bl	8012024 <__mcmp>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	da4c      	bge.n	800f55c <_strtod_l+0x86c>
 800f4c2:	ea58 080a 	orrs.w	r8, r8, sl
 800f4c6:	d172      	bne.n	800f5ae <_strtod_l+0x8be>
 800f4c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d16e      	bne.n	800f5ae <_strtod_l+0x8be>
 800f4d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4d4:	0d1b      	lsrs	r3, r3, #20
 800f4d6:	051b      	lsls	r3, r3, #20
 800f4d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f4dc:	d967      	bls.n	800f5ae <_strtod_l+0x8be>
 800f4de:	6963      	ldr	r3, [r4, #20]
 800f4e0:	b913      	cbnz	r3, 800f4e8 <_strtod_l+0x7f8>
 800f4e2:	6923      	ldr	r3, [r4, #16]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	dd62      	ble.n	800f5ae <_strtod_l+0x8be>
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	9805      	ldr	r0, [sp, #20]
 800f4ee:	f002 fd2d 	bl	8011f4c <__lshift>
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	f002 fd95 	bl	8012024 <__mcmp>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	dd57      	ble.n	800f5ae <_strtod_l+0x8be>
 800f4fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f502:	9a06      	ldr	r2, [sp, #24]
 800f504:	0d1b      	lsrs	r3, r3, #20
 800f506:	051b      	lsls	r3, r3, #20
 800f508:	2a00      	cmp	r2, #0
 800f50a:	d06e      	beq.n	800f5ea <_strtod_l+0x8fa>
 800f50c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f510:	d86b      	bhi.n	800f5ea <_strtod_l+0x8fa>
 800f512:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f516:	f67f ae99 	bls.w	800f24c <_strtod_l+0x55c>
 800f51a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800f548 <_strtod_l+0x858>
 800f51e:	ec4b ab16 	vmov	d6, sl, fp
 800f522:	4b0d      	ldr	r3, [pc, #52]	@ (800f558 <_strtod_l+0x868>)
 800f524:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f528:	ee17 2a90 	vmov	r2, s15
 800f52c:	4013      	ands	r3, r2
 800f52e:	ec5b ab17 	vmov	sl, fp, d7
 800f532:	2b00      	cmp	r3, #0
 800f534:	f47f ae01 	bne.w	800f13a <_strtod_l+0x44a>
 800f538:	9a05      	ldr	r2, [sp, #20]
 800f53a:	2322      	movs	r3, #34	@ 0x22
 800f53c:	6013      	str	r3, [r2, #0]
 800f53e:	e5fc      	b.n	800f13a <_strtod_l+0x44a>
 800f540:	ffc00000 	.word	0xffc00000
 800f544:	41dfffff 	.word	0x41dfffff
 800f548:	00000000 	.word	0x00000000
 800f54c:	39500000 	.word	0x39500000
 800f550:	08014780 	.word	0x08014780
 800f554:	fffffc02 	.word	0xfffffc02
 800f558:	7ff00000 	.word	0x7ff00000
 800f55c:	46d9      	mov	r9, fp
 800f55e:	d15d      	bne.n	800f61c <_strtod_l+0x92c>
 800f560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f564:	f1b8 0f00 	cmp.w	r8, #0
 800f568:	d02a      	beq.n	800f5c0 <_strtod_l+0x8d0>
 800f56a:	4aa9      	ldr	r2, [pc, #676]	@ (800f810 <_strtod_l+0xb20>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d12a      	bne.n	800f5c6 <_strtod_l+0x8d6>
 800f570:	9b06      	ldr	r3, [sp, #24]
 800f572:	4652      	mov	r2, sl
 800f574:	b1fb      	cbz	r3, 800f5b6 <_strtod_l+0x8c6>
 800f576:	4ba7      	ldr	r3, [pc, #668]	@ (800f814 <_strtod_l+0xb24>)
 800f578:	ea0b 0303 	and.w	r3, fp, r3
 800f57c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f580:	f04f 31ff 	mov.w	r1, #4294967295
 800f584:	d81a      	bhi.n	800f5bc <_strtod_l+0x8cc>
 800f586:	0d1b      	lsrs	r3, r3, #20
 800f588:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f58c:	fa01 f303 	lsl.w	r3, r1, r3
 800f590:	429a      	cmp	r2, r3
 800f592:	d118      	bne.n	800f5c6 <_strtod_l+0x8d6>
 800f594:	4ba0      	ldr	r3, [pc, #640]	@ (800f818 <_strtod_l+0xb28>)
 800f596:	4599      	cmp	r9, r3
 800f598:	d102      	bne.n	800f5a0 <_strtod_l+0x8b0>
 800f59a:	3201      	adds	r2, #1
 800f59c:	f43f adc2 	beq.w	800f124 <_strtod_l+0x434>
 800f5a0:	4b9c      	ldr	r3, [pc, #624]	@ (800f814 <_strtod_l+0xb24>)
 800f5a2:	ea09 0303 	and.w	r3, r9, r3
 800f5a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800f5aa:	f04f 0a00 	mov.w	sl, #0
 800f5ae:	9b06      	ldr	r3, [sp, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1b2      	bne.n	800f51a <_strtod_l+0x82a>
 800f5b4:	e5c1      	b.n	800f13a <_strtod_l+0x44a>
 800f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ba:	e7e9      	b.n	800f590 <_strtod_l+0x8a0>
 800f5bc:	460b      	mov	r3, r1
 800f5be:	e7e7      	b.n	800f590 <_strtod_l+0x8a0>
 800f5c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f5c4:	d09b      	beq.n	800f4fe <_strtod_l+0x80e>
 800f5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5c8:	b1c3      	cbz	r3, 800f5fc <_strtod_l+0x90c>
 800f5ca:	ea13 0f09 	tst.w	r3, r9
 800f5ce:	d0ee      	beq.n	800f5ae <_strtod_l+0x8be>
 800f5d0:	9a06      	ldr	r2, [sp, #24]
 800f5d2:	4650      	mov	r0, sl
 800f5d4:	4659      	mov	r1, fp
 800f5d6:	f1b8 0f00 	cmp.w	r8, #0
 800f5da:	d013      	beq.n	800f604 <_strtod_l+0x914>
 800f5dc:	f7ff fb6d 	bl	800ecba <sulp>
 800f5e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f5e4:	ec5b ab17 	vmov	sl, fp, d7
 800f5e8:	e7e1      	b.n	800f5ae <_strtod_l+0x8be>
 800f5ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f5ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f5f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f5f6:	f04f 3aff 	mov.w	sl, #4294967295
 800f5fa:	e7d8      	b.n	800f5ae <_strtod_l+0x8be>
 800f5fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5fe:	ea13 0f0a 	tst.w	r3, sl
 800f602:	e7e4      	b.n	800f5ce <_strtod_l+0x8de>
 800f604:	f7ff fb59 	bl	800ecba <sulp>
 800f608:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f60c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	ec5b ab10 	vmov	sl, fp, d0
 800f618:	d1c9      	bne.n	800f5ae <_strtod_l+0x8be>
 800f61a:	e617      	b.n	800f24c <_strtod_l+0x55c>
 800f61c:	4629      	mov	r1, r5
 800f61e:	4620      	mov	r0, r4
 800f620:	f002 fe78 	bl	8012314 <__ratio>
 800f624:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f628:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f630:	d85d      	bhi.n	800f6ee <_strtod_l+0x9fe>
 800f632:	f1b8 0f00 	cmp.w	r8, #0
 800f636:	d164      	bne.n	800f702 <_strtod_l+0xa12>
 800f638:	f1ba 0f00 	cmp.w	sl, #0
 800f63c:	d14b      	bne.n	800f6d6 <_strtod_l+0x9e6>
 800f63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f642:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d160      	bne.n	800f70c <_strtod_l+0xa1c>
 800f64a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f64e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f656:	d401      	bmi.n	800f65c <_strtod_l+0x96c>
 800f658:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f65c:	eeb1 ab48 	vneg.f64	d10, d8
 800f660:	486c      	ldr	r0, [pc, #432]	@ (800f814 <_strtod_l+0xb24>)
 800f662:	496e      	ldr	r1, [pc, #440]	@ (800f81c <_strtod_l+0xb2c>)
 800f664:	ea09 0700 	and.w	r7, r9, r0
 800f668:	428f      	cmp	r7, r1
 800f66a:	ec53 2b1a 	vmov	r2, r3, d10
 800f66e:	d17d      	bne.n	800f76c <_strtod_l+0xa7c>
 800f670:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f674:	ec4b ab1c 	vmov	d12, sl, fp
 800f678:	eeb0 0b4c 	vmov.f64	d0, d12
 800f67c:	f002 fd82 	bl	8012184 <__ulp>
 800f680:	4864      	ldr	r0, [pc, #400]	@ (800f814 <_strtod_l+0xb24>)
 800f682:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f686:	ee1c 3a90 	vmov	r3, s25
 800f68a:	4a65      	ldr	r2, [pc, #404]	@ (800f820 <_strtod_l+0xb30>)
 800f68c:	ea03 0100 	and.w	r1, r3, r0
 800f690:	4291      	cmp	r1, r2
 800f692:	ec5b ab1c 	vmov	sl, fp, d12
 800f696:	d93c      	bls.n	800f712 <_strtod_l+0xa22>
 800f698:	ee19 2a90 	vmov	r2, s19
 800f69c:	4b5e      	ldr	r3, [pc, #376]	@ (800f818 <_strtod_l+0xb28>)
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d104      	bne.n	800f6ac <_strtod_l+0x9bc>
 800f6a2:	ee19 3a10 	vmov	r3, s18
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	f43f ad3c 	beq.w	800f124 <_strtod_l+0x434>
 800f6ac:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800f818 <_strtod_l+0xb28>
 800f6b0:	f04f 3aff 	mov.w	sl, #4294967295
 800f6b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f6b6:	9805      	ldr	r0, [sp, #20]
 800f6b8:	f002 fa38 	bl	8011b2c <_Bfree>
 800f6bc:	9805      	ldr	r0, [sp, #20]
 800f6be:	4631      	mov	r1, r6
 800f6c0:	f002 fa34 	bl	8011b2c <_Bfree>
 800f6c4:	9805      	ldr	r0, [sp, #20]
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f002 fa30 	bl	8011b2c <_Bfree>
 800f6cc:	9805      	ldr	r0, [sp, #20]
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	f002 fa2c 	bl	8011b2c <_Bfree>
 800f6d4:	e627      	b.n	800f326 <_strtod_l+0x636>
 800f6d6:	f1ba 0f01 	cmp.w	sl, #1
 800f6da:	d103      	bne.n	800f6e4 <_strtod_l+0x9f4>
 800f6dc:	f1bb 0f00 	cmp.w	fp, #0
 800f6e0:	f43f adb4 	beq.w	800f24c <_strtod_l+0x55c>
 800f6e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f6e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f6ec:	e7b8      	b.n	800f660 <_strtod_l+0x970>
 800f6ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f6f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f6f6:	f1b8 0f00 	cmp.w	r8, #0
 800f6fa:	d0af      	beq.n	800f65c <_strtod_l+0x96c>
 800f6fc:	eeb0 ab48 	vmov.f64	d10, d8
 800f700:	e7ae      	b.n	800f660 <_strtod_l+0x970>
 800f702:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800f706:	eeb0 8b4a 	vmov.f64	d8, d10
 800f70a:	e7a9      	b.n	800f660 <_strtod_l+0x970>
 800f70c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f710:	e7a6      	b.n	800f660 <_strtod_l+0x970>
 800f712:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f716:	9b06      	ldr	r3, [sp, #24]
 800f718:	46d9      	mov	r9, fp
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1ca      	bne.n	800f6b4 <_strtod_l+0x9c4>
 800f71e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f722:	0d1b      	lsrs	r3, r3, #20
 800f724:	051b      	lsls	r3, r3, #20
 800f726:	429f      	cmp	r7, r3
 800f728:	d1c4      	bne.n	800f6b4 <_strtod_l+0x9c4>
 800f72a:	ec51 0b18 	vmov	r0, r1, d8
 800f72e:	f7f1 f921 	bl	8000974 <__aeabi_d2lz>
 800f732:	f7f0 ff7b 	bl	800062c <__aeabi_l2d>
 800f736:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f73a:	ec41 0b17 	vmov	d7, r0, r1
 800f73e:	ea49 090a 	orr.w	r9, r9, sl
 800f742:	ea59 0908 	orrs.w	r9, r9, r8
 800f746:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f74a:	d03c      	beq.n	800f7c6 <_strtod_l+0xad6>
 800f74c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f7f8 <_strtod_l+0xb08>
 800f750:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	f53f acef 	bmi.w	800f13a <_strtod_l+0x44a>
 800f75c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800f800 <_strtod_l+0xb10>
 800f760:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f768:	dda4      	ble.n	800f6b4 <_strtod_l+0x9c4>
 800f76a:	e4e6      	b.n	800f13a <_strtod_l+0x44a>
 800f76c:	9906      	ldr	r1, [sp, #24]
 800f76e:	b1e1      	cbz	r1, 800f7aa <_strtod_l+0xaba>
 800f770:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f774:	d819      	bhi.n	800f7aa <_strtod_l+0xaba>
 800f776:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	d811      	bhi.n	800f7a4 <_strtod_l+0xab4>
 800f780:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f784:	ee18 3a10 	vmov	r3, s16
 800f788:	2b01      	cmp	r3, #1
 800f78a:	bf38      	it	cc
 800f78c:	2301      	movcc	r3, #1
 800f78e:	ee08 3a10 	vmov	s16, r3
 800f792:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f796:	f1b8 0f00 	cmp.w	r8, #0
 800f79a:	d111      	bne.n	800f7c0 <_strtod_l+0xad0>
 800f79c:	eeb1 7b48 	vneg.f64	d7, d8
 800f7a0:	ec53 2b17 	vmov	r2, r3, d7
 800f7a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f7a8:	1bcb      	subs	r3, r1, r7
 800f7aa:	eeb0 0b49 	vmov.f64	d0, d9
 800f7ae:	ec43 2b1a 	vmov	d10, r2, r3
 800f7b2:	f002 fce7 	bl	8012184 <__ulp>
 800f7b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f7ba:	ec5b ab19 	vmov	sl, fp, d9
 800f7be:	e7aa      	b.n	800f716 <_strtod_l+0xa26>
 800f7c0:	eeb0 7b48 	vmov.f64	d7, d8
 800f7c4:	e7ec      	b.n	800f7a0 <_strtod_l+0xab0>
 800f7c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f808 <_strtod_l+0xb18>
 800f7ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d2:	f57f af6f 	bpl.w	800f6b4 <_strtod_l+0x9c4>
 800f7d6:	e4b0      	b.n	800f13a <_strtod_l+0x44a>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	9308      	str	r3, [sp, #32]
 800f7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	f7ff bac4 	b.w	800ed6e <_strtod_l+0x7e>
 800f7e6:	2a65      	cmp	r2, #101	@ 0x65
 800f7e8:	f43f abbf 	beq.w	800ef6a <_strtod_l+0x27a>
 800f7ec:	2a45      	cmp	r2, #69	@ 0x45
 800f7ee:	f43f abbc 	beq.w	800ef6a <_strtod_l+0x27a>
 800f7f2:	2101      	movs	r1, #1
 800f7f4:	f7ff bbf4 	b.w	800efe0 <_strtod_l+0x2f0>
 800f7f8:	94a03595 	.word	0x94a03595
 800f7fc:	3fdfffff 	.word	0x3fdfffff
 800f800:	35afe535 	.word	0x35afe535
 800f804:	3fe00000 	.word	0x3fe00000
 800f808:	94a03595 	.word	0x94a03595
 800f80c:	3fcfffff 	.word	0x3fcfffff
 800f810:	000fffff 	.word	0x000fffff
 800f814:	7ff00000 	.word	0x7ff00000
 800f818:	7fefffff 	.word	0x7fefffff
 800f81c:	7fe00000 	.word	0x7fe00000
 800f820:	7c9fffff 	.word	0x7c9fffff

0800f824 <strtod>:
 800f824:	460a      	mov	r2, r1
 800f826:	4601      	mov	r1, r0
 800f828:	4802      	ldr	r0, [pc, #8]	@ (800f834 <strtod+0x10>)
 800f82a:	4b03      	ldr	r3, [pc, #12]	@ (800f838 <strtod+0x14>)
 800f82c:	6800      	ldr	r0, [r0, #0]
 800f82e:	f7ff ba5f 	b.w	800ecf0 <_strtod_l>
 800f832:	bf00      	nop
 800f834:	2000439c 	.word	0x2000439c
 800f838:	20004230 	.word	0x20004230

0800f83c <_strtol_l.isra.0>:
 800f83c:	2b24      	cmp	r3, #36	@ 0x24
 800f83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f842:	4686      	mov	lr, r0
 800f844:	4690      	mov	r8, r2
 800f846:	d801      	bhi.n	800f84c <_strtol_l.isra.0+0x10>
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d106      	bne.n	800f85a <_strtol_l.isra.0+0x1e>
 800f84c:	f000 feb8 	bl	80105c0 <__errno>
 800f850:	2316      	movs	r3, #22
 800f852:	6003      	str	r3, [r0, #0]
 800f854:	2000      	movs	r0, #0
 800f856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f85a:	4834      	ldr	r0, [pc, #208]	@ (800f92c <_strtol_l.isra.0+0xf0>)
 800f85c:	460d      	mov	r5, r1
 800f85e:	462a      	mov	r2, r5
 800f860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f864:	5d06      	ldrb	r6, [r0, r4]
 800f866:	f016 0608 	ands.w	r6, r6, #8
 800f86a:	d1f8      	bne.n	800f85e <_strtol_l.isra.0+0x22>
 800f86c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f86e:	d110      	bne.n	800f892 <_strtol_l.isra.0+0x56>
 800f870:	782c      	ldrb	r4, [r5, #0]
 800f872:	2601      	movs	r6, #1
 800f874:	1c95      	adds	r5, r2, #2
 800f876:	f033 0210 	bics.w	r2, r3, #16
 800f87a:	d115      	bne.n	800f8a8 <_strtol_l.isra.0+0x6c>
 800f87c:	2c30      	cmp	r4, #48	@ 0x30
 800f87e:	d10d      	bne.n	800f89c <_strtol_l.isra.0+0x60>
 800f880:	782a      	ldrb	r2, [r5, #0]
 800f882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f886:	2a58      	cmp	r2, #88	@ 0x58
 800f888:	d108      	bne.n	800f89c <_strtol_l.isra.0+0x60>
 800f88a:	786c      	ldrb	r4, [r5, #1]
 800f88c:	3502      	adds	r5, #2
 800f88e:	2310      	movs	r3, #16
 800f890:	e00a      	b.n	800f8a8 <_strtol_l.isra.0+0x6c>
 800f892:	2c2b      	cmp	r4, #43	@ 0x2b
 800f894:	bf04      	itt	eq
 800f896:	782c      	ldrbeq	r4, [r5, #0]
 800f898:	1c95      	addeq	r5, r2, #2
 800f89a:	e7ec      	b.n	800f876 <_strtol_l.isra.0+0x3a>
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d1f6      	bne.n	800f88e <_strtol_l.isra.0+0x52>
 800f8a0:	2c30      	cmp	r4, #48	@ 0x30
 800f8a2:	bf14      	ite	ne
 800f8a4:	230a      	movne	r3, #10
 800f8a6:	2308      	moveq	r3, #8
 800f8a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f8ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	fbbc f9f3 	udiv	r9, ip, r3
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f8bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f8c0:	2f09      	cmp	r7, #9
 800f8c2:	d80f      	bhi.n	800f8e4 <_strtol_l.isra.0+0xa8>
 800f8c4:	463c      	mov	r4, r7
 800f8c6:	42a3      	cmp	r3, r4
 800f8c8:	dd1b      	ble.n	800f902 <_strtol_l.isra.0+0xc6>
 800f8ca:	1c57      	adds	r7, r2, #1
 800f8cc:	d007      	beq.n	800f8de <_strtol_l.isra.0+0xa2>
 800f8ce:	4581      	cmp	r9, r0
 800f8d0:	d314      	bcc.n	800f8fc <_strtol_l.isra.0+0xc0>
 800f8d2:	d101      	bne.n	800f8d8 <_strtol_l.isra.0+0x9c>
 800f8d4:	45a2      	cmp	sl, r4
 800f8d6:	db11      	blt.n	800f8fc <_strtol_l.isra.0+0xc0>
 800f8d8:	fb00 4003 	mla	r0, r0, r3, r4
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8e2:	e7eb      	b.n	800f8bc <_strtol_l.isra.0+0x80>
 800f8e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f8e8:	2f19      	cmp	r7, #25
 800f8ea:	d801      	bhi.n	800f8f0 <_strtol_l.isra.0+0xb4>
 800f8ec:	3c37      	subs	r4, #55	@ 0x37
 800f8ee:	e7ea      	b.n	800f8c6 <_strtol_l.isra.0+0x8a>
 800f8f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f8f4:	2f19      	cmp	r7, #25
 800f8f6:	d804      	bhi.n	800f902 <_strtol_l.isra.0+0xc6>
 800f8f8:	3c57      	subs	r4, #87	@ 0x57
 800f8fa:	e7e4      	b.n	800f8c6 <_strtol_l.isra.0+0x8a>
 800f8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f900:	e7ed      	b.n	800f8de <_strtol_l.isra.0+0xa2>
 800f902:	1c53      	adds	r3, r2, #1
 800f904:	d108      	bne.n	800f918 <_strtol_l.isra.0+0xdc>
 800f906:	2322      	movs	r3, #34	@ 0x22
 800f908:	f8ce 3000 	str.w	r3, [lr]
 800f90c:	4660      	mov	r0, ip
 800f90e:	f1b8 0f00 	cmp.w	r8, #0
 800f912:	d0a0      	beq.n	800f856 <_strtol_l.isra.0+0x1a>
 800f914:	1e69      	subs	r1, r5, #1
 800f916:	e006      	b.n	800f926 <_strtol_l.isra.0+0xea>
 800f918:	b106      	cbz	r6, 800f91c <_strtol_l.isra.0+0xe0>
 800f91a:	4240      	negs	r0, r0
 800f91c:	f1b8 0f00 	cmp.w	r8, #0
 800f920:	d099      	beq.n	800f856 <_strtol_l.isra.0+0x1a>
 800f922:	2a00      	cmp	r2, #0
 800f924:	d1f6      	bne.n	800f914 <_strtol_l.isra.0+0xd8>
 800f926:	f8c8 1000 	str.w	r1, [r8]
 800f92a:	e794      	b.n	800f856 <_strtol_l.isra.0+0x1a>
 800f92c:	080147a9 	.word	0x080147a9

0800f930 <strtol>:
 800f930:	4613      	mov	r3, r2
 800f932:	460a      	mov	r2, r1
 800f934:	4601      	mov	r1, r0
 800f936:	4802      	ldr	r0, [pc, #8]	@ (800f940 <strtol+0x10>)
 800f938:	6800      	ldr	r0, [r0, #0]
 800f93a:	f7ff bf7f 	b.w	800f83c <_strtol_l.isra.0>
 800f93e:	bf00      	nop
 800f940:	2000439c 	.word	0x2000439c

0800f944 <__cvt>:
 800f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f946:	ed2d 8b02 	vpush	{d8}
 800f94a:	eeb0 8b40 	vmov.f64	d8, d0
 800f94e:	b085      	sub	sp, #20
 800f950:	4617      	mov	r7, r2
 800f952:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f954:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f956:	ee18 2a90 	vmov	r2, s17
 800f95a:	f025 0520 	bic.w	r5, r5, #32
 800f95e:	2a00      	cmp	r2, #0
 800f960:	bfb6      	itet	lt
 800f962:	222d      	movlt	r2, #45	@ 0x2d
 800f964:	2200      	movge	r2, #0
 800f966:	eeb1 8b40 	vneglt.f64	d8, d0
 800f96a:	2d46      	cmp	r5, #70	@ 0x46
 800f96c:	460c      	mov	r4, r1
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	d004      	beq.n	800f97c <__cvt+0x38>
 800f972:	2d45      	cmp	r5, #69	@ 0x45
 800f974:	d100      	bne.n	800f978 <__cvt+0x34>
 800f976:	3401      	adds	r4, #1
 800f978:	2102      	movs	r1, #2
 800f97a:	e000      	b.n	800f97e <__cvt+0x3a>
 800f97c:	2103      	movs	r1, #3
 800f97e:	ab03      	add	r3, sp, #12
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	ab02      	add	r3, sp, #8
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	4622      	mov	r2, r4
 800f988:	4633      	mov	r3, r6
 800f98a:	eeb0 0b48 	vmov.f64	d0, d8
 800f98e:	f000 fee3 	bl	8010758 <_dtoa_r>
 800f992:	2d47      	cmp	r5, #71	@ 0x47
 800f994:	d114      	bne.n	800f9c0 <__cvt+0x7c>
 800f996:	07fb      	lsls	r3, r7, #31
 800f998:	d50a      	bpl.n	800f9b0 <__cvt+0x6c>
 800f99a:	1902      	adds	r2, r0, r4
 800f99c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a4:	bf08      	it	eq
 800f9a6:	9203      	streq	r2, [sp, #12]
 800f9a8:	2130      	movs	r1, #48	@ 0x30
 800f9aa:	9b03      	ldr	r3, [sp, #12]
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d319      	bcc.n	800f9e4 <__cvt+0xa0>
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9b4:	1a1b      	subs	r3, r3, r0
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	b005      	add	sp, #20
 800f9ba:	ecbd 8b02 	vpop	{d8}
 800f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9c0:	2d46      	cmp	r5, #70	@ 0x46
 800f9c2:	eb00 0204 	add.w	r2, r0, r4
 800f9c6:	d1e9      	bne.n	800f99c <__cvt+0x58>
 800f9c8:	7803      	ldrb	r3, [r0, #0]
 800f9ca:	2b30      	cmp	r3, #48	@ 0x30
 800f9cc:	d107      	bne.n	800f9de <__cvt+0x9a>
 800f9ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d6:	bf1c      	itt	ne
 800f9d8:	f1c4 0401 	rsbne	r4, r4, #1
 800f9dc:	6034      	strne	r4, [r6, #0]
 800f9de:	6833      	ldr	r3, [r6, #0]
 800f9e0:	441a      	add	r2, r3
 800f9e2:	e7db      	b.n	800f99c <__cvt+0x58>
 800f9e4:	1c5c      	adds	r4, r3, #1
 800f9e6:	9403      	str	r4, [sp, #12]
 800f9e8:	7019      	strb	r1, [r3, #0]
 800f9ea:	e7de      	b.n	800f9aa <__cvt+0x66>

0800f9ec <__exponent>:
 800f9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ee:	2900      	cmp	r1, #0
 800f9f0:	bfba      	itte	lt
 800f9f2:	4249      	neglt	r1, r1
 800f9f4:	232d      	movlt	r3, #45	@ 0x2d
 800f9f6:	232b      	movge	r3, #43	@ 0x2b
 800f9f8:	2909      	cmp	r1, #9
 800f9fa:	7002      	strb	r2, [r0, #0]
 800f9fc:	7043      	strb	r3, [r0, #1]
 800f9fe:	dd29      	ble.n	800fa54 <__exponent+0x68>
 800fa00:	f10d 0307 	add.w	r3, sp, #7
 800fa04:	461d      	mov	r5, r3
 800fa06:	270a      	movs	r7, #10
 800fa08:	461a      	mov	r2, r3
 800fa0a:	fbb1 f6f7 	udiv	r6, r1, r7
 800fa0e:	fb07 1416 	mls	r4, r7, r6, r1
 800fa12:	3430      	adds	r4, #48	@ 0x30
 800fa14:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fa18:	460c      	mov	r4, r1
 800fa1a:	2c63      	cmp	r4, #99	@ 0x63
 800fa1c:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa20:	4631      	mov	r1, r6
 800fa22:	dcf1      	bgt.n	800fa08 <__exponent+0x1c>
 800fa24:	3130      	adds	r1, #48	@ 0x30
 800fa26:	1e94      	subs	r4, r2, #2
 800fa28:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa2c:	1c41      	adds	r1, r0, #1
 800fa2e:	4623      	mov	r3, r4
 800fa30:	42ab      	cmp	r3, r5
 800fa32:	d30a      	bcc.n	800fa4a <__exponent+0x5e>
 800fa34:	f10d 0309 	add.w	r3, sp, #9
 800fa38:	1a9b      	subs	r3, r3, r2
 800fa3a:	42ac      	cmp	r4, r5
 800fa3c:	bf88      	it	hi
 800fa3e:	2300      	movhi	r3, #0
 800fa40:	3302      	adds	r3, #2
 800fa42:	4403      	add	r3, r0
 800fa44:	1a18      	subs	r0, r3, r0
 800fa46:	b003      	add	sp, #12
 800fa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fa4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fa52:	e7ed      	b.n	800fa30 <__exponent+0x44>
 800fa54:	2330      	movs	r3, #48	@ 0x30
 800fa56:	3130      	adds	r1, #48	@ 0x30
 800fa58:	7083      	strb	r3, [r0, #2]
 800fa5a:	70c1      	strb	r1, [r0, #3]
 800fa5c:	1d03      	adds	r3, r0, #4
 800fa5e:	e7f1      	b.n	800fa44 <__exponent+0x58>

0800fa60 <_printf_float>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	b08d      	sub	sp, #52	@ 0x34
 800fa66:	460c      	mov	r4, r1
 800fa68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa6c:	4616      	mov	r6, r2
 800fa6e:	461f      	mov	r7, r3
 800fa70:	4605      	mov	r5, r0
 800fa72:	f000 fd5b 	bl	801052c <_localeconv_r>
 800fa76:	f8d0 b000 	ldr.w	fp, [r0]
 800fa7a:	4658      	mov	r0, fp
 800fa7c:	f7f0 fc40 	bl	8000300 <strlen>
 800fa80:	2300      	movs	r3, #0
 800fa82:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa84:	f8d8 3000 	ldr.w	r3, [r8]
 800fa88:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fa8c:	6822      	ldr	r2, [r4, #0]
 800fa8e:	9005      	str	r0, [sp, #20]
 800fa90:	3307      	adds	r3, #7
 800fa92:	f023 0307 	bic.w	r3, r3, #7
 800fa96:	f103 0108 	add.w	r1, r3, #8
 800fa9a:	f8c8 1000 	str.w	r1, [r8]
 800fa9e:	ed93 0b00 	vldr	d0, [r3]
 800faa2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fd00 <_printf_float+0x2a0>
 800faa6:	eeb0 7bc0 	vabs.f64	d7, d0
 800faaa:	eeb4 7b46 	vcmp.f64	d7, d6
 800faae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fab6:	dd24      	ble.n	800fb02 <_printf_float+0xa2>
 800fab8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac0:	d502      	bpl.n	800fac8 <_printf_float+0x68>
 800fac2:	232d      	movs	r3, #45	@ 0x2d
 800fac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fac8:	498f      	ldr	r1, [pc, #572]	@ (800fd08 <_printf_float+0x2a8>)
 800faca:	4b90      	ldr	r3, [pc, #576]	@ (800fd0c <_printf_float+0x2ac>)
 800facc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fad0:	bf8c      	ite	hi
 800fad2:	4688      	movhi	r8, r1
 800fad4:	4698      	movls	r8, r3
 800fad6:	f022 0204 	bic.w	r2, r2, #4
 800fada:	2303      	movs	r3, #3
 800fadc:	6123      	str	r3, [r4, #16]
 800fade:	6022      	str	r2, [r4, #0]
 800fae0:	f04f 0a00 	mov.w	sl, #0
 800fae4:	9700      	str	r7, [sp, #0]
 800fae6:	4633      	mov	r3, r6
 800fae8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800faea:	4621      	mov	r1, r4
 800faec:	4628      	mov	r0, r5
 800faee:	f000 f9d1 	bl	800fe94 <_printf_common>
 800faf2:	3001      	adds	r0, #1
 800faf4:	f040 8089 	bne.w	800fc0a <_printf_float+0x1aa>
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fafc:	b00d      	add	sp, #52	@ 0x34
 800fafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb02:	eeb4 0b40 	vcmp.f64	d0, d0
 800fb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0a:	d709      	bvc.n	800fb20 <_printf_float+0xc0>
 800fb0c:	ee10 3a90 	vmov	r3, s1
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	bfbc      	itt	lt
 800fb14:	232d      	movlt	r3, #45	@ 0x2d
 800fb16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb1a:	497d      	ldr	r1, [pc, #500]	@ (800fd10 <_printf_float+0x2b0>)
 800fb1c:	4b7d      	ldr	r3, [pc, #500]	@ (800fd14 <_printf_float+0x2b4>)
 800fb1e:	e7d5      	b.n	800facc <_printf_float+0x6c>
 800fb20:	6863      	ldr	r3, [r4, #4]
 800fb22:	1c59      	adds	r1, r3, #1
 800fb24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fb28:	d139      	bne.n	800fb9e <_printf_float+0x13e>
 800fb2a:	2306      	movs	r3, #6
 800fb2c:	6063      	str	r3, [r4, #4]
 800fb2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fb32:	2300      	movs	r3, #0
 800fb34:	6022      	str	r2, [r4, #0]
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fb3e:	ab09      	add	r3, sp, #36	@ 0x24
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	6861      	ldr	r1, [r4, #4]
 800fb44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f7ff fefb 	bl	800f944 <__cvt>
 800fb4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb54:	4680      	mov	r8, r0
 800fb56:	d129      	bne.n	800fbac <_printf_float+0x14c>
 800fb58:	1cc8      	adds	r0, r1, #3
 800fb5a:	db02      	blt.n	800fb62 <_printf_float+0x102>
 800fb5c:	6863      	ldr	r3, [r4, #4]
 800fb5e:	4299      	cmp	r1, r3
 800fb60:	dd41      	ble.n	800fbe6 <_printf_float+0x186>
 800fb62:	f1a9 0902 	sub.w	r9, r9, #2
 800fb66:	fa5f f989 	uxtb.w	r9, r9
 800fb6a:	3901      	subs	r1, #1
 800fb6c:	464a      	mov	r2, r9
 800fb6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb72:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb74:	f7ff ff3a 	bl	800f9ec <__exponent>
 800fb78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb7a:	1813      	adds	r3, r2, r0
 800fb7c:	2a01      	cmp	r2, #1
 800fb7e:	4682      	mov	sl, r0
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	dc02      	bgt.n	800fb8a <_printf_float+0x12a>
 800fb84:	6822      	ldr	r2, [r4, #0]
 800fb86:	07d2      	lsls	r2, r2, #31
 800fb88:	d501      	bpl.n	800fb8e <_printf_float+0x12e>
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	6123      	str	r3, [r4, #16]
 800fb8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0a6      	beq.n	800fae4 <_printf_float+0x84>
 800fb96:	232d      	movs	r3, #45	@ 0x2d
 800fb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb9c:	e7a2      	b.n	800fae4 <_printf_float+0x84>
 800fb9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fba2:	d1c4      	bne.n	800fb2e <_printf_float+0xce>
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1c2      	bne.n	800fb2e <_printf_float+0xce>
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e7bf      	b.n	800fb2c <_printf_float+0xcc>
 800fbac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fbb0:	d9db      	bls.n	800fb6a <_printf_float+0x10a>
 800fbb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fbb6:	d118      	bne.n	800fbea <_printf_float+0x18a>
 800fbb8:	2900      	cmp	r1, #0
 800fbba:	6863      	ldr	r3, [r4, #4]
 800fbbc:	dd0b      	ble.n	800fbd6 <_printf_float+0x176>
 800fbbe:	6121      	str	r1, [r4, #16]
 800fbc0:	b913      	cbnz	r3, 800fbc8 <_printf_float+0x168>
 800fbc2:	6822      	ldr	r2, [r4, #0]
 800fbc4:	07d0      	lsls	r0, r2, #31
 800fbc6:	d502      	bpl.n	800fbce <_printf_float+0x16e>
 800fbc8:	3301      	adds	r3, #1
 800fbca:	440b      	add	r3, r1
 800fbcc:	6123      	str	r3, [r4, #16]
 800fbce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fbd0:	f04f 0a00 	mov.w	sl, #0
 800fbd4:	e7db      	b.n	800fb8e <_printf_float+0x12e>
 800fbd6:	b913      	cbnz	r3, 800fbde <_printf_float+0x17e>
 800fbd8:	6822      	ldr	r2, [r4, #0]
 800fbda:	07d2      	lsls	r2, r2, #31
 800fbdc:	d501      	bpl.n	800fbe2 <_printf_float+0x182>
 800fbde:	3302      	adds	r3, #2
 800fbe0:	e7f4      	b.n	800fbcc <_printf_float+0x16c>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e7f2      	b.n	800fbcc <_printf_float+0x16c>
 800fbe6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fbea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbec:	4299      	cmp	r1, r3
 800fbee:	db05      	blt.n	800fbfc <_printf_float+0x19c>
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	6121      	str	r1, [r4, #16]
 800fbf4:	07d8      	lsls	r0, r3, #31
 800fbf6:	d5ea      	bpl.n	800fbce <_printf_float+0x16e>
 800fbf8:	1c4b      	adds	r3, r1, #1
 800fbfa:	e7e7      	b.n	800fbcc <_printf_float+0x16c>
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	bfd4      	ite	le
 800fc00:	f1c1 0202 	rsble	r2, r1, #2
 800fc04:	2201      	movgt	r2, #1
 800fc06:	4413      	add	r3, r2
 800fc08:	e7e0      	b.n	800fbcc <_printf_float+0x16c>
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	055a      	lsls	r2, r3, #21
 800fc0e:	d407      	bmi.n	800fc20 <_printf_float+0x1c0>
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	4642      	mov	r2, r8
 800fc14:	4631      	mov	r1, r6
 800fc16:	4628      	mov	r0, r5
 800fc18:	47b8      	blx	r7
 800fc1a:	3001      	adds	r0, #1
 800fc1c:	d12a      	bne.n	800fc74 <_printf_float+0x214>
 800fc1e:	e76b      	b.n	800faf8 <_printf_float+0x98>
 800fc20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fc24:	f240 80e0 	bls.w	800fde8 <_printf_float+0x388>
 800fc28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fc2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	d133      	bne.n	800fc9e <_printf_float+0x23e>
 800fc36:	4a38      	ldr	r2, [pc, #224]	@ (800fd18 <_printf_float+0x2b8>)
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4631      	mov	r1, r6
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	47b8      	blx	r7
 800fc40:	3001      	adds	r0, #1
 800fc42:	f43f af59 	beq.w	800faf8 <_printf_float+0x98>
 800fc46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc4a:	4543      	cmp	r3, r8
 800fc4c:	db02      	blt.n	800fc54 <_printf_float+0x1f4>
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	07d8      	lsls	r0, r3, #31
 800fc52:	d50f      	bpl.n	800fc74 <_printf_float+0x214>
 800fc54:	9b05      	ldr	r3, [sp, #20]
 800fc56:	465a      	mov	r2, fp
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	47b8      	blx	r7
 800fc5e:	3001      	adds	r0, #1
 800fc60:	f43f af4a 	beq.w	800faf8 <_printf_float+0x98>
 800fc64:	f04f 0900 	mov.w	r9, #0
 800fc68:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc6c:	f104 0a1a 	add.w	sl, r4, #26
 800fc70:	45c8      	cmp	r8, r9
 800fc72:	dc09      	bgt.n	800fc88 <_printf_float+0x228>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	079b      	lsls	r3, r3, #30
 800fc78:	f100 8107 	bmi.w	800fe8a <_printf_float+0x42a>
 800fc7c:	68e0      	ldr	r0, [r4, #12]
 800fc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc80:	4298      	cmp	r0, r3
 800fc82:	bfb8      	it	lt
 800fc84:	4618      	movlt	r0, r3
 800fc86:	e739      	b.n	800fafc <_printf_float+0x9c>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	4652      	mov	r2, sl
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	4628      	mov	r0, r5
 800fc90:	47b8      	blx	r7
 800fc92:	3001      	adds	r0, #1
 800fc94:	f43f af30 	beq.w	800faf8 <_printf_float+0x98>
 800fc98:	f109 0901 	add.w	r9, r9, #1
 800fc9c:	e7e8      	b.n	800fc70 <_printf_float+0x210>
 800fc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	dc3b      	bgt.n	800fd1c <_printf_float+0x2bc>
 800fca4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd18 <_printf_float+0x2b8>)
 800fca6:	2301      	movs	r3, #1
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	47b8      	blx	r7
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f43f af22 	beq.w	800faf8 <_printf_float+0x98>
 800fcb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fcb8:	ea59 0303 	orrs.w	r3, r9, r3
 800fcbc:	d102      	bne.n	800fcc4 <_printf_float+0x264>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	07d9      	lsls	r1, r3, #31
 800fcc2:	d5d7      	bpl.n	800fc74 <_printf_float+0x214>
 800fcc4:	9b05      	ldr	r3, [sp, #20]
 800fcc6:	465a      	mov	r2, fp
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4628      	mov	r0, r5
 800fccc:	47b8      	blx	r7
 800fcce:	3001      	adds	r0, #1
 800fcd0:	f43f af12 	beq.w	800faf8 <_printf_float+0x98>
 800fcd4:	f04f 0a00 	mov.w	sl, #0
 800fcd8:	f104 0b1a 	add.w	fp, r4, #26
 800fcdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcde:	425b      	negs	r3, r3
 800fce0:	4553      	cmp	r3, sl
 800fce2:	dc01      	bgt.n	800fce8 <_printf_float+0x288>
 800fce4:	464b      	mov	r3, r9
 800fce6:	e794      	b.n	800fc12 <_printf_float+0x1b2>
 800fce8:	2301      	movs	r3, #1
 800fcea:	465a      	mov	r2, fp
 800fcec:	4631      	mov	r1, r6
 800fcee:	4628      	mov	r0, r5
 800fcf0:	47b8      	blx	r7
 800fcf2:	3001      	adds	r0, #1
 800fcf4:	f43f af00 	beq.w	800faf8 <_printf_float+0x98>
 800fcf8:	f10a 0a01 	add.w	sl, sl, #1
 800fcfc:	e7ee      	b.n	800fcdc <_printf_float+0x27c>
 800fcfe:	bf00      	nop
 800fd00:	ffffffff 	.word	0xffffffff
 800fd04:	7fefffff 	.word	0x7fefffff
 800fd08:	08014586 	.word	0x08014586
 800fd0c:	08014582 	.word	0x08014582
 800fd10:	0801458e 	.word	0x0801458e
 800fd14:	0801458a 	.word	0x0801458a
 800fd18:	08014592 	.word	0x08014592
 800fd1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd22:	4553      	cmp	r3, sl
 800fd24:	bfa8      	it	ge
 800fd26:	4653      	movge	r3, sl
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	4699      	mov	r9, r3
 800fd2c:	dc37      	bgt.n	800fd9e <_printf_float+0x33e>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	9307      	str	r3, [sp, #28]
 800fd32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd36:	f104 021a 	add.w	r2, r4, #26
 800fd3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd3c:	9907      	ldr	r1, [sp, #28]
 800fd3e:	9306      	str	r3, [sp, #24]
 800fd40:	eba3 0309 	sub.w	r3, r3, r9
 800fd44:	428b      	cmp	r3, r1
 800fd46:	dc31      	bgt.n	800fdac <_printf_float+0x34c>
 800fd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd4a:	459a      	cmp	sl, r3
 800fd4c:	dc3b      	bgt.n	800fdc6 <_printf_float+0x366>
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	07da      	lsls	r2, r3, #31
 800fd52:	d438      	bmi.n	800fdc6 <_printf_float+0x366>
 800fd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd56:	ebaa 0903 	sub.w	r9, sl, r3
 800fd5a:	9b06      	ldr	r3, [sp, #24]
 800fd5c:	ebaa 0303 	sub.w	r3, sl, r3
 800fd60:	4599      	cmp	r9, r3
 800fd62:	bfa8      	it	ge
 800fd64:	4699      	movge	r9, r3
 800fd66:	f1b9 0f00 	cmp.w	r9, #0
 800fd6a:	dc34      	bgt.n	800fdd6 <_printf_float+0x376>
 800fd6c:	f04f 0800 	mov.w	r8, #0
 800fd70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd74:	f104 0b1a 	add.w	fp, r4, #26
 800fd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd7a:	ebaa 0303 	sub.w	r3, sl, r3
 800fd7e:	eba3 0309 	sub.w	r3, r3, r9
 800fd82:	4543      	cmp	r3, r8
 800fd84:	f77f af76 	ble.w	800fc74 <_printf_float+0x214>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	465a      	mov	r2, fp
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4628      	mov	r0, r5
 800fd90:	47b8      	blx	r7
 800fd92:	3001      	adds	r0, #1
 800fd94:	f43f aeb0 	beq.w	800faf8 <_printf_float+0x98>
 800fd98:	f108 0801 	add.w	r8, r8, #1
 800fd9c:	e7ec      	b.n	800fd78 <_printf_float+0x318>
 800fd9e:	4642      	mov	r2, r8
 800fda0:	4631      	mov	r1, r6
 800fda2:	4628      	mov	r0, r5
 800fda4:	47b8      	blx	r7
 800fda6:	3001      	adds	r0, #1
 800fda8:	d1c1      	bne.n	800fd2e <_printf_float+0x2ce>
 800fdaa:	e6a5      	b.n	800faf8 <_printf_float+0x98>
 800fdac:	2301      	movs	r3, #1
 800fdae:	4631      	mov	r1, r6
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	9206      	str	r2, [sp, #24]
 800fdb4:	47b8      	blx	r7
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	f43f ae9e 	beq.w	800faf8 <_printf_float+0x98>
 800fdbc:	9b07      	ldr	r3, [sp, #28]
 800fdbe:	9a06      	ldr	r2, [sp, #24]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	9307      	str	r3, [sp, #28]
 800fdc4:	e7b9      	b.n	800fd3a <_printf_float+0x2da>
 800fdc6:	9b05      	ldr	r3, [sp, #20]
 800fdc8:	465a      	mov	r2, fp
 800fdca:	4631      	mov	r1, r6
 800fdcc:	4628      	mov	r0, r5
 800fdce:	47b8      	blx	r7
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d1bf      	bne.n	800fd54 <_printf_float+0x2f4>
 800fdd4:	e690      	b.n	800faf8 <_printf_float+0x98>
 800fdd6:	9a06      	ldr	r2, [sp, #24]
 800fdd8:	464b      	mov	r3, r9
 800fdda:	4442      	add	r2, r8
 800fddc:	4631      	mov	r1, r6
 800fdde:	4628      	mov	r0, r5
 800fde0:	47b8      	blx	r7
 800fde2:	3001      	adds	r0, #1
 800fde4:	d1c2      	bne.n	800fd6c <_printf_float+0x30c>
 800fde6:	e687      	b.n	800faf8 <_printf_float+0x98>
 800fde8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fdec:	f1b9 0f01 	cmp.w	r9, #1
 800fdf0:	dc01      	bgt.n	800fdf6 <_printf_float+0x396>
 800fdf2:	07db      	lsls	r3, r3, #31
 800fdf4:	d536      	bpl.n	800fe64 <_printf_float+0x404>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	4631      	mov	r1, r6
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	47b8      	blx	r7
 800fe00:	3001      	adds	r0, #1
 800fe02:	f43f ae79 	beq.w	800faf8 <_printf_float+0x98>
 800fe06:	9b05      	ldr	r3, [sp, #20]
 800fe08:	465a      	mov	r2, fp
 800fe0a:	4631      	mov	r1, r6
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	47b8      	blx	r7
 800fe10:	3001      	adds	r0, #1
 800fe12:	f43f ae71 	beq.w	800faf8 <_printf_float+0x98>
 800fe16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fe1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe26:	d018      	beq.n	800fe5a <_printf_float+0x3fa>
 800fe28:	464b      	mov	r3, r9
 800fe2a:	f108 0201 	add.w	r2, r8, #1
 800fe2e:	4631      	mov	r1, r6
 800fe30:	4628      	mov	r0, r5
 800fe32:	47b8      	blx	r7
 800fe34:	3001      	adds	r0, #1
 800fe36:	d10c      	bne.n	800fe52 <_printf_float+0x3f2>
 800fe38:	e65e      	b.n	800faf8 <_printf_float+0x98>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	465a      	mov	r2, fp
 800fe3e:	4631      	mov	r1, r6
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b8      	blx	r7
 800fe44:	3001      	adds	r0, #1
 800fe46:	f43f ae57 	beq.w	800faf8 <_printf_float+0x98>
 800fe4a:	f108 0801 	add.w	r8, r8, #1
 800fe4e:	45c8      	cmp	r8, r9
 800fe50:	dbf3      	blt.n	800fe3a <_printf_float+0x3da>
 800fe52:	4653      	mov	r3, sl
 800fe54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe58:	e6dc      	b.n	800fc14 <_printf_float+0x1b4>
 800fe5a:	f04f 0800 	mov.w	r8, #0
 800fe5e:	f104 0b1a 	add.w	fp, r4, #26
 800fe62:	e7f4      	b.n	800fe4e <_printf_float+0x3ee>
 800fe64:	2301      	movs	r3, #1
 800fe66:	4642      	mov	r2, r8
 800fe68:	e7e1      	b.n	800fe2e <_printf_float+0x3ce>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	464a      	mov	r2, r9
 800fe6e:	4631      	mov	r1, r6
 800fe70:	4628      	mov	r0, r5
 800fe72:	47b8      	blx	r7
 800fe74:	3001      	adds	r0, #1
 800fe76:	f43f ae3f 	beq.w	800faf8 <_printf_float+0x98>
 800fe7a:	f108 0801 	add.w	r8, r8, #1
 800fe7e:	68e3      	ldr	r3, [r4, #12]
 800fe80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe82:	1a5b      	subs	r3, r3, r1
 800fe84:	4543      	cmp	r3, r8
 800fe86:	dcf0      	bgt.n	800fe6a <_printf_float+0x40a>
 800fe88:	e6f8      	b.n	800fc7c <_printf_float+0x21c>
 800fe8a:	f04f 0800 	mov.w	r8, #0
 800fe8e:	f104 0919 	add.w	r9, r4, #25
 800fe92:	e7f4      	b.n	800fe7e <_printf_float+0x41e>

0800fe94 <_printf_common>:
 800fe94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe98:	4616      	mov	r6, r2
 800fe9a:	4698      	mov	r8, r3
 800fe9c:	688a      	ldr	r2, [r1, #8]
 800fe9e:	690b      	ldr	r3, [r1, #16]
 800fea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fea4:	4293      	cmp	r3, r2
 800fea6:	bfb8      	it	lt
 800fea8:	4613      	movlt	r3, r2
 800feaa:	6033      	str	r3, [r6, #0]
 800feac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800feb0:	4607      	mov	r7, r0
 800feb2:	460c      	mov	r4, r1
 800feb4:	b10a      	cbz	r2, 800feba <_printf_common+0x26>
 800feb6:	3301      	adds	r3, #1
 800feb8:	6033      	str	r3, [r6, #0]
 800feba:	6823      	ldr	r3, [r4, #0]
 800febc:	0699      	lsls	r1, r3, #26
 800febe:	bf42      	ittt	mi
 800fec0:	6833      	ldrmi	r3, [r6, #0]
 800fec2:	3302      	addmi	r3, #2
 800fec4:	6033      	strmi	r3, [r6, #0]
 800fec6:	6825      	ldr	r5, [r4, #0]
 800fec8:	f015 0506 	ands.w	r5, r5, #6
 800fecc:	d106      	bne.n	800fedc <_printf_common+0x48>
 800fece:	f104 0a19 	add.w	sl, r4, #25
 800fed2:	68e3      	ldr	r3, [r4, #12]
 800fed4:	6832      	ldr	r2, [r6, #0]
 800fed6:	1a9b      	subs	r3, r3, r2
 800fed8:	42ab      	cmp	r3, r5
 800feda:	dc26      	bgt.n	800ff2a <_printf_common+0x96>
 800fedc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fee0:	6822      	ldr	r2, [r4, #0]
 800fee2:	3b00      	subs	r3, #0
 800fee4:	bf18      	it	ne
 800fee6:	2301      	movne	r3, #1
 800fee8:	0692      	lsls	r2, r2, #26
 800feea:	d42b      	bmi.n	800ff44 <_printf_common+0xb0>
 800feec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fef0:	4641      	mov	r1, r8
 800fef2:	4638      	mov	r0, r7
 800fef4:	47c8      	blx	r9
 800fef6:	3001      	adds	r0, #1
 800fef8:	d01e      	beq.n	800ff38 <_printf_common+0xa4>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	6922      	ldr	r2, [r4, #16]
 800fefe:	f003 0306 	and.w	r3, r3, #6
 800ff02:	2b04      	cmp	r3, #4
 800ff04:	bf02      	ittt	eq
 800ff06:	68e5      	ldreq	r5, [r4, #12]
 800ff08:	6833      	ldreq	r3, [r6, #0]
 800ff0a:	1aed      	subeq	r5, r5, r3
 800ff0c:	68a3      	ldr	r3, [r4, #8]
 800ff0e:	bf0c      	ite	eq
 800ff10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff14:	2500      	movne	r5, #0
 800ff16:	4293      	cmp	r3, r2
 800ff18:	bfc4      	itt	gt
 800ff1a:	1a9b      	subgt	r3, r3, r2
 800ff1c:	18ed      	addgt	r5, r5, r3
 800ff1e:	2600      	movs	r6, #0
 800ff20:	341a      	adds	r4, #26
 800ff22:	42b5      	cmp	r5, r6
 800ff24:	d11a      	bne.n	800ff5c <_printf_common+0xc8>
 800ff26:	2000      	movs	r0, #0
 800ff28:	e008      	b.n	800ff3c <_printf_common+0xa8>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	4652      	mov	r2, sl
 800ff2e:	4641      	mov	r1, r8
 800ff30:	4638      	mov	r0, r7
 800ff32:	47c8      	blx	r9
 800ff34:	3001      	adds	r0, #1
 800ff36:	d103      	bne.n	800ff40 <_printf_common+0xac>
 800ff38:	f04f 30ff 	mov.w	r0, #4294967295
 800ff3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff40:	3501      	adds	r5, #1
 800ff42:	e7c6      	b.n	800fed2 <_printf_common+0x3e>
 800ff44:	18e1      	adds	r1, r4, r3
 800ff46:	1c5a      	adds	r2, r3, #1
 800ff48:	2030      	movs	r0, #48	@ 0x30
 800ff4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff4e:	4422      	add	r2, r4
 800ff50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff58:	3302      	adds	r3, #2
 800ff5a:	e7c7      	b.n	800feec <_printf_common+0x58>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4641      	mov	r1, r8
 800ff62:	4638      	mov	r0, r7
 800ff64:	47c8      	blx	r9
 800ff66:	3001      	adds	r0, #1
 800ff68:	d0e6      	beq.n	800ff38 <_printf_common+0xa4>
 800ff6a:	3601      	adds	r6, #1
 800ff6c:	e7d9      	b.n	800ff22 <_printf_common+0x8e>
	...

0800ff70 <_printf_i>:
 800ff70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff74:	7e0f      	ldrb	r7, [r1, #24]
 800ff76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff78:	2f78      	cmp	r7, #120	@ 0x78
 800ff7a:	4691      	mov	r9, r2
 800ff7c:	4680      	mov	r8, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	469a      	mov	sl, r3
 800ff82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff86:	d807      	bhi.n	800ff98 <_printf_i+0x28>
 800ff88:	2f62      	cmp	r7, #98	@ 0x62
 800ff8a:	d80a      	bhi.n	800ffa2 <_printf_i+0x32>
 800ff8c:	2f00      	cmp	r7, #0
 800ff8e:	f000 80d1 	beq.w	8010134 <_printf_i+0x1c4>
 800ff92:	2f58      	cmp	r7, #88	@ 0x58
 800ff94:	f000 80b8 	beq.w	8010108 <_printf_i+0x198>
 800ff98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffa0:	e03a      	b.n	8010018 <_printf_i+0xa8>
 800ffa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffa6:	2b15      	cmp	r3, #21
 800ffa8:	d8f6      	bhi.n	800ff98 <_printf_i+0x28>
 800ffaa:	a101      	add	r1, pc, #4	@ (adr r1, 800ffb0 <_printf_i+0x40>)
 800ffac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffb0:	08010009 	.word	0x08010009
 800ffb4:	0801001d 	.word	0x0801001d
 800ffb8:	0800ff99 	.word	0x0800ff99
 800ffbc:	0800ff99 	.word	0x0800ff99
 800ffc0:	0800ff99 	.word	0x0800ff99
 800ffc4:	0800ff99 	.word	0x0800ff99
 800ffc8:	0801001d 	.word	0x0801001d
 800ffcc:	0800ff99 	.word	0x0800ff99
 800ffd0:	0800ff99 	.word	0x0800ff99
 800ffd4:	0800ff99 	.word	0x0800ff99
 800ffd8:	0800ff99 	.word	0x0800ff99
 800ffdc:	0801011b 	.word	0x0801011b
 800ffe0:	08010047 	.word	0x08010047
 800ffe4:	080100d5 	.word	0x080100d5
 800ffe8:	0800ff99 	.word	0x0800ff99
 800ffec:	0800ff99 	.word	0x0800ff99
 800fff0:	0801013d 	.word	0x0801013d
 800fff4:	0800ff99 	.word	0x0800ff99
 800fff8:	08010047 	.word	0x08010047
 800fffc:	0800ff99 	.word	0x0800ff99
 8010000:	0800ff99 	.word	0x0800ff99
 8010004:	080100dd 	.word	0x080100dd
 8010008:	6833      	ldr	r3, [r6, #0]
 801000a:	1d1a      	adds	r2, r3, #4
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6032      	str	r2, [r6, #0]
 8010010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010018:	2301      	movs	r3, #1
 801001a:	e09c      	b.n	8010156 <_printf_i+0x1e6>
 801001c:	6833      	ldr	r3, [r6, #0]
 801001e:	6820      	ldr	r0, [r4, #0]
 8010020:	1d19      	adds	r1, r3, #4
 8010022:	6031      	str	r1, [r6, #0]
 8010024:	0606      	lsls	r6, r0, #24
 8010026:	d501      	bpl.n	801002c <_printf_i+0xbc>
 8010028:	681d      	ldr	r5, [r3, #0]
 801002a:	e003      	b.n	8010034 <_printf_i+0xc4>
 801002c:	0645      	lsls	r5, r0, #25
 801002e:	d5fb      	bpl.n	8010028 <_printf_i+0xb8>
 8010030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010034:	2d00      	cmp	r5, #0
 8010036:	da03      	bge.n	8010040 <_printf_i+0xd0>
 8010038:	232d      	movs	r3, #45	@ 0x2d
 801003a:	426d      	negs	r5, r5
 801003c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010040:	4858      	ldr	r0, [pc, #352]	@ (80101a4 <_printf_i+0x234>)
 8010042:	230a      	movs	r3, #10
 8010044:	e011      	b.n	801006a <_printf_i+0xfa>
 8010046:	6821      	ldr	r1, [r4, #0]
 8010048:	6833      	ldr	r3, [r6, #0]
 801004a:	0608      	lsls	r0, r1, #24
 801004c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010050:	d402      	bmi.n	8010058 <_printf_i+0xe8>
 8010052:	0649      	lsls	r1, r1, #25
 8010054:	bf48      	it	mi
 8010056:	b2ad      	uxthmi	r5, r5
 8010058:	2f6f      	cmp	r7, #111	@ 0x6f
 801005a:	4852      	ldr	r0, [pc, #328]	@ (80101a4 <_printf_i+0x234>)
 801005c:	6033      	str	r3, [r6, #0]
 801005e:	bf14      	ite	ne
 8010060:	230a      	movne	r3, #10
 8010062:	2308      	moveq	r3, #8
 8010064:	2100      	movs	r1, #0
 8010066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801006a:	6866      	ldr	r6, [r4, #4]
 801006c:	60a6      	str	r6, [r4, #8]
 801006e:	2e00      	cmp	r6, #0
 8010070:	db05      	blt.n	801007e <_printf_i+0x10e>
 8010072:	6821      	ldr	r1, [r4, #0]
 8010074:	432e      	orrs	r6, r5
 8010076:	f021 0104 	bic.w	r1, r1, #4
 801007a:	6021      	str	r1, [r4, #0]
 801007c:	d04b      	beq.n	8010116 <_printf_i+0x1a6>
 801007e:	4616      	mov	r6, r2
 8010080:	fbb5 f1f3 	udiv	r1, r5, r3
 8010084:	fb03 5711 	mls	r7, r3, r1, r5
 8010088:	5dc7      	ldrb	r7, [r0, r7]
 801008a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801008e:	462f      	mov	r7, r5
 8010090:	42bb      	cmp	r3, r7
 8010092:	460d      	mov	r5, r1
 8010094:	d9f4      	bls.n	8010080 <_printf_i+0x110>
 8010096:	2b08      	cmp	r3, #8
 8010098:	d10b      	bne.n	80100b2 <_printf_i+0x142>
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	07df      	lsls	r7, r3, #31
 801009e:	d508      	bpl.n	80100b2 <_printf_i+0x142>
 80100a0:	6923      	ldr	r3, [r4, #16]
 80100a2:	6861      	ldr	r1, [r4, #4]
 80100a4:	4299      	cmp	r1, r3
 80100a6:	bfde      	ittt	le
 80100a8:	2330      	movle	r3, #48	@ 0x30
 80100aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100b2:	1b92      	subs	r2, r2, r6
 80100b4:	6122      	str	r2, [r4, #16]
 80100b6:	f8cd a000 	str.w	sl, [sp]
 80100ba:	464b      	mov	r3, r9
 80100bc:	aa03      	add	r2, sp, #12
 80100be:	4621      	mov	r1, r4
 80100c0:	4640      	mov	r0, r8
 80100c2:	f7ff fee7 	bl	800fe94 <_printf_common>
 80100c6:	3001      	adds	r0, #1
 80100c8:	d14a      	bne.n	8010160 <_printf_i+0x1f0>
 80100ca:	f04f 30ff 	mov.w	r0, #4294967295
 80100ce:	b004      	add	sp, #16
 80100d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	f043 0320 	orr.w	r3, r3, #32
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	4832      	ldr	r0, [pc, #200]	@ (80101a8 <_printf_i+0x238>)
 80100de:	2778      	movs	r7, #120	@ 0x78
 80100e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100e4:	6823      	ldr	r3, [r4, #0]
 80100e6:	6831      	ldr	r1, [r6, #0]
 80100e8:	061f      	lsls	r7, r3, #24
 80100ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80100ee:	d402      	bmi.n	80100f6 <_printf_i+0x186>
 80100f0:	065f      	lsls	r7, r3, #25
 80100f2:	bf48      	it	mi
 80100f4:	b2ad      	uxthmi	r5, r5
 80100f6:	6031      	str	r1, [r6, #0]
 80100f8:	07d9      	lsls	r1, r3, #31
 80100fa:	bf44      	itt	mi
 80100fc:	f043 0320 	orrmi.w	r3, r3, #32
 8010100:	6023      	strmi	r3, [r4, #0]
 8010102:	b11d      	cbz	r5, 801010c <_printf_i+0x19c>
 8010104:	2310      	movs	r3, #16
 8010106:	e7ad      	b.n	8010064 <_printf_i+0xf4>
 8010108:	4826      	ldr	r0, [pc, #152]	@ (80101a4 <_printf_i+0x234>)
 801010a:	e7e9      	b.n	80100e0 <_printf_i+0x170>
 801010c:	6823      	ldr	r3, [r4, #0]
 801010e:	f023 0320 	bic.w	r3, r3, #32
 8010112:	6023      	str	r3, [r4, #0]
 8010114:	e7f6      	b.n	8010104 <_printf_i+0x194>
 8010116:	4616      	mov	r6, r2
 8010118:	e7bd      	b.n	8010096 <_printf_i+0x126>
 801011a:	6833      	ldr	r3, [r6, #0]
 801011c:	6825      	ldr	r5, [r4, #0]
 801011e:	6961      	ldr	r1, [r4, #20]
 8010120:	1d18      	adds	r0, r3, #4
 8010122:	6030      	str	r0, [r6, #0]
 8010124:	062e      	lsls	r6, r5, #24
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	d501      	bpl.n	801012e <_printf_i+0x1be>
 801012a:	6019      	str	r1, [r3, #0]
 801012c:	e002      	b.n	8010134 <_printf_i+0x1c4>
 801012e:	0668      	lsls	r0, r5, #25
 8010130:	d5fb      	bpl.n	801012a <_printf_i+0x1ba>
 8010132:	8019      	strh	r1, [r3, #0]
 8010134:	2300      	movs	r3, #0
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	4616      	mov	r6, r2
 801013a:	e7bc      	b.n	80100b6 <_printf_i+0x146>
 801013c:	6833      	ldr	r3, [r6, #0]
 801013e:	1d1a      	adds	r2, r3, #4
 8010140:	6032      	str	r2, [r6, #0]
 8010142:	681e      	ldr	r6, [r3, #0]
 8010144:	6862      	ldr	r2, [r4, #4]
 8010146:	2100      	movs	r1, #0
 8010148:	4630      	mov	r0, r6
 801014a:	f7f0 f889 	bl	8000260 <memchr>
 801014e:	b108      	cbz	r0, 8010154 <_printf_i+0x1e4>
 8010150:	1b80      	subs	r0, r0, r6
 8010152:	6060      	str	r0, [r4, #4]
 8010154:	6863      	ldr	r3, [r4, #4]
 8010156:	6123      	str	r3, [r4, #16]
 8010158:	2300      	movs	r3, #0
 801015a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801015e:	e7aa      	b.n	80100b6 <_printf_i+0x146>
 8010160:	6923      	ldr	r3, [r4, #16]
 8010162:	4632      	mov	r2, r6
 8010164:	4649      	mov	r1, r9
 8010166:	4640      	mov	r0, r8
 8010168:	47d0      	blx	sl
 801016a:	3001      	adds	r0, #1
 801016c:	d0ad      	beq.n	80100ca <_printf_i+0x15a>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	079b      	lsls	r3, r3, #30
 8010172:	d413      	bmi.n	801019c <_printf_i+0x22c>
 8010174:	68e0      	ldr	r0, [r4, #12]
 8010176:	9b03      	ldr	r3, [sp, #12]
 8010178:	4298      	cmp	r0, r3
 801017a:	bfb8      	it	lt
 801017c:	4618      	movlt	r0, r3
 801017e:	e7a6      	b.n	80100ce <_printf_i+0x15e>
 8010180:	2301      	movs	r3, #1
 8010182:	4632      	mov	r2, r6
 8010184:	4649      	mov	r1, r9
 8010186:	4640      	mov	r0, r8
 8010188:	47d0      	blx	sl
 801018a:	3001      	adds	r0, #1
 801018c:	d09d      	beq.n	80100ca <_printf_i+0x15a>
 801018e:	3501      	adds	r5, #1
 8010190:	68e3      	ldr	r3, [r4, #12]
 8010192:	9903      	ldr	r1, [sp, #12]
 8010194:	1a5b      	subs	r3, r3, r1
 8010196:	42ab      	cmp	r3, r5
 8010198:	dcf2      	bgt.n	8010180 <_printf_i+0x210>
 801019a:	e7eb      	b.n	8010174 <_printf_i+0x204>
 801019c:	2500      	movs	r5, #0
 801019e:	f104 0619 	add.w	r6, r4, #25
 80101a2:	e7f5      	b.n	8010190 <_printf_i+0x220>
 80101a4:	08014594 	.word	0x08014594
 80101a8:	080145a5 	.word	0x080145a5

080101ac <std>:
 80101ac:	2300      	movs	r3, #0
 80101ae:	b510      	push	{r4, lr}
 80101b0:	4604      	mov	r4, r0
 80101b2:	e9c0 3300 	strd	r3, r3, [r0]
 80101b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101ba:	6083      	str	r3, [r0, #8]
 80101bc:	8181      	strh	r1, [r0, #12]
 80101be:	6643      	str	r3, [r0, #100]	@ 0x64
 80101c0:	81c2      	strh	r2, [r0, #14]
 80101c2:	6183      	str	r3, [r0, #24]
 80101c4:	4619      	mov	r1, r3
 80101c6:	2208      	movs	r2, #8
 80101c8:	305c      	adds	r0, #92	@ 0x5c
 80101ca:	f000 f966 	bl	801049a <memset>
 80101ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010204 <std+0x58>)
 80101d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80101d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010208 <std+0x5c>)
 80101d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80101d6:	4b0d      	ldr	r3, [pc, #52]	@ (801020c <std+0x60>)
 80101d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80101da:	4b0d      	ldr	r3, [pc, #52]	@ (8010210 <std+0x64>)
 80101dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80101de:	4b0d      	ldr	r3, [pc, #52]	@ (8010214 <std+0x68>)
 80101e0:	6224      	str	r4, [r4, #32]
 80101e2:	429c      	cmp	r4, r3
 80101e4:	d006      	beq.n	80101f4 <std+0x48>
 80101e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80101ea:	4294      	cmp	r4, r2
 80101ec:	d002      	beq.n	80101f4 <std+0x48>
 80101ee:	33d0      	adds	r3, #208	@ 0xd0
 80101f0:	429c      	cmp	r4, r3
 80101f2:	d105      	bne.n	8010200 <std+0x54>
 80101f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80101f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101fc:	f000 ba0a 	b.w	8010614 <__retarget_lock_init_recursive>
 8010200:	bd10      	pop	{r4, pc}
 8010202:	bf00      	nop
 8010204:	080103e1 	.word	0x080103e1
 8010208:	08010403 	.word	0x08010403
 801020c:	0801043b 	.word	0x0801043b
 8010210:	0801045f 	.word	0x0801045f
 8010214:	2001df08 	.word	0x2001df08

08010218 <stdio_exit_handler>:
 8010218:	4a02      	ldr	r2, [pc, #8]	@ (8010224 <stdio_exit_handler+0xc>)
 801021a:	4903      	ldr	r1, [pc, #12]	@ (8010228 <stdio_exit_handler+0x10>)
 801021c:	4803      	ldr	r0, [pc, #12]	@ (801022c <stdio_exit_handler+0x14>)
 801021e:	f000 b869 	b.w	80102f4 <_fwalk_sglue>
 8010222:	bf00      	nop
 8010224:	20004224 	.word	0x20004224
 8010228:	08012a51 	.word	0x08012a51
 801022c:	200043a0 	.word	0x200043a0

08010230 <cleanup_stdio>:
 8010230:	6841      	ldr	r1, [r0, #4]
 8010232:	4b0c      	ldr	r3, [pc, #48]	@ (8010264 <cleanup_stdio+0x34>)
 8010234:	4299      	cmp	r1, r3
 8010236:	b510      	push	{r4, lr}
 8010238:	4604      	mov	r4, r0
 801023a:	d001      	beq.n	8010240 <cleanup_stdio+0x10>
 801023c:	f002 fc08 	bl	8012a50 <_fflush_r>
 8010240:	68a1      	ldr	r1, [r4, #8]
 8010242:	4b09      	ldr	r3, [pc, #36]	@ (8010268 <cleanup_stdio+0x38>)
 8010244:	4299      	cmp	r1, r3
 8010246:	d002      	beq.n	801024e <cleanup_stdio+0x1e>
 8010248:	4620      	mov	r0, r4
 801024a:	f002 fc01 	bl	8012a50 <_fflush_r>
 801024e:	68e1      	ldr	r1, [r4, #12]
 8010250:	4b06      	ldr	r3, [pc, #24]	@ (801026c <cleanup_stdio+0x3c>)
 8010252:	4299      	cmp	r1, r3
 8010254:	d004      	beq.n	8010260 <cleanup_stdio+0x30>
 8010256:	4620      	mov	r0, r4
 8010258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801025c:	f002 bbf8 	b.w	8012a50 <_fflush_r>
 8010260:	bd10      	pop	{r4, pc}
 8010262:	bf00      	nop
 8010264:	2001df08 	.word	0x2001df08
 8010268:	2001df70 	.word	0x2001df70
 801026c:	2001dfd8 	.word	0x2001dfd8

08010270 <global_stdio_init.part.0>:
 8010270:	b510      	push	{r4, lr}
 8010272:	4b0b      	ldr	r3, [pc, #44]	@ (80102a0 <global_stdio_init.part.0+0x30>)
 8010274:	4c0b      	ldr	r4, [pc, #44]	@ (80102a4 <global_stdio_init.part.0+0x34>)
 8010276:	4a0c      	ldr	r2, [pc, #48]	@ (80102a8 <global_stdio_init.part.0+0x38>)
 8010278:	601a      	str	r2, [r3, #0]
 801027a:	4620      	mov	r0, r4
 801027c:	2200      	movs	r2, #0
 801027e:	2104      	movs	r1, #4
 8010280:	f7ff ff94 	bl	80101ac <std>
 8010284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010288:	2201      	movs	r2, #1
 801028a:	2109      	movs	r1, #9
 801028c:	f7ff ff8e 	bl	80101ac <std>
 8010290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010294:	2202      	movs	r2, #2
 8010296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801029a:	2112      	movs	r1, #18
 801029c:	f7ff bf86 	b.w	80101ac <std>
 80102a0:	2001e040 	.word	0x2001e040
 80102a4:	2001df08 	.word	0x2001df08
 80102a8:	08010219 	.word	0x08010219

080102ac <__sfp_lock_acquire>:
 80102ac:	4801      	ldr	r0, [pc, #4]	@ (80102b4 <__sfp_lock_acquire+0x8>)
 80102ae:	f000 b9b2 	b.w	8010616 <__retarget_lock_acquire_recursive>
 80102b2:	bf00      	nop
 80102b4:	2001e049 	.word	0x2001e049

080102b8 <__sfp_lock_release>:
 80102b8:	4801      	ldr	r0, [pc, #4]	@ (80102c0 <__sfp_lock_release+0x8>)
 80102ba:	f000 b9ad 	b.w	8010618 <__retarget_lock_release_recursive>
 80102be:	bf00      	nop
 80102c0:	2001e049 	.word	0x2001e049

080102c4 <__sinit>:
 80102c4:	b510      	push	{r4, lr}
 80102c6:	4604      	mov	r4, r0
 80102c8:	f7ff fff0 	bl	80102ac <__sfp_lock_acquire>
 80102cc:	6a23      	ldr	r3, [r4, #32]
 80102ce:	b11b      	cbz	r3, 80102d8 <__sinit+0x14>
 80102d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d4:	f7ff bff0 	b.w	80102b8 <__sfp_lock_release>
 80102d8:	4b04      	ldr	r3, [pc, #16]	@ (80102ec <__sinit+0x28>)
 80102da:	6223      	str	r3, [r4, #32]
 80102dc:	4b04      	ldr	r3, [pc, #16]	@ (80102f0 <__sinit+0x2c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1f5      	bne.n	80102d0 <__sinit+0xc>
 80102e4:	f7ff ffc4 	bl	8010270 <global_stdio_init.part.0>
 80102e8:	e7f2      	b.n	80102d0 <__sinit+0xc>
 80102ea:	bf00      	nop
 80102ec:	08010231 	.word	0x08010231
 80102f0:	2001e040 	.word	0x2001e040

080102f4 <_fwalk_sglue>:
 80102f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f8:	4607      	mov	r7, r0
 80102fa:	4688      	mov	r8, r1
 80102fc:	4614      	mov	r4, r2
 80102fe:	2600      	movs	r6, #0
 8010300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010304:	f1b9 0901 	subs.w	r9, r9, #1
 8010308:	d505      	bpl.n	8010316 <_fwalk_sglue+0x22>
 801030a:	6824      	ldr	r4, [r4, #0]
 801030c:	2c00      	cmp	r4, #0
 801030e:	d1f7      	bne.n	8010300 <_fwalk_sglue+0xc>
 8010310:	4630      	mov	r0, r6
 8010312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010316:	89ab      	ldrh	r3, [r5, #12]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d907      	bls.n	801032c <_fwalk_sglue+0x38>
 801031c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010320:	3301      	adds	r3, #1
 8010322:	d003      	beq.n	801032c <_fwalk_sglue+0x38>
 8010324:	4629      	mov	r1, r5
 8010326:	4638      	mov	r0, r7
 8010328:	47c0      	blx	r8
 801032a:	4306      	orrs	r6, r0
 801032c:	3568      	adds	r5, #104	@ 0x68
 801032e:	e7e9      	b.n	8010304 <_fwalk_sglue+0x10>

08010330 <sniprintf>:
 8010330:	b40c      	push	{r2, r3}
 8010332:	b530      	push	{r4, r5, lr}
 8010334:	4b18      	ldr	r3, [pc, #96]	@ (8010398 <sniprintf+0x68>)
 8010336:	1e0c      	subs	r4, r1, #0
 8010338:	681d      	ldr	r5, [r3, #0]
 801033a:	b09d      	sub	sp, #116	@ 0x74
 801033c:	da08      	bge.n	8010350 <sniprintf+0x20>
 801033e:	238b      	movs	r3, #139	@ 0x8b
 8010340:	602b      	str	r3, [r5, #0]
 8010342:	f04f 30ff 	mov.w	r0, #4294967295
 8010346:	b01d      	add	sp, #116	@ 0x74
 8010348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801034c:	b002      	add	sp, #8
 801034e:	4770      	bx	lr
 8010350:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010358:	f04f 0300 	mov.w	r3, #0
 801035c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801035e:	bf14      	ite	ne
 8010360:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010364:	4623      	moveq	r3, r4
 8010366:	9304      	str	r3, [sp, #16]
 8010368:	9307      	str	r3, [sp, #28]
 801036a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801036e:	9002      	str	r0, [sp, #8]
 8010370:	9006      	str	r0, [sp, #24]
 8010372:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010376:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010378:	ab21      	add	r3, sp, #132	@ 0x84
 801037a:	a902      	add	r1, sp, #8
 801037c:	4628      	mov	r0, r5
 801037e:	9301      	str	r3, [sp, #4]
 8010380:	f002 f8a4 	bl	80124cc <_svfiprintf_r>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	bfbc      	itt	lt
 8010388:	238b      	movlt	r3, #139	@ 0x8b
 801038a:	602b      	strlt	r3, [r5, #0]
 801038c:	2c00      	cmp	r4, #0
 801038e:	d0da      	beq.n	8010346 <sniprintf+0x16>
 8010390:	9b02      	ldr	r3, [sp, #8]
 8010392:	2200      	movs	r2, #0
 8010394:	701a      	strb	r2, [r3, #0]
 8010396:	e7d6      	b.n	8010346 <sniprintf+0x16>
 8010398:	2000439c 	.word	0x2000439c

0801039c <siprintf>:
 801039c:	b40e      	push	{r1, r2, r3}
 801039e:	b510      	push	{r4, lr}
 80103a0:	b09d      	sub	sp, #116	@ 0x74
 80103a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80103a4:	9002      	str	r0, [sp, #8]
 80103a6:	9006      	str	r0, [sp, #24]
 80103a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80103ac:	480a      	ldr	r0, [pc, #40]	@ (80103d8 <siprintf+0x3c>)
 80103ae:	9107      	str	r1, [sp, #28]
 80103b0:	9104      	str	r1, [sp, #16]
 80103b2:	490a      	ldr	r1, [pc, #40]	@ (80103dc <siprintf+0x40>)
 80103b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103b8:	9105      	str	r1, [sp, #20]
 80103ba:	2400      	movs	r4, #0
 80103bc:	a902      	add	r1, sp, #8
 80103be:	6800      	ldr	r0, [r0, #0]
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80103c4:	f002 f882 	bl	80124cc <_svfiprintf_r>
 80103c8:	9b02      	ldr	r3, [sp, #8]
 80103ca:	701c      	strb	r4, [r3, #0]
 80103cc:	b01d      	add	sp, #116	@ 0x74
 80103ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d2:	b003      	add	sp, #12
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	2000439c 	.word	0x2000439c
 80103dc:	ffff0208 	.word	0xffff0208

080103e0 <__sread>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	460c      	mov	r4, r1
 80103e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e8:	f000 f8c6 	bl	8010578 <_read_r>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	bfab      	itete	ge
 80103f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103f2:	89a3      	ldrhlt	r3, [r4, #12]
 80103f4:	181b      	addge	r3, r3, r0
 80103f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80103fa:	bfac      	ite	ge
 80103fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80103fe:	81a3      	strhlt	r3, [r4, #12]
 8010400:	bd10      	pop	{r4, pc}

08010402 <__swrite>:
 8010402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010406:	461f      	mov	r7, r3
 8010408:	898b      	ldrh	r3, [r1, #12]
 801040a:	05db      	lsls	r3, r3, #23
 801040c:	4605      	mov	r5, r0
 801040e:	460c      	mov	r4, r1
 8010410:	4616      	mov	r6, r2
 8010412:	d505      	bpl.n	8010420 <__swrite+0x1e>
 8010414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010418:	2302      	movs	r3, #2
 801041a:	2200      	movs	r2, #0
 801041c:	f000 f89a 	bl	8010554 <_lseek_r>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801042a:	81a3      	strh	r3, [r4, #12]
 801042c:	4632      	mov	r2, r6
 801042e:	463b      	mov	r3, r7
 8010430:	4628      	mov	r0, r5
 8010432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010436:	f000 b8b1 	b.w	801059c <_write_r>

0801043a <__sseek>:
 801043a:	b510      	push	{r4, lr}
 801043c:	460c      	mov	r4, r1
 801043e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010442:	f000 f887 	bl	8010554 <_lseek_r>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	bf15      	itete	ne
 801044c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801044e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010456:	81a3      	strheq	r3, [r4, #12]
 8010458:	bf18      	it	ne
 801045a:	81a3      	strhne	r3, [r4, #12]
 801045c:	bd10      	pop	{r4, pc}

0801045e <__sclose>:
 801045e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010462:	f000 b867 	b.w	8010534 <_close_r>

08010466 <memmove>:
 8010466:	4288      	cmp	r0, r1
 8010468:	b510      	push	{r4, lr}
 801046a:	eb01 0402 	add.w	r4, r1, r2
 801046e:	d902      	bls.n	8010476 <memmove+0x10>
 8010470:	4284      	cmp	r4, r0
 8010472:	4623      	mov	r3, r4
 8010474:	d807      	bhi.n	8010486 <memmove+0x20>
 8010476:	1e43      	subs	r3, r0, #1
 8010478:	42a1      	cmp	r1, r4
 801047a:	d008      	beq.n	801048e <memmove+0x28>
 801047c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010480:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010484:	e7f8      	b.n	8010478 <memmove+0x12>
 8010486:	4402      	add	r2, r0
 8010488:	4601      	mov	r1, r0
 801048a:	428a      	cmp	r2, r1
 801048c:	d100      	bne.n	8010490 <memmove+0x2a>
 801048e:	bd10      	pop	{r4, pc}
 8010490:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010494:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010498:	e7f7      	b.n	801048a <memmove+0x24>

0801049a <memset>:
 801049a:	4402      	add	r2, r0
 801049c:	4603      	mov	r3, r0
 801049e:	4293      	cmp	r3, r2
 80104a0:	d100      	bne.n	80104a4 <memset+0xa>
 80104a2:	4770      	bx	lr
 80104a4:	f803 1b01 	strb.w	r1, [r3], #1
 80104a8:	e7f9      	b.n	801049e <memset+0x4>

080104aa <strcat>:
 80104aa:	b510      	push	{r4, lr}
 80104ac:	4602      	mov	r2, r0
 80104ae:	7814      	ldrb	r4, [r2, #0]
 80104b0:	4613      	mov	r3, r2
 80104b2:	3201      	adds	r2, #1
 80104b4:	2c00      	cmp	r4, #0
 80104b6:	d1fa      	bne.n	80104ae <strcat+0x4>
 80104b8:	3b01      	subs	r3, #1
 80104ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104c2:	2a00      	cmp	r2, #0
 80104c4:	d1f9      	bne.n	80104ba <strcat+0x10>
 80104c6:	bd10      	pop	{r4, pc}

080104c8 <strchr>:
 80104c8:	b2c9      	uxtb	r1, r1
 80104ca:	4603      	mov	r3, r0
 80104cc:	4618      	mov	r0, r3
 80104ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d2:	b112      	cbz	r2, 80104da <strchr+0x12>
 80104d4:	428a      	cmp	r2, r1
 80104d6:	d1f9      	bne.n	80104cc <strchr+0x4>
 80104d8:	4770      	bx	lr
 80104da:	2900      	cmp	r1, #0
 80104dc:	bf18      	it	ne
 80104de:	2000      	movne	r0, #0
 80104e0:	4770      	bx	lr

080104e2 <strncmp>:
 80104e2:	b510      	push	{r4, lr}
 80104e4:	b16a      	cbz	r2, 8010502 <strncmp+0x20>
 80104e6:	3901      	subs	r1, #1
 80104e8:	1884      	adds	r4, r0, r2
 80104ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d103      	bne.n	80104fe <strncmp+0x1c>
 80104f6:	42a0      	cmp	r0, r4
 80104f8:	d001      	beq.n	80104fe <strncmp+0x1c>
 80104fa:	2a00      	cmp	r2, #0
 80104fc:	d1f5      	bne.n	80104ea <strncmp+0x8>
 80104fe:	1ad0      	subs	r0, r2, r3
 8010500:	bd10      	pop	{r4, pc}
 8010502:	4610      	mov	r0, r2
 8010504:	e7fc      	b.n	8010500 <strncmp+0x1e>

08010506 <strncpy>:
 8010506:	b510      	push	{r4, lr}
 8010508:	3901      	subs	r1, #1
 801050a:	4603      	mov	r3, r0
 801050c:	b132      	cbz	r2, 801051c <strncpy+0x16>
 801050e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010512:	f803 4b01 	strb.w	r4, [r3], #1
 8010516:	3a01      	subs	r2, #1
 8010518:	2c00      	cmp	r4, #0
 801051a:	d1f7      	bne.n	801050c <strncpy+0x6>
 801051c:	441a      	add	r2, r3
 801051e:	2100      	movs	r1, #0
 8010520:	4293      	cmp	r3, r2
 8010522:	d100      	bne.n	8010526 <strncpy+0x20>
 8010524:	bd10      	pop	{r4, pc}
 8010526:	f803 1b01 	strb.w	r1, [r3], #1
 801052a:	e7f9      	b.n	8010520 <strncpy+0x1a>

0801052c <_localeconv_r>:
 801052c:	4800      	ldr	r0, [pc, #0]	@ (8010530 <_localeconv_r+0x4>)
 801052e:	4770      	bx	lr
 8010530:	20004320 	.word	0x20004320

08010534 <_close_r>:
 8010534:	b538      	push	{r3, r4, r5, lr}
 8010536:	4d06      	ldr	r5, [pc, #24]	@ (8010550 <_close_r+0x1c>)
 8010538:	2300      	movs	r3, #0
 801053a:	4604      	mov	r4, r0
 801053c:	4608      	mov	r0, r1
 801053e:	602b      	str	r3, [r5, #0]
 8010540:	f7f2 fdca 	bl	80030d8 <_close>
 8010544:	1c43      	adds	r3, r0, #1
 8010546:	d102      	bne.n	801054e <_close_r+0x1a>
 8010548:	682b      	ldr	r3, [r5, #0]
 801054a:	b103      	cbz	r3, 801054e <_close_r+0x1a>
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	bd38      	pop	{r3, r4, r5, pc}
 8010550:	2001e044 	.word	0x2001e044

08010554 <_lseek_r>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4d07      	ldr	r5, [pc, #28]	@ (8010574 <_lseek_r+0x20>)
 8010558:	4604      	mov	r4, r0
 801055a:	4608      	mov	r0, r1
 801055c:	4611      	mov	r1, r2
 801055e:	2200      	movs	r2, #0
 8010560:	602a      	str	r2, [r5, #0]
 8010562:	461a      	mov	r2, r3
 8010564:	f7f2 fddf 	bl	8003126 <_lseek>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d102      	bne.n	8010572 <_lseek_r+0x1e>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	b103      	cbz	r3, 8010572 <_lseek_r+0x1e>
 8010570:	6023      	str	r3, [r4, #0]
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	2001e044 	.word	0x2001e044

08010578 <_read_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4d07      	ldr	r5, [pc, #28]	@ (8010598 <_read_r+0x20>)
 801057c:	4604      	mov	r4, r0
 801057e:	4608      	mov	r0, r1
 8010580:	4611      	mov	r1, r2
 8010582:	2200      	movs	r2, #0
 8010584:	602a      	str	r2, [r5, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	f7f2 fd6d 	bl	8003066 <_read>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_read_r+0x1e>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	b103      	cbz	r3, 8010596 <_read_r+0x1e>
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	2001e044 	.word	0x2001e044

0801059c <_write_r>:
 801059c:	b538      	push	{r3, r4, r5, lr}
 801059e:	4d07      	ldr	r5, [pc, #28]	@ (80105bc <_write_r+0x20>)
 80105a0:	4604      	mov	r4, r0
 80105a2:	4608      	mov	r0, r1
 80105a4:	4611      	mov	r1, r2
 80105a6:	2200      	movs	r2, #0
 80105a8:	602a      	str	r2, [r5, #0]
 80105aa:	461a      	mov	r2, r3
 80105ac:	f7f2 fd78 	bl	80030a0 <_write>
 80105b0:	1c43      	adds	r3, r0, #1
 80105b2:	d102      	bne.n	80105ba <_write_r+0x1e>
 80105b4:	682b      	ldr	r3, [r5, #0]
 80105b6:	b103      	cbz	r3, 80105ba <_write_r+0x1e>
 80105b8:	6023      	str	r3, [r4, #0]
 80105ba:	bd38      	pop	{r3, r4, r5, pc}
 80105bc:	2001e044 	.word	0x2001e044

080105c0 <__errno>:
 80105c0:	4b01      	ldr	r3, [pc, #4]	@ (80105c8 <__errno+0x8>)
 80105c2:	6818      	ldr	r0, [r3, #0]
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	2000439c 	.word	0x2000439c

080105cc <__libc_init_array>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	4d0d      	ldr	r5, [pc, #52]	@ (8010604 <__libc_init_array+0x38>)
 80105d0:	4c0d      	ldr	r4, [pc, #52]	@ (8010608 <__libc_init_array+0x3c>)
 80105d2:	1b64      	subs	r4, r4, r5
 80105d4:	10a4      	asrs	r4, r4, #2
 80105d6:	2600      	movs	r6, #0
 80105d8:	42a6      	cmp	r6, r4
 80105da:	d109      	bne.n	80105f0 <__libc_init_array+0x24>
 80105dc:	4d0b      	ldr	r5, [pc, #44]	@ (801060c <__libc_init_array+0x40>)
 80105de:	4c0c      	ldr	r4, [pc, #48]	@ (8010610 <__libc_init_array+0x44>)
 80105e0:	f002 fc4c 	bl	8012e7c <_init>
 80105e4:	1b64      	subs	r4, r4, r5
 80105e6:	10a4      	asrs	r4, r4, #2
 80105e8:	2600      	movs	r6, #0
 80105ea:	42a6      	cmp	r6, r4
 80105ec:	d105      	bne.n	80105fa <__libc_init_array+0x2e>
 80105ee:	bd70      	pop	{r4, r5, r6, pc}
 80105f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80105f4:	4798      	blx	r3
 80105f6:	3601      	adds	r6, #1
 80105f8:	e7ee      	b.n	80105d8 <__libc_init_array+0xc>
 80105fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80105fe:	4798      	blx	r3
 8010600:	3601      	adds	r6, #1
 8010602:	e7f2      	b.n	80105ea <__libc_init_array+0x1e>
 8010604:	080149b0 	.word	0x080149b0
 8010608:	080149b0 	.word	0x080149b0
 801060c:	080149b0 	.word	0x080149b0
 8010610:	080149b4 	.word	0x080149b4

08010614 <__retarget_lock_init_recursive>:
 8010614:	4770      	bx	lr

08010616 <__retarget_lock_acquire_recursive>:
 8010616:	4770      	bx	lr

08010618 <__retarget_lock_release_recursive>:
 8010618:	4770      	bx	lr

0801061a <memcpy>:
 801061a:	440a      	add	r2, r1
 801061c:	4291      	cmp	r1, r2
 801061e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010622:	d100      	bne.n	8010626 <memcpy+0xc>
 8010624:	4770      	bx	lr
 8010626:	b510      	push	{r4, lr}
 8010628:	f811 4b01 	ldrb.w	r4, [r1], #1
 801062c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010630:	4291      	cmp	r1, r2
 8010632:	d1f9      	bne.n	8010628 <memcpy+0xe>
 8010634:	bd10      	pop	{r4, pc}
	...

08010638 <nan>:
 8010638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010640 <nan+0x8>
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	00000000 	.word	0x00000000
 8010644:	7ff80000 	.word	0x7ff80000

08010648 <quorem>:
 8010648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064c:	6903      	ldr	r3, [r0, #16]
 801064e:	690c      	ldr	r4, [r1, #16]
 8010650:	42a3      	cmp	r3, r4
 8010652:	4607      	mov	r7, r0
 8010654:	db7e      	blt.n	8010754 <quorem+0x10c>
 8010656:	3c01      	subs	r4, #1
 8010658:	f101 0814 	add.w	r8, r1, #20
 801065c:	00a3      	lsls	r3, r4, #2
 801065e:	f100 0514 	add.w	r5, r0, #20
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010668:	9301      	str	r3, [sp, #4]
 801066a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801066e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010672:	3301      	adds	r3, #1
 8010674:	429a      	cmp	r2, r3
 8010676:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801067a:	fbb2 f6f3 	udiv	r6, r2, r3
 801067e:	d32e      	bcc.n	80106de <quorem+0x96>
 8010680:	f04f 0a00 	mov.w	sl, #0
 8010684:	46c4      	mov	ip, r8
 8010686:	46ae      	mov	lr, r5
 8010688:	46d3      	mov	fp, sl
 801068a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801068e:	b298      	uxth	r0, r3
 8010690:	fb06 a000 	mla	r0, r6, r0, sl
 8010694:	0c02      	lsrs	r2, r0, #16
 8010696:	0c1b      	lsrs	r3, r3, #16
 8010698:	fb06 2303 	mla	r3, r6, r3, r2
 801069c:	f8de 2000 	ldr.w	r2, [lr]
 80106a0:	b280      	uxth	r0, r0
 80106a2:	b292      	uxth	r2, r2
 80106a4:	1a12      	subs	r2, r2, r0
 80106a6:	445a      	add	r2, fp
 80106a8:	f8de 0000 	ldr.w	r0, [lr]
 80106ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80106b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80106ba:	b292      	uxth	r2, r2
 80106bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80106c0:	45e1      	cmp	r9, ip
 80106c2:	f84e 2b04 	str.w	r2, [lr], #4
 80106c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80106ca:	d2de      	bcs.n	801068a <quorem+0x42>
 80106cc:	9b00      	ldr	r3, [sp, #0]
 80106ce:	58eb      	ldr	r3, [r5, r3]
 80106d0:	b92b      	cbnz	r3, 80106de <quorem+0x96>
 80106d2:	9b01      	ldr	r3, [sp, #4]
 80106d4:	3b04      	subs	r3, #4
 80106d6:	429d      	cmp	r5, r3
 80106d8:	461a      	mov	r2, r3
 80106da:	d32f      	bcc.n	801073c <quorem+0xf4>
 80106dc:	613c      	str	r4, [r7, #16]
 80106de:	4638      	mov	r0, r7
 80106e0:	f001 fca0 	bl	8012024 <__mcmp>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	db25      	blt.n	8010734 <quorem+0xec>
 80106e8:	4629      	mov	r1, r5
 80106ea:	2000      	movs	r0, #0
 80106ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80106f0:	f8d1 c000 	ldr.w	ip, [r1]
 80106f4:	fa1f fe82 	uxth.w	lr, r2
 80106f8:	fa1f f38c 	uxth.w	r3, ip
 80106fc:	eba3 030e 	sub.w	r3, r3, lr
 8010700:	4403      	add	r3, r0
 8010702:	0c12      	lsrs	r2, r2, #16
 8010704:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010708:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801070c:	b29b      	uxth	r3, r3
 801070e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010712:	45c1      	cmp	r9, r8
 8010714:	f841 3b04 	str.w	r3, [r1], #4
 8010718:	ea4f 4022 	mov.w	r0, r2, asr #16
 801071c:	d2e6      	bcs.n	80106ec <quorem+0xa4>
 801071e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010726:	b922      	cbnz	r2, 8010732 <quorem+0xea>
 8010728:	3b04      	subs	r3, #4
 801072a:	429d      	cmp	r5, r3
 801072c:	461a      	mov	r2, r3
 801072e:	d30b      	bcc.n	8010748 <quorem+0x100>
 8010730:	613c      	str	r4, [r7, #16]
 8010732:	3601      	adds	r6, #1
 8010734:	4630      	mov	r0, r6
 8010736:	b003      	add	sp, #12
 8010738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	3b04      	subs	r3, #4
 8010740:	2a00      	cmp	r2, #0
 8010742:	d1cb      	bne.n	80106dc <quorem+0x94>
 8010744:	3c01      	subs	r4, #1
 8010746:	e7c6      	b.n	80106d6 <quorem+0x8e>
 8010748:	6812      	ldr	r2, [r2, #0]
 801074a:	3b04      	subs	r3, #4
 801074c:	2a00      	cmp	r2, #0
 801074e:	d1ef      	bne.n	8010730 <quorem+0xe8>
 8010750:	3c01      	subs	r4, #1
 8010752:	e7ea      	b.n	801072a <quorem+0xe2>
 8010754:	2000      	movs	r0, #0
 8010756:	e7ee      	b.n	8010736 <quorem+0xee>

08010758 <_dtoa_r>:
 8010758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	ed2d 8b02 	vpush	{d8}
 8010760:	69c7      	ldr	r7, [r0, #28]
 8010762:	b091      	sub	sp, #68	@ 0x44
 8010764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010768:	ec55 4b10 	vmov	r4, r5, d0
 801076c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801076e:	9107      	str	r1, [sp, #28]
 8010770:	4681      	mov	r9, r0
 8010772:	9209      	str	r2, [sp, #36]	@ 0x24
 8010774:	930d      	str	r3, [sp, #52]	@ 0x34
 8010776:	b97f      	cbnz	r7, 8010798 <_dtoa_r+0x40>
 8010778:	2010      	movs	r0, #16
 801077a:	f001 f8cf 	bl	801191c <malloc>
 801077e:	4602      	mov	r2, r0
 8010780:	f8c9 001c 	str.w	r0, [r9, #28]
 8010784:	b920      	cbnz	r0, 8010790 <_dtoa_r+0x38>
 8010786:	4ba0      	ldr	r3, [pc, #640]	@ (8010a08 <_dtoa_r+0x2b0>)
 8010788:	21ef      	movs	r1, #239	@ 0xef
 801078a:	48a0      	ldr	r0, [pc, #640]	@ (8010a0c <_dtoa_r+0x2b4>)
 801078c:	f002 fa2c 	bl	8012be8 <__assert_func>
 8010790:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010794:	6007      	str	r7, [r0, #0]
 8010796:	60c7      	str	r7, [r0, #12]
 8010798:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801079c:	6819      	ldr	r1, [r3, #0]
 801079e:	b159      	cbz	r1, 80107b8 <_dtoa_r+0x60>
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	604a      	str	r2, [r1, #4]
 80107a4:	2301      	movs	r3, #1
 80107a6:	4093      	lsls	r3, r2
 80107a8:	608b      	str	r3, [r1, #8]
 80107aa:	4648      	mov	r0, r9
 80107ac:	f001 f9be 	bl	8011b2c <_Bfree>
 80107b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80107b4:	2200      	movs	r2, #0
 80107b6:	601a      	str	r2, [r3, #0]
 80107b8:	1e2b      	subs	r3, r5, #0
 80107ba:	bfbb      	ittet	lt
 80107bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80107c0:	9303      	strlt	r3, [sp, #12]
 80107c2:	2300      	movge	r3, #0
 80107c4:	2201      	movlt	r2, #1
 80107c6:	bfac      	ite	ge
 80107c8:	6033      	strge	r3, [r6, #0]
 80107ca:	6032      	strlt	r2, [r6, #0]
 80107cc:	4b90      	ldr	r3, [pc, #576]	@ (8010a10 <_dtoa_r+0x2b8>)
 80107ce:	9e03      	ldr	r6, [sp, #12]
 80107d0:	43b3      	bics	r3, r6
 80107d2:	d110      	bne.n	80107f6 <_dtoa_r+0x9e>
 80107d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80107da:	6013      	str	r3, [r2, #0]
 80107dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80107e0:	4323      	orrs	r3, r4
 80107e2:	f000 84e6 	beq.w	80111b2 <_dtoa_r+0xa5a>
 80107e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80107e8:	4f8a      	ldr	r7, [pc, #552]	@ (8010a14 <_dtoa_r+0x2bc>)
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 84e8 	beq.w	80111c0 <_dtoa_r+0xa68>
 80107f0:	1cfb      	adds	r3, r7, #3
 80107f2:	f000 bce3 	b.w	80111bc <_dtoa_r+0xa64>
 80107f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80107fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80107fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010802:	d10a      	bne.n	801081a <_dtoa_r+0xc2>
 8010804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010806:	2301      	movs	r3, #1
 8010808:	6013      	str	r3, [r2, #0]
 801080a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801080c:	b113      	cbz	r3, 8010814 <_dtoa_r+0xbc>
 801080e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010810:	4b81      	ldr	r3, [pc, #516]	@ (8010a18 <_dtoa_r+0x2c0>)
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	4f81      	ldr	r7, [pc, #516]	@ (8010a1c <_dtoa_r+0x2c4>)
 8010816:	f000 bcd3 	b.w	80111c0 <_dtoa_r+0xa68>
 801081a:	aa0e      	add	r2, sp, #56	@ 0x38
 801081c:	a90f      	add	r1, sp, #60	@ 0x3c
 801081e:	4648      	mov	r0, r9
 8010820:	eeb0 0b48 	vmov.f64	d0, d8
 8010824:	f001 fd1e 	bl	8012264 <__d2b>
 8010828:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801082c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801082e:	9001      	str	r0, [sp, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d045      	beq.n	80108c0 <_dtoa_r+0x168>
 8010834:	eeb0 7b48 	vmov.f64	d7, d8
 8010838:	ee18 1a90 	vmov	r1, s17
 801083c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010840:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010844:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010848:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801084c:	2500      	movs	r5, #0
 801084e:	ee07 1a90 	vmov	s15, r1
 8010852:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010856:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80109f0 <_dtoa_r+0x298>
 801085a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801085e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80109f8 <_dtoa_r+0x2a0>
 8010862:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010866:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010a00 <_dtoa_r+0x2a8>
 801086a:	ee07 3a90 	vmov	s15, r3
 801086e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010872:	eeb0 7b46 	vmov.f64	d7, d6
 8010876:	eea4 7b05 	vfma.f64	d7, d4, d5
 801087a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801087e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010886:	ee16 8a90 	vmov	r8, s13
 801088a:	d508      	bpl.n	801089e <_dtoa_r+0x146>
 801088c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010890:	eeb4 6b47 	vcmp.f64	d6, d7
 8010894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010898:	bf18      	it	ne
 801089a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801089e:	f1b8 0f16 	cmp.w	r8, #22
 80108a2:	d82b      	bhi.n	80108fc <_dtoa_r+0x1a4>
 80108a4:	495e      	ldr	r1, [pc, #376]	@ (8010a20 <_dtoa_r+0x2c8>)
 80108a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80108aa:	ed91 7b00 	vldr	d7, [r1]
 80108ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	d501      	bpl.n	80108bc <_dtoa_r+0x164>
 80108b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80108bc:	2100      	movs	r1, #0
 80108be:	e01e      	b.n	80108fe <_dtoa_r+0x1a6>
 80108c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108c2:	4413      	add	r3, r2
 80108c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80108c8:	2920      	cmp	r1, #32
 80108ca:	bfc1      	itttt	gt
 80108cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80108d0:	408e      	lslgt	r6, r1
 80108d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80108d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80108da:	bfd6      	itet	le
 80108dc:	f1c1 0120 	rsble	r1, r1, #32
 80108e0:	4331      	orrgt	r1, r6
 80108e2:	fa04 f101 	lslle.w	r1, r4, r1
 80108e6:	ee07 1a90 	vmov	s15, r1
 80108ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80108ee:	3b01      	subs	r3, #1
 80108f0:	ee17 1a90 	vmov	r1, s15
 80108f4:	2501      	movs	r5, #1
 80108f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80108fa:	e7a8      	b.n	801084e <_dtoa_r+0xf6>
 80108fc:	2101      	movs	r1, #1
 80108fe:	1ad2      	subs	r2, r2, r3
 8010900:	1e53      	subs	r3, r2, #1
 8010902:	9306      	str	r3, [sp, #24]
 8010904:	bf45      	ittet	mi
 8010906:	f1c2 0301 	rsbmi	r3, r2, #1
 801090a:	9304      	strmi	r3, [sp, #16]
 801090c:	2300      	movpl	r3, #0
 801090e:	2300      	movmi	r3, #0
 8010910:	bf4c      	ite	mi
 8010912:	9306      	strmi	r3, [sp, #24]
 8010914:	9304      	strpl	r3, [sp, #16]
 8010916:	f1b8 0f00 	cmp.w	r8, #0
 801091a:	910c      	str	r1, [sp, #48]	@ 0x30
 801091c:	db18      	blt.n	8010950 <_dtoa_r+0x1f8>
 801091e:	9b06      	ldr	r3, [sp, #24]
 8010920:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010924:	4443      	add	r3, r8
 8010926:	9306      	str	r3, [sp, #24]
 8010928:	2300      	movs	r3, #0
 801092a:	9a07      	ldr	r2, [sp, #28]
 801092c:	2a09      	cmp	r2, #9
 801092e:	d845      	bhi.n	80109bc <_dtoa_r+0x264>
 8010930:	2a05      	cmp	r2, #5
 8010932:	bfc4      	itt	gt
 8010934:	3a04      	subgt	r2, #4
 8010936:	9207      	strgt	r2, [sp, #28]
 8010938:	9a07      	ldr	r2, [sp, #28]
 801093a:	f1a2 0202 	sub.w	r2, r2, #2
 801093e:	bfcc      	ite	gt
 8010940:	2400      	movgt	r4, #0
 8010942:	2401      	movle	r4, #1
 8010944:	2a03      	cmp	r2, #3
 8010946:	d844      	bhi.n	80109d2 <_dtoa_r+0x27a>
 8010948:	e8df f002 	tbb	[pc, r2]
 801094c:	0b173634 	.word	0x0b173634
 8010950:	9b04      	ldr	r3, [sp, #16]
 8010952:	2200      	movs	r2, #0
 8010954:	eba3 0308 	sub.w	r3, r3, r8
 8010958:	9304      	str	r3, [sp, #16]
 801095a:	920a      	str	r2, [sp, #40]	@ 0x28
 801095c:	f1c8 0300 	rsb	r3, r8, #0
 8010960:	e7e3      	b.n	801092a <_dtoa_r+0x1d2>
 8010962:	2201      	movs	r2, #1
 8010964:	9208      	str	r2, [sp, #32]
 8010966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010968:	eb08 0b02 	add.w	fp, r8, r2
 801096c:	f10b 0a01 	add.w	sl, fp, #1
 8010970:	4652      	mov	r2, sl
 8010972:	2a01      	cmp	r2, #1
 8010974:	bfb8      	it	lt
 8010976:	2201      	movlt	r2, #1
 8010978:	e006      	b.n	8010988 <_dtoa_r+0x230>
 801097a:	2201      	movs	r2, #1
 801097c:	9208      	str	r2, [sp, #32]
 801097e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010980:	2a00      	cmp	r2, #0
 8010982:	dd29      	ble.n	80109d8 <_dtoa_r+0x280>
 8010984:	4693      	mov	fp, r2
 8010986:	4692      	mov	sl, r2
 8010988:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801098c:	2100      	movs	r1, #0
 801098e:	2004      	movs	r0, #4
 8010990:	f100 0614 	add.w	r6, r0, #20
 8010994:	4296      	cmp	r6, r2
 8010996:	d926      	bls.n	80109e6 <_dtoa_r+0x28e>
 8010998:	6079      	str	r1, [r7, #4]
 801099a:	4648      	mov	r0, r9
 801099c:	9305      	str	r3, [sp, #20]
 801099e:	f001 f885 	bl	8011aac <_Balloc>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	4607      	mov	r7, r0
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d13e      	bne.n	8010a28 <_dtoa_r+0x2d0>
 80109aa:	4b1e      	ldr	r3, [pc, #120]	@ (8010a24 <_dtoa_r+0x2cc>)
 80109ac:	4602      	mov	r2, r0
 80109ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80109b2:	e6ea      	b.n	801078a <_dtoa_r+0x32>
 80109b4:	2200      	movs	r2, #0
 80109b6:	e7e1      	b.n	801097c <_dtoa_r+0x224>
 80109b8:	2200      	movs	r2, #0
 80109ba:	e7d3      	b.n	8010964 <_dtoa_r+0x20c>
 80109bc:	2401      	movs	r4, #1
 80109be:	2200      	movs	r2, #0
 80109c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80109c4:	f04f 3bff 	mov.w	fp, #4294967295
 80109c8:	2100      	movs	r1, #0
 80109ca:	46da      	mov	sl, fp
 80109cc:	2212      	movs	r2, #18
 80109ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80109d0:	e7da      	b.n	8010988 <_dtoa_r+0x230>
 80109d2:	2201      	movs	r2, #1
 80109d4:	9208      	str	r2, [sp, #32]
 80109d6:	e7f5      	b.n	80109c4 <_dtoa_r+0x26c>
 80109d8:	f04f 0b01 	mov.w	fp, #1
 80109dc:	46da      	mov	sl, fp
 80109de:	465a      	mov	r2, fp
 80109e0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80109e4:	e7d0      	b.n	8010988 <_dtoa_r+0x230>
 80109e6:	3101      	adds	r1, #1
 80109e8:	0040      	lsls	r0, r0, #1
 80109ea:	e7d1      	b.n	8010990 <_dtoa_r+0x238>
 80109ec:	f3af 8000 	nop.w
 80109f0:	636f4361 	.word	0x636f4361
 80109f4:	3fd287a7 	.word	0x3fd287a7
 80109f8:	8b60c8b3 	.word	0x8b60c8b3
 80109fc:	3fc68a28 	.word	0x3fc68a28
 8010a00:	509f79fb 	.word	0x509f79fb
 8010a04:	3fd34413 	.word	0x3fd34413
 8010a08:	080145cb 	.word	0x080145cb
 8010a0c:	080145e2 	.word	0x080145e2
 8010a10:	7ff00000 	.word	0x7ff00000
 8010a14:	080145c7 	.word	0x080145c7
 8010a18:	08014593 	.word	0x08014593
 8010a1c:	08014592 	.word	0x08014592
 8010a20:	080148e0 	.word	0x080148e0
 8010a24:	0801463a 	.word	0x0801463a
 8010a28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010a2c:	f1ba 0f0e 	cmp.w	sl, #14
 8010a30:	6010      	str	r0, [r2, #0]
 8010a32:	d86e      	bhi.n	8010b12 <_dtoa_r+0x3ba>
 8010a34:	2c00      	cmp	r4, #0
 8010a36:	d06c      	beq.n	8010b12 <_dtoa_r+0x3ba>
 8010a38:	f1b8 0f00 	cmp.w	r8, #0
 8010a3c:	f340 80b4 	ble.w	8010ba8 <_dtoa_r+0x450>
 8010a40:	4ac8      	ldr	r2, [pc, #800]	@ (8010d64 <_dtoa_r+0x60c>)
 8010a42:	f008 010f 	and.w	r1, r8, #15
 8010a46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010a4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010a4e:	ed92 7b00 	vldr	d7, [r2]
 8010a52:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010a56:	f000 809b 	beq.w	8010b90 <_dtoa_r+0x438>
 8010a5a:	4ac3      	ldr	r2, [pc, #780]	@ (8010d68 <_dtoa_r+0x610>)
 8010a5c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010a60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010a64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010a68:	f001 010f 	and.w	r1, r1, #15
 8010a6c:	2203      	movs	r2, #3
 8010a6e:	48be      	ldr	r0, [pc, #760]	@ (8010d68 <_dtoa_r+0x610>)
 8010a70:	2900      	cmp	r1, #0
 8010a72:	f040 808f 	bne.w	8010b94 <_dtoa_r+0x43c>
 8010a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010a7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a88:	2900      	cmp	r1, #0
 8010a8a:	f000 80b3 	beq.w	8010bf4 <_dtoa_r+0x49c>
 8010a8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9a:	f140 80ab 	bpl.w	8010bf4 <_dtoa_r+0x49c>
 8010a9e:	f1ba 0f00 	cmp.w	sl, #0
 8010aa2:	f000 80a7 	beq.w	8010bf4 <_dtoa_r+0x49c>
 8010aa6:	f1bb 0f00 	cmp.w	fp, #0
 8010aaa:	dd30      	ble.n	8010b0e <_dtoa_r+0x3b6>
 8010aac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ab8:	f108 31ff 	add.w	r1, r8, #4294967295
 8010abc:	9105      	str	r1, [sp, #20]
 8010abe:	3201      	adds	r2, #1
 8010ac0:	465c      	mov	r4, fp
 8010ac2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ac6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010aca:	ee07 2a90 	vmov	s15, r2
 8010ace:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ad2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010ad6:	ee15 2a90 	vmov	r2, s11
 8010ada:	ec51 0b15 	vmov	r0, r1, d5
 8010ade:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010ae2:	2c00      	cmp	r4, #0
 8010ae4:	f040 808a 	bne.w	8010bfc <_dtoa_r+0x4a4>
 8010ae8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010aec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010af0:	ec41 0b17 	vmov	d7, r0, r1
 8010af4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	f300 826a 	bgt.w	8010fd4 <_dtoa_r+0x87c>
 8010b00:	eeb1 7b47 	vneg.f64	d7, d7
 8010b04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0c:	d423      	bmi.n	8010b56 <_dtoa_r+0x3fe>
 8010b0e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b14:	2a00      	cmp	r2, #0
 8010b16:	f2c0 8129 	blt.w	8010d6c <_dtoa_r+0x614>
 8010b1a:	f1b8 0f0e 	cmp.w	r8, #14
 8010b1e:	f300 8125 	bgt.w	8010d6c <_dtoa_r+0x614>
 8010b22:	4b90      	ldr	r3, [pc, #576]	@ (8010d64 <_dtoa_r+0x60c>)
 8010b24:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010b28:	ed93 6b00 	vldr	d6, [r3]
 8010b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f280 80c8 	bge.w	8010cc4 <_dtoa_r+0x56c>
 8010b34:	f1ba 0f00 	cmp.w	sl, #0
 8010b38:	f300 80c4 	bgt.w	8010cc4 <_dtoa_r+0x56c>
 8010b3c:	d10b      	bne.n	8010b56 <_dtoa_r+0x3fe>
 8010b3e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010b42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b52:	f2c0 823c 	blt.w	8010fce <_dtoa_r+0x876>
 8010b56:	2400      	movs	r4, #0
 8010b58:	4625      	mov	r5, r4
 8010b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5c:	43db      	mvns	r3, r3
 8010b5e:	9305      	str	r3, [sp, #20]
 8010b60:	463e      	mov	r6, r7
 8010b62:	f04f 0800 	mov.w	r8, #0
 8010b66:	4621      	mov	r1, r4
 8010b68:	4648      	mov	r0, r9
 8010b6a:	f000 ffdf 	bl	8011b2c <_Bfree>
 8010b6e:	2d00      	cmp	r5, #0
 8010b70:	f000 80a2 	beq.w	8010cb8 <_dtoa_r+0x560>
 8010b74:	f1b8 0f00 	cmp.w	r8, #0
 8010b78:	d005      	beq.n	8010b86 <_dtoa_r+0x42e>
 8010b7a:	45a8      	cmp	r8, r5
 8010b7c:	d003      	beq.n	8010b86 <_dtoa_r+0x42e>
 8010b7e:	4641      	mov	r1, r8
 8010b80:	4648      	mov	r0, r9
 8010b82:	f000 ffd3 	bl	8011b2c <_Bfree>
 8010b86:	4629      	mov	r1, r5
 8010b88:	4648      	mov	r0, r9
 8010b8a:	f000 ffcf 	bl	8011b2c <_Bfree>
 8010b8e:	e093      	b.n	8010cb8 <_dtoa_r+0x560>
 8010b90:	2202      	movs	r2, #2
 8010b92:	e76c      	b.n	8010a6e <_dtoa_r+0x316>
 8010b94:	07cc      	lsls	r4, r1, #31
 8010b96:	d504      	bpl.n	8010ba2 <_dtoa_r+0x44a>
 8010b98:	ed90 6b00 	vldr	d6, [r0]
 8010b9c:	3201      	adds	r2, #1
 8010b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ba2:	1049      	asrs	r1, r1, #1
 8010ba4:	3008      	adds	r0, #8
 8010ba6:	e763      	b.n	8010a70 <_dtoa_r+0x318>
 8010ba8:	d022      	beq.n	8010bf0 <_dtoa_r+0x498>
 8010baa:	f1c8 0100 	rsb	r1, r8, #0
 8010bae:	4a6d      	ldr	r2, [pc, #436]	@ (8010d64 <_dtoa_r+0x60c>)
 8010bb0:	f001 000f 	and.w	r0, r1, #15
 8010bb4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010bb8:	ed92 7b00 	vldr	d7, [r2]
 8010bbc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010bc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bc4:	4868      	ldr	r0, [pc, #416]	@ (8010d68 <_dtoa_r+0x610>)
 8010bc6:	1109      	asrs	r1, r1, #4
 8010bc8:	2400      	movs	r4, #0
 8010bca:	2202      	movs	r2, #2
 8010bcc:	b929      	cbnz	r1, 8010bda <_dtoa_r+0x482>
 8010bce:	2c00      	cmp	r4, #0
 8010bd0:	f43f af57 	beq.w	8010a82 <_dtoa_r+0x32a>
 8010bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bd8:	e753      	b.n	8010a82 <_dtoa_r+0x32a>
 8010bda:	07ce      	lsls	r6, r1, #31
 8010bdc:	d505      	bpl.n	8010bea <_dtoa_r+0x492>
 8010bde:	ed90 6b00 	vldr	d6, [r0]
 8010be2:	3201      	adds	r2, #1
 8010be4:	2401      	movs	r4, #1
 8010be6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010bea:	1049      	asrs	r1, r1, #1
 8010bec:	3008      	adds	r0, #8
 8010bee:	e7ed      	b.n	8010bcc <_dtoa_r+0x474>
 8010bf0:	2202      	movs	r2, #2
 8010bf2:	e746      	b.n	8010a82 <_dtoa_r+0x32a>
 8010bf4:	f8cd 8014 	str.w	r8, [sp, #20]
 8010bf8:	4654      	mov	r4, sl
 8010bfa:	e762      	b.n	8010ac2 <_dtoa_r+0x36a>
 8010bfc:	4a59      	ldr	r2, [pc, #356]	@ (8010d64 <_dtoa_r+0x60c>)
 8010bfe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010c02:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010c06:	9a08      	ldr	r2, [sp, #32]
 8010c08:	ec41 0b17 	vmov	d7, r0, r1
 8010c0c:	443c      	add	r4, r7
 8010c0e:	b34a      	cbz	r2, 8010c64 <_dtoa_r+0x50c>
 8010c10:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010c14:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010c18:	463e      	mov	r6, r7
 8010c1a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010c1e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010c22:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c26:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c2a:	ee14 2a90 	vmov	r2, s9
 8010c2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c32:	3230      	adds	r2, #48	@ 0x30
 8010c34:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c40:	f806 2b01 	strb.w	r2, [r6], #1
 8010c44:	d438      	bmi.n	8010cb8 <_dtoa_r+0x560>
 8010c46:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010c4a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c52:	d46e      	bmi.n	8010d32 <_dtoa_r+0x5da>
 8010c54:	42a6      	cmp	r6, r4
 8010c56:	f43f af5a 	beq.w	8010b0e <_dtoa_r+0x3b6>
 8010c5a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010c5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010c62:	e7e0      	b.n	8010c26 <_dtoa_r+0x4ce>
 8010c64:	4621      	mov	r1, r4
 8010c66:	463e      	mov	r6, r7
 8010c68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c6c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010c70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c74:	ee14 2a90 	vmov	r2, s9
 8010c78:	3230      	adds	r2, #48	@ 0x30
 8010c7a:	f806 2b01 	strb.w	r2, [r6], #1
 8010c7e:	42a6      	cmp	r6, r4
 8010c80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c84:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c88:	d119      	bne.n	8010cbe <_dtoa_r+0x566>
 8010c8a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010c8e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010c92:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9a:	dc4a      	bgt.n	8010d32 <_dtoa_r+0x5da>
 8010c9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010ca0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca8:	f57f af31 	bpl.w	8010b0e <_dtoa_r+0x3b6>
 8010cac:	460e      	mov	r6, r1
 8010cae:	3901      	subs	r1, #1
 8010cb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cb4:	2b30      	cmp	r3, #48	@ 0x30
 8010cb6:	d0f9      	beq.n	8010cac <_dtoa_r+0x554>
 8010cb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010cbc:	e027      	b.n	8010d0e <_dtoa_r+0x5b6>
 8010cbe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010cc2:	e7d5      	b.n	8010c70 <_dtoa_r+0x518>
 8010cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cc8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010ccc:	463e      	mov	r6, r7
 8010cce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010cd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010cd6:	ee15 3a10 	vmov	r3, s10
 8010cda:	3330      	adds	r3, #48	@ 0x30
 8010cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8010ce0:	1bf3      	subs	r3, r6, r7
 8010ce2:	459a      	cmp	sl, r3
 8010ce4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010ce8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010cec:	d132      	bne.n	8010d54 <_dtoa_r+0x5fc>
 8010cee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010cf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	dc18      	bgt.n	8010d2e <_dtoa_r+0x5d6>
 8010cfc:	eeb4 7b46 	vcmp.f64	d7, d6
 8010d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d04:	d103      	bne.n	8010d0e <_dtoa_r+0x5b6>
 8010d06:	ee15 3a10 	vmov	r3, s10
 8010d0a:	07db      	lsls	r3, r3, #31
 8010d0c:	d40f      	bmi.n	8010d2e <_dtoa_r+0x5d6>
 8010d0e:	9901      	ldr	r1, [sp, #4]
 8010d10:	4648      	mov	r0, r9
 8010d12:	f000 ff0b 	bl	8011b2c <_Bfree>
 8010d16:	2300      	movs	r3, #0
 8010d18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d1a:	7033      	strb	r3, [r6, #0]
 8010d1c:	f108 0301 	add.w	r3, r8, #1
 8010d20:	6013      	str	r3, [r2, #0]
 8010d22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 824b 	beq.w	80111c0 <_dtoa_r+0xa68>
 8010d2a:	601e      	str	r6, [r3, #0]
 8010d2c:	e248      	b.n	80111c0 <_dtoa_r+0xa68>
 8010d2e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010d32:	4633      	mov	r3, r6
 8010d34:	461e      	mov	r6, r3
 8010d36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d3a:	2a39      	cmp	r2, #57	@ 0x39
 8010d3c:	d106      	bne.n	8010d4c <_dtoa_r+0x5f4>
 8010d3e:	429f      	cmp	r7, r3
 8010d40:	d1f8      	bne.n	8010d34 <_dtoa_r+0x5dc>
 8010d42:	9a05      	ldr	r2, [sp, #20]
 8010d44:	3201      	adds	r2, #1
 8010d46:	9205      	str	r2, [sp, #20]
 8010d48:	2230      	movs	r2, #48	@ 0x30
 8010d4a:	703a      	strb	r2, [r7, #0]
 8010d4c:	781a      	ldrb	r2, [r3, #0]
 8010d4e:	3201      	adds	r2, #1
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	e7b1      	b.n	8010cb8 <_dtoa_r+0x560>
 8010d54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010d58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d60:	d1b5      	bne.n	8010cce <_dtoa_r+0x576>
 8010d62:	e7d4      	b.n	8010d0e <_dtoa_r+0x5b6>
 8010d64:	080148e0 	.word	0x080148e0
 8010d68:	080148b8 	.word	0x080148b8
 8010d6c:	9908      	ldr	r1, [sp, #32]
 8010d6e:	2900      	cmp	r1, #0
 8010d70:	f000 80e9 	beq.w	8010f46 <_dtoa_r+0x7ee>
 8010d74:	9907      	ldr	r1, [sp, #28]
 8010d76:	2901      	cmp	r1, #1
 8010d78:	f300 80cb 	bgt.w	8010f12 <_dtoa_r+0x7ba>
 8010d7c:	2d00      	cmp	r5, #0
 8010d7e:	f000 80c4 	beq.w	8010f0a <_dtoa_r+0x7b2>
 8010d82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010d86:	9e04      	ldr	r6, [sp, #16]
 8010d88:	461c      	mov	r4, r3
 8010d8a:	9305      	str	r3, [sp, #20]
 8010d8c:	9b04      	ldr	r3, [sp, #16]
 8010d8e:	4413      	add	r3, r2
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	9b06      	ldr	r3, [sp, #24]
 8010d94:	2101      	movs	r1, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	4648      	mov	r0, r9
 8010d9a:	9306      	str	r3, [sp, #24]
 8010d9c:	f000 ffc4 	bl	8011d28 <__i2b>
 8010da0:	9b05      	ldr	r3, [sp, #20]
 8010da2:	4605      	mov	r5, r0
 8010da4:	b166      	cbz	r6, 8010dc0 <_dtoa_r+0x668>
 8010da6:	9a06      	ldr	r2, [sp, #24]
 8010da8:	2a00      	cmp	r2, #0
 8010daa:	dd09      	ble.n	8010dc0 <_dtoa_r+0x668>
 8010dac:	42b2      	cmp	r2, r6
 8010dae:	9904      	ldr	r1, [sp, #16]
 8010db0:	bfa8      	it	ge
 8010db2:	4632      	movge	r2, r6
 8010db4:	1a89      	subs	r1, r1, r2
 8010db6:	9104      	str	r1, [sp, #16]
 8010db8:	9906      	ldr	r1, [sp, #24]
 8010dba:	1ab6      	subs	r6, r6, r2
 8010dbc:	1a8a      	subs	r2, r1, r2
 8010dbe:	9206      	str	r2, [sp, #24]
 8010dc0:	b30b      	cbz	r3, 8010e06 <_dtoa_r+0x6ae>
 8010dc2:	9a08      	ldr	r2, [sp, #32]
 8010dc4:	2a00      	cmp	r2, #0
 8010dc6:	f000 80c5 	beq.w	8010f54 <_dtoa_r+0x7fc>
 8010dca:	2c00      	cmp	r4, #0
 8010dcc:	f000 80bf 	beq.w	8010f4e <_dtoa_r+0x7f6>
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4622      	mov	r2, r4
 8010dd4:	4648      	mov	r0, r9
 8010dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010dd8:	f001 f85e 	bl	8011e98 <__pow5mult>
 8010ddc:	9a01      	ldr	r2, [sp, #4]
 8010dde:	4601      	mov	r1, r0
 8010de0:	4605      	mov	r5, r0
 8010de2:	4648      	mov	r0, r9
 8010de4:	f000 ffb6 	bl	8011d54 <__multiply>
 8010de8:	9901      	ldr	r1, [sp, #4]
 8010dea:	9005      	str	r0, [sp, #20]
 8010dec:	4648      	mov	r0, r9
 8010dee:	f000 fe9d 	bl	8011b2c <_Bfree>
 8010df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010df4:	1b1b      	subs	r3, r3, r4
 8010df6:	f000 80b0 	beq.w	8010f5a <_dtoa_r+0x802>
 8010dfa:	9905      	ldr	r1, [sp, #20]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	4648      	mov	r0, r9
 8010e00:	f001 f84a 	bl	8011e98 <__pow5mult>
 8010e04:	9001      	str	r0, [sp, #4]
 8010e06:	2101      	movs	r1, #1
 8010e08:	4648      	mov	r0, r9
 8010e0a:	f000 ff8d 	bl	8011d28 <__i2b>
 8010e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e10:	4604      	mov	r4, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 81da 	beq.w	80111cc <_dtoa_r+0xa74>
 8010e18:	461a      	mov	r2, r3
 8010e1a:	4601      	mov	r1, r0
 8010e1c:	4648      	mov	r0, r9
 8010e1e:	f001 f83b 	bl	8011e98 <__pow5mult>
 8010e22:	9b07      	ldr	r3, [sp, #28]
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	4604      	mov	r4, r0
 8010e28:	f300 80a0 	bgt.w	8010f6c <_dtoa_r+0x814>
 8010e2c:	9b02      	ldr	r3, [sp, #8]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f040 8096 	bne.w	8010f60 <_dtoa_r+0x808>
 8010e34:	9b03      	ldr	r3, [sp, #12]
 8010e36:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	f040 8092 	bne.w	8010f64 <_dtoa_r+0x80c>
 8010e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010e44:	0d12      	lsrs	r2, r2, #20
 8010e46:	0512      	lsls	r2, r2, #20
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	f000 808d 	beq.w	8010f68 <_dtoa_r+0x810>
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	3301      	adds	r3, #1
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	9b06      	ldr	r3, [sp, #24]
 8010e56:	3301      	adds	r3, #1
 8010e58:	9306      	str	r3, [sp, #24]
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 81b9 	beq.w	80111d8 <_dtoa_r+0xa80>
 8010e66:	6922      	ldr	r2, [r4, #16]
 8010e68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010e6c:	6910      	ldr	r0, [r2, #16]
 8010e6e:	f000 ff0f 	bl	8011c90 <__hi0bits>
 8010e72:	f1c0 0020 	rsb	r0, r0, #32
 8010e76:	9b06      	ldr	r3, [sp, #24]
 8010e78:	4418      	add	r0, r3
 8010e7a:	f010 001f 	ands.w	r0, r0, #31
 8010e7e:	f000 8081 	beq.w	8010f84 <_dtoa_r+0x82c>
 8010e82:	f1c0 0220 	rsb	r2, r0, #32
 8010e86:	2a04      	cmp	r2, #4
 8010e88:	dd73      	ble.n	8010f72 <_dtoa_r+0x81a>
 8010e8a:	9b04      	ldr	r3, [sp, #16]
 8010e8c:	f1c0 001c 	rsb	r0, r0, #28
 8010e90:	4403      	add	r3, r0
 8010e92:	9304      	str	r3, [sp, #16]
 8010e94:	9b06      	ldr	r3, [sp, #24]
 8010e96:	4406      	add	r6, r0
 8010e98:	4403      	add	r3, r0
 8010e9a:	9306      	str	r3, [sp, #24]
 8010e9c:	9b04      	ldr	r3, [sp, #16]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	dd05      	ble.n	8010eae <_dtoa_r+0x756>
 8010ea2:	9901      	ldr	r1, [sp, #4]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	4648      	mov	r0, r9
 8010ea8:	f001 f850 	bl	8011f4c <__lshift>
 8010eac:	9001      	str	r0, [sp, #4]
 8010eae:	9b06      	ldr	r3, [sp, #24]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dd05      	ble.n	8010ec0 <_dtoa_r+0x768>
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4648      	mov	r0, r9
 8010eba:	f001 f847 	bl	8011f4c <__lshift>
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d060      	beq.n	8010f88 <_dtoa_r+0x830>
 8010ec6:	9801      	ldr	r0, [sp, #4]
 8010ec8:	4621      	mov	r1, r4
 8010eca:	f001 f8ab 	bl	8012024 <__mcmp>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	da5a      	bge.n	8010f88 <_dtoa_r+0x830>
 8010ed2:	f108 33ff 	add.w	r3, r8, #4294967295
 8010ed6:	9305      	str	r3, [sp, #20]
 8010ed8:	9901      	ldr	r1, [sp, #4]
 8010eda:	2300      	movs	r3, #0
 8010edc:	220a      	movs	r2, #10
 8010ede:	4648      	mov	r0, r9
 8010ee0:	f000 fe46 	bl	8011b70 <__multadd>
 8010ee4:	9b08      	ldr	r3, [sp, #32]
 8010ee6:	9001      	str	r0, [sp, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 8177 	beq.w	80111dc <_dtoa_r+0xa84>
 8010eee:	4629      	mov	r1, r5
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	4648      	mov	r0, r9
 8010ef6:	f000 fe3b 	bl	8011b70 <__multadd>
 8010efa:	f1bb 0f00 	cmp.w	fp, #0
 8010efe:	4605      	mov	r5, r0
 8010f00:	dc6e      	bgt.n	8010fe0 <_dtoa_r+0x888>
 8010f02:	9b07      	ldr	r3, [sp, #28]
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	dc48      	bgt.n	8010f9a <_dtoa_r+0x842>
 8010f08:	e06a      	b.n	8010fe0 <_dtoa_r+0x888>
 8010f0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010f10:	e739      	b.n	8010d86 <_dtoa_r+0x62e>
 8010f12:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010f16:	42a3      	cmp	r3, r4
 8010f18:	db07      	blt.n	8010f2a <_dtoa_r+0x7d2>
 8010f1a:	f1ba 0f00 	cmp.w	sl, #0
 8010f1e:	eba3 0404 	sub.w	r4, r3, r4
 8010f22:	db0b      	blt.n	8010f3c <_dtoa_r+0x7e4>
 8010f24:	9e04      	ldr	r6, [sp, #16]
 8010f26:	4652      	mov	r2, sl
 8010f28:	e72f      	b.n	8010d8a <_dtoa_r+0x632>
 8010f2a:	1ae2      	subs	r2, r4, r3
 8010f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f2e:	9e04      	ldr	r6, [sp, #16]
 8010f30:	4413      	add	r3, r2
 8010f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f34:	4652      	mov	r2, sl
 8010f36:	4623      	mov	r3, r4
 8010f38:	2400      	movs	r4, #0
 8010f3a:	e726      	b.n	8010d8a <_dtoa_r+0x632>
 8010f3c:	9a04      	ldr	r2, [sp, #16]
 8010f3e:	eba2 060a 	sub.w	r6, r2, sl
 8010f42:	2200      	movs	r2, #0
 8010f44:	e721      	b.n	8010d8a <_dtoa_r+0x632>
 8010f46:	9e04      	ldr	r6, [sp, #16]
 8010f48:	9d08      	ldr	r5, [sp, #32]
 8010f4a:	461c      	mov	r4, r3
 8010f4c:	e72a      	b.n	8010da4 <_dtoa_r+0x64c>
 8010f4e:	9a01      	ldr	r2, [sp, #4]
 8010f50:	9205      	str	r2, [sp, #20]
 8010f52:	e752      	b.n	8010dfa <_dtoa_r+0x6a2>
 8010f54:	9901      	ldr	r1, [sp, #4]
 8010f56:	461a      	mov	r2, r3
 8010f58:	e751      	b.n	8010dfe <_dtoa_r+0x6a6>
 8010f5a:	9b05      	ldr	r3, [sp, #20]
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	e752      	b.n	8010e06 <_dtoa_r+0x6ae>
 8010f60:	2300      	movs	r3, #0
 8010f62:	e77b      	b.n	8010e5c <_dtoa_r+0x704>
 8010f64:	9b02      	ldr	r3, [sp, #8]
 8010f66:	e779      	b.n	8010e5c <_dtoa_r+0x704>
 8010f68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010f6a:	e778      	b.n	8010e5e <_dtoa_r+0x706>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f70:	e779      	b.n	8010e66 <_dtoa_r+0x70e>
 8010f72:	d093      	beq.n	8010e9c <_dtoa_r+0x744>
 8010f74:	9b04      	ldr	r3, [sp, #16]
 8010f76:	321c      	adds	r2, #28
 8010f78:	4413      	add	r3, r2
 8010f7a:	9304      	str	r3, [sp, #16]
 8010f7c:	9b06      	ldr	r3, [sp, #24]
 8010f7e:	4416      	add	r6, r2
 8010f80:	4413      	add	r3, r2
 8010f82:	e78a      	b.n	8010e9a <_dtoa_r+0x742>
 8010f84:	4602      	mov	r2, r0
 8010f86:	e7f5      	b.n	8010f74 <_dtoa_r+0x81c>
 8010f88:	f1ba 0f00 	cmp.w	sl, #0
 8010f8c:	f8cd 8014 	str.w	r8, [sp, #20]
 8010f90:	46d3      	mov	fp, sl
 8010f92:	dc21      	bgt.n	8010fd8 <_dtoa_r+0x880>
 8010f94:	9b07      	ldr	r3, [sp, #28]
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	dd1e      	ble.n	8010fd8 <_dtoa_r+0x880>
 8010f9a:	f1bb 0f00 	cmp.w	fp, #0
 8010f9e:	f47f addc 	bne.w	8010b5a <_dtoa_r+0x402>
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	465b      	mov	r3, fp
 8010fa6:	2205      	movs	r2, #5
 8010fa8:	4648      	mov	r0, r9
 8010faa:	f000 fde1 	bl	8011b70 <__multadd>
 8010fae:	4601      	mov	r1, r0
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	9801      	ldr	r0, [sp, #4]
 8010fb4:	f001 f836 	bl	8012024 <__mcmp>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	f77f adce 	ble.w	8010b5a <_dtoa_r+0x402>
 8010fbe:	463e      	mov	r6, r7
 8010fc0:	2331      	movs	r3, #49	@ 0x31
 8010fc2:	f806 3b01 	strb.w	r3, [r6], #1
 8010fc6:	9b05      	ldr	r3, [sp, #20]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	9305      	str	r3, [sp, #20]
 8010fcc:	e5c9      	b.n	8010b62 <_dtoa_r+0x40a>
 8010fce:	f8cd 8014 	str.w	r8, [sp, #20]
 8010fd2:	4654      	mov	r4, sl
 8010fd4:	4625      	mov	r5, r4
 8010fd6:	e7f2      	b.n	8010fbe <_dtoa_r+0x866>
 8010fd8:	9b08      	ldr	r3, [sp, #32]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 8102 	beq.w	80111e4 <_dtoa_r+0xa8c>
 8010fe0:	2e00      	cmp	r6, #0
 8010fe2:	dd05      	ble.n	8010ff0 <_dtoa_r+0x898>
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f000 ffaf 	bl	8011f4c <__lshift>
 8010fee:	4605      	mov	r5, r0
 8010ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d058      	beq.n	80110a8 <_dtoa_r+0x950>
 8010ff6:	6869      	ldr	r1, [r5, #4]
 8010ff8:	4648      	mov	r0, r9
 8010ffa:	f000 fd57 	bl	8011aac <_Balloc>
 8010ffe:	4606      	mov	r6, r0
 8011000:	b928      	cbnz	r0, 801100e <_dtoa_r+0x8b6>
 8011002:	4b82      	ldr	r3, [pc, #520]	@ (801120c <_dtoa_r+0xab4>)
 8011004:	4602      	mov	r2, r0
 8011006:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801100a:	f7ff bbbe 	b.w	801078a <_dtoa_r+0x32>
 801100e:	692a      	ldr	r2, [r5, #16]
 8011010:	3202      	adds	r2, #2
 8011012:	0092      	lsls	r2, r2, #2
 8011014:	f105 010c 	add.w	r1, r5, #12
 8011018:	300c      	adds	r0, #12
 801101a:	f7ff fafe 	bl	801061a <memcpy>
 801101e:	2201      	movs	r2, #1
 8011020:	4631      	mov	r1, r6
 8011022:	4648      	mov	r0, r9
 8011024:	f000 ff92 	bl	8011f4c <__lshift>
 8011028:	1c7b      	adds	r3, r7, #1
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	eb07 030b 	add.w	r3, r7, fp
 8011030:	9309      	str	r3, [sp, #36]	@ 0x24
 8011032:	9b02      	ldr	r3, [sp, #8]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	46a8      	mov	r8, r5
 801103a:	9308      	str	r3, [sp, #32]
 801103c:	4605      	mov	r5, r0
 801103e:	9b04      	ldr	r3, [sp, #16]
 8011040:	9801      	ldr	r0, [sp, #4]
 8011042:	4621      	mov	r1, r4
 8011044:	f103 3bff 	add.w	fp, r3, #4294967295
 8011048:	f7ff fafe 	bl	8010648 <quorem>
 801104c:	4641      	mov	r1, r8
 801104e:	9002      	str	r0, [sp, #8]
 8011050:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011054:	9801      	ldr	r0, [sp, #4]
 8011056:	f000 ffe5 	bl	8012024 <__mcmp>
 801105a:	462a      	mov	r2, r5
 801105c:	9006      	str	r0, [sp, #24]
 801105e:	4621      	mov	r1, r4
 8011060:	4648      	mov	r0, r9
 8011062:	f000 fffb 	bl	801205c <__mdiff>
 8011066:	68c2      	ldr	r2, [r0, #12]
 8011068:	4606      	mov	r6, r0
 801106a:	b9fa      	cbnz	r2, 80110ac <_dtoa_r+0x954>
 801106c:	4601      	mov	r1, r0
 801106e:	9801      	ldr	r0, [sp, #4]
 8011070:	f000 ffd8 	bl	8012024 <__mcmp>
 8011074:	4602      	mov	r2, r0
 8011076:	4631      	mov	r1, r6
 8011078:	4648      	mov	r0, r9
 801107a:	920a      	str	r2, [sp, #40]	@ 0x28
 801107c:	f000 fd56 	bl	8011b2c <_Bfree>
 8011080:	9b07      	ldr	r3, [sp, #28]
 8011082:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011084:	9e04      	ldr	r6, [sp, #16]
 8011086:	ea42 0103 	orr.w	r1, r2, r3
 801108a:	9b08      	ldr	r3, [sp, #32]
 801108c:	4319      	orrs	r1, r3
 801108e:	d10f      	bne.n	80110b0 <_dtoa_r+0x958>
 8011090:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011094:	d028      	beq.n	80110e8 <_dtoa_r+0x990>
 8011096:	9b06      	ldr	r3, [sp, #24]
 8011098:	2b00      	cmp	r3, #0
 801109a:	dd02      	ble.n	80110a2 <_dtoa_r+0x94a>
 801109c:	9b02      	ldr	r3, [sp, #8]
 801109e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80110a2:	f88b a000 	strb.w	sl, [fp]
 80110a6:	e55e      	b.n	8010b66 <_dtoa_r+0x40e>
 80110a8:	4628      	mov	r0, r5
 80110aa:	e7bd      	b.n	8011028 <_dtoa_r+0x8d0>
 80110ac:	2201      	movs	r2, #1
 80110ae:	e7e2      	b.n	8011076 <_dtoa_r+0x91e>
 80110b0:	9b06      	ldr	r3, [sp, #24]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	db04      	blt.n	80110c0 <_dtoa_r+0x968>
 80110b6:	9907      	ldr	r1, [sp, #28]
 80110b8:	430b      	orrs	r3, r1
 80110ba:	9908      	ldr	r1, [sp, #32]
 80110bc:	430b      	orrs	r3, r1
 80110be:	d120      	bne.n	8011102 <_dtoa_r+0x9aa>
 80110c0:	2a00      	cmp	r2, #0
 80110c2:	ddee      	ble.n	80110a2 <_dtoa_r+0x94a>
 80110c4:	9901      	ldr	r1, [sp, #4]
 80110c6:	2201      	movs	r2, #1
 80110c8:	4648      	mov	r0, r9
 80110ca:	f000 ff3f 	bl	8011f4c <__lshift>
 80110ce:	4621      	mov	r1, r4
 80110d0:	9001      	str	r0, [sp, #4]
 80110d2:	f000 ffa7 	bl	8012024 <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	dc03      	bgt.n	80110e2 <_dtoa_r+0x98a>
 80110da:	d1e2      	bne.n	80110a2 <_dtoa_r+0x94a>
 80110dc:	f01a 0f01 	tst.w	sl, #1
 80110e0:	d0df      	beq.n	80110a2 <_dtoa_r+0x94a>
 80110e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80110e6:	d1d9      	bne.n	801109c <_dtoa_r+0x944>
 80110e8:	2339      	movs	r3, #57	@ 0x39
 80110ea:	f88b 3000 	strb.w	r3, [fp]
 80110ee:	4633      	mov	r3, r6
 80110f0:	461e      	mov	r6, r3
 80110f2:	3b01      	subs	r3, #1
 80110f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80110f8:	2a39      	cmp	r2, #57	@ 0x39
 80110fa:	d052      	beq.n	80111a2 <_dtoa_r+0xa4a>
 80110fc:	3201      	adds	r2, #1
 80110fe:	701a      	strb	r2, [r3, #0]
 8011100:	e531      	b.n	8010b66 <_dtoa_r+0x40e>
 8011102:	2a00      	cmp	r2, #0
 8011104:	dd07      	ble.n	8011116 <_dtoa_r+0x9be>
 8011106:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801110a:	d0ed      	beq.n	80110e8 <_dtoa_r+0x990>
 801110c:	f10a 0301 	add.w	r3, sl, #1
 8011110:	f88b 3000 	strb.w	r3, [fp]
 8011114:	e527      	b.n	8010b66 <_dtoa_r+0x40e>
 8011116:	9b04      	ldr	r3, [sp, #16]
 8011118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801111a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801111e:	4293      	cmp	r3, r2
 8011120:	d029      	beq.n	8011176 <_dtoa_r+0xa1e>
 8011122:	9901      	ldr	r1, [sp, #4]
 8011124:	2300      	movs	r3, #0
 8011126:	220a      	movs	r2, #10
 8011128:	4648      	mov	r0, r9
 801112a:	f000 fd21 	bl	8011b70 <__multadd>
 801112e:	45a8      	cmp	r8, r5
 8011130:	9001      	str	r0, [sp, #4]
 8011132:	f04f 0300 	mov.w	r3, #0
 8011136:	f04f 020a 	mov.w	r2, #10
 801113a:	4641      	mov	r1, r8
 801113c:	4648      	mov	r0, r9
 801113e:	d107      	bne.n	8011150 <_dtoa_r+0x9f8>
 8011140:	f000 fd16 	bl	8011b70 <__multadd>
 8011144:	4680      	mov	r8, r0
 8011146:	4605      	mov	r5, r0
 8011148:	9b04      	ldr	r3, [sp, #16]
 801114a:	3301      	adds	r3, #1
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	e776      	b.n	801103e <_dtoa_r+0x8e6>
 8011150:	f000 fd0e 	bl	8011b70 <__multadd>
 8011154:	4629      	mov	r1, r5
 8011156:	4680      	mov	r8, r0
 8011158:	2300      	movs	r3, #0
 801115a:	220a      	movs	r2, #10
 801115c:	4648      	mov	r0, r9
 801115e:	f000 fd07 	bl	8011b70 <__multadd>
 8011162:	4605      	mov	r5, r0
 8011164:	e7f0      	b.n	8011148 <_dtoa_r+0x9f0>
 8011166:	f1bb 0f00 	cmp.w	fp, #0
 801116a:	bfcc      	ite	gt
 801116c:	465e      	movgt	r6, fp
 801116e:	2601      	movle	r6, #1
 8011170:	443e      	add	r6, r7
 8011172:	f04f 0800 	mov.w	r8, #0
 8011176:	9901      	ldr	r1, [sp, #4]
 8011178:	2201      	movs	r2, #1
 801117a:	4648      	mov	r0, r9
 801117c:	f000 fee6 	bl	8011f4c <__lshift>
 8011180:	4621      	mov	r1, r4
 8011182:	9001      	str	r0, [sp, #4]
 8011184:	f000 ff4e 	bl	8012024 <__mcmp>
 8011188:	2800      	cmp	r0, #0
 801118a:	dcb0      	bgt.n	80110ee <_dtoa_r+0x996>
 801118c:	d102      	bne.n	8011194 <_dtoa_r+0xa3c>
 801118e:	f01a 0f01 	tst.w	sl, #1
 8011192:	d1ac      	bne.n	80110ee <_dtoa_r+0x996>
 8011194:	4633      	mov	r3, r6
 8011196:	461e      	mov	r6, r3
 8011198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801119c:	2a30      	cmp	r2, #48	@ 0x30
 801119e:	d0fa      	beq.n	8011196 <_dtoa_r+0xa3e>
 80111a0:	e4e1      	b.n	8010b66 <_dtoa_r+0x40e>
 80111a2:	429f      	cmp	r7, r3
 80111a4:	d1a4      	bne.n	80110f0 <_dtoa_r+0x998>
 80111a6:	9b05      	ldr	r3, [sp, #20]
 80111a8:	3301      	adds	r3, #1
 80111aa:	9305      	str	r3, [sp, #20]
 80111ac:	2331      	movs	r3, #49	@ 0x31
 80111ae:	703b      	strb	r3, [r7, #0]
 80111b0:	e4d9      	b.n	8010b66 <_dtoa_r+0x40e>
 80111b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80111b4:	4f16      	ldr	r7, [pc, #88]	@ (8011210 <_dtoa_r+0xab8>)
 80111b6:	b11b      	cbz	r3, 80111c0 <_dtoa_r+0xa68>
 80111b8:	f107 0308 	add.w	r3, r7, #8
 80111bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80111be:	6013      	str	r3, [r2, #0]
 80111c0:	4638      	mov	r0, r7
 80111c2:	b011      	add	sp, #68	@ 0x44
 80111c4:	ecbd 8b02 	vpop	{d8}
 80111c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111cc:	9b07      	ldr	r3, [sp, #28]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	f77f ae2c 	ble.w	8010e2c <_dtoa_r+0x6d4>
 80111d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111d8:	2001      	movs	r0, #1
 80111da:	e64c      	b.n	8010e76 <_dtoa_r+0x71e>
 80111dc:	f1bb 0f00 	cmp.w	fp, #0
 80111e0:	f77f aed8 	ble.w	8010f94 <_dtoa_r+0x83c>
 80111e4:	463e      	mov	r6, r7
 80111e6:	9801      	ldr	r0, [sp, #4]
 80111e8:	4621      	mov	r1, r4
 80111ea:	f7ff fa2d 	bl	8010648 <quorem>
 80111ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80111f2:	f806 ab01 	strb.w	sl, [r6], #1
 80111f6:	1bf2      	subs	r2, r6, r7
 80111f8:	4593      	cmp	fp, r2
 80111fa:	ddb4      	ble.n	8011166 <_dtoa_r+0xa0e>
 80111fc:	9901      	ldr	r1, [sp, #4]
 80111fe:	2300      	movs	r3, #0
 8011200:	220a      	movs	r2, #10
 8011202:	4648      	mov	r0, r9
 8011204:	f000 fcb4 	bl	8011b70 <__multadd>
 8011208:	9001      	str	r0, [sp, #4]
 801120a:	e7ec      	b.n	80111e6 <_dtoa_r+0xa8e>
 801120c:	0801463a 	.word	0x0801463a
 8011210:	080145be 	.word	0x080145be

08011214 <_free_r>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	4605      	mov	r5, r0
 8011218:	2900      	cmp	r1, #0
 801121a:	d041      	beq.n	80112a0 <_free_r+0x8c>
 801121c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011220:	1f0c      	subs	r4, r1, #4
 8011222:	2b00      	cmp	r3, #0
 8011224:	bfb8      	it	lt
 8011226:	18e4      	addlt	r4, r4, r3
 8011228:	f000 fc34 	bl	8011a94 <__malloc_lock>
 801122c:	4a1d      	ldr	r2, [pc, #116]	@ (80112a4 <_free_r+0x90>)
 801122e:	6813      	ldr	r3, [r2, #0]
 8011230:	b933      	cbnz	r3, 8011240 <_free_r+0x2c>
 8011232:	6063      	str	r3, [r4, #4]
 8011234:	6014      	str	r4, [r2, #0]
 8011236:	4628      	mov	r0, r5
 8011238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801123c:	f000 bc30 	b.w	8011aa0 <__malloc_unlock>
 8011240:	42a3      	cmp	r3, r4
 8011242:	d908      	bls.n	8011256 <_free_r+0x42>
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	1821      	adds	r1, r4, r0
 8011248:	428b      	cmp	r3, r1
 801124a:	bf01      	itttt	eq
 801124c:	6819      	ldreq	r1, [r3, #0]
 801124e:	685b      	ldreq	r3, [r3, #4]
 8011250:	1809      	addeq	r1, r1, r0
 8011252:	6021      	streq	r1, [r4, #0]
 8011254:	e7ed      	b.n	8011232 <_free_r+0x1e>
 8011256:	461a      	mov	r2, r3
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	b10b      	cbz	r3, 8011260 <_free_r+0x4c>
 801125c:	42a3      	cmp	r3, r4
 801125e:	d9fa      	bls.n	8011256 <_free_r+0x42>
 8011260:	6811      	ldr	r1, [r2, #0]
 8011262:	1850      	adds	r0, r2, r1
 8011264:	42a0      	cmp	r0, r4
 8011266:	d10b      	bne.n	8011280 <_free_r+0x6c>
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	4401      	add	r1, r0
 801126c:	1850      	adds	r0, r2, r1
 801126e:	4283      	cmp	r3, r0
 8011270:	6011      	str	r1, [r2, #0]
 8011272:	d1e0      	bne.n	8011236 <_free_r+0x22>
 8011274:	6818      	ldr	r0, [r3, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	6053      	str	r3, [r2, #4]
 801127a:	4408      	add	r0, r1
 801127c:	6010      	str	r0, [r2, #0]
 801127e:	e7da      	b.n	8011236 <_free_r+0x22>
 8011280:	d902      	bls.n	8011288 <_free_r+0x74>
 8011282:	230c      	movs	r3, #12
 8011284:	602b      	str	r3, [r5, #0]
 8011286:	e7d6      	b.n	8011236 <_free_r+0x22>
 8011288:	6820      	ldr	r0, [r4, #0]
 801128a:	1821      	adds	r1, r4, r0
 801128c:	428b      	cmp	r3, r1
 801128e:	bf04      	itt	eq
 8011290:	6819      	ldreq	r1, [r3, #0]
 8011292:	685b      	ldreq	r3, [r3, #4]
 8011294:	6063      	str	r3, [r4, #4]
 8011296:	bf04      	itt	eq
 8011298:	1809      	addeq	r1, r1, r0
 801129a:	6021      	streq	r1, [r4, #0]
 801129c:	6054      	str	r4, [r2, #4]
 801129e:	e7ca      	b.n	8011236 <_free_r+0x22>
 80112a0:	bd38      	pop	{r3, r4, r5, pc}
 80112a2:	bf00      	nop
 80112a4:	2001e050 	.word	0x2001e050

080112a8 <rshift>:
 80112a8:	6903      	ldr	r3, [r0, #16]
 80112aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80112ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80112b6:	f100 0414 	add.w	r4, r0, #20
 80112ba:	dd45      	ble.n	8011348 <rshift+0xa0>
 80112bc:	f011 011f 	ands.w	r1, r1, #31
 80112c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80112c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80112c8:	d10c      	bne.n	80112e4 <rshift+0x3c>
 80112ca:	f100 0710 	add.w	r7, r0, #16
 80112ce:	4629      	mov	r1, r5
 80112d0:	42b1      	cmp	r1, r6
 80112d2:	d334      	bcc.n	801133e <rshift+0x96>
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	1eea      	subs	r2, r5, #3
 80112da:	4296      	cmp	r6, r2
 80112dc:	bf38      	it	cc
 80112de:	2300      	movcc	r3, #0
 80112e0:	4423      	add	r3, r4
 80112e2:	e015      	b.n	8011310 <rshift+0x68>
 80112e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80112e8:	f1c1 0820 	rsb	r8, r1, #32
 80112ec:	40cf      	lsrs	r7, r1
 80112ee:	f105 0e04 	add.w	lr, r5, #4
 80112f2:	46a1      	mov	r9, r4
 80112f4:	4576      	cmp	r6, lr
 80112f6:	46f4      	mov	ip, lr
 80112f8:	d815      	bhi.n	8011326 <rshift+0x7e>
 80112fa:	1a9a      	subs	r2, r3, r2
 80112fc:	0092      	lsls	r2, r2, #2
 80112fe:	3a04      	subs	r2, #4
 8011300:	3501      	adds	r5, #1
 8011302:	42ae      	cmp	r6, r5
 8011304:	bf38      	it	cc
 8011306:	2200      	movcc	r2, #0
 8011308:	18a3      	adds	r3, r4, r2
 801130a:	50a7      	str	r7, [r4, r2]
 801130c:	b107      	cbz	r7, 8011310 <rshift+0x68>
 801130e:	3304      	adds	r3, #4
 8011310:	1b1a      	subs	r2, r3, r4
 8011312:	42a3      	cmp	r3, r4
 8011314:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011318:	bf08      	it	eq
 801131a:	2300      	moveq	r3, #0
 801131c:	6102      	str	r2, [r0, #16]
 801131e:	bf08      	it	eq
 8011320:	6143      	streq	r3, [r0, #20]
 8011322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011326:	f8dc c000 	ldr.w	ip, [ip]
 801132a:	fa0c fc08 	lsl.w	ip, ip, r8
 801132e:	ea4c 0707 	orr.w	r7, ip, r7
 8011332:	f849 7b04 	str.w	r7, [r9], #4
 8011336:	f85e 7b04 	ldr.w	r7, [lr], #4
 801133a:	40cf      	lsrs	r7, r1
 801133c:	e7da      	b.n	80112f4 <rshift+0x4c>
 801133e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011342:	f847 cf04 	str.w	ip, [r7, #4]!
 8011346:	e7c3      	b.n	80112d0 <rshift+0x28>
 8011348:	4623      	mov	r3, r4
 801134a:	e7e1      	b.n	8011310 <rshift+0x68>

0801134c <__hexdig_fun>:
 801134c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011350:	2b09      	cmp	r3, #9
 8011352:	d802      	bhi.n	801135a <__hexdig_fun+0xe>
 8011354:	3820      	subs	r0, #32
 8011356:	b2c0      	uxtb	r0, r0
 8011358:	4770      	bx	lr
 801135a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801135e:	2b05      	cmp	r3, #5
 8011360:	d801      	bhi.n	8011366 <__hexdig_fun+0x1a>
 8011362:	3847      	subs	r0, #71	@ 0x47
 8011364:	e7f7      	b.n	8011356 <__hexdig_fun+0xa>
 8011366:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801136a:	2b05      	cmp	r3, #5
 801136c:	d801      	bhi.n	8011372 <__hexdig_fun+0x26>
 801136e:	3827      	subs	r0, #39	@ 0x27
 8011370:	e7f1      	b.n	8011356 <__hexdig_fun+0xa>
 8011372:	2000      	movs	r0, #0
 8011374:	4770      	bx	lr
	...

08011378 <__gethex>:
 8011378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137c:	b085      	sub	sp, #20
 801137e:	468a      	mov	sl, r1
 8011380:	9302      	str	r3, [sp, #8]
 8011382:	680b      	ldr	r3, [r1, #0]
 8011384:	9001      	str	r0, [sp, #4]
 8011386:	4690      	mov	r8, r2
 8011388:	1c9c      	adds	r4, r3, #2
 801138a:	46a1      	mov	r9, r4
 801138c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011390:	2830      	cmp	r0, #48	@ 0x30
 8011392:	d0fa      	beq.n	801138a <__gethex+0x12>
 8011394:	eba9 0303 	sub.w	r3, r9, r3
 8011398:	f1a3 0b02 	sub.w	fp, r3, #2
 801139c:	f7ff ffd6 	bl	801134c <__hexdig_fun>
 80113a0:	4605      	mov	r5, r0
 80113a2:	2800      	cmp	r0, #0
 80113a4:	d168      	bne.n	8011478 <__gethex+0x100>
 80113a6:	49a0      	ldr	r1, [pc, #640]	@ (8011628 <__gethex+0x2b0>)
 80113a8:	2201      	movs	r2, #1
 80113aa:	4648      	mov	r0, r9
 80113ac:	f7ff f899 	bl	80104e2 <strncmp>
 80113b0:	4607      	mov	r7, r0
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d167      	bne.n	8011486 <__gethex+0x10e>
 80113b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80113ba:	4626      	mov	r6, r4
 80113bc:	f7ff ffc6 	bl	801134c <__hexdig_fun>
 80113c0:	2800      	cmp	r0, #0
 80113c2:	d062      	beq.n	801148a <__gethex+0x112>
 80113c4:	4623      	mov	r3, r4
 80113c6:	7818      	ldrb	r0, [r3, #0]
 80113c8:	2830      	cmp	r0, #48	@ 0x30
 80113ca:	4699      	mov	r9, r3
 80113cc:	f103 0301 	add.w	r3, r3, #1
 80113d0:	d0f9      	beq.n	80113c6 <__gethex+0x4e>
 80113d2:	f7ff ffbb 	bl	801134c <__hexdig_fun>
 80113d6:	fab0 f580 	clz	r5, r0
 80113da:	096d      	lsrs	r5, r5, #5
 80113dc:	f04f 0b01 	mov.w	fp, #1
 80113e0:	464a      	mov	r2, r9
 80113e2:	4616      	mov	r6, r2
 80113e4:	3201      	adds	r2, #1
 80113e6:	7830      	ldrb	r0, [r6, #0]
 80113e8:	f7ff ffb0 	bl	801134c <__hexdig_fun>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d1f8      	bne.n	80113e2 <__gethex+0x6a>
 80113f0:	498d      	ldr	r1, [pc, #564]	@ (8011628 <__gethex+0x2b0>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7ff f874 	bl	80104e2 <strncmp>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d13f      	bne.n	801147e <__gethex+0x106>
 80113fe:	b944      	cbnz	r4, 8011412 <__gethex+0x9a>
 8011400:	1c74      	adds	r4, r6, #1
 8011402:	4622      	mov	r2, r4
 8011404:	4616      	mov	r6, r2
 8011406:	3201      	adds	r2, #1
 8011408:	7830      	ldrb	r0, [r6, #0]
 801140a:	f7ff ff9f 	bl	801134c <__hexdig_fun>
 801140e:	2800      	cmp	r0, #0
 8011410:	d1f8      	bne.n	8011404 <__gethex+0x8c>
 8011412:	1ba4      	subs	r4, r4, r6
 8011414:	00a7      	lsls	r7, r4, #2
 8011416:	7833      	ldrb	r3, [r6, #0]
 8011418:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801141c:	2b50      	cmp	r3, #80	@ 0x50
 801141e:	d13e      	bne.n	801149e <__gethex+0x126>
 8011420:	7873      	ldrb	r3, [r6, #1]
 8011422:	2b2b      	cmp	r3, #43	@ 0x2b
 8011424:	d033      	beq.n	801148e <__gethex+0x116>
 8011426:	2b2d      	cmp	r3, #45	@ 0x2d
 8011428:	d034      	beq.n	8011494 <__gethex+0x11c>
 801142a:	1c71      	adds	r1, r6, #1
 801142c:	2400      	movs	r4, #0
 801142e:	7808      	ldrb	r0, [r1, #0]
 8011430:	f7ff ff8c 	bl	801134c <__hexdig_fun>
 8011434:	1e43      	subs	r3, r0, #1
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b18      	cmp	r3, #24
 801143a:	d830      	bhi.n	801149e <__gethex+0x126>
 801143c:	f1a0 0210 	sub.w	r2, r0, #16
 8011440:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011444:	f7ff ff82 	bl	801134c <__hexdig_fun>
 8011448:	f100 3cff 	add.w	ip, r0, #4294967295
 801144c:	fa5f fc8c 	uxtb.w	ip, ip
 8011450:	f1bc 0f18 	cmp.w	ip, #24
 8011454:	f04f 030a 	mov.w	r3, #10
 8011458:	d91e      	bls.n	8011498 <__gethex+0x120>
 801145a:	b104      	cbz	r4, 801145e <__gethex+0xe6>
 801145c:	4252      	negs	r2, r2
 801145e:	4417      	add	r7, r2
 8011460:	f8ca 1000 	str.w	r1, [sl]
 8011464:	b1ed      	cbz	r5, 80114a2 <__gethex+0x12a>
 8011466:	f1bb 0f00 	cmp.w	fp, #0
 801146a:	bf0c      	ite	eq
 801146c:	2506      	moveq	r5, #6
 801146e:	2500      	movne	r5, #0
 8011470:	4628      	mov	r0, r5
 8011472:	b005      	add	sp, #20
 8011474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011478:	2500      	movs	r5, #0
 801147a:	462c      	mov	r4, r5
 801147c:	e7b0      	b.n	80113e0 <__gethex+0x68>
 801147e:	2c00      	cmp	r4, #0
 8011480:	d1c7      	bne.n	8011412 <__gethex+0x9a>
 8011482:	4627      	mov	r7, r4
 8011484:	e7c7      	b.n	8011416 <__gethex+0x9e>
 8011486:	464e      	mov	r6, r9
 8011488:	462f      	mov	r7, r5
 801148a:	2501      	movs	r5, #1
 801148c:	e7c3      	b.n	8011416 <__gethex+0x9e>
 801148e:	2400      	movs	r4, #0
 8011490:	1cb1      	adds	r1, r6, #2
 8011492:	e7cc      	b.n	801142e <__gethex+0xb6>
 8011494:	2401      	movs	r4, #1
 8011496:	e7fb      	b.n	8011490 <__gethex+0x118>
 8011498:	fb03 0002 	mla	r0, r3, r2, r0
 801149c:	e7ce      	b.n	801143c <__gethex+0xc4>
 801149e:	4631      	mov	r1, r6
 80114a0:	e7de      	b.n	8011460 <__gethex+0xe8>
 80114a2:	eba6 0309 	sub.w	r3, r6, r9
 80114a6:	3b01      	subs	r3, #1
 80114a8:	4629      	mov	r1, r5
 80114aa:	2b07      	cmp	r3, #7
 80114ac:	dc0a      	bgt.n	80114c4 <__gethex+0x14c>
 80114ae:	9801      	ldr	r0, [sp, #4]
 80114b0:	f000 fafc 	bl	8011aac <_Balloc>
 80114b4:	4604      	mov	r4, r0
 80114b6:	b940      	cbnz	r0, 80114ca <__gethex+0x152>
 80114b8:	4b5c      	ldr	r3, [pc, #368]	@ (801162c <__gethex+0x2b4>)
 80114ba:	4602      	mov	r2, r0
 80114bc:	21e4      	movs	r1, #228	@ 0xe4
 80114be:	485c      	ldr	r0, [pc, #368]	@ (8011630 <__gethex+0x2b8>)
 80114c0:	f001 fb92 	bl	8012be8 <__assert_func>
 80114c4:	3101      	adds	r1, #1
 80114c6:	105b      	asrs	r3, r3, #1
 80114c8:	e7ef      	b.n	80114aa <__gethex+0x132>
 80114ca:	f100 0a14 	add.w	sl, r0, #20
 80114ce:	2300      	movs	r3, #0
 80114d0:	4655      	mov	r5, sl
 80114d2:	469b      	mov	fp, r3
 80114d4:	45b1      	cmp	r9, r6
 80114d6:	d337      	bcc.n	8011548 <__gethex+0x1d0>
 80114d8:	f845 bb04 	str.w	fp, [r5], #4
 80114dc:	eba5 050a 	sub.w	r5, r5, sl
 80114e0:	10ad      	asrs	r5, r5, #2
 80114e2:	6125      	str	r5, [r4, #16]
 80114e4:	4658      	mov	r0, fp
 80114e6:	f000 fbd3 	bl	8011c90 <__hi0bits>
 80114ea:	016d      	lsls	r5, r5, #5
 80114ec:	f8d8 6000 	ldr.w	r6, [r8]
 80114f0:	1a2d      	subs	r5, r5, r0
 80114f2:	42b5      	cmp	r5, r6
 80114f4:	dd54      	ble.n	80115a0 <__gethex+0x228>
 80114f6:	1bad      	subs	r5, r5, r6
 80114f8:	4629      	mov	r1, r5
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 ff5c 	bl	80123b8 <__any_on>
 8011500:	4681      	mov	r9, r0
 8011502:	b178      	cbz	r0, 8011524 <__gethex+0x1ac>
 8011504:	1e6b      	subs	r3, r5, #1
 8011506:	1159      	asrs	r1, r3, #5
 8011508:	f003 021f 	and.w	r2, r3, #31
 801150c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011510:	f04f 0901 	mov.w	r9, #1
 8011514:	fa09 f202 	lsl.w	r2, r9, r2
 8011518:	420a      	tst	r2, r1
 801151a:	d003      	beq.n	8011524 <__gethex+0x1ac>
 801151c:	454b      	cmp	r3, r9
 801151e:	dc36      	bgt.n	801158e <__gethex+0x216>
 8011520:	f04f 0902 	mov.w	r9, #2
 8011524:	4629      	mov	r1, r5
 8011526:	4620      	mov	r0, r4
 8011528:	f7ff febe 	bl	80112a8 <rshift>
 801152c:	442f      	add	r7, r5
 801152e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011532:	42bb      	cmp	r3, r7
 8011534:	da42      	bge.n	80115bc <__gethex+0x244>
 8011536:	9801      	ldr	r0, [sp, #4]
 8011538:	4621      	mov	r1, r4
 801153a:	f000 faf7 	bl	8011b2c <_Bfree>
 801153e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011540:	2300      	movs	r3, #0
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	25a3      	movs	r5, #163	@ 0xa3
 8011546:	e793      	b.n	8011470 <__gethex+0xf8>
 8011548:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801154c:	2a2e      	cmp	r2, #46	@ 0x2e
 801154e:	d012      	beq.n	8011576 <__gethex+0x1fe>
 8011550:	2b20      	cmp	r3, #32
 8011552:	d104      	bne.n	801155e <__gethex+0x1e6>
 8011554:	f845 bb04 	str.w	fp, [r5], #4
 8011558:	f04f 0b00 	mov.w	fp, #0
 801155c:	465b      	mov	r3, fp
 801155e:	7830      	ldrb	r0, [r6, #0]
 8011560:	9303      	str	r3, [sp, #12]
 8011562:	f7ff fef3 	bl	801134c <__hexdig_fun>
 8011566:	9b03      	ldr	r3, [sp, #12]
 8011568:	f000 000f 	and.w	r0, r0, #15
 801156c:	4098      	lsls	r0, r3
 801156e:	ea4b 0b00 	orr.w	fp, fp, r0
 8011572:	3304      	adds	r3, #4
 8011574:	e7ae      	b.n	80114d4 <__gethex+0x15c>
 8011576:	45b1      	cmp	r9, r6
 8011578:	d8ea      	bhi.n	8011550 <__gethex+0x1d8>
 801157a:	492b      	ldr	r1, [pc, #172]	@ (8011628 <__gethex+0x2b0>)
 801157c:	9303      	str	r3, [sp, #12]
 801157e:	2201      	movs	r2, #1
 8011580:	4630      	mov	r0, r6
 8011582:	f7fe ffae 	bl	80104e2 <strncmp>
 8011586:	9b03      	ldr	r3, [sp, #12]
 8011588:	2800      	cmp	r0, #0
 801158a:	d1e1      	bne.n	8011550 <__gethex+0x1d8>
 801158c:	e7a2      	b.n	80114d4 <__gethex+0x15c>
 801158e:	1ea9      	subs	r1, r5, #2
 8011590:	4620      	mov	r0, r4
 8011592:	f000 ff11 	bl	80123b8 <__any_on>
 8011596:	2800      	cmp	r0, #0
 8011598:	d0c2      	beq.n	8011520 <__gethex+0x1a8>
 801159a:	f04f 0903 	mov.w	r9, #3
 801159e:	e7c1      	b.n	8011524 <__gethex+0x1ac>
 80115a0:	da09      	bge.n	80115b6 <__gethex+0x23e>
 80115a2:	1b75      	subs	r5, r6, r5
 80115a4:	4621      	mov	r1, r4
 80115a6:	9801      	ldr	r0, [sp, #4]
 80115a8:	462a      	mov	r2, r5
 80115aa:	f000 fccf 	bl	8011f4c <__lshift>
 80115ae:	1b7f      	subs	r7, r7, r5
 80115b0:	4604      	mov	r4, r0
 80115b2:	f100 0a14 	add.w	sl, r0, #20
 80115b6:	f04f 0900 	mov.w	r9, #0
 80115ba:	e7b8      	b.n	801152e <__gethex+0x1b6>
 80115bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80115c0:	42bd      	cmp	r5, r7
 80115c2:	dd6f      	ble.n	80116a4 <__gethex+0x32c>
 80115c4:	1bed      	subs	r5, r5, r7
 80115c6:	42ae      	cmp	r6, r5
 80115c8:	dc34      	bgt.n	8011634 <__gethex+0x2bc>
 80115ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115ce:	2b02      	cmp	r3, #2
 80115d0:	d022      	beq.n	8011618 <__gethex+0x2a0>
 80115d2:	2b03      	cmp	r3, #3
 80115d4:	d024      	beq.n	8011620 <__gethex+0x2a8>
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d115      	bne.n	8011606 <__gethex+0x28e>
 80115da:	42ae      	cmp	r6, r5
 80115dc:	d113      	bne.n	8011606 <__gethex+0x28e>
 80115de:	2e01      	cmp	r6, #1
 80115e0:	d10b      	bne.n	80115fa <__gethex+0x282>
 80115e2:	9a02      	ldr	r2, [sp, #8]
 80115e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115e8:	6013      	str	r3, [r2, #0]
 80115ea:	2301      	movs	r3, #1
 80115ec:	6123      	str	r3, [r4, #16]
 80115ee:	f8ca 3000 	str.w	r3, [sl]
 80115f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115f4:	2562      	movs	r5, #98	@ 0x62
 80115f6:	601c      	str	r4, [r3, #0]
 80115f8:	e73a      	b.n	8011470 <__gethex+0xf8>
 80115fa:	1e71      	subs	r1, r6, #1
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 fedb 	bl	80123b8 <__any_on>
 8011602:	2800      	cmp	r0, #0
 8011604:	d1ed      	bne.n	80115e2 <__gethex+0x26a>
 8011606:	9801      	ldr	r0, [sp, #4]
 8011608:	4621      	mov	r1, r4
 801160a:	f000 fa8f 	bl	8011b2c <_Bfree>
 801160e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011610:	2300      	movs	r3, #0
 8011612:	6013      	str	r3, [r2, #0]
 8011614:	2550      	movs	r5, #80	@ 0x50
 8011616:	e72b      	b.n	8011470 <__gethex+0xf8>
 8011618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801161a:	2b00      	cmp	r3, #0
 801161c:	d1f3      	bne.n	8011606 <__gethex+0x28e>
 801161e:	e7e0      	b.n	80115e2 <__gethex+0x26a>
 8011620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1dd      	bne.n	80115e2 <__gethex+0x26a>
 8011626:	e7ee      	b.n	8011606 <__gethex+0x28e>
 8011628:	08014580 	.word	0x08014580
 801162c:	0801463a 	.word	0x0801463a
 8011630:	0801464b 	.word	0x0801464b
 8011634:	1e6f      	subs	r7, r5, #1
 8011636:	f1b9 0f00 	cmp.w	r9, #0
 801163a:	d130      	bne.n	801169e <__gethex+0x326>
 801163c:	b127      	cbz	r7, 8011648 <__gethex+0x2d0>
 801163e:	4639      	mov	r1, r7
 8011640:	4620      	mov	r0, r4
 8011642:	f000 feb9 	bl	80123b8 <__any_on>
 8011646:	4681      	mov	r9, r0
 8011648:	117a      	asrs	r2, r7, #5
 801164a:	2301      	movs	r3, #1
 801164c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011650:	f007 071f 	and.w	r7, r7, #31
 8011654:	40bb      	lsls	r3, r7
 8011656:	4213      	tst	r3, r2
 8011658:	4629      	mov	r1, r5
 801165a:	4620      	mov	r0, r4
 801165c:	bf18      	it	ne
 801165e:	f049 0902 	orrne.w	r9, r9, #2
 8011662:	f7ff fe21 	bl	80112a8 <rshift>
 8011666:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801166a:	1b76      	subs	r6, r6, r5
 801166c:	2502      	movs	r5, #2
 801166e:	f1b9 0f00 	cmp.w	r9, #0
 8011672:	d047      	beq.n	8011704 <__gethex+0x38c>
 8011674:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011678:	2b02      	cmp	r3, #2
 801167a:	d015      	beq.n	80116a8 <__gethex+0x330>
 801167c:	2b03      	cmp	r3, #3
 801167e:	d017      	beq.n	80116b0 <__gethex+0x338>
 8011680:	2b01      	cmp	r3, #1
 8011682:	d109      	bne.n	8011698 <__gethex+0x320>
 8011684:	f019 0f02 	tst.w	r9, #2
 8011688:	d006      	beq.n	8011698 <__gethex+0x320>
 801168a:	f8da 3000 	ldr.w	r3, [sl]
 801168e:	ea49 0903 	orr.w	r9, r9, r3
 8011692:	f019 0f01 	tst.w	r9, #1
 8011696:	d10e      	bne.n	80116b6 <__gethex+0x33e>
 8011698:	f045 0510 	orr.w	r5, r5, #16
 801169c:	e032      	b.n	8011704 <__gethex+0x38c>
 801169e:	f04f 0901 	mov.w	r9, #1
 80116a2:	e7d1      	b.n	8011648 <__gethex+0x2d0>
 80116a4:	2501      	movs	r5, #1
 80116a6:	e7e2      	b.n	801166e <__gethex+0x2f6>
 80116a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116aa:	f1c3 0301 	rsb	r3, r3, #1
 80116ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d0f0      	beq.n	8011698 <__gethex+0x320>
 80116b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80116ba:	f104 0314 	add.w	r3, r4, #20
 80116be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80116c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80116c6:	f04f 0c00 	mov.w	ip, #0
 80116ca:	4618      	mov	r0, r3
 80116cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80116d4:	d01b      	beq.n	801170e <__gethex+0x396>
 80116d6:	3201      	adds	r2, #1
 80116d8:	6002      	str	r2, [r0, #0]
 80116da:	2d02      	cmp	r5, #2
 80116dc:	f104 0314 	add.w	r3, r4, #20
 80116e0:	d13c      	bne.n	801175c <__gethex+0x3e4>
 80116e2:	f8d8 2000 	ldr.w	r2, [r8]
 80116e6:	3a01      	subs	r2, #1
 80116e8:	42b2      	cmp	r2, r6
 80116ea:	d109      	bne.n	8011700 <__gethex+0x388>
 80116ec:	1171      	asrs	r1, r6, #5
 80116ee:	2201      	movs	r2, #1
 80116f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80116f4:	f006 061f 	and.w	r6, r6, #31
 80116f8:	fa02 f606 	lsl.w	r6, r2, r6
 80116fc:	421e      	tst	r6, r3
 80116fe:	d13a      	bne.n	8011776 <__gethex+0x3fe>
 8011700:	f045 0520 	orr.w	r5, r5, #32
 8011704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011706:	601c      	str	r4, [r3, #0]
 8011708:	9b02      	ldr	r3, [sp, #8]
 801170a:	601f      	str	r7, [r3, #0]
 801170c:	e6b0      	b.n	8011470 <__gethex+0xf8>
 801170e:	4299      	cmp	r1, r3
 8011710:	f843 cc04 	str.w	ip, [r3, #-4]
 8011714:	d8d9      	bhi.n	80116ca <__gethex+0x352>
 8011716:	68a3      	ldr	r3, [r4, #8]
 8011718:	459b      	cmp	fp, r3
 801171a:	db17      	blt.n	801174c <__gethex+0x3d4>
 801171c:	6861      	ldr	r1, [r4, #4]
 801171e:	9801      	ldr	r0, [sp, #4]
 8011720:	3101      	adds	r1, #1
 8011722:	f000 f9c3 	bl	8011aac <_Balloc>
 8011726:	4681      	mov	r9, r0
 8011728:	b918      	cbnz	r0, 8011732 <__gethex+0x3ba>
 801172a:	4b1a      	ldr	r3, [pc, #104]	@ (8011794 <__gethex+0x41c>)
 801172c:	4602      	mov	r2, r0
 801172e:	2184      	movs	r1, #132	@ 0x84
 8011730:	e6c5      	b.n	80114be <__gethex+0x146>
 8011732:	6922      	ldr	r2, [r4, #16]
 8011734:	3202      	adds	r2, #2
 8011736:	f104 010c 	add.w	r1, r4, #12
 801173a:	0092      	lsls	r2, r2, #2
 801173c:	300c      	adds	r0, #12
 801173e:	f7fe ff6c 	bl	801061a <memcpy>
 8011742:	4621      	mov	r1, r4
 8011744:	9801      	ldr	r0, [sp, #4]
 8011746:	f000 f9f1 	bl	8011b2c <_Bfree>
 801174a:	464c      	mov	r4, r9
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011754:	6122      	str	r2, [r4, #16]
 8011756:	2201      	movs	r2, #1
 8011758:	615a      	str	r2, [r3, #20]
 801175a:	e7be      	b.n	80116da <__gethex+0x362>
 801175c:	6922      	ldr	r2, [r4, #16]
 801175e:	455a      	cmp	r2, fp
 8011760:	dd0b      	ble.n	801177a <__gethex+0x402>
 8011762:	2101      	movs	r1, #1
 8011764:	4620      	mov	r0, r4
 8011766:	f7ff fd9f 	bl	80112a8 <rshift>
 801176a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801176e:	3701      	adds	r7, #1
 8011770:	42bb      	cmp	r3, r7
 8011772:	f6ff aee0 	blt.w	8011536 <__gethex+0x1be>
 8011776:	2501      	movs	r5, #1
 8011778:	e7c2      	b.n	8011700 <__gethex+0x388>
 801177a:	f016 061f 	ands.w	r6, r6, #31
 801177e:	d0fa      	beq.n	8011776 <__gethex+0x3fe>
 8011780:	4453      	add	r3, sl
 8011782:	f1c6 0620 	rsb	r6, r6, #32
 8011786:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801178a:	f000 fa81 	bl	8011c90 <__hi0bits>
 801178e:	42b0      	cmp	r0, r6
 8011790:	dbe7      	blt.n	8011762 <__gethex+0x3ea>
 8011792:	e7f0      	b.n	8011776 <__gethex+0x3fe>
 8011794:	0801463a 	.word	0x0801463a

08011798 <L_shift>:
 8011798:	f1c2 0208 	rsb	r2, r2, #8
 801179c:	0092      	lsls	r2, r2, #2
 801179e:	b570      	push	{r4, r5, r6, lr}
 80117a0:	f1c2 0620 	rsb	r6, r2, #32
 80117a4:	6843      	ldr	r3, [r0, #4]
 80117a6:	6804      	ldr	r4, [r0, #0]
 80117a8:	fa03 f506 	lsl.w	r5, r3, r6
 80117ac:	432c      	orrs	r4, r5
 80117ae:	40d3      	lsrs	r3, r2
 80117b0:	6004      	str	r4, [r0, #0]
 80117b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80117b6:	4288      	cmp	r0, r1
 80117b8:	d3f4      	bcc.n	80117a4 <L_shift+0xc>
 80117ba:	bd70      	pop	{r4, r5, r6, pc}

080117bc <__match>:
 80117bc:	b530      	push	{r4, r5, lr}
 80117be:	6803      	ldr	r3, [r0, #0]
 80117c0:	3301      	adds	r3, #1
 80117c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117c6:	b914      	cbnz	r4, 80117ce <__match+0x12>
 80117c8:	6003      	str	r3, [r0, #0]
 80117ca:	2001      	movs	r0, #1
 80117cc:	bd30      	pop	{r4, r5, pc}
 80117ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80117d6:	2d19      	cmp	r5, #25
 80117d8:	bf98      	it	ls
 80117da:	3220      	addls	r2, #32
 80117dc:	42a2      	cmp	r2, r4
 80117de:	d0f0      	beq.n	80117c2 <__match+0x6>
 80117e0:	2000      	movs	r0, #0
 80117e2:	e7f3      	b.n	80117cc <__match+0x10>

080117e4 <__hexnan>:
 80117e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e8:	680b      	ldr	r3, [r1, #0]
 80117ea:	6801      	ldr	r1, [r0, #0]
 80117ec:	115e      	asrs	r6, r3, #5
 80117ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80117f2:	f013 031f 	ands.w	r3, r3, #31
 80117f6:	b087      	sub	sp, #28
 80117f8:	bf18      	it	ne
 80117fa:	3604      	addne	r6, #4
 80117fc:	2500      	movs	r5, #0
 80117fe:	1f37      	subs	r7, r6, #4
 8011800:	4682      	mov	sl, r0
 8011802:	4690      	mov	r8, r2
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	f846 5c04 	str.w	r5, [r6, #-4]
 801180a:	46b9      	mov	r9, r7
 801180c:	463c      	mov	r4, r7
 801180e:	9502      	str	r5, [sp, #8]
 8011810:	46ab      	mov	fp, r5
 8011812:	784a      	ldrb	r2, [r1, #1]
 8011814:	1c4b      	adds	r3, r1, #1
 8011816:	9303      	str	r3, [sp, #12]
 8011818:	b342      	cbz	r2, 801186c <__hexnan+0x88>
 801181a:	4610      	mov	r0, r2
 801181c:	9105      	str	r1, [sp, #20]
 801181e:	9204      	str	r2, [sp, #16]
 8011820:	f7ff fd94 	bl	801134c <__hexdig_fun>
 8011824:	2800      	cmp	r0, #0
 8011826:	d151      	bne.n	80118cc <__hexnan+0xe8>
 8011828:	9a04      	ldr	r2, [sp, #16]
 801182a:	9905      	ldr	r1, [sp, #20]
 801182c:	2a20      	cmp	r2, #32
 801182e:	d818      	bhi.n	8011862 <__hexnan+0x7e>
 8011830:	9b02      	ldr	r3, [sp, #8]
 8011832:	459b      	cmp	fp, r3
 8011834:	dd13      	ble.n	801185e <__hexnan+0x7a>
 8011836:	454c      	cmp	r4, r9
 8011838:	d206      	bcs.n	8011848 <__hexnan+0x64>
 801183a:	2d07      	cmp	r5, #7
 801183c:	dc04      	bgt.n	8011848 <__hexnan+0x64>
 801183e:	462a      	mov	r2, r5
 8011840:	4649      	mov	r1, r9
 8011842:	4620      	mov	r0, r4
 8011844:	f7ff ffa8 	bl	8011798 <L_shift>
 8011848:	4544      	cmp	r4, r8
 801184a:	d952      	bls.n	80118f2 <__hexnan+0x10e>
 801184c:	2300      	movs	r3, #0
 801184e:	f1a4 0904 	sub.w	r9, r4, #4
 8011852:	f844 3c04 	str.w	r3, [r4, #-4]
 8011856:	f8cd b008 	str.w	fp, [sp, #8]
 801185a:	464c      	mov	r4, r9
 801185c:	461d      	mov	r5, r3
 801185e:	9903      	ldr	r1, [sp, #12]
 8011860:	e7d7      	b.n	8011812 <__hexnan+0x2e>
 8011862:	2a29      	cmp	r2, #41	@ 0x29
 8011864:	d157      	bne.n	8011916 <__hexnan+0x132>
 8011866:	3102      	adds	r1, #2
 8011868:	f8ca 1000 	str.w	r1, [sl]
 801186c:	f1bb 0f00 	cmp.w	fp, #0
 8011870:	d051      	beq.n	8011916 <__hexnan+0x132>
 8011872:	454c      	cmp	r4, r9
 8011874:	d206      	bcs.n	8011884 <__hexnan+0xa0>
 8011876:	2d07      	cmp	r5, #7
 8011878:	dc04      	bgt.n	8011884 <__hexnan+0xa0>
 801187a:	462a      	mov	r2, r5
 801187c:	4649      	mov	r1, r9
 801187e:	4620      	mov	r0, r4
 8011880:	f7ff ff8a 	bl	8011798 <L_shift>
 8011884:	4544      	cmp	r4, r8
 8011886:	d936      	bls.n	80118f6 <__hexnan+0x112>
 8011888:	f1a8 0204 	sub.w	r2, r8, #4
 801188c:	4623      	mov	r3, r4
 801188e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011892:	f842 1f04 	str.w	r1, [r2, #4]!
 8011896:	429f      	cmp	r7, r3
 8011898:	d2f9      	bcs.n	801188e <__hexnan+0xaa>
 801189a:	1b3b      	subs	r3, r7, r4
 801189c:	f023 0303 	bic.w	r3, r3, #3
 80118a0:	3304      	adds	r3, #4
 80118a2:	3401      	adds	r4, #1
 80118a4:	3e03      	subs	r6, #3
 80118a6:	42b4      	cmp	r4, r6
 80118a8:	bf88      	it	hi
 80118aa:	2304      	movhi	r3, #4
 80118ac:	4443      	add	r3, r8
 80118ae:	2200      	movs	r2, #0
 80118b0:	f843 2b04 	str.w	r2, [r3], #4
 80118b4:	429f      	cmp	r7, r3
 80118b6:	d2fb      	bcs.n	80118b0 <__hexnan+0xcc>
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	b91b      	cbnz	r3, 80118c4 <__hexnan+0xe0>
 80118bc:	4547      	cmp	r7, r8
 80118be:	d128      	bne.n	8011912 <__hexnan+0x12e>
 80118c0:	2301      	movs	r3, #1
 80118c2:	603b      	str	r3, [r7, #0]
 80118c4:	2005      	movs	r0, #5
 80118c6:	b007      	add	sp, #28
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	3501      	adds	r5, #1
 80118ce:	2d08      	cmp	r5, #8
 80118d0:	f10b 0b01 	add.w	fp, fp, #1
 80118d4:	dd06      	ble.n	80118e4 <__hexnan+0x100>
 80118d6:	4544      	cmp	r4, r8
 80118d8:	d9c1      	bls.n	801185e <__hexnan+0x7a>
 80118da:	2300      	movs	r3, #0
 80118dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80118e0:	2501      	movs	r5, #1
 80118e2:	3c04      	subs	r4, #4
 80118e4:	6822      	ldr	r2, [r4, #0]
 80118e6:	f000 000f 	and.w	r0, r0, #15
 80118ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80118ee:	6020      	str	r0, [r4, #0]
 80118f0:	e7b5      	b.n	801185e <__hexnan+0x7a>
 80118f2:	2508      	movs	r5, #8
 80118f4:	e7b3      	b.n	801185e <__hexnan+0x7a>
 80118f6:	9b01      	ldr	r3, [sp, #4]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d0dd      	beq.n	80118b8 <__hexnan+0xd4>
 80118fc:	f1c3 0320 	rsb	r3, r3, #32
 8011900:	f04f 32ff 	mov.w	r2, #4294967295
 8011904:	40da      	lsrs	r2, r3
 8011906:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801190a:	4013      	ands	r3, r2
 801190c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011910:	e7d2      	b.n	80118b8 <__hexnan+0xd4>
 8011912:	3f04      	subs	r7, #4
 8011914:	e7d0      	b.n	80118b8 <__hexnan+0xd4>
 8011916:	2004      	movs	r0, #4
 8011918:	e7d5      	b.n	80118c6 <__hexnan+0xe2>
	...

0801191c <malloc>:
 801191c:	4b02      	ldr	r3, [pc, #8]	@ (8011928 <malloc+0xc>)
 801191e:	4601      	mov	r1, r0
 8011920:	6818      	ldr	r0, [r3, #0]
 8011922:	f000 b825 	b.w	8011970 <_malloc_r>
 8011926:	bf00      	nop
 8011928:	2000439c 	.word	0x2000439c

0801192c <sbrk_aligned>:
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	4e0f      	ldr	r6, [pc, #60]	@ (801196c <sbrk_aligned+0x40>)
 8011930:	460c      	mov	r4, r1
 8011932:	6831      	ldr	r1, [r6, #0]
 8011934:	4605      	mov	r5, r0
 8011936:	b911      	cbnz	r1, 801193e <sbrk_aligned+0x12>
 8011938:	f001 f946 	bl	8012bc8 <_sbrk_r>
 801193c:	6030      	str	r0, [r6, #0]
 801193e:	4621      	mov	r1, r4
 8011940:	4628      	mov	r0, r5
 8011942:	f001 f941 	bl	8012bc8 <_sbrk_r>
 8011946:	1c43      	adds	r3, r0, #1
 8011948:	d103      	bne.n	8011952 <sbrk_aligned+0x26>
 801194a:	f04f 34ff 	mov.w	r4, #4294967295
 801194e:	4620      	mov	r0, r4
 8011950:	bd70      	pop	{r4, r5, r6, pc}
 8011952:	1cc4      	adds	r4, r0, #3
 8011954:	f024 0403 	bic.w	r4, r4, #3
 8011958:	42a0      	cmp	r0, r4
 801195a:	d0f8      	beq.n	801194e <sbrk_aligned+0x22>
 801195c:	1a21      	subs	r1, r4, r0
 801195e:	4628      	mov	r0, r5
 8011960:	f001 f932 	bl	8012bc8 <_sbrk_r>
 8011964:	3001      	adds	r0, #1
 8011966:	d1f2      	bne.n	801194e <sbrk_aligned+0x22>
 8011968:	e7ef      	b.n	801194a <sbrk_aligned+0x1e>
 801196a:	bf00      	nop
 801196c:	2001e04c 	.word	0x2001e04c

08011970 <_malloc_r>:
 8011970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011974:	1ccd      	adds	r5, r1, #3
 8011976:	f025 0503 	bic.w	r5, r5, #3
 801197a:	3508      	adds	r5, #8
 801197c:	2d0c      	cmp	r5, #12
 801197e:	bf38      	it	cc
 8011980:	250c      	movcc	r5, #12
 8011982:	2d00      	cmp	r5, #0
 8011984:	4606      	mov	r6, r0
 8011986:	db01      	blt.n	801198c <_malloc_r+0x1c>
 8011988:	42a9      	cmp	r1, r5
 801198a:	d904      	bls.n	8011996 <_malloc_r+0x26>
 801198c:	230c      	movs	r3, #12
 801198e:	6033      	str	r3, [r6, #0]
 8011990:	2000      	movs	r0, #0
 8011992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a6c <_malloc_r+0xfc>
 801199a:	f000 f87b 	bl	8011a94 <__malloc_lock>
 801199e:	f8d8 3000 	ldr.w	r3, [r8]
 80119a2:	461c      	mov	r4, r3
 80119a4:	bb44      	cbnz	r4, 80119f8 <_malloc_r+0x88>
 80119a6:	4629      	mov	r1, r5
 80119a8:	4630      	mov	r0, r6
 80119aa:	f7ff ffbf 	bl	801192c <sbrk_aligned>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	4604      	mov	r4, r0
 80119b2:	d158      	bne.n	8011a66 <_malloc_r+0xf6>
 80119b4:	f8d8 4000 	ldr.w	r4, [r8]
 80119b8:	4627      	mov	r7, r4
 80119ba:	2f00      	cmp	r7, #0
 80119bc:	d143      	bne.n	8011a46 <_malloc_r+0xd6>
 80119be:	2c00      	cmp	r4, #0
 80119c0:	d04b      	beq.n	8011a5a <_malloc_r+0xea>
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	4639      	mov	r1, r7
 80119c6:	4630      	mov	r0, r6
 80119c8:	eb04 0903 	add.w	r9, r4, r3
 80119cc:	f001 f8fc 	bl	8012bc8 <_sbrk_r>
 80119d0:	4581      	cmp	r9, r0
 80119d2:	d142      	bne.n	8011a5a <_malloc_r+0xea>
 80119d4:	6821      	ldr	r1, [r4, #0]
 80119d6:	1a6d      	subs	r5, r5, r1
 80119d8:	4629      	mov	r1, r5
 80119da:	4630      	mov	r0, r6
 80119dc:	f7ff ffa6 	bl	801192c <sbrk_aligned>
 80119e0:	3001      	adds	r0, #1
 80119e2:	d03a      	beq.n	8011a5a <_malloc_r+0xea>
 80119e4:	6823      	ldr	r3, [r4, #0]
 80119e6:	442b      	add	r3, r5
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	f8d8 3000 	ldr.w	r3, [r8]
 80119ee:	685a      	ldr	r2, [r3, #4]
 80119f0:	bb62      	cbnz	r2, 8011a4c <_malloc_r+0xdc>
 80119f2:	f8c8 7000 	str.w	r7, [r8]
 80119f6:	e00f      	b.n	8011a18 <_malloc_r+0xa8>
 80119f8:	6822      	ldr	r2, [r4, #0]
 80119fa:	1b52      	subs	r2, r2, r5
 80119fc:	d420      	bmi.n	8011a40 <_malloc_r+0xd0>
 80119fe:	2a0b      	cmp	r2, #11
 8011a00:	d917      	bls.n	8011a32 <_malloc_r+0xc2>
 8011a02:	1961      	adds	r1, r4, r5
 8011a04:	42a3      	cmp	r3, r4
 8011a06:	6025      	str	r5, [r4, #0]
 8011a08:	bf18      	it	ne
 8011a0a:	6059      	strne	r1, [r3, #4]
 8011a0c:	6863      	ldr	r3, [r4, #4]
 8011a0e:	bf08      	it	eq
 8011a10:	f8c8 1000 	streq.w	r1, [r8]
 8011a14:	5162      	str	r2, [r4, r5]
 8011a16:	604b      	str	r3, [r1, #4]
 8011a18:	4630      	mov	r0, r6
 8011a1a:	f000 f841 	bl	8011aa0 <__malloc_unlock>
 8011a1e:	f104 000b 	add.w	r0, r4, #11
 8011a22:	1d23      	adds	r3, r4, #4
 8011a24:	f020 0007 	bic.w	r0, r0, #7
 8011a28:	1ac2      	subs	r2, r0, r3
 8011a2a:	bf1c      	itt	ne
 8011a2c:	1a1b      	subne	r3, r3, r0
 8011a2e:	50a3      	strne	r3, [r4, r2]
 8011a30:	e7af      	b.n	8011992 <_malloc_r+0x22>
 8011a32:	6862      	ldr	r2, [r4, #4]
 8011a34:	42a3      	cmp	r3, r4
 8011a36:	bf0c      	ite	eq
 8011a38:	f8c8 2000 	streq.w	r2, [r8]
 8011a3c:	605a      	strne	r2, [r3, #4]
 8011a3e:	e7eb      	b.n	8011a18 <_malloc_r+0xa8>
 8011a40:	4623      	mov	r3, r4
 8011a42:	6864      	ldr	r4, [r4, #4]
 8011a44:	e7ae      	b.n	80119a4 <_malloc_r+0x34>
 8011a46:	463c      	mov	r4, r7
 8011a48:	687f      	ldr	r7, [r7, #4]
 8011a4a:	e7b6      	b.n	80119ba <_malloc_r+0x4a>
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	42a3      	cmp	r3, r4
 8011a52:	d1fb      	bne.n	8011a4c <_malloc_r+0xdc>
 8011a54:	2300      	movs	r3, #0
 8011a56:	6053      	str	r3, [r2, #4]
 8011a58:	e7de      	b.n	8011a18 <_malloc_r+0xa8>
 8011a5a:	230c      	movs	r3, #12
 8011a5c:	6033      	str	r3, [r6, #0]
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f000 f81e 	bl	8011aa0 <__malloc_unlock>
 8011a64:	e794      	b.n	8011990 <_malloc_r+0x20>
 8011a66:	6005      	str	r5, [r0, #0]
 8011a68:	e7d6      	b.n	8011a18 <_malloc_r+0xa8>
 8011a6a:	bf00      	nop
 8011a6c:	2001e050 	.word	0x2001e050

08011a70 <__ascii_mbtowc>:
 8011a70:	b082      	sub	sp, #8
 8011a72:	b901      	cbnz	r1, 8011a76 <__ascii_mbtowc+0x6>
 8011a74:	a901      	add	r1, sp, #4
 8011a76:	b142      	cbz	r2, 8011a8a <__ascii_mbtowc+0x1a>
 8011a78:	b14b      	cbz	r3, 8011a8e <__ascii_mbtowc+0x1e>
 8011a7a:	7813      	ldrb	r3, [r2, #0]
 8011a7c:	600b      	str	r3, [r1, #0]
 8011a7e:	7812      	ldrb	r2, [r2, #0]
 8011a80:	1e10      	subs	r0, r2, #0
 8011a82:	bf18      	it	ne
 8011a84:	2001      	movne	r0, #1
 8011a86:	b002      	add	sp, #8
 8011a88:	4770      	bx	lr
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	e7fb      	b.n	8011a86 <__ascii_mbtowc+0x16>
 8011a8e:	f06f 0001 	mvn.w	r0, #1
 8011a92:	e7f8      	b.n	8011a86 <__ascii_mbtowc+0x16>

08011a94 <__malloc_lock>:
 8011a94:	4801      	ldr	r0, [pc, #4]	@ (8011a9c <__malloc_lock+0x8>)
 8011a96:	f7fe bdbe 	b.w	8010616 <__retarget_lock_acquire_recursive>
 8011a9a:	bf00      	nop
 8011a9c:	2001e048 	.word	0x2001e048

08011aa0 <__malloc_unlock>:
 8011aa0:	4801      	ldr	r0, [pc, #4]	@ (8011aa8 <__malloc_unlock+0x8>)
 8011aa2:	f7fe bdb9 	b.w	8010618 <__retarget_lock_release_recursive>
 8011aa6:	bf00      	nop
 8011aa8:	2001e048 	.word	0x2001e048

08011aac <_Balloc>:
 8011aac:	b570      	push	{r4, r5, r6, lr}
 8011aae:	69c6      	ldr	r6, [r0, #28]
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	460d      	mov	r5, r1
 8011ab4:	b976      	cbnz	r6, 8011ad4 <_Balloc+0x28>
 8011ab6:	2010      	movs	r0, #16
 8011ab8:	f7ff ff30 	bl	801191c <malloc>
 8011abc:	4602      	mov	r2, r0
 8011abe:	61e0      	str	r0, [r4, #28]
 8011ac0:	b920      	cbnz	r0, 8011acc <_Balloc+0x20>
 8011ac2:	4b18      	ldr	r3, [pc, #96]	@ (8011b24 <_Balloc+0x78>)
 8011ac4:	4818      	ldr	r0, [pc, #96]	@ (8011b28 <_Balloc+0x7c>)
 8011ac6:	216b      	movs	r1, #107	@ 0x6b
 8011ac8:	f001 f88e 	bl	8012be8 <__assert_func>
 8011acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ad0:	6006      	str	r6, [r0, #0]
 8011ad2:	60c6      	str	r6, [r0, #12]
 8011ad4:	69e6      	ldr	r6, [r4, #28]
 8011ad6:	68f3      	ldr	r3, [r6, #12]
 8011ad8:	b183      	cbz	r3, 8011afc <_Balloc+0x50>
 8011ada:	69e3      	ldr	r3, [r4, #28]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ae2:	b9b8      	cbnz	r0, 8011b14 <_Balloc+0x68>
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	fa01 f605 	lsl.w	r6, r1, r5
 8011aea:	1d72      	adds	r2, r6, #5
 8011aec:	0092      	lsls	r2, r2, #2
 8011aee:	4620      	mov	r0, r4
 8011af0:	f001 f898 	bl	8012c24 <_calloc_r>
 8011af4:	b160      	cbz	r0, 8011b10 <_Balloc+0x64>
 8011af6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011afa:	e00e      	b.n	8011b1a <_Balloc+0x6e>
 8011afc:	2221      	movs	r2, #33	@ 0x21
 8011afe:	2104      	movs	r1, #4
 8011b00:	4620      	mov	r0, r4
 8011b02:	f001 f88f 	bl	8012c24 <_calloc_r>
 8011b06:	69e3      	ldr	r3, [r4, #28]
 8011b08:	60f0      	str	r0, [r6, #12]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1e4      	bne.n	8011ada <_Balloc+0x2e>
 8011b10:	2000      	movs	r0, #0
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	6802      	ldr	r2, [r0, #0]
 8011b16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b20:	e7f7      	b.n	8011b12 <_Balloc+0x66>
 8011b22:	bf00      	nop
 8011b24:	080145cb 	.word	0x080145cb
 8011b28:	080146ab 	.word	0x080146ab

08011b2c <_Bfree>:
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	69c6      	ldr	r6, [r0, #28]
 8011b30:	4605      	mov	r5, r0
 8011b32:	460c      	mov	r4, r1
 8011b34:	b976      	cbnz	r6, 8011b54 <_Bfree+0x28>
 8011b36:	2010      	movs	r0, #16
 8011b38:	f7ff fef0 	bl	801191c <malloc>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	61e8      	str	r0, [r5, #28]
 8011b40:	b920      	cbnz	r0, 8011b4c <_Bfree+0x20>
 8011b42:	4b09      	ldr	r3, [pc, #36]	@ (8011b68 <_Bfree+0x3c>)
 8011b44:	4809      	ldr	r0, [pc, #36]	@ (8011b6c <_Bfree+0x40>)
 8011b46:	218f      	movs	r1, #143	@ 0x8f
 8011b48:	f001 f84e 	bl	8012be8 <__assert_func>
 8011b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b50:	6006      	str	r6, [r0, #0]
 8011b52:	60c6      	str	r6, [r0, #12]
 8011b54:	b13c      	cbz	r4, 8011b66 <_Bfree+0x3a>
 8011b56:	69eb      	ldr	r3, [r5, #28]
 8011b58:	6862      	ldr	r2, [r4, #4]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b60:	6021      	str	r1, [r4, #0]
 8011b62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	080145cb 	.word	0x080145cb
 8011b6c:	080146ab 	.word	0x080146ab

08011b70 <__multadd>:
 8011b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b74:	690d      	ldr	r5, [r1, #16]
 8011b76:	4607      	mov	r7, r0
 8011b78:	460c      	mov	r4, r1
 8011b7a:	461e      	mov	r6, r3
 8011b7c:	f101 0c14 	add.w	ip, r1, #20
 8011b80:	2000      	movs	r0, #0
 8011b82:	f8dc 3000 	ldr.w	r3, [ip]
 8011b86:	b299      	uxth	r1, r3
 8011b88:	fb02 6101 	mla	r1, r2, r1, r6
 8011b8c:	0c1e      	lsrs	r6, r3, #16
 8011b8e:	0c0b      	lsrs	r3, r1, #16
 8011b90:	fb02 3306 	mla	r3, r2, r6, r3
 8011b94:	b289      	uxth	r1, r1
 8011b96:	3001      	adds	r0, #1
 8011b98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b9c:	4285      	cmp	r5, r0
 8011b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8011ba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ba6:	dcec      	bgt.n	8011b82 <__multadd+0x12>
 8011ba8:	b30e      	cbz	r6, 8011bee <__multadd+0x7e>
 8011baa:	68a3      	ldr	r3, [r4, #8]
 8011bac:	42ab      	cmp	r3, r5
 8011bae:	dc19      	bgt.n	8011be4 <__multadd+0x74>
 8011bb0:	6861      	ldr	r1, [r4, #4]
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	3101      	adds	r1, #1
 8011bb6:	f7ff ff79 	bl	8011aac <_Balloc>
 8011bba:	4680      	mov	r8, r0
 8011bbc:	b928      	cbnz	r0, 8011bca <__multadd+0x5a>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011bf4 <__multadd+0x84>)
 8011bc2:	480d      	ldr	r0, [pc, #52]	@ (8011bf8 <__multadd+0x88>)
 8011bc4:	21ba      	movs	r1, #186	@ 0xba
 8011bc6:	f001 f80f 	bl	8012be8 <__assert_func>
 8011bca:	6922      	ldr	r2, [r4, #16]
 8011bcc:	3202      	adds	r2, #2
 8011bce:	f104 010c 	add.w	r1, r4, #12
 8011bd2:	0092      	lsls	r2, r2, #2
 8011bd4:	300c      	adds	r0, #12
 8011bd6:	f7fe fd20 	bl	801061a <memcpy>
 8011bda:	4621      	mov	r1, r4
 8011bdc:	4638      	mov	r0, r7
 8011bde:	f7ff ffa5 	bl	8011b2c <_Bfree>
 8011be2:	4644      	mov	r4, r8
 8011be4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011be8:	3501      	adds	r5, #1
 8011bea:	615e      	str	r6, [r3, #20]
 8011bec:	6125      	str	r5, [r4, #16]
 8011bee:	4620      	mov	r0, r4
 8011bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf4:	0801463a 	.word	0x0801463a
 8011bf8:	080146ab 	.word	0x080146ab

08011bfc <__s2b>:
 8011bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	460c      	mov	r4, r1
 8011c02:	4615      	mov	r5, r2
 8011c04:	461f      	mov	r7, r3
 8011c06:	2209      	movs	r2, #9
 8011c08:	3308      	adds	r3, #8
 8011c0a:	4606      	mov	r6, r0
 8011c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c10:	2100      	movs	r1, #0
 8011c12:	2201      	movs	r2, #1
 8011c14:	429a      	cmp	r2, r3
 8011c16:	db09      	blt.n	8011c2c <__s2b+0x30>
 8011c18:	4630      	mov	r0, r6
 8011c1a:	f7ff ff47 	bl	8011aac <_Balloc>
 8011c1e:	b940      	cbnz	r0, 8011c32 <__s2b+0x36>
 8011c20:	4602      	mov	r2, r0
 8011c22:	4b19      	ldr	r3, [pc, #100]	@ (8011c88 <__s2b+0x8c>)
 8011c24:	4819      	ldr	r0, [pc, #100]	@ (8011c8c <__s2b+0x90>)
 8011c26:	21d3      	movs	r1, #211	@ 0xd3
 8011c28:	f000 ffde 	bl	8012be8 <__assert_func>
 8011c2c:	0052      	lsls	r2, r2, #1
 8011c2e:	3101      	adds	r1, #1
 8011c30:	e7f0      	b.n	8011c14 <__s2b+0x18>
 8011c32:	9b08      	ldr	r3, [sp, #32]
 8011c34:	6143      	str	r3, [r0, #20]
 8011c36:	2d09      	cmp	r5, #9
 8011c38:	f04f 0301 	mov.w	r3, #1
 8011c3c:	6103      	str	r3, [r0, #16]
 8011c3e:	dd16      	ble.n	8011c6e <__s2b+0x72>
 8011c40:	f104 0909 	add.w	r9, r4, #9
 8011c44:	46c8      	mov	r8, r9
 8011c46:	442c      	add	r4, r5
 8011c48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011c4c:	4601      	mov	r1, r0
 8011c4e:	3b30      	subs	r3, #48	@ 0x30
 8011c50:	220a      	movs	r2, #10
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ff ff8c 	bl	8011b70 <__multadd>
 8011c58:	45a0      	cmp	r8, r4
 8011c5a:	d1f5      	bne.n	8011c48 <__s2b+0x4c>
 8011c5c:	f1a5 0408 	sub.w	r4, r5, #8
 8011c60:	444c      	add	r4, r9
 8011c62:	1b2d      	subs	r5, r5, r4
 8011c64:	1963      	adds	r3, r4, r5
 8011c66:	42bb      	cmp	r3, r7
 8011c68:	db04      	blt.n	8011c74 <__s2b+0x78>
 8011c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6e:	340a      	adds	r4, #10
 8011c70:	2509      	movs	r5, #9
 8011c72:	e7f6      	b.n	8011c62 <__s2b+0x66>
 8011c74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c78:	4601      	mov	r1, r0
 8011c7a:	3b30      	subs	r3, #48	@ 0x30
 8011c7c:	220a      	movs	r2, #10
 8011c7e:	4630      	mov	r0, r6
 8011c80:	f7ff ff76 	bl	8011b70 <__multadd>
 8011c84:	e7ee      	b.n	8011c64 <__s2b+0x68>
 8011c86:	bf00      	nop
 8011c88:	0801463a 	.word	0x0801463a
 8011c8c:	080146ab 	.word	0x080146ab

08011c90 <__hi0bits>:
 8011c90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011c94:	4603      	mov	r3, r0
 8011c96:	bf36      	itet	cc
 8011c98:	0403      	lslcc	r3, r0, #16
 8011c9a:	2000      	movcs	r0, #0
 8011c9c:	2010      	movcc	r0, #16
 8011c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011ca2:	bf3c      	itt	cc
 8011ca4:	021b      	lslcc	r3, r3, #8
 8011ca6:	3008      	addcc	r0, #8
 8011ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011cac:	bf3c      	itt	cc
 8011cae:	011b      	lslcc	r3, r3, #4
 8011cb0:	3004      	addcc	r0, #4
 8011cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011cb6:	bf3c      	itt	cc
 8011cb8:	009b      	lslcc	r3, r3, #2
 8011cba:	3002      	addcc	r0, #2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	db05      	blt.n	8011ccc <__hi0bits+0x3c>
 8011cc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011cc4:	f100 0001 	add.w	r0, r0, #1
 8011cc8:	bf08      	it	eq
 8011cca:	2020      	moveq	r0, #32
 8011ccc:	4770      	bx	lr

08011cce <__lo0bits>:
 8011cce:	6803      	ldr	r3, [r0, #0]
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	f013 0007 	ands.w	r0, r3, #7
 8011cd6:	d00b      	beq.n	8011cf0 <__lo0bits+0x22>
 8011cd8:	07d9      	lsls	r1, r3, #31
 8011cda:	d421      	bmi.n	8011d20 <__lo0bits+0x52>
 8011cdc:	0798      	lsls	r0, r3, #30
 8011cde:	bf49      	itett	mi
 8011ce0:	085b      	lsrmi	r3, r3, #1
 8011ce2:	089b      	lsrpl	r3, r3, #2
 8011ce4:	2001      	movmi	r0, #1
 8011ce6:	6013      	strmi	r3, [r2, #0]
 8011ce8:	bf5c      	itt	pl
 8011cea:	6013      	strpl	r3, [r2, #0]
 8011cec:	2002      	movpl	r0, #2
 8011cee:	4770      	bx	lr
 8011cf0:	b299      	uxth	r1, r3
 8011cf2:	b909      	cbnz	r1, 8011cf8 <__lo0bits+0x2a>
 8011cf4:	0c1b      	lsrs	r3, r3, #16
 8011cf6:	2010      	movs	r0, #16
 8011cf8:	b2d9      	uxtb	r1, r3
 8011cfa:	b909      	cbnz	r1, 8011d00 <__lo0bits+0x32>
 8011cfc:	3008      	adds	r0, #8
 8011cfe:	0a1b      	lsrs	r3, r3, #8
 8011d00:	0719      	lsls	r1, r3, #28
 8011d02:	bf04      	itt	eq
 8011d04:	091b      	lsreq	r3, r3, #4
 8011d06:	3004      	addeq	r0, #4
 8011d08:	0799      	lsls	r1, r3, #30
 8011d0a:	bf04      	itt	eq
 8011d0c:	089b      	lsreq	r3, r3, #2
 8011d0e:	3002      	addeq	r0, #2
 8011d10:	07d9      	lsls	r1, r3, #31
 8011d12:	d403      	bmi.n	8011d1c <__lo0bits+0x4e>
 8011d14:	085b      	lsrs	r3, r3, #1
 8011d16:	f100 0001 	add.w	r0, r0, #1
 8011d1a:	d003      	beq.n	8011d24 <__lo0bits+0x56>
 8011d1c:	6013      	str	r3, [r2, #0]
 8011d1e:	4770      	bx	lr
 8011d20:	2000      	movs	r0, #0
 8011d22:	4770      	bx	lr
 8011d24:	2020      	movs	r0, #32
 8011d26:	4770      	bx	lr

08011d28 <__i2b>:
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	460c      	mov	r4, r1
 8011d2c:	2101      	movs	r1, #1
 8011d2e:	f7ff febd 	bl	8011aac <_Balloc>
 8011d32:	4602      	mov	r2, r0
 8011d34:	b928      	cbnz	r0, 8011d42 <__i2b+0x1a>
 8011d36:	4b05      	ldr	r3, [pc, #20]	@ (8011d4c <__i2b+0x24>)
 8011d38:	4805      	ldr	r0, [pc, #20]	@ (8011d50 <__i2b+0x28>)
 8011d3a:	f240 1145 	movw	r1, #325	@ 0x145
 8011d3e:	f000 ff53 	bl	8012be8 <__assert_func>
 8011d42:	2301      	movs	r3, #1
 8011d44:	6144      	str	r4, [r0, #20]
 8011d46:	6103      	str	r3, [r0, #16]
 8011d48:	bd10      	pop	{r4, pc}
 8011d4a:	bf00      	nop
 8011d4c:	0801463a 	.word	0x0801463a
 8011d50:	080146ab 	.word	0x080146ab

08011d54 <__multiply>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	4617      	mov	r7, r2
 8011d5a:	690a      	ldr	r2, [r1, #16]
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	bfa8      	it	ge
 8011d62:	463b      	movge	r3, r7
 8011d64:	4689      	mov	r9, r1
 8011d66:	bfa4      	itt	ge
 8011d68:	460f      	movge	r7, r1
 8011d6a:	4699      	movge	r9, r3
 8011d6c:	693d      	ldr	r5, [r7, #16]
 8011d6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	eb05 060a 	add.w	r6, r5, sl
 8011d7a:	42b3      	cmp	r3, r6
 8011d7c:	b085      	sub	sp, #20
 8011d7e:	bfb8      	it	lt
 8011d80:	3101      	addlt	r1, #1
 8011d82:	f7ff fe93 	bl	8011aac <_Balloc>
 8011d86:	b930      	cbnz	r0, 8011d96 <__multiply+0x42>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	4b41      	ldr	r3, [pc, #260]	@ (8011e90 <__multiply+0x13c>)
 8011d8c:	4841      	ldr	r0, [pc, #260]	@ (8011e94 <__multiply+0x140>)
 8011d8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011d92:	f000 ff29 	bl	8012be8 <__assert_func>
 8011d96:	f100 0414 	add.w	r4, r0, #20
 8011d9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011d9e:	4623      	mov	r3, r4
 8011da0:	2200      	movs	r2, #0
 8011da2:	4573      	cmp	r3, lr
 8011da4:	d320      	bcc.n	8011de8 <__multiply+0x94>
 8011da6:	f107 0814 	add.w	r8, r7, #20
 8011daa:	f109 0114 	add.w	r1, r9, #20
 8011dae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011db2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011db6:	9302      	str	r3, [sp, #8]
 8011db8:	1beb      	subs	r3, r5, r7
 8011dba:	3b15      	subs	r3, #21
 8011dbc:	f023 0303 	bic.w	r3, r3, #3
 8011dc0:	3304      	adds	r3, #4
 8011dc2:	3715      	adds	r7, #21
 8011dc4:	42bd      	cmp	r5, r7
 8011dc6:	bf38      	it	cc
 8011dc8:	2304      	movcc	r3, #4
 8011dca:	9301      	str	r3, [sp, #4]
 8011dcc:	9b02      	ldr	r3, [sp, #8]
 8011dce:	9103      	str	r1, [sp, #12]
 8011dd0:	428b      	cmp	r3, r1
 8011dd2:	d80c      	bhi.n	8011dee <__multiply+0x9a>
 8011dd4:	2e00      	cmp	r6, #0
 8011dd6:	dd03      	ble.n	8011de0 <__multiply+0x8c>
 8011dd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d055      	beq.n	8011e8c <__multiply+0x138>
 8011de0:	6106      	str	r6, [r0, #16]
 8011de2:	b005      	add	sp, #20
 8011de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de8:	f843 2b04 	str.w	r2, [r3], #4
 8011dec:	e7d9      	b.n	8011da2 <__multiply+0x4e>
 8011dee:	f8b1 a000 	ldrh.w	sl, [r1]
 8011df2:	f1ba 0f00 	cmp.w	sl, #0
 8011df6:	d01f      	beq.n	8011e38 <__multiply+0xe4>
 8011df8:	46c4      	mov	ip, r8
 8011dfa:	46a1      	mov	r9, r4
 8011dfc:	2700      	movs	r7, #0
 8011dfe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011e02:	f8d9 3000 	ldr.w	r3, [r9]
 8011e06:	fa1f fb82 	uxth.w	fp, r2
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011e10:	443b      	add	r3, r7
 8011e12:	f8d9 7000 	ldr.w	r7, [r9]
 8011e16:	0c12      	lsrs	r2, r2, #16
 8011e18:	0c3f      	lsrs	r7, r7, #16
 8011e1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8011e1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e28:	4565      	cmp	r5, ip
 8011e2a:	f849 3b04 	str.w	r3, [r9], #4
 8011e2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011e32:	d8e4      	bhi.n	8011dfe <__multiply+0xaa>
 8011e34:	9b01      	ldr	r3, [sp, #4]
 8011e36:	50e7      	str	r7, [r4, r3]
 8011e38:	9b03      	ldr	r3, [sp, #12]
 8011e3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011e3e:	3104      	adds	r1, #4
 8011e40:	f1b9 0f00 	cmp.w	r9, #0
 8011e44:	d020      	beq.n	8011e88 <__multiply+0x134>
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	4647      	mov	r7, r8
 8011e4a:	46a4      	mov	ip, r4
 8011e4c:	f04f 0a00 	mov.w	sl, #0
 8011e50:	f8b7 b000 	ldrh.w	fp, [r7]
 8011e54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011e58:	fb09 220b 	mla	r2, r9, fp, r2
 8011e5c:	4452      	add	r2, sl
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e64:	f84c 3b04 	str.w	r3, [ip], #4
 8011e68:	f857 3b04 	ldr.w	r3, [r7], #4
 8011e6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e70:	f8bc 3000 	ldrh.w	r3, [ip]
 8011e74:	fb09 330a 	mla	r3, r9, sl, r3
 8011e78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011e7c:	42bd      	cmp	r5, r7
 8011e7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e82:	d8e5      	bhi.n	8011e50 <__multiply+0xfc>
 8011e84:	9a01      	ldr	r2, [sp, #4]
 8011e86:	50a3      	str	r3, [r4, r2]
 8011e88:	3404      	adds	r4, #4
 8011e8a:	e79f      	b.n	8011dcc <__multiply+0x78>
 8011e8c:	3e01      	subs	r6, #1
 8011e8e:	e7a1      	b.n	8011dd4 <__multiply+0x80>
 8011e90:	0801463a 	.word	0x0801463a
 8011e94:	080146ab 	.word	0x080146ab

08011e98 <__pow5mult>:
 8011e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e9c:	4615      	mov	r5, r2
 8011e9e:	f012 0203 	ands.w	r2, r2, #3
 8011ea2:	4607      	mov	r7, r0
 8011ea4:	460e      	mov	r6, r1
 8011ea6:	d007      	beq.n	8011eb8 <__pow5mult+0x20>
 8011ea8:	4c25      	ldr	r4, [pc, #148]	@ (8011f40 <__pow5mult+0xa8>)
 8011eaa:	3a01      	subs	r2, #1
 8011eac:	2300      	movs	r3, #0
 8011eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011eb2:	f7ff fe5d 	bl	8011b70 <__multadd>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	10ad      	asrs	r5, r5, #2
 8011eba:	d03d      	beq.n	8011f38 <__pow5mult+0xa0>
 8011ebc:	69fc      	ldr	r4, [r7, #28]
 8011ebe:	b97c      	cbnz	r4, 8011ee0 <__pow5mult+0x48>
 8011ec0:	2010      	movs	r0, #16
 8011ec2:	f7ff fd2b 	bl	801191c <malloc>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	61f8      	str	r0, [r7, #28]
 8011eca:	b928      	cbnz	r0, 8011ed8 <__pow5mult+0x40>
 8011ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8011f44 <__pow5mult+0xac>)
 8011ece:	481e      	ldr	r0, [pc, #120]	@ (8011f48 <__pow5mult+0xb0>)
 8011ed0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011ed4:	f000 fe88 	bl	8012be8 <__assert_func>
 8011ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011edc:	6004      	str	r4, [r0, #0]
 8011ede:	60c4      	str	r4, [r0, #12]
 8011ee0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ee8:	b94c      	cbnz	r4, 8011efe <__pow5mult+0x66>
 8011eea:	f240 2171 	movw	r1, #625	@ 0x271
 8011eee:	4638      	mov	r0, r7
 8011ef0:	f7ff ff1a 	bl	8011d28 <__i2b>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011efa:	4604      	mov	r4, r0
 8011efc:	6003      	str	r3, [r0, #0]
 8011efe:	f04f 0900 	mov.w	r9, #0
 8011f02:	07eb      	lsls	r3, r5, #31
 8011f04:	d50a      	bpl.n	8011f1c <__pow5mult+0x84>
 8011f06:	4631      	mov	r1, r6
 8011f08:	4622      	mov	r2, r4
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f7ff ff22 	bl	8011d54 <__multiply>
 8011f10:	4631      	mov	r1, r6
 8011f12:	4680      	mov	r8, r0
 8011f14:	4638      	mov	r0, r7
 8011f16:	f7ff fe09 	bl	8011b2c <_Bfree>
 8011f1a:	4646      	mov	r6, r8
 8011f1c:	106d      	asrs	r5, r5, #1
 8011f1e:	d00b      	beq.n	8011f38 <__pow5mult+0xa0>
 8011f20:	6820      	ldr	r0, [r4, #0]
 8011f22:	b938      	cbnz	r0, 8011f34 <__pow5mult+0x9c>
 8011f24:	4622      	mov	r2, r4
 8011f26:	4621      	mov	r1, r4
 8011f28:	4638      	mov	r0, r7
 8011f2a:	f7ff ff13 	bl	8011d54 <__multiply>
 8011f2e:	6020      	str	r0, [r4, #0]
 8011f30:	f8c0 9000 	str.w	r9, [r0]
 8011f34:	4604      	mov	r4, r0
 8011f36:	e7e4      	b.n	8011f02 <__pow5mult+0x6a>
 8011f38:	4630      	mov	r0, r6
 8011f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3e:	bf00      	nop
 8011f40:	080148ac 	.word	0x080148ac
 8011f44:	080145cb 	.word	0x080145cb
 8011f48:	080146ab 	.word	0x080146ab

08011f4c <__lshift>:
 8011f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f50:	460c      	mov	r4, r1
 8011f52:	6849      	ldr	r1, [r1, #4]
 8011f54:	6923      	ldr	r3, [r4, #16]
 8011f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f5a:	68a3      	ldr	r3, [r4, #8]
 8011f5c:	4607      	mov	r7, r0
 8011f5e:	4691      	mov	r9, r2
 8011f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f64:	f108 0601 	add.w	r6, r8, #1
 8011f68:	42b3      	cmp	r3, r6
 8011f6a:	db0b      	blt.n	8011f84 <__lshift+0x38>
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f7ff fd9d 	bl	8011aac <_Balloc>
 8011f72:	4605      	mov	r5, r0
 8011f74:	b948      	cbnz	r0, 8011f8a <__lshift+0x3e>
 8011f76:	4602      	mov	r2, r0
 8011f78:	4b28      	ldr	r3, [pc, #160]	@ (801201c <__lshift+0xd0>)
 8011f7a:	4829      	ldr	r0, [pc, #164]	@ (8012020 <__lshift+0xd4>)
 8011f7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011f80:	f000 fe32 	bl	8012be8 <__assert_func>
 8011f84:	3101      	adds	r1, #1
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	e7ee      	b.n	8011f68 <__lshift+0x1c>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	f100 0114 	add.w	r1, r0, #20
 8011f90:	f100 0210 	add.w	r2, r0, #16
 8011f94:	4618      	mov	r0, r3
 8011f96:	4553      	cmp	r3, sl
 8011f98:	db33      	blt.n	8012002 <__lshift+0xb6>
 8011f9a:	6920      	ldr	r0, [r4, #16]
 8011f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011fa0:	f104 0314 	add.w	r3, r4, #20
 8011fa4:	f019 091f 	ands.w	r9, r9, #31
 8011fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011fac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011fb0:	d02b      	beq.n	801200a <__lshift+0xbe>
 8011fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8011fb6:	468a      	mov	sl, r1
 8011fb8:	2200      	movs	r2, #0
 8011fba:	6818      	ldr	r0, [r3, #0]
 8011fbc:	fa00 f009 	lsl.w	r0, r0, r9
 8011fc0:	4310      	orrs	r0, r2
 8011fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8011fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fca:	459c      	cmp	ip, r3
 8011fcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fd0:	d8f3      	bhi.n	8011fba <__lshift+0x6e>
 8011fd2:	ebac 0304 	sub.w	r3, ip, r4
 8011fd6:	3b15      	subs	r3, #21
 8011fd8:	f023 0303 	bic.w	r3, r3, #3
 8011fdc:	3304      	adds	r3, #4
 8011fde:	f104 0015 	add.w	r0, r4, #21
 8011fe2:	4560      	cmp	r0, ip
 8011fe4:	bf88      	it	hi
 8011fe6:	2304      	movhi	r3, #4
 8011fe8:	50ca      	str	r2, [r1, r3]
 8011fea:	b10a      	cbz	r2, 8011ff0 <__lshift+0xa4>
 8011fec:	f108 0602 	add.w	r6, r8, #2
 8011ff0:	3e01      	subs	r6, #1
 8011ff2:	4638      	mov	r0, r7
 8011ff4:	612e      	str	r6, [r5, #16]
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	f7ff fd98 	bl	8011b2c <_Bfree>
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012002:	f842 0f04 	str.w	r0, [r2, #4]!
 8012006:	3301      	adds	r3, #1
 8012008:	e7c5      	b.n	8011f96 <__lshift+0x4a>
 801200a:	3904      	subs	r1, #4
 801200c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012010:	f841 2f04 	str.w	r2, [r1, #4]!
 8012014:	459c      	cmp	ip, r3
 8012016:	d8f9      	bhi.n	801200c <__lshift+0xc0>
 8012018:	e7ea      	b.n	8011ff0 <__lshift+0xa4>
 801201a:	bf00      	nop
 801201c:	0801463a 	.word	0x0801463a
 8012020:	080146ab 	.word	0x080146ab

08012024 <__mcmp>:
 8012024:	690a      	ldr	r2, [r1, #16]
 8012026:	4603      	mov	r3, r0
 8012028:	6900      	ldr	r0, [r0, #16]
 801202a:	1a80      	subs	r0, r0, r2
 801202c:	b530      	push	{r4, r5, lr}
 801202e:	d10e      	bne.n	801204e <__mcmp+0x2a>
 8012030:	3314      	adds	r3, #20
 8012032:	3114      	adds	r1, #20
 8012034:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012038:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801203c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012044:	4295      	cmp	r5, r2
 8012046:	d003      	beq.n	8012050 <__mcmp+0x2c>
 8012048:	d205      	bcs.n	8012056 <__mcmp+0x32>
 801204a:	f04f 30ff 	mov.w	r0, #4294967295
 801204e:	bd30      	pop	{r4, r5, pc}
 8012050:	42a3      	cmp	r3, r4
 8012052:	d3f3      	bcc.n	801203c <__mcmp+0x18>
 8012054:	e7fb      	b.n	801204e <__mcmp+0x2a>
 8012056:	2001      	movs	r0, #1
 8012058:	e7f9      	b.n	801204e <__mcmp+0x2a>
	...

0801205c <__mdiff>:
 801205c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012060:	4689      	mov	r9, r1
 8012062:	4606      	mov	r6, r0
 8012064:	4611      	mov	r1, r2
 8012066:	4648      	mov	r0, r9
 8012068:	4614      	mov	r4, r2
 801206a:	f7ff ffdb 	bl	8012024 <__mcmp>
 801206e:	1e05      	subs	r5, r0, #0
 8012070:	d112      	bne.n	8012098 <__mdiff+0x3c>
 8012072:	4629      	mov	r1, r5
 8012074:	4630      	mov	r0, r6
 8012076:	f7ff fd19 	bl	8011aac <_Balloc>
 801207a:	4602      	mov	r2, r0
 801207c:	b928      	cbnz	r0, 801208a <__mdiff+0x2e>
 801207e:	4b3f      	ldr	r3, [pc, #252]	@ (801217c <__mdiff+0x120>)
 8012080:	f240 2137 	movw	r1, #567	@ 0x237
 8012084:	483e      	ldr	r0, [pc, #248]	@ (8012180 <__mdiff+0x124>)
 8012086:	f000 fdaf 	bl	8012be8 <__assert_func>
 801208a:	2301      	movs	r3, #1
 801208c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012090:	4610      	mov	r0, r2
 8012092:	b003      	add	sp, #12
 8012094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012098:	bfbc      	itt	lt
 801209a:	464b      	movlt	r3, r9
 801209c:	46a1      	movlt	r9, r4
 801209e:	4630      	mov	r0, r6
 80120a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80120a4:	bfba      	itte	lt
 80120a6:	461c      	movlt	r4, r3
 80120a8:	2501      	movlt	r5, #1
 80120aa:	2500      	movge	r5, #0
 80120ac:	f7ff fcfe 	bl	8011aac <_Balloc>
 80120b0:	4602      	mov	r2, r0
 80120b2:	b918      	cbnz	r0, 80120bc <__mdiff+0x60>
 80120b4:	4b31      	ldr	r3, [pc, #196]	@ (801217c <__mdiff+0x120>)
 80120b6:	f240 2145 	movw	r1, #581	@ 0x245
 80120ba:	e7e3      	b.n	8012084 <__mdiff+0x28>
 80120bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80120c0:	6926      	ldr	r6, [r4, #16]
 80120c2:	60c5      	str	r5, [r0, #12]
 80120c4:	f109 0310 	add.w	r3, r9, #16
 80120c8:	f109 0514 	add.w	r5, r9, #20
 80120cc:	f104 0e14 	add.w	lr, r4, #20
 80120d0:	f100 0b14 	add.w	fp, r0, #20
 80120d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80120d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80120dc:	9301      	str	r3, [sp, #4]
 80120de:	46d9      	mov	r9, fp
 80120e0:	f04f 0c00 	mov.w	ip, #0
 80120e4:	9b01      	ldr	r3, [sp, #4]
 80120e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80120ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80120ee:	9301      	str	r3, [sp, #4]
 80120f0:	fa1f f38a 	uxth.w	r3, sl
 80120f4:	4619      	mov	r1, r3
 80120f6:	b283      	uxth	r3, r0
 80120f8:	1acb      	subs	r3, r1, r3
 80120fa:	0c00      	lsrs	r0, r0, #16
 80120fc:	4463      	add	r3, ip
 80120fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012102:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012106:	b29b      	uxth	r3, r3
 8012108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801210c:	4576      	cmp	r6, lr
 801210e:	f849 3b04 	str.w	r3, [r9], #4
 8012112:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012116:	d8e5      	bhi.n	80120e4 <__mdiff+0x88>
 8012118:	1b33      	subs	r3, r6, r4
 801211a:	3b15      	subs	r3, #21
 801211c:	f023 0303 	bic.w	r3, r3, #3
 8012120:	3415      	adds	r4, #21
 8012122:	3304      	adds	r3, #4
 8012124:	42a6      	cmp	r6, r4
 8012126:	bf38      	it	cc
 8012128:	2304      	movcc	r3, #4
 801212a:	441d      	add	r5, r3
 801212c:	445b      	add	r3, fp
 801212e:	461e      	mov	r6, r3
 8012130:	462c      	mov	r4, r5
 8012132:	4544      	cmp	r4, r8
 8012134:	d30e      	bcc.n	8012154 <__mdiff+0xf8>
 8012136:	f108 0103 	add.w	r1, r8, #3
 801213a:	1b49      	subs	r1, r1, r5
 801213c:	f021 0103 	bic.w	r1, r1, #3
 8012140:	3d03      	subs	r5, #3
 8012142:	45a8      	cmp	r8, r5
 8012144:	bf38      	it	cc
 8012146:	2100      	movcc	r1, #0
 8012148:	440b      	add	r3, r1
 801214a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801214e:	b191      	cbz	r1, 8012176 <__mdiff+0x11a>
 8012150:	6117      	str	r7, [r2, #16]
 8012152:	e79d      	b.n	8012090 <__mdiff+0x34>
 8012154:	f854 1b04 	ldr.w	r1, [r4], #4
 8012158:	46e6      	mov	lr, ip
 801215a:	0c08      	lsrs	r0, r1, #16
 801215c:	fa1c fc81 	uxtah	ip, ip, r1
 8012160:	4471      	add	r1, lr
 8012162:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012166:	b289      	uxth	r1, r1
 8012168:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801216c:	f846 1b04 	str.w	r1, [r6], #4
 8012170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012174:	e7dd      	b.n	8012132 <__mdiff+0xd6>
 8012176:	3f01      	subs	r7, #1
 8012178:	e7e7      	b.n	801214a <__mdiff+0xee>
 801217a:	bf00      	nop
 801217c:	0801463a 	.word	0x0801463a
 8012180:	080146ab 	.word	0x080146ab

08012184 <__ulp>:
 8012184:	b082      	sub	sp, #8
 8012186:	ed8d 0b00 	vstr	d0, [sp]
 801218a:	9a01      	ldr	r2, [sp, #4]
 801218c:	4b0f      	ldr	r3, [pc, #60]	@ (80121cc <__ulp+0x48>)
 801218e:	4013      	ands	r3, r2
 8012190:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012194:	2b00      	cmp	r3, #0
 8012196:	dc08      	bgt.n	80121aa <__ulp+0x26>
 8012198:	425b      	negs	r3, r3
 801219a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801219e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80121a2:	da04      	bge.n	80121ae <__ulp+0x2a>
 80121a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80121a8:	4113      	asrs	r3, r2
 80121aa:	2200      	movs	r2, #0
 80121ac:	e008      	b.n	80121c0 <__ulp+0x3c>
 80121ae:	f1a2 0314 	sub.w	r3, r2, #20
 80121b2:	2b1e      	cmp	r3, #30
 80121b4:	bfda      	itte	le
 80121b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80121ba:	40da      	lsrle	r2, r3
 80121bc:	2201      	movgt	r2, #1
 80121be:	2300      	movs	r3, #0
 80121c0:	4619      	mov	r1, r3
 80121c2:	4610      	mov	r0, r2
 80121c4:	ec41 0b10 	vmov	d0, r0, r1
 80121c8:	b002      	add	sp, #8
 80121ca:	4770      	bx	lr
 80121cc:	7ff00000 	.word	0x7ff00000

080121d0 <__b2d>:
 80121d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d4:	6906      	ldr	r6, [r0, #16]
 80121d6:	f100 0814 	add.w	r8, r0, #20
 80121da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80121de:	1f37      	subs	r7, r6, #4
 80121e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80121e4:	4610      	mov	r0, r2
 80121e6:	f7ff fd53 	bl	8011c90 <__hi0bits>
 80121ea:	f1c0 0320 	rsb	r3, r0, #32
 80121ee:	280a      	cmp	r0, #10
 80121f0:	600b      	str	r3, [r1, #0]
 80121f2:	491b      	ldr	r1, [pc, #108]	@ (8012260 <__b2d+0x90>)
 80121f4:	dc15      	bgt.n	8012222 <__b2d+0x52>
 80121f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80121fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80121fe:	45b8      	cmp	r8, r7
 8012200:	ea43 0501 	orr.w	r5, r3, r1
 8012204:	bf34      	ite	cc
 8012206:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801220a:	2300      	movcs	r3, #0
 801220c:	3015      	adds	r0, #21
 801220e:	fa02 f000 	lsl.w	r0, r2, r0
 8012212:	fa23 f30c 	lsr.w	r3, r3, ip
 8012216:	4303      	orrs	r3, r0
 8012218:	461c      	mov	r4, r3
 801221a:	ec45 4b10 	vmov	d0, r4, r5
 801221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012222:	45b8      	cmp	r8, r7
 8012224:	bf3a      	itte	cc
 8012226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801222a:	f1a6 0708 	subcc.w	r7, r6, #8
 801222e:	2300      	movcs	r3, #0
 8012230:	380b      	subs	r0, #11
 8012232:	d012      	beq.n	801225a <__b2d+0x8a>
 8012234:	f1c0 0120 	rsb	r1, r0, #32
 8012238:	fa23 f401 	lsr.w	r4, r3, r1
 801223c:	4082      	lsls	r2, r0
 801223e:	4322      	orrs	r2, r4
 8012240:	4547      	cmp	r7, r8
 8012242:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012246:	bf8c      	ite	hi
 8012248:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801224c:	2200      	movls	r2, #0
 801224e:	4083      	lsls	r3, r0
 8012250:	40ca      	lsrs	r2, r1
 8012252:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012256:	4313      	orrs	r3, r2
 8012258:	e7de      	b.n	8012218 <__b2d+0x48>
 801225a:	ea42 0501 	orr.w	r5, r2, r1
 801225e:	e7db      	b.n	8012218 <__b2d+0x48>
 8012260:	3ff00000 	.word	0x3ff00000

08012264 <__d2b>:
 8012264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012268:	460f      	mov	r7, r1
 801226a:	2101      	movs	r1, #1
 801226c:	ec59 8b10 	vmov	r8, r9, d0
 8012270:	4616      	mov	r6, r2
 8012272:	f7ff fc1b 	bl	8011aac <_Balloc>
 8012276:	4604      	mov	r4, r0
 8012278:	b930      	cbnz	r0, 8012288 <__d2b+0x24>
 801227a:	4602      	mov	r2, r0
 801227c:	4b23      	ldr	r3, [pc, #140]	@ (801230c <__d2b+0xa8>)
 801227e:	4824      	ldr	r0, [pc, #144]	@ (8012310 <__d2b+0xac>)
 8012280:	f240 310f 	movw	r1, #783	@ 0x30f
 8012284:	f000 fcb0 	bl	8012be8 <__assert_func>
 8012288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801228c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012290:	b10d      	cbz	r5, 8012296 <__d2b+0x32>
 8012292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	f1b8 0300 	subs.w	r3, r8, #0
 801229c:	d023      	beq.n	80122e6 <__d2b+0x82>
 801229e:	4668      	mov	r0, sp
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	f7ff fd14 	bl	8011cce <__lo0bits>
 80122a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80122aa:	b1d0      	cbz	r0, 80122e2 <__d2b+0x7e>
 80122ac:	f1c0 0320 	rsb	r3, r0, #32
 80122b0:	fa02 f303 	lsl.w	r3, r2, r3
 80122b4:	430b      	orrs	r3, r1
 80122b6:	40c2      	lsrs	r2, r0
 80122b8:	6163      	str	r3, [r4, #20]
 80122ba:	9201      	str	r2, [sp, #4]
 80122bc:	9b01      	ldr	r3, [sp, #4]
 80122be:	61a3      	str	r3, [r4, #24]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bf0c      	ite	eq
 80122c4:	2201      	moveq	r2, #1
 80122c6:	2202      	movne	r2, #2
 80122c8:	6122      	str	r2, [r4, #16]
 80122ca:	b1a5      	cbz	r5, 80122f6 <__d2b+0x92>
 80122cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80122d0:	4405      	add	r5, r0
 80122d2:	603d      	str	r5, [r7, #0]
 80122d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122d8:	6030      	str	r0, [r6, #0]
 80122da:	4620      	mov	r0, r4
 80122dc:	b003      	add	sp, #12
 80122de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122e2:	6161      	str	r1, [r4, #20]
 80122e4:	e7ea      	b.n	80122bc <__d2b+0x58>
 80122e6:	a801      	add	r0, sp, #4
 80122e8:	f7ff fcf1 	bl	8011cce <__lo0bits>
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	6163      	str	r3, [r4, #20]
 80122f0:	3020      	adds	r0, #32
 80122f2:	2201      	movs	r2, #1
 80122f4:	e7e8      	b.n	80122c8 <__d2b+0x64>
 80122f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80122fe:	6038      	str	r0, [r7, #0]
 8012300:	6918      	ldr	r0, [r3, #16]
 8012302:	f7ff fcc5 	bl	8011c90 <__hi0bits>
 8012306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801230a:	e7e5      	b.n	80122d8 <__d2b+0x74>
 801230c:	0801463a 	.word	0x0801463a
 8012310:	080146ab 	.word	0x080146ab

08012314 <__ratio>:
 8012314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	4688      	mov	r8, r1
 801231a:	4669      	mov	r1, sp
 801231c:	4681      	mov	r9, r0
 801231e:	f7ff ff57 	bl	80121d0 <__b2d>
 8012322:	a901      	add	r1, sp, #4
 8012324:	4640      	mov	r0, r8
 8012326:	ec55 4b10 	vmov	r4, r5, d0
 801232a:	f7ff ff51 	bl	80121d0 <__b2d>
 801232e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012332:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012336:	1ad2      	subs	r2, r2, r3
 8012338:	e9dd 3100 	ldrd	r3, r1, [sp]
 801233c:	1a5b      	subs	r3, r3, r1
 801233e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012342:	ec57 6b10 	vmov	r6, r7, d0
 8012346:	2b00      	cmp	r3, #0
 8012348:	bfd6      	itet	le
 801234a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801234e:	462a      	movgt	r2, r5
 8012350:	463a      	movle	r2, r7
 8012352:	46ab      	mov	fp, r5
 8012354:	46a2      	mov	sl, r4
 8012356:	bfce      	itee	gt
 8012358:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801235c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012360:	ee00 3a90 	vmovle	s1, r3
 8012364:	ec4b ab17 	vmov	d7, sl, fp
 8012368:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801236c:	b003      	add	sp, #12
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012372 <__copybits>:
 8012372:	3901      	subs	r1, #1
 8012374:	b570      	push	{r4, r5, r6, lr}
 8012376:	1149      	asrs	r1, r1, #5
 8012378:	6914      	ldr	r4, [r2, #16]
 801237a:	3101      	adds	r1, #1
 801237c:	f102 0314 	add.w	r3, r2, #20
 8012380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012384:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012388:	1f05      	subs	r5, r0, #4
 801238a:	42a3      	cmp	r3, r4
 801238c:	d30c      	bcc.n	80123a8 <__copybits+0x36>
 801238e:	1aa3      	subs	r3, r4, r2
 8012390:	3b11      	subs	r3, #17
 8012392:	f023 0303 	bic.w	r3, r3, #3
 8012396:	3211      	adds	r2, #17
 8012398:	42a2      	cmp	r2, r4
 801239a:	bf88      	it	hi
 801239c:	2300      	movhi	r3, #0
 801239e:	4418      	add	r0, r3
 80123a0:	2300      	movs	r3, #0
 80123a2:	4288      	cmp	r0, r1
 80123a4:	d305      	bcc.n	80123b2 <__copybits+0x40>
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
 80123a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80123ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80123b0:	e7eb      	b.n	801238a <__copybits+0x18>
 80123b2:	f840 3b04 	str.w	r3, [r0], #4
 80123b6:	e7f4      	b.n	80123a2 <__copybits+0x30>

080123b8 <__any_on>:
 80123b8:	f100 0214 	add.w	r2, r0, #20
 80123bc:	6900      	ldr	r0, [r0, #16]
 80123be:	114b      	asrs	r3, r1, #5
 80123c0:	4298      	cmp	r0, r3
 80123c2:	b510      	push	{r4, lr}
 80123c4:	db11      	blt.n	80123ea <__any_on+0x32>
 80123c6:	dd0a      	ble.n	80123de <__any_on+0x26>
 80123c8:	f011 011f 	ands.w	r1, r1, #31
 80123cc:	d007      	beq.n	80123de <__any_on+0x26>
 80123ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123d2:	fa24 f001 	lsr.w	r0, r4, r1
 80123d6:	fa00 f101 	lsl.w	r1, r0, r1
 80123da:	428c      	cmp	r4, r1
 80123dc:	d10b      	bne.n	80123f6 <__any_on+0x3e>
 80123de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d803      	bhi.n	80123ee <__any_on+0x36>
 80123e6:	2000      	movs	r0, #0
 80123e8:	bd10      	pop	{r4, pc}
 80123ea:	4603      	mov	r3, r0
 80123ec:	e7f7      	b.n	80123de <__any_on+0x26>
 80123ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123f2:	2900      	cmp	r1, #0
 80123f4:	d0f5      	beq.n	80123e2 <__any_on+0x2a>
 80123f6:	2001      	movs	r0, #1
 80123f8:	e7f6      	b.n	80123e8 <__any_on+0x30>

080123fa <__ascii_wctomb>:
 80123fa:	4603      	mov	r3, r0
 80123fc:	4608      	mov	r0, r1
 80123fe:	b141      	cbz	r1, 8012412 <__ascii_wctomb+0x18>
 8012400:	2aff      	cmp	r2, #255	@ 0xff
 8012402:	d904      	bls.n	801240e <__ascii_wctomb+0x14>
 8012404:	228a      	movs	r2, #138	@ 0x8a
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	f04f 30ff 	mov.w	r0, #4294967295
 801240c:	4770      	bx	lr
 801240e:	700a      	strb	r2, [r1, #0]
 8012410:	2001      	movs	r0, #1
 8012412:	4770      	bx	lr

08012414 <__ssputs_r>:
 8012414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012418:	688e      	ldr	r6, [r1, #8]
 801241a:	461f      	mov	r7, r3
 801241c:	42be      	cmp	r6, r7
 801241e:	680b      	ldr	r3, [r1, #0]
 8012420:	4682      	mov	sl, r0
 8012422:	460c      	mov	r4, r1
 8012424:	4690      	mov	r8, r2
 8012426:	d82d      	bhi.n	8012484 <__ssputs_r+0x70>
 8012428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801242c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012430:	d026      	beq.n	8012480 <__ssputs_r+0x6c>
 8012432:	6965      	ldr	r5, [r4, #20]
 8012434:	6909      	ldr	r1, [r1, #16]
 8012436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801243a:	eba3 0901 	sub.w	r9, r3, r1
 801243e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012442:	1c7b      	adds	r3, r7, #1
 8012444:	444b      	add	r3, r9
 8012446:	106d      	asrs	r5, r5, #1
 8012448:	429d      	cmp	r5, r3
 801244a:	bf38      	it	cc
 801244c:	461d      	movcc	r5, r3
 801244e:	0553      	lsls	r3, r2, #21
 8012450:	d527      	bpl.n	80124a2 <__ssputs_r+0x8e>
 8012452:	4629      	mov	r1, r5
 8012454:	f7ff fa8c 	bl	8011970 <_malloc_r>
 8012458:	4606      	mov	r6, r0
 801245a:	b360      	cbz	r0, 80124b6 <__ssputs_r+0xa2>
 801245c:	6921      	ldr	r1, [r4, #16]
 801245e:	464a      	mov	r2, r9
 8012460:	f7fe f8db 	bl	801061a <memcpy>
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801246a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801246e:	81a3      	strh	r3, [r4, #12]
 8012470:	6126      	str	r6, [r4, #16]
 8012472:	6165      	str	r5, [r4, #20]
 8012474:	444e      	add	r6, r9
 8012476:	eba5 0509 	sub.w	r5, r5, r9
 801247a:	6026      	str	r6, [r4, #0]
 801247c:	60a5      	str	r5, [r4, #8]
 801247e:	463e      	mov	r6, r7
 8012480:	42be      	cmp	r6, r7
 8012482:	d900      	bls.n	8012486 <__ssputs_r+0x72>
 8012484:	463e      	mov	r6, r7
 8012486:	6820      	ldr	r0, [r4, #0]
 8012488:	4632      	mov	r2, r6
 801248a:	4641      	mov	r1, r8
 801248c:	f7fd ffeb 	bl	8010466 <memmove>
 8012490:	68a3      	ldr	r3, [r4, #8]
 8012492:	1b9b      	subs	r3, r3, r6
 8012494:	60a3      	str	r3, [r4, #8]
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	4433      	add	r3, r6
 801249a:	6023      	str	r3, [r4, #0]
 801249c:	2000      	movs	r0, #0
 801249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a2:	462a      	mov	r2, r5
 80124a4:	f000 fbd2 	bl	8012c4c <_realloc_r>
 80124a8:	4606      	mov	r6, r0
 80124aa:	2800      	cmp	r0, #0
 80124ac:	d1e0      	bne.n	8012470 <__ssputs_r+0x5c>
 80124ae:	6921      	ldr	r1, [r4, #16]
 80124b0:	4650      	mov	r0, sl
 80124b2:	f7fe feaf 	bl	8011214 <_free_r>
 80124b6:	230c      	movs	r3, #12
 80124b8:	f8ca 3000 	str.w	r3, [sl]
 80124bc:	89a3      	ldrh	r3, [r4, #12]
 80124be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124c2:	81a3      	strh	r3, [r4, #12]
 80124c4:	f04f 30ff 	mov.w	r0, #4294967295
 80124c8:	e7e9      	b.n	801249e <__ssputs_r+0x8a>
	...

080124cc <_svfiprintf_r>:
 80124cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d0:	4698      	mov	r8, r3
 80124d2:	898b      	ldrh	r3, [r1, #12]
 80124d4:	061b      	lsls	r3, r3, #24
 80124d6:	b09d      	sub	sp, #116	@ 0x74
 80124d8:	4607      	mov	r7, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	4614      	mov	r4, r2
 80124de:	d510      	bpl.n	8012502 <_svfiprintf_r+0x36>
 80124e0:	690b      	ldr	r3, [r1, #16]
 80124e2:	b973      	cbnz	r3, 8012502 <_svfiprintf_r+0x36>
 80124e4:	2140      	movs	r1, #64	@ 0x40
 80124e6:	f7ff fa43 	bl	8011970 <_malloc_r>
 80124ea:	6028      	str	r0, [r5, #0]
 80124ec:	6128      	str	r0, [r5, #16]
 80124ee:	b930      	cbnz	r0, 80124fe <_svfiprintf_r+0x32>
 80124f0:	230c      	movs	r3, #12
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295
 80124f8:	b01d      	add	sp, #116	@ 0x74
 80124fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fe:	2340      	movs	r3, #64	@ 0x40
 8012500:	616b      	str	r3, [r5, #20]
 8012502:	2300      	movs	r3, #0
 8012504:	9309      	str	r3, [sp, #36]	@ 0x24
 8012506:	2320      	movs	r3, #32
 8012508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801250c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012510:	2330      	movs	r3, #48	@ 0x30
 8012512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80126b0 <_svfiprintf_r+0x1e4>
 8012516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801251a:	f04f 0901 	mov.w	r9, #1
 801251e:	4623      	mov	r3, r4
 8012520:	469a      	mov	sl, r3
 8012522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012526:	b10a      	cbz	r2, 801252c <_svfiprintf_r+0x60>
 8012528:	2a25      	cmp	r2, #37	@ 0x25
 801252a:	d1f9      	bne.n	8012520 <_svfiprintf_r+0x54>
 801252c:	ebba 0b04 	subs.w	fp, sl, r4
 8012530:	d00b      	beq.n	801254a <_svfiprintf_r+0x7e>
 8012532:	465b      	mov	r3, fp
 8012534:	4622      	mov	r2, r4
 8012536:	4629      	mov	r1, r5
 8012538:	4638      	mov	r0, r7
 801253a:	f7ff ff6b 	bl	8012414 <__ssputs_r>
 801253e:	3001      	adds	r0, #1
 8012540:	f000 80a7 	beq.w	8012692 <_svfiprintf_r+0x1c6>
 8012544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012546:	445a      	add	r2, fp
 8012548:	9209      	str	r2, [sp, #36]	@ 0x24
 801254a:	f89a 3000 	ldrb.w	r3, [sl]
 801254e:	2b00      	cmp	r3, #0
 8012550:	f000 809f 	beq.w	8012692 <_svfiprintf_r+0x1c6>
 8012554:	2300      	movs	r3, #0
 8012556:	f04f 32ff 	mov.w	r2, #4294967295
 801255a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801255e:	f10a 0a01 	add.w	sl, sl, #1
 8012562:	9304      	str	r3, [sp, #16]
 8012564:	9307      	str	r3, [sp, #28]
 8012566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801256a:	931a      	str	r3, [sp, #104]	@ 0x68
 801256c:	4654      	mov	r4, sl
 801256e:	2205      	movs	r2, #5
 8012570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012574:	484e      	ldr	r0, [pc, #312]	@ (80126b0 <_svfiprintf_r+0x1e4>)
 8012576:	f7ed fe73 	bl	8000260 <memchr>
 801257a:	9a04      	ldr	r2, [sp, #16]
 801257c:	b9d8      	cbnz	r0, 80125b6 <_svfiprintf_r+0xea>
 801257e:	06d0      	lsls	r0, r2, #27
 8012580:	bf44      	itt	mi
 8012582:	2320      	movmi	r3, #32
 8012584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012588:	0711      	lsls	r1, r2, #28
 801258a:	bf44      	itt	mi
 801258c:	232b      	movmi	r3, #43	@ 0x2b
 801258e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012592:	f89a 3000 	ldrb.w	r3, [sl]
 8012596:	2b2a      	cmp	r3, #42	@ 0x2a
 8012598:	d015      	beq.n	80125c6 <_svfiprintf_r+0xfa>
 801259a:	9a07      	ldr	r2, [sp, #28]
 801259c:	4654      	mov	r4, sl
 801259e:	2000      	movs	r0, #0
 80125a0:	f04f 0c0a 	mov.w	ip, #10
 80125a4:	4621      	mov	r1, r4
 80125a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125aa:	3b30      	subs	r3, #48	@ 0x30
 80125ac:	2b09      	cmp	r3, #9
 80125ae:	d94b      	bls.n	8012648 <_svfiprintf_r+0x17c>
 80125b0:	b1b0      	cbz	r0, 80125e0 <_svfiprintf_r+0x114>
 80125b2:	9207      	str	r2, [sp, #28]
 80125b4:	e014      	b.n	80125e0 <_svfiprintf_r+0x114>
 80125b6:	eba0 0308 	sub.w	r3, r0, r8
 80125ba:	fa09 f303 	lsl.w	r3, r9, r3
 80125be:	4313      	orrs	r3, r2
 80125c0:	9304      	str	r3, [sp, #16]
 80125c2:	46a2      	mov	sl, r4
 80125c4:	e7d2      	b.n	801256c <_svfiprintf_r+0xa0>
 80125c6:	9b03      	ldr	r3, [sp, #12]
 80125c8:	1d19      	adds	r1, r3, #4
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	9103      	str	r1, [sp, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	bfbb      	ittet	lt
 80125d2:	425b      	neglt	r3, r3
 80125d4:	f042 0202 	orrlt.w	r2, r2, #2
 80125d8:	9307      	strge	r3, [sp, #28]
 80125da:	9307      	strlt	r3, [sp, #28]
 80125dc:	bfb8      	it	lt
 80125de:	9204      	strlt	r2, [sp, #16]
 80125e0:	7823      	ldrb	r3, [r4, #0]
 80125e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80125e4:	d10a      	bne.n	80125fc <_svfiprintf_r+0x130>
 80125e6:	7863      	ldrb	r3, [r4, #1]
 80125e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ea:	d132      	bne.n	8012652 <_svfiprintf_r+0x186>
 80125ec:	9b03      	ldr	r3, [sp, #12]
 80125ee:	1d1a      	adds	r2, r3, #4
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	9203      	str	r2, [sp, #12]
 80125f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125f8:	3402      	adds	r4, #2
 80125fa:	9305      	str	r3, [sp, #20]
 80125fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80126c0 <_svfiprintf_r+0x1f4>
 8012600:	7821      	ldrb	r1, [r4, #0]
 8012602:	2203      	movs	r2, #3
 8012604:	4650      	mov	r0, sl
 8012606:	f7ed fe2b 	bl	8000260 <memchr>
 801260a:	b138      	cbz	r0, 801261c <_svfiprintf_r+0x150>
 801260c:	9b04      	ldr	r3, [sp, #16]
 801260e:	eba0 000a 	sub.w	r0, r0, sl
 8012612:	2240      	movs	r2, #64	@ 0x40
 8012614:	4082      	lsls	r2, r0
 8012616:	4313      	orrs	r3, r2
 8012618:	3401      	adds	r4, #1
 801261a:	9304      	str	r3, [sp, #16]
 801261c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012620:	4824      	ldr	r0, [pc, #144]	@ (80126b4 <_svfiprintf_r+0x1e8>)
 8012622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012626:	2206      	movs	r2, #6
 8012628:	f7ed fe1a 	bl	8000260 <memchr>
 801262c:	2800      	cmp	r0, #0
 801262e:	d036      	beq.n	801269e <_svfiprintf_r+0x1d2>
 8012630:	4b21      	ldr	r3, [pc, #132]	@ (80126b8 <_svfiprintf_r+0x1ec>)
 8012632:	bb1b      	cbnz	r3, 801267c <_svfiprintf_r+0x1b0>
 8012634:	9b03      	ldr	r3, [sp, #12]
 8012636:	3307      	adds	r3, #7
 8012638:	f023 0307 	bic.w	r3, r3, #7
 801263c:	3308      	adds	r3, #8
 801263e:	9303      	str	r3, [sp, #12]
 8012640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012642:	4433      	add	r3, r6
 8012644:	9309      	str	r3, [sp, #36]	@ 0x24
 8012646:	e76a      	b.n	801251e <_svfiprintf_r+0x52>
 8012648:	fb0c 3202 	mla	r2, ip, r2, r3
 801264c:	460c      	mov	r4, r1
 801264e:	2001      	movs	r0, #1
 8012650:	e7a8      	b.n	80125a4 <_svfiprintf_r+0xd8>
 8012652:	2300      	movs	r3, #0
 8012654:	3401      	adds	r4, #1
 8012656:	9305      	str	r3, [sp, #20]
 8012658:	4619      	mov	r1, r3
 801265a:	f04f 0c0a 	mov.w	ip, #10
 801265e:	4620      	mov	r0, r4
 8012660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012664:	3a30      	subs	r2, #48	@ 0x30
 8012666:	2a09      	cmp	r2, #9
 8012668:	d903      	bls.n	8012672 <_svfiprintf_r+0x1a6>
 801266a:	2b00      	cmp	r3, #0
 801266c:	d0c6      	beq.n	80125fc <_svfiprintf_r+0x130>
 801266e:	9105      	str	r1, [sp, #20]
 8012670:	e7c4      	b.n	80125fc <_svfiprintf_r+0x130>
 8012672:	fb0c 2101 	mla	r1, ip, r1, r2
 8012676:	4604      	mov	r4, r0
 8012678:	2301      	movs	r3, #1
 801267a:	e7f0      	b.n	801265e <_svfiprintf_r+0x192>
 801267c:	ab03      	add	r3, sp, #12
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	462a      	mov	r2, r5
 8012682:	4b0e      	ldr	r3, [pc, #56]	@ (80126bc <_svfiprintf_r+0x1f0>)
 8012684:	a904      	add	r1, sp, #16
 8012686:	4638      	mov	r0, r7
 8012688:	f7fd f9ea 	bl	800fa60 <_printf_float>
 801268c:	1c42      	adds	r2, r0, #1
 801268e:	4606      	mov	r6, r0
 8012690:	d1d6      	bne.n	8012640 <_svfiprintf_r+0x174>
 8012692:	89ab      	ldrh	r3, [r5, #12]
 8012694:	065b      	lsls	r3, r3, #25
 8012696:	f53f af2d 	bmi.w	80124f4 <_svfiprintf_r+0x28>
 801269a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801269c:	e72c      	b.n	80124f8 <_svfiprintf_r+0x2c>
 801269e:	ab03      	add	r3, sp, #12
 80126a0:	9300      	str	r3, [sp, #0]
 80126a2:	462a      	mov	r2, r5
 80126a4:	4b05      	ldr	r3, [pc, #20]	@ (80126bc <_svfiprintf_r+0x1f0>)
 80126a6:	a904      	add	r1, sp, #16
 80126a8:	4638      	mov	r0, r7
 80126aa:	f7fd fc61 	bl	800ff70 <_printf_i>
 80126ae:	e7ed      	b.n	801268c <_svfiprintf_r+0x1c0>
 80126b0:	08014704 	.word	0x08014704
 80126b4:	0801470e 	.word	0x0801470e
 80126b8:	0800fa61 	.word	0x0800fa61
 80126bc:	08012415 	.word	0x08012415
 80126c0:	0801470a 	.word	0x0801470a

080126c4 <__sfputc_r>:
 80126c4:	6893      	ldr	r3, [r2, #8]
 80126c6:	3b01      	subs	r3, #1
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	b410      	push	{r4}
 80126cc:	6093      	str	r3, [r2, #8]
 80126ce:	da08      	bge.n	80126e2 <__sfputc_r+0x1e>
 80126d0:	6994      	ldr	r4, [r2, #24]
 80126d2:	42a3      	cmp	r3, r4
 80126d4:	db01      	blt.n	80126da <__sfputc_r+0x16>
 80126d6:	290a      	cmp	r1, #10
 80126d8:	d103      	bne.n	80126e2 <__sfputc_r+0x1e>
 80126da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126de:	f000 b9df 	b.w	8012aa0 <__swbuf_r>
 80126e2:	6813      	ldr	r3, [r2, #0]
 80126e4:	1c58      	adds	r0, r3, #1
 80126e6:	6010      	str	r0, [r2, #0]
 80126e8:	7019      	strb	r1, [r3, #0]
 80126ea:	4608      	mov	r0, r1
 80126ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126f0:	4770      	bx	lr

080126f2 <__sfputs_r>:
 80126f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f4:	4606      	mov	r6, r0
 80126f6:	460f      	mov	r7, r1
 80126f8:	4614      	mov	r4, r2
 80126fa:	18d5      	adds	r5, r2, r3
 80126fc:	42ac      	cmp	r4, r5
 80126fe:	d101      	bne.n	8012704 <__sfputs_r+0x12>
 8012700:	2000      	movs	r0, #0
 8012702:	e007      	b.n	8012714 <__sfputs_r+0x22>
 8012704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012708:	463a      	mov	r2, r7
 801270a:	4630      	mov	r0, r6
 801270c:	f7ff ffda 	bl	80126c4 <__sfputc_r>
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	d1f3      	bne.n	80126fc <__sfputs_r+0xa>
 8012714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012718 <_vfiprintf_r>:
 8012718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271c:	460d      	mov	r5, r1
 801271e:	b09d      	sub	sp, #116	@ 0x74
 8012720:	4614      	mov	r4, r2
 8012722:	4698      	mov	r8, r3
 8012724:	4606      	mov	r6, r0
 8012726:	b118      	cbz	r0, 8012730 <_vfiprintf_r+0x18>
 8012728:	6a03      	ldr	r3, [r0, #32]
 801272a:	b90b      	cbnz	r3, 8012730 <_vfiprintf_r+0x18>
 801272c:	f7fd fdca 	bl	80102c4 <__sinit>
 8012730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012732:	07d9      	lsls	r1, r3, #31
 8012734:	d405      	bmi.n	8012742 <_vfiprintf_r+0x2a>
 8012736:	89ab      	ldrh	r3, [r5, #12]
 8012738:	059a      	lsls	r2, r3, #22
 801273a:	d402      	bmi.n	8012742 <_vfiprintf_r+0x2a>
 801273c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801273e:	f7fd ff6a 	bl	8010616 <__retarget_lock_acquire_recursive>
 8012742:	89ab      	ldrh	r3, [r5, #12]
 8012744:	071b      	lsls	r3, r3, #28
 8012746:	d501      	bpl.n	801274c <_vfiprintf_r+0x34>
 8012748:	692b      	ldr	r3, [r5, #16]
 801274a:	b99b      	cbnz	r3, 8012774 <_vfiprintf_r+0x5c>
 801274c:	4629      	mov	r1, r5
 801274e:	4630      	mov	r0, r6
 8012750:	f000 f9e4 	bl	8012b1c <__swsetup_r>
 8012754:	b170      	cbz	r0, 8012774 <_vfiprintf_r+0x5c>
 8012756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012758:	07dc      	lsls	r4, r3, #31
 801275a:	d504      	bpl.n	8012766 <_vfiprintf_r+0x4e>
 801275c:	f04f 30ff 	mov.w	r0, #4294967295
 8012760:	b01d      	add	sp, #116	@ 0x74
 8012762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012766:	89ab      	ldrh	r3, [r5, #12]
 8012768:	0598      	lsls	r0, r3, #22
 801276a:	d4f7      	bmi.n	801275c <_vfiprintf_r+0x44>
 801276c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801276e:	f7fd ff53 	bl	8010618 <__retarget_lock_release_recursive>
 8012772:	e7f3      	b.n	801275c <_vfiprintf_r+0x44>
 8012774:	2300      	movs	r3, #0
 8012776:	9309      	str	r3, [sp, #36]	@ 0x24
 8012778:	2320      	movs	r3, #32
 801277a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801277e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012782:	2330      	movs	r3, #48	@ 0x30
 8012784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012934 <_vfiprintf_r+0x21c>
 8012788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801278c:	f04f 0901 	mov.w	r9, #1
 8012790:	4623      	mov	r3, r4
 8012792:	469a      	mov	sl, r3
 8012794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012798:	b10a      	cbz	r2, 801279e <_vfiprintf_r+0x86>
 801279a:	2a25      	cmp	r2, #37	@ 0x25
 801279c:	d1f9      	bne.n	8012792 <_vfiprintf_r+0x7a>
 801279e:	ebba 0b04 	subs.w	fp, sl, r4
 80127a2:	d00b      	beq.n	80127bc <_vfiprintf_r+0xa4>
 80127a4:	465b      	mov	r3, fp
 80127a6:	4622      	mov	r2, r4
 80127a8:	4629      	mov	r1, r5
 80127aa:	4630      	mov	r0, r6
 80127ac:	f7ff ffa1 	bl	80126f2 <__sfputs_r>
 80127b0:	3001      	adds	r0, #1
 80127b2:	f000 80a7 	beq.w	8012904 <_vfiprintf_r+0x1ec>
 80127b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127b8:	445a      	add	r2, fp
 80127ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80127bc:	f89a 3000 	ldrb.w	r3, [sl]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f000 809f 	beq.w	8012904 <_vfiprintf_r+0x1ec>
 80127c6:	2300      	movs	r3, #0
 80127c8:	f04f 32ff 	mov.w	r2, #4294967295
 80127cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127d0:	f10a 0a01 	add.w	sl, sl, #1
 80127d4:	9304      	str	r3, [sp, #16]
 80127d6:	9307      	str	r3, [sp, #28]
 80127d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80127de:	4654      	mov	r4, sl
 80127e0:	2205      	movs	r2, #5
 80127e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127e6:	4853      	ldr	r0, [pc, #332]	@ (8012934 <_vfiprintf_r+0x21c>)
 80127e8:	f7ed fd3a 	bl	8000260 <memchr>
 80127ec:	9a04      	ldr	r2, [sp, #16]
 80127ee:	b9d8      	cbnz	r0, 8012828 <_vfiprintf_r+0x110>
 80127f0:	06d1      	lsls	r1, r2, #27
 80127f2:	bf44      	itt	mi
 80127f4:	2320      	movmi	r3, #32
 80127f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127fa:	0713      	lsls	r3, r2, #28
 80127fc:	bf44      	itt	mi
 80127fe:	232b      	movmi	r3, #43	@ 0x2b
 8012800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012804:	f89a 3000 	ldrb.w	r3, [sl]
 8012808:	2b2a      	cmp	r3, #42	@ 0x2a
 801280a:	d015      	beq.n	8012838 <_vfiprintf_r+0x120>
 801280c:	9a07      	ldr	r2, [sp, #28]
 801280e:	4654      	mov	r4, sl
 8012810:	2000      	movs	r0, #0
 8012812:	f04f 0c0a 	mov.w	ip, #10
 8012816:	4621      	mov	r1, r4
 8012818:	f811 3b01 	ldrb.w	r3, [r1], #1
 801281c:	3b30      	subs	r3, #48	@ 0x30
 801281e:	2b09      	cmp	r3, #9
 8012820:	d94b      	bls.n	80128ba <_vfiprintf_r+0x1a2>
 8012822:	b1b0      	cbz	r0, 8012852 <_vfiprintf_r+0x13a>
 8012824:	9207      	str	r2, [sp, #28]
 8012826:	e014      	b.n	8012852 <_vfiprintf_r+0x13a>
 8012828:	eba0 0308 	sub.w	r3, r0, r8
 801282c:	fa09 f303 	lsl.w	r3, r9, r3
 8012830:	4313      	orrs	r3, r2
 8012832:	9304      	str	r3, [sp, #16]
 8012834:	46a2      	mov	sl, r4
 8012836:	e7d2      	b.n	80127de <_vfiprintf_r+0xc6>
 8012838:	9b03      	ldr	r3, [sp, #12]
 801283a:	1d19      	adds	r1, r3, #4
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	9103      	str	r1, [sp, #12]
 8012840:	2b00      	cmp	r3, #0
 8012842:	bfbb      	ittet	lt
 8012844:	425b      	neglt	r3, r3
 8012846:	f042 0202 	orrlt.w	r2, r2, #2
 801284a:	9307      	strge	r3, [sp, #28]
 801284c:	9307      	strlt	r3, [sp, #28]
 801284e:	bfb8      	it	lt
 8012850:	9204      	strlt	r2, [sp, #16]
 8012852:	7823      	ldrb	r3, [r4, #0]
 8012854:	2b2e      	cmp	r3, #46	@ 0x2e
 8012856:	d10a      	bne.n	801286e <_vfiprintf_r+0x156>
 8012858:	7863      	ldrb	r3, [r4, #1]
 801285a:	2b2a      	cmp	r3, #42	@ 0x2a
 801285c:	d132      	bne.n	80128c4 <_vfiprintf_r+0x1ac>
 801285e:	9b03      	ldr	r3, [sp, #12]
 8012860:	1d1a      	adds	r2, r3, #4
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	9203      	str	r2, [sp, #12]
 8012866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801286a:	3402      	adds	r4, #2
 801286c:	9305      	str	r3, [sp, #20]
 801286e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012944 <_vfiprintf_r+0x22c>
 8012872:	7821      	ldrb	r1, [r4, #0]
 8012874:	2203      	movs	r2, #3
 8012876:	4650      	mov	r0, sl
 8012878:	f7ed fcf2 	bl	8000260 <memchr>
 801287c:	b138      	cbz	r0, 801288e <_vfiprintf_r+0x176>
 801287e:	9b04      	ldr	r3, [sp, #16]
 8012880:	eba0 000a 	sub.w	r0, r0, sl
 8012884:	2240      	movs	r2, #64	@ 0x40
 8012886:	4082      	lsls	r2, r0
 8012888:	4313      	orrs	r3, r2
 801288a:	3401      	adds	r4, #1
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012892:	4829      	ldr	r0, [pc, #164]	@ (8012938 <_vfiprintf_r+0x220>)
 8012894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012898:	2206      	movs	r2, #6
 801289a:	f7ed fce1 	bl	8000260 <memchr>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d03f      	beq.n	8012922 <_vfiprintf_r+0x20a>
 80128a2:	4b26      	ldr	r3, [pc, #152]	@ (801293c <_vfiprintf_r+0x224>)
 80128a4:	bb1b      	cbnz	r3, 80128ee <_vfiprintf_r+0x1d6>
 80128a6:	9b03      	ldr	r3, [sp, #12]
 80128a8:	3307      	adds	r3, #7
 80128aa:	f023 0307 	bic.w	r3, r3, #7
 80128ae:	3308      	adds	r3, #8
 80128b0:	9303      	str	r3, [sp, #12]
 80128b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128b4:	443b      	add	r3, r7
 80128b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80128b8:	e76a      	b.n	8012790 <_vfiprintf_r+0x78>
 80128ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80128be:	460c      	mov	r4, r1
 80128c0:	2001      	movs	r0, #1
 80128c2:	e7a8      	b.n	8012816 <_vfiprintf_r+0xfe>
 80128c4:	2300      	movs	r3, #0
 80128c6:	3401      	adds	r4, #1
 80128c8:	9305      	str	r3, [sp, #20]
 80128ca:	4619      	mov	r1, r3
 80128cc:	f04f 0c0a 	mov.w	ip, #10
 80128d0:	4620      	mov	r0, r4
 80128d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d6:	3a30      	subs	r2, #48	@ 0x30
 80128d8:	2a09      	cmp	r2, #9
 80128da:	d903      	bls.n	80128e4 <_vfiprintf_r+0x1cc>
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d0c6      	beq.n	801286e <_vfiprintf_r+0x156>
 80128e0:	9105      	str	r1, [sp, #20]
 80128e2:	e7c4      	b.n	801286e <_vfiprintf_r+0x156>
 80128e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80128e8:	4604      	mov	r4, r0
 80128ea:	2301      	movs	r3, #1
 80128ec:	e7f0      	b.n	80128d0 <_vfiprintf_r+0x1b8>
 80128ee:	ab03      	add	r3, sp, #12
 80128f0:	9300      	str	r3, [sp, #0]
 80128f2:	462a      	mov	r2, r5
 80128f4:	4b12      	ldr	r3, [pc, #72]	@ (8012940 <_vfiprintf_r+0x228>)
 80128f6:	a904      	add	r1, sp, #16
 80128f8:	4630      	mov	r0, r6
 80128fa:	f7fd f8b1 	bl	800fa60 <_printf_float>
 80128fe:	4607      	mov	r7, r0
 8012900:	1c78      	adds	r0, r7, #1
 8012902:	d1d6      	bne.n	80128b2 <_vfiprintf_r+0x19a>
 8012904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012906:	07d9      	lsls	r1, r3, #31
 8012908:	d405      	bmi.n	8012916 <_vfiprintf_r+0x1fe>
 801290a:	89ab      	ldrh	r3, [r5, #12]
 801290c:	059a      	lsls	r2, r3, #22
 801290e:	d402      	bmi.n	8012916 <_vfiprintf_r+0x1fe>
 8012910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012912:	f7fd fe81 	bl	8010618 <__retarget_lock_release_recursive>
 8012916:	89ab      	ldrh	r3, [r5, #12]
 8012918:	065b      	lsls	r3, r3, #25
 801291a:	f53f af1f 	bmi.w	801275c <_vfiprintf_r+0x44>
 801291e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012920:	e71e      	b.n	8012760 <_vfiprintf_r+0x48>
 8012922:	ab03      	add	r3, sp, #12
 8012924:	9300      	str	r3, [sp, #0]
 8012926:	462a      	mov	r2, r5
 8012928:	4b05      	ldr	r3, [pc, #20]	@ (8012940 <_vfiprintf_r+0x228>)
 801292a:	a904      	add	r1, sp, #16
 801292c:	4630      	mov	r0, r6
 801292e:	f7fd fb1f 	bl	800ff70 <_printf_i>
 8012932:	e7e4      	b.n	80128fe <_vfiprintf_r+0x1e6>
 8012934:	08014704 	.word	0x08014704
 8012938:	0801470e 	.word	0x0801470e
 801293c:	0800fa61 	.word	0x0800fa61
 8012940:	080126f3 	.word	0x080126f3
 8012944:	0801470a 	.word	0x0801470a

08012948 <__sflush_r>:
 8012948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012950:	0716      	lsls	r6, r2, #28
 8012952:	4605      	mov	r5, r0
 8012954:	460c      	mov	r4, r1
 8012956:	d454      	bmi.n	8012a02 <__sflush_r+0xba>
 8012958:	684b      	ldr	r3, [r1, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	dc02      	bgt.n	8012964 <__sflush_r+0x1c>
 801295e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012960:	2b00      	cmp	r3, #0
 8012962:	dd48      	ble.n	80129f6 <__sflush_r+0xae>
 8012964:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012966:	2e00      	cmp	r6, #0
 8012968:	d045      	beq.n	80129f6 <__sflush_r+0xae>
 801296a:	2300      	movs	r3, #0
 801296c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012970:	682f      	ldr	r7, [r5, #0]
 8012972:	6a21      	ldr	r1, [r4, #32]
 8012974:	602b      	str	r3, [r5, #0]
 8012976:	d030      	beq.n	80129da <__sflush_r+0x92>
 8012978:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801297a:	89a3      	ldrh	r3, [r4, #12]
 801297c:	0759      	lsls	r1, r3, #29
 801297e:	d505      	bpl.n	801298c <__sflush_r+0x44>
 8012980:	6863      	ldr	r3, [r4, #4]
 8012982:	1ad2      	subs	r2, r2, r3
 8012984:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012986:	b10b      	cbz	r3, 801298c <__sflush_r+0x44>
 8012988:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801298a:	1ad2      	subs	r2, r2, r3
 801298c:	2300      	movs	r3, #0
 801298e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012990:	6a21      	ldr	r1, [r4, #32]
 8012992:	4628      	mov	r0, r5
 8012994:	47b0      	blx	r6
 8012996:	1c43      	adds	r3, r0, #1
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	d106      	bne.n	80129aa <__sflush_r+0x62>
 801299c:	6829      	ldr	r1, [r5, #0]
 801299e:	291d      	cmp	r1, #29
 80129a0:	d82b      	bhi.n	80129fa <__sflush_r+0xb2>
 80129a2:	4a2a      	ldr	r2, [pc, #168]	@ (8012a4c <__sflush_r+0x104>)
 80129a4:	40ca      	lsrs	r2, r1
 80129a6:	07d6      	lsls	r6, r2, #31
 80129a8:	d527      	bpl.n	80129fa <__sflush_r+0xb2>
 80129aa:	2200      	movs	r2, #0
 80129ac:	6062      	str	r2, [r4, #4]
 80129ae:	04d9      	lsls	r1, r3, #19
 80129b0:	6922      	ldr	r2, [r4, #16]
 80129b2:	6022      	str	r2, [r4, #0]
 80129b4:	d504      	bpl.n	80129c0 <__sflush_r+0x78>
 80129b6:	1c42      	adds	r2, r0, #1
 80129b8:	d101      	bne.n	80129be <__sflush_r+0x76>
 80129ba:	682b      	ldr	r3, [r5, #0]
 80129bc:	b903      	cbnz	r3, 80129c0 <__sflush_r+0x78>
 80129be:	6560      	str	r0, [r4, #84]	@ 0x54
 80129c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129c2:	602f      	str	r7, [r5, #0]
 80129c4:	b1b9      	cbz	r1, 80129f6 <__sflush_r+0xae>
 80129c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129ca:	4299      	cmp	r1, r3
 80129cc:	d002      	beq.n	80129d4 <__sflush_r+0x8c>
 80129ce:	4628      	mov	r0, r5
 80129d0:	f7fe fc20 	bl	8011214 <_free_r>
 80129d4:	2300      	movs	r3, #0
 80129d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80129d8:	e00d      	b.n	80129f6 <__sflush_r+0xae>
 80129da:	2301      	movs	r3, #1
 80129dc:	4628      	mov	r0, r5
 80129de:	47b0      	blx	r6
 80129e0:	4602      	mov	r2, r0
 80129e2:	1c50      	adds	r0, r2, #1
 80129e4:	d1c9      	bne.n	801297a <__sflush_r+0x32>
 80129e6:	682b      	ldr	r3, [r5, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d0c6      	beq.n	801297a <__sflush_r+0x32>
 80129ec:	2b1d      	cmp	r3, #29
 80129ee:	d001      	beq.n	80129f4 <__sflush_r+0xac>
 80129f0:	2b16      	cmp	r3, #22
 80129f2:	d11e      	bne.n	8012a32 <__sflush_r+0xea>
 80129f4:	602f      	str	r7, [r5, #0]
 80129f6:	2000      	movs	r0, #0
 80129f8:	e022      	b.n	8012a40 <__sflush_r+0xf8>
 80129fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129fe:	b21b      	sxth	r3, r3
 8012a00:	e01b      	b.n	8012a3a <__sflush_r+0xf2>
 8012a02:	690f      	ldr	r7, [r1, #16]
 8012a04:	2f00      	cmp	r7, #0
 8012a06:	d0f6      	beq.n	80129f6 <__sflush_r+0xae>
 8012a08:	0793      	lsls	r3, r2, #30
 8012a0a:	680e      	ldr	r6, [r1, #0]
 8012a0c:	bf08      	it	eq
 8012a0e:	694b      	ldreq	r3, [r1, #20]
 8012a10:	600f      	str	r7, [r1, #0]
 8012a12:	bf18      	it	ne
 8012a14:	2300      	movne	r3, #0
 8012a16:	eba6 0807 	sub.w	r8, r6, r7
 8012a1a:	608b      	str	r3, [r1, #8]
 8012a1c:	f1b8 0f00 	cmp.w	r8, #0
 8012a20:	dde9      	ble.n	80129f6 <__sflush_r+0xae>
 8012a22:	6a21      	ldr	r1, [r4, #32]
 8012a24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a26:	4643      	mov	r3, r8
 8012a28:	463a      	mov	r2, r7
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	47b0      	blx	r6
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	dc08      	bgt.n	8012a44 <__sflush_r+0xfc>
 8012a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a3a:	81a3      	strh	r3, [r4, #12]
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a44:	4407      	add	r7, r0
 8012a46:	eba8 0800 	sub.w	r8, r8, r0
 8012a4a:	e7e7      	b.n	8012a1c <__sflush_r+0xd4>
 8012a4c:	20400001 	.word	0x20400001

08012a50 <_fflush_r>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	690b      	ldr	r3, [r1, #16]
 8012a54:	4605      	mov	r5, r0
 8012a56:	460c      	mov	r4, r1
 8012a58:	b913      	cbnz	r3, 8012a60 <_fflush_r+0x10>
 8012a5a:	2500      	movs	r5, #0
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	b118      	cbz	r0, 8012a6a <_fflush_r+0x1a>
 8012a62:	6a03      	ldr	r3, [r0, #32]
 8012a64:	b90b      	cbnz	r3, 8012a6a <_fflush_r+0x1a>
 8012a66:	f7fd fc2d 	bl	80102c4 <__sinit>
 8012a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d0f3      	beq.n	8012a5a <_fflush_r+0xa>
 8012a72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a74:	07d0      	lsls	r0, r2, #31
 8012a76:	d404      	bmi.n	8012a82 <_fflush_r+0x32>
 8012a78:	0599      	lsls	r1, r3, #22
 8012a7a:	d402      	bmi.n	8012a82 <_fflush_r+0x32>
 8012a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a7e:	f7fd fdca 	bl	8010616 <__retarget_lock_acquire_recursive>
 8012a82:	4628      	mov	r0, r5
 8012a84:	4621      	mov	r1, r4
 8012a86:	f7ff ff5f 	bl	8012948 <__sflush_r>
 8012a8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a8c:	07da      	lsls	r2, r3, #31
 8012a8e:	4605      	mov	r5, r0
 8012a90:	d4e4      	bmi.n	8012a5c <_fflush_r+0xc>
 8012a92:	89a3      	ldrh	r3, [r4, #12]
 8012a94:	059b      	lsls	r3, r3, #22
 8012a96:	d4e1      	bmi.n	8012a5c <_fflush_r+0xc>
 8012a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a9a:	f7fd fdbd 	bl	8010618 <__retarget_lock_release_recursive>
 8012a9e:	e7dd      	b.n	8012a5c <_fflush_r+0xc>

08012aa0 <__swbuf_r>:
 8012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aa2:	460e      	mov	r6, r1
 8012aa4:	4614      	mov	r4, r2
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	b118      	cbz	r0, 8012ab2 <__swbuf_r+0x12>
 8012aaa:	6a03      	ldr	r3, [r0, #32]
 8012aac:	b90b      	cbnz	r3, 8012ab2 <__swbuf_r+0x12>
 8012aae:	f7fd fc09 	bl	80102c4 <__sinit>
 8012ab2:	69a3      	ldr	r3, [r4, #24]
 8012ab4:	60a3      	str	r3, [r4, #8]
 8012ab6:	89a3      	ldrh	r3, [r4, #12]
 8012ab8:	071a      	lsls	r2, r3, #28
 8012aba:	d501      	bpl.n	8012ac0 <__swbuf_r+0x20>
 8012abc:	6923      	ldr	r3, [r4, #16]
 8012abe:	b943      	cbnz	r3, 8012ad2 <__swbuf_r+0x32>
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f000 f82a 	bl	8012b1c <__swsetup_r>
 8012ac8:	b118      	cbz	r0, 8012ad2 <__swbuf_r+0x32>
 8012aca:	f04f 37ff 	mov.w	r7, #4294967295
 8012ace:	4638      	mov	r0, r7
 8012ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ad2:	6823      	ldr	r3, [r4, #0]
 8012ad4:	6922      	ldr	r2, [r4, #16]
 8012ad6:	1a98      	subs	r0, r3, r2
 8012ad8:	6963      	ldr	r3, [r4, #20]
 8012ada:	b2f6      	uxtb	r6, r6
 8012adc:	4283      	cmp	r3, r0
 8012ade:	4637      	mov	r7, r6
 8012ae0:	dc05      	bgt.n	8012aee <__swbuf_r+0x4e>
 8012ae2:	4621      	mov	r1, r4
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	f7ff ffb3 	bl	8012a50 <_fflush_r>
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d1ed      	bne.n	8012aca <__swbuf_r+0x2a>
 8012aee:	68a3      	ldr	r3, [r4, #8]
 8012af0:	3b01      	subs	r3, #1
 8012af2:	60a3      	str	r3, [r4, #8]
 8012af4:	6823      	ldr	r3, [r4, #0]
 8012af6:	1c5a      	adds	r2, r3, #1
 8012af8:	6022      	str	r2, [r4, #0]
 8012afa:	701e      	strb	r6, [r3, #0]
 8012afc:	6962      	ldr	r2, [r4, #20]
 8012afe:	1c43      	adds	r3, r0, #1
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d004      	beq.n	8012b0e <__swbuf_r+0x6e>
 8012b04:	89a3      	ldrh	r3, [r4, #12]
 8012b06:	07db      	lsls	r3, r3, #31
 8012b08:	d5e1      	bpl.n	8012ace <__swbuf_r+0x2e>
 8012b0a:	2e0a      	cmp	r6, #10
 8012b0c:	d1df      	bne.n	8012ace <__swbuf_r+0x2e>
 8012b0e:	4621      	mov	r1, r4
 8012b10:	4628      	mov	r0, r5
 8012b12:	f7ff ff9d 	bl	8012a50 <_fflush_r>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d0d9      	beq.n	8012ace <__swbuf_r+0x2e>
 8012b1a:	e7d6      	b.n	8012aca <__swbuf_r+0x2a>

08012b1c <__swsetup_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4b29      	ldr	r3, [pc, #164]	@ (8012bc4 <__swsetup_r+0xa8>)
 8012b20:	4605      	mov	r5, r0
 8012b22:	6818      	ldr	r0, [r3, #0]
 8012b24:	460c      	mov	r4, r1
 8012b26:	b118      	cbz	r0, 8012b30 <__swsetup_r+0x14>
 8012b28:	6a03      	ldr	r3, [r0, #32]
 8012b2a:	b90b      	cbnz	r3, 8012b30 <__swsetup_r+0x14>
 8012b2c:	f7fd fbca 	bl	80102c4 <__sinit>
 8012b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b34:	0719      	lsls	r1, r3, #28
 8012b36:	d422      	bmi.n	8012b7e <__swsetup_r+0x62>
 8012b38:	06da      	lsls	r2, r3, #27
 8012b3a:	d407      	bmi.n	8012b4c <__swsetup_r+0x30>
 8012b3c:	2209      	movs	r2, #9
 8012b3e:	602a      	str	r2, [r5, #0]
 8012b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	e033      	b.n	8012bb4 <__swsetup_r+0x98>
 8012b4c:	0758      	lsls	r0, r3, #29
 8012b4e:	d512      	bpl.n	8012b76 <__swsetup_r+0x5a>
 8012b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b52:	b141      	cbz	r1, 8012b66 <__swsetup_r+0x4a>
 8012b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b58:	4299      	cmp	r1, r3
 8012b5a:	d002      	beq.n	8012b62 <__swsetup_r+0x46>
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	f7fe fb59 	bl	8011214 <_free_r>
 8012b62:	2300      	movs	r3, #0
 8012b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b66:	89a3      	ldrh	r3, [r4, #12]
 8012b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b6c:	81a3      	strh	r3, [r4, #12]
 8012b6e:	2300      	movs	r3, #0
 8012b70:	6063      	str	r3, [r4, #4]
 8012b72:	6923      	ldr	r3, [r4, #16]
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	89a3      	ldrh	r3, [r4, #12]
 8012b78:	f043 0308 	orr.w	r3, r3, #8
 8012b7c:	81a3      	strh	r3, [r4, #12]
 8012b7e:	6923      	ldr	r3, [r4, #16]
 8012b80:	b94b      	cbnz	r3, 8012b96 <__swsetup_r+0x7a>
 8012b82:	89a3      	ldrh	r3, [r4, #12]
 8012b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b8c:	d003      	beq.n	8012b96 <__swsetup_r+0x7a>
 8012b8e:	4621      	mov	r1, r4
 8012b90:	4628      	mov	r0, r5
 8012b92:	f000 f8c1 	bl	8012d18 <__smakebuf_r>
 8012b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b9a:	f013 0201 	ands.w	r2, r3, #1
 8012b9e:	d00a      	beq.n	8012bb6 <__swsetup_r+0x9a>
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	60a2      	str	r2, [r4, #8]
 8012ba4:	6962      	ldr	r2, [r4, #20]
 8012ba6:	4252      	negs	r2, r2
 8012ba8:	61a2      	str	r2, [r4, #24]
 8012baa:	6922      	ldr	r2, [r4, #16]
 8012bac:	b942      	cbnz	r2, 8012bc0 <__swsetup_r+0xa4>
 8012bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012bb2:	d1c5      	bne.n	8012b40 <__swsetup_r+0x24>
 8012bb4:	bd38      	pop	{r3, r4, r5, pc}
 8012bb6:	0799      	lsls	r1, r3, #30
 8012bb8:	bf58      	it	pl
 8012bba:	6962      	ldrpl	r2, [r4, #20]
 8012bbc:	60a2      	str	r2, [r4, #8]
 8012bbe:	e7f4      	b.n	8012baa <__swsetup_r+0x8e>
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	e7f7      	b.n	8012bb4 <__swsetup_r+0x98>
 8012bc4:	2000439c 	.word	0x2000439c

08012bc8 <_sbrk_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4d06      	ldr	r5, [pc, #24]	@ (8012be4 <_sbrk_r+0x1c>)
 8012bcc:	2300      	movs	r3, #0
 8012bce:	4604      	mov	r4, r0
 8012bd0:	4608      	mov	r0, r1
 8012bd2:	602b      	str	r3, [r5, #0]
 8012bd4:	f7f0 fab4 	bl	8003140 <_sbrk>
 8012bd8:	1c43      	adds	r3, r0, #1
 8012bda:	d102      	bne.n	8012be2 <_sbrk_r+0x1a>
 8012bdc:	682b      	ldr	r3, [r5, #0]
 8012bde:	b103      	cbz	r3, 8012be2 <_sbrk_r+0x1a>
 8012be0:	6023      	str	r3, [r4, #0]
 8012be2:	bd38      	pop	{r3, r4, r5, pc}
 8012be4:	2001e044 	.word	0x2001e044

08012be8 <__assert_func>:
 8012be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bea:	4614      	mov	r4, r2
 8012bec:	461a      	mov	r2, r3
 8012bee:	4b09      	ldr	r3, [pc, #36]	@ (8012c14 <__assert_func+0x2c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	68d8      	ldr	r0, [r3, #12]
 8012bf6:	b14c      	cbz	r4, 8012c0c <__assert_func+0x24>
 8012bf8:	4b07      	ldr	r3, [pc, #28]	@ (8012c18 <__assert_func+0x30>)
 8012bfa:	9100      	str	r1, [sp, #0]
 8012bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c00:	4906      	ldr	r1, [pc, #24]	@ (8012c1c <__assert_func+0x34>)
 8012c02:	462b      	mov	r3, r5
 8012c04:	f000 f850 	bl	8012ca8 <fiprintf>
 8012c08:	f000 f8e4 	bl	8012dd4 <abort>
 8012c0c:	4b04      	ldr	r3, [pc, #16]	@ (8012c20 <__assert_func+0x38>)
 8012c0e:	461c      	mov	r4, r3
 8012c10:	e7f3      	b.n	8012bfa <__assert_func+0x12>
 8012c12:	bf00      	nop
 8012c14:	2000439c 	.word	0x2000439c
 8012c18:	08014715 	.word	0x08014715
 8012c1c:	08014722 	.word	0x08014722
 8012c20:	08014750 	.word	0x08014750

08012c24 <_calloc_r>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	fba1 5402 	umull	r5, r4, r1, r2
 8012c2a:	b934      	cbnz	r4, 8012c3a <_calloc_r+0x16>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	f7fe fe9f 	bl	8011970 <_malloc_r>
 8012c32:	4606      	mov	r6, r0
 8012c34:	b928      	cbnz	r0, 8012c42 <_calloc_r+0x1e>
 8012c36:	4630      	mov	r0, r6
 8012c38:	bd70      	pop	{r4, r5, r6, pc}
 8012c3a:	220c      	movs	r2, #12
 8012c3c:	6002      	str	r2, [r0, #0]
 8012c3e:	2600      	movs	r6, #0
 8012c40:	e7f9      	b.n	8012c36 <_calloc_r+0x12>
 8012c42:	462a      	mov	r2, r5
 8012c44:	4621      	mov	r1, r4
 8012c46:	f7fd fc28 	bl	801049a <memset>
 8012c4a:	e7f4      	b.n	8012c36 <_calloc_r+0x12>

08012c4c <_realloc_r>:
 8012c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c50:	4607      	mov	r7, r0
 8012c52:	4614      	mov	r4, r2
 8012c54:	460d      	mov	r5, r1
 8012c56:	b921      	cbnz	r1, 8012c62 <_realloc_r+0x16>
 8012c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	f7fe be87 	b.w	8011970 <_malloc_r>
 8012c62:	b92a      	cbnz	r2, 8012c70 <_realloc_r+0x24>
 8012c64:	f7fe fad6 	bl	8011214 <_free_r>
 8012c68:	4625      	mov	r5, r4
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c70:	f000 f8b7 	bl	8012de2 <_malloc_usable_size_r>
 8012c74:	4284      	cmp	r4, r0
 8012c76:	4606      	mov	r6, r0
 8012c78:	d802      	bhi.n	8012c80 <_realloc_r+0x34>
 8012c7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c7e:	d8f4      	bhi.n	8012c6a <_realloc_r+0x1e>
 8012c80:	4621      	mov	r1, r4
 8012c82:	4638      	mov	r0, r7
 8012c84:	f7fe fe74 	bl	8011970 <_malloc_r>
 8012c88:	4680      	mov	r8, r0
 8012c8a:	b908      	cbnz	r0, 8012c90 <_realloc_r+0x44>
 8012c8c:	4645      	mov	r5, r8
 8012c8e:	e7ec      	b.n	8012c6a <_realloc_r+0x1e>
 8012c90:	42b4      	cmp	r4, r6
 8012c92:	4622      	mov	r2, r4
 8012c94:	4629      	mov	r1, r5
 8012c96:	bf28      	it	cs
 8012c98:	4632      	movcs	r2, r6
 8012c9a:	f7fd fcbe 	bl	801061a <memcpy>
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	4638      	mov	r0, r7
 8012ca2:	f7fe fab7 	bl	8011214 <_free_r>
 8012ca6:	e7f1      	b.n	8012c8c <_realloc_r+0x40>

08012ca8 <fiprintf>:
 8012ca8:	b40e      	push	{r1, r2, r3}
 8012caa:	b503      	push	{r0, r1, lr}
 8012cac:	4601      	mov	r1, r0
 8012cae:	ab03      	add	r3, sp, #12
 8012cb0:	4805      	ldr	r0, [pc, #20]	@ (8012cc8 <fiprintf+0x20>)
 8012cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cb6:	6800      	ldr	r0, [r0, #0]
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	f7ff fd2d 	bl	8012718 <_vfiprintf_r>
 8012cbe:	b002      	add	sp, #8
 8012cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cc4:	b003      	add	sp, #12
 8012cc6:	4770      	bx	lr
 8012cc8:	2000439c 	.word	0x2000439c

08012ccc <__swhatbuf_r>:
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	460c      	mov	r4, r1
 8012cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cd4:	2900      	cmp	r1, #0
 8012cd6:	b096      	sub	sp, #88	@ 0x58
 8012cd8:	4615      	mov	r5, r2
 8012cda:	461e      	mov	r6, r3
 8012cdc:	da0d      	bge.n	8012cfa <__swhatbuf_r+0x2e>
 8012cde:	89a3      	ldrh	r3, [r4, #12]
 8012ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ce4:	f04f 0100 	mov.w	r1, #0
 8012ce8:	bf14      	ite	ne
 8012cea:	2340      	movne	r3, #64	@ 0x40
 8012cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	6031      	str	r1, [r6, #0]
 8012cf4:	602b      	str	r3, [r5, #0]
 8012cf6:	b016      	add	sp, #88	@ 0x58
 8012cf8:	bd70      	pop	{r4, r5, r6, pc}
 8012cfa:	466a      	mov	r2, sp
 8012cfc:	f000 f848 	bl	8012d90 <_fstat_r>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	dbec      	blt.n	8012cde <__swhatbuf_r+0x12>
 8012d04:	9901      	ldr	r1, [sp, #4]
 8012d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d0e:	4259      	negs	r1, r3
 8012d10:	4159      	adcs	r1, r3
 8012d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d16:	e7eb      	b.n	8012cf0 <__swhatbuf_r+0x24>

08012d18 <__smakebuf_r>:
 8012d18:	898b      	ldrh	r3, [r1, #12]
 8012d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d1c:	079d      	lsls	r5, r3, #30
 8012d1e:	4606      	mov	r6, r0
 8012d20:	460c      	mov	r4, r1
 8012d22:	d507      	bpl.n	8012d34 <__smakebuf_r+0x1c>
 8012d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	6123      	str	r3, [r4, #16]
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	6163      	str	r3, [r4, #20]
 8012d30:	b003      	add	sp, #12
 8012d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d34:	ab01      	add	r3, sp, #4
 8012d36:	466a      	mov	r2, sp
 8012d38:	f7ff ffc8 	bl	8012ccc <__swhatbuf_r>
 8012d3c:	9f00      	ldr	r7, [sp, #0]
 8012d3e:	4605      	mov	r5, r0
 8012d40:	4639      	mov	r1, r7
 8012d42:	4630      	mov	r0, r6
 8012d44:	f7fe fe14 	bl	8011970 <_malloc_r>
 8012d48:	b948      	cbnz	r0, 8012d5e <__smakebuf_r+0x46>
 8012d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d4e:	059a      	lsls	r2, r3, #22
 8012d50:	d4ee      	bmi.n	8012d30 <__smakebuf_r+0x18>
 8012d52:	f023 0303 	bic.w	r3, r3, #3
 8012d56:	f043 0302 	orr.w	r3, r3, #2
 8012d5a:	81a3      	strh	r3, [r4, #12]
 8012d5c:	e7e2      	b.n	8012d24 <__smakebuf_r+0xc>
 8012d5e:	89a3      	ldrh	r3, [r4, #12]
 8012d60:	6020      	str	r0, [r4, #0]
 8012d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d66:	81a3      	strh	r3, [r4, #12]
 8012d68:	9b01      	ldr	r3, [sp, #4]
 8012d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d6e:	b15b      	cbz	r3, 8012d88 <__smakebuf_r+0x70>
 8012d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d74:	4630      	mov	r0, r6
 8012d76:	f000 f81d 	bl	8012db4 <_isatty_r>
 8012d7a:	b128      	cbz	r0, 8012d88 <__smakebuf_r+0x70>
 8012d7c:	89a3      	ldrh	r3, [r4, #12]
 8012d7e:	f023 0303 	bic.w	r3, r3, #3
 8012d82:	f043 0301 	orr.w	r3, r3, #1
 8012d86:	81a3      	strh	r3, [r4, #12]
 8012d88:	89a3      	ldrh	r3, [r4, #12]
 8012d8a:	431d      	orrs	r5, r3
 8012d8c:	81a5      	strh	r5, [r4, #12]
 8012d8e:	e7cf      	b.n	8012d30 <__smakebuf_r+0x18>

08012d90 <_fstat_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d07      	ldr	r5, [pc, #28]	@ (8012db0 <_fstat_r+0x20>)
 8012d94:	2300      	movs	r3, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	4608      	mov	r0, r1
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	602b      	str	r3, [r5, #0]
 8012d9e:	f7f0 f9a7 	bl	80030f0 <_fstat>
 8012da2:	1c43      	adds	r3, r0, #1
 8012da4:	d102      	bne.n	8012dac <_fstat_r+0x1c>
 8012da6:	682b      	ldr	r3, [r5, #0]
 8012da8:	b103      	cbz	r3, 8012dac <_fstat_r+0x1c>
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	bd38      	pop	{r3, r4, r5, pc}
 8012dae:	bf00      	nop
 8012db0:	2001e044 	.word	0x2001e044

08012db4 <_isatty_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d06      	ldr	r5, [pc, #24]	@ (8012dd0 <_isatty_r+0x1c>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	602b      	str	r3, [r5, #0]
 8012dc0:	f7f0 f9a6 	bl	8003110 <_isatty>
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	d102      	bne.n	8012dce <_isatty_r+0x1a>
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	b103      	cbz	r3, 8012dce <_isatty_r+0x1a>
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	2001e044 	.word	0x2001e044

08012dd4 <abort>:
 8012dd4:	b508      	push	{r3, lr}
 8012dd6:	2006      	movs	r0, #6
 8012dd8:	f000 f834 	bl	8012e44 <raise>
 8012ddc:	2001      	movs	r0, #1
 8012dde:	f7f0 f937 	bl	8003050 <_exit>

08012de2 <_malloc_usable_size_r>:
 8012de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012de6:	1f18      	subs	r0, r3, #4
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	bfbc      	itt	lt
 8012dec:	580b      	ldrlt	r3, [r1, r0]
 8012dee:	18c0      	addlt	r0, r0, r3
 8012df0:	4770      	bx	lr

08012df2 <_raise_r>:
 8012df2:	291f      	cmp	r1, #31
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	4605      	mov	r5, r0
 8012df8:	460c      	mov	r4, r1
 8012dfa:	d904      	bls.n	8012e06 <_raise_r+0x14>
 8012dfc:	2316      	movs	r3, #22
 8012dfe:	6003      	str	r3, [r0, #0]
 8012e00:	f04f 30ff 	mov.w	r0, #4294967295
 8012e04:	bd38      	pop	{r3, r4, r5, pc}
 8012e06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012e08:	b112      	cbz	r2, 8012e10 <_raise_r+0x1e>
 8012e0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e0e:	b94b      	cbnz	r3, 8012e24 <_raise_r+0x32>
 8012e10:	4628      	mov	r0, r5
 8012e12:	f000 f831 	bl	8012e78 <_getpid_r>
 8012e16:	4622      	mov	r2, r4
 8012e18:	4601      	mov	r1, r0
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e20:	f000 b818 	b.w	8012e54 <_kill_r>
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d00a      	beq.n	8012e3e <_raise_r+0x4c>
 8012e28:	1c59      	adds	r1, r3, #1
 8012e2a:	d103      	bne.n	8012e34 <_raise_r+0x42>
 8012e2c:	2316      	movs	r3, #22
 8012e2e:	6003      	str	r3, [r0, #0]
 8012e30:	2001      	movs	r0, #1
 8012e32:	e7e7      	b.n	8012e04 <_raise_r+0x12>
 8012e34:	2100      	movs	r1, #0
 8012e36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	4798      	blx	r3
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e7e0      	b.n	8012e04 <_raise_r+0x12>
	...

08012e44 <raise>:
 8012e44:	4b02      	ldr	r3, [pc, #8]	@ (8012e50 <raise+0xc>)
 8012e46:	4601      	mov	r1, r0
 8012e48:	6818      	ldr	r0, [r3, #0]
 8012e4a:	f7ff bfd2 	b.w	8012df2 <_raise_r>
 8012e4e:	bf00      	nop
 8012e50:	2000439c 	.word	0x2000439c

08012e54 <_kill_r>:
 8012e54:	b538      	push	{r3, r4, r5, lr}
 8012e56:	4d07      	ldr	r5, [pc, #28]	@ (8012e74 <_kill_r+0x20>)
 8012e58:	2300      	movs	r3, #0
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	4608      	mov	r0, r1
 8012e5e:	4611      	mov	r1, r2
 8012e60:	602b      	str	r3, [r5, #0]
 8012e62:	f7f0 f8e5 	bl	8003030 <_kill>
 8012e66:	1c43      	adds	r3, r0, #1
 8012e68:	d102      	bne.n	8012e70 <_kill_r+0x1c>
 8012e6a:	682b      	ldr	r3, [r5, #0]
 8012e6c:	b103      	cbz	r3, 8012e70 <_kill_r+0x1c>
 8012e6e:	6023      	str	r3, [r4, #0]
 8012e70:	bd38      	pop	{r3, r4, r5, pc}
 8012e72:	bf00      	nop
 8012e74:	2001e044 	.word	0x2001e044

08012e78 <_getpid_r>:
 8012e78:	f7f0 b8d2 	b.w	8003020 <_getpid>

08012e7c <_init>:
 8012e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7e:	bf00      	nop
 8012e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e82:	bc08      	pop	{r3}
 8012e84:	469e      	mov	lr, r3
 8012e86:	4770      	bx	lr

08012e88 <_fini>:
 8012e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e8a:	bf00      	nop
 8012e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e8e:	bc08      	pop	{r3}
 8012e90:	469e      	mov	lr, r3
 8012e92:	4770      	bx	lr
